"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jointjs";
exports.ids = ["vendor-chunks/jointjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/jointjs/src/V/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/jointjs/src/V/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/ellipse.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/index.mjs\");\n// Vectorizer.\n// -----------\n// A tiny library for making your life easier when dealing with SVG.\n// The only Vectorizer dependency is the Geometry library.\n\nconst V = function() {\n    var hasSvg =  false && 0;\n    // SVG support is required.\n    if (!hasSvg) {\n        // Return a function that throws an error when it is used.\n        return function() {\n            throw new Error(\"SVG is required to use Vectorizer.\");\n        };\n    }\n    // XML namespaces.\n    var ns = {\n        svg: \"http://www.w3.org/2000/svg\",\n        xmlns: \"http://www.w3.org/2000/xmlns/\",\n        xml: \"http://www.w3.org/XML/1998/namespace\",\n        xlink: \"http://www.w3.org/1999/xlink\",\n        xhtml: \"http://www.w3.org/1999/xhtml\"\n    };\n    var SVGVersion = \"1.1\";\n    // Declare shorthands to the most used math functions.\n    var math = Math;\n    var PI = math.PI;\n    var atan2 = math.atan2;\n    var sqrt = math.sqrt;\n    var min = math.min;\n    var max = math.max;\n    var cos = math.cos;\n    var sin = math.sin;\n    var V = function(el, attrs, children) {\n        // This allows using V() without the new keyword.\n        if (!(this instanceof V)) {\n            return V.apply(Object.create(V.prototype), arguments);\n        }\n        if (!el) return;\n        if (V.isV(el)) {\n            el = el.node;\n        }\n        attrs = attrs || {};\n        if (V.isString(el)) {\n            el = el.trim();\n            if (el.toLowerCase() === \"svg\") {\n                // Create a new SVG canvas.\n                el = V.createSvgDocument();\n            } else if (el[0] === \"<\") {\n                // Create element from an SVG string.\n                // Allows constructs of type: `document.appendChild(V('<rect></rect>').node)`.\n                var svgDoc = V.createSvgDocument(el);\n                // Note that `V()` might also return an array should the SVG string passed as\n                // the first argument contain more than one root element.\n                if (svgDoc.childNodes.length > 1) {\n                    // Map child nodes to `V`s.\n                    var arrayOfVels = [];\n                    var i, len;\n                    for(i = 0, len = svgDoc.childNodes.length; i < len; i++){\n                        var childNode = svgDoc.childNodes[i];\n                        arrayOfVels.push(new V(document.importNode(childNode, true)));\n                    }\n                    return arrayOfVels;\n                }\n                el = document.importNode(svgDoc.firstChild, true);\n            } else {\n                el = document.createElementNS(ns.svg, el);\n            }\n            V.ensureId(el);\n        }\n        this.node = el;\n        this.setAttributes(attrs);\n        if (children) {\n            this.append(children);\n        }\n        return this;\n    };\n    var VPrototype = V.prototype;\n    Object.defineProperty(VPrototype, \"id\", {\n        enumerable: true,\n        get: function() {\n            return this.node.id;\n        },\n        set: function(id) {\n            this.node.id = id;\n        }\n    });\n    /**\n     * @param {SVGGElement} toElem\n     * @returns {SVGMatrix}\n     */ VPrototype.getTransformToElement = function(target) {\n        var node = this.node;\n        if (V.isSVGGraphicsElement(target) && V.isSVGGraphicsElement(node)) {\n            var targetCTM = V.toNode(target).getScreenCTM();\n            var nodeCTM = node.getScreenCTM();\n            if (targetCTM && nodeCTM) {\n                return targetCTM.inverse().multiply(nodeCTM);\n            }\n        }\n        // Could not get actual transformation matrix\n        return V.createSVGMatrix();\n    };\n    /**\n     * @param {SVGMatrix} matrix\n     * @param {Object=} opt\n     * @returns {Vectorizer|SVGMatrix} Setter / Getter\n     */ VPrototype.transform = function(matrix, opt) {\n        var node = this.node;\n        if (V.isUndefined(matrix)) {\n            return V.transformStringToMatrix(this.attr(\"transform\"));\n        }\n        if (opt && opt.absolute) {\n            return this.attr(\"transform\", V.matrixToTransformString(matrix));\n        }\n        var svgTransform = V.createSVGTransform(matrix);\n        node.transform.baseVal.appendItem(svgTransform);\n        return this;\n    };\n    VPrototype.translate = function(tx, ty, opt) {\n        opt = opt || {};\n        ty = ty || 0;\n        var transformAttr = this.attr(\"transform\") || \"\";\n        var transform = V.parseTransformString(transformAttr);\n        transformAttr = transform.value;\n        // Is it a getter?\n        if (V.isUndefined(tx)) {\n            return transform.translate;\n        }\n        transformAttr = transformAttr.replace(/translate\\([^)]*\\)/g, \"\").trim();\n        var newTx = opt.absolute ? tx : transform.translate.tx + tx;\n        var newTy = opt.absolute ? ty : transform.translate.ty + ty;\n        var newTranslate = \"translate(\" + newTx + \",\" + newTy + \")\";\n        // Note that `translate()` is always the first transformation. This is\n        // usually the desired case.\n        this.attr(\"transform\", (newTranslate + \" \" + transformAttr).trim());\n        return this;\n    };\n    VPrototype.rotate = function(angle, cx, cy, opt) {\n        opt = opt || {};\n        var transformAttr = this.attr(\"transform\") || \"\";\n        var transform = V.parseTransformString(transformAttr);\n        transformAttr = transform.value;\n        // Is it a getter?\n        if (V.isUndefined(angle)) {\n            return transform.rotate;\n        }\n        transformAttr = transformAttr.replace(/rotate\\([^)]*\\)/g, \"\").trim();\n        angle %= 360;\n        var newAngle = opt.absolute ? angle : transform.rotate.angle + angle;\n        var newOrigin = cx !== undefined && cy !== undefined ? \",\" + cx + \",\" + cy : \"\";\n        var newRotate = \"rotate(\" + newAngle + newOrigin + \")\";\n        this.attr(\"transform\", (transformAttr + \" \" + newRotate).trim());\n        return this;\n    };\n    // Note that `scale` as the only transformation does not combine with previous values.\n    VPrototype.scale = function(sx, sy) {\n        sy = V.isUndefined(sy) ? sx : sy;\n        var transformAttr = this.attr(\"transform\") || \"\";\n        var transform = V.parseTransformString(transformAttr);\n        transformAttr = transform.value;\n        // Is it a getter?\n        if (V.isUndefined(sx)) {\n            return transform.scale;\n        }\n        transformAttr = transformAttr.replace(/scale\\([^)]*\\)/g, \"\").trim();\n        var newScale = \"scale(\" + sx + \",\" + sy + \")\";\n        this.attr(\"transform\", (transformAttr + \" \" + newScale).trim());\n        return this;\n    };\n    // Get SVGRect that contains coordinates and dimension of the real bounding box,\n    // i.e. after transformations are applied.\n    // If `target` is specified, bounding box will be computed relatively to `target` element.\n    VPrototype.bbox = function(withoutTransformations, target) {\n        var box;\n        var node = this.node;\n        var ownerSVGElement = node.ownerSVGElement;\n        // If the element is not in the live DOM, it does not have a bounding box defined and\n        // so fall back to 'zero' dimension element.\n        if (!ownerSVGElement) {\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(0, 0, 0, 0);\n        }\n        try {\n            box = node.getBBox();\n        } catch (e) {\n            // Fallback for IE.\n            box = {\n                x: node.clientLeft,\n                y: node.clientTop,\n                width: node.clientWidth,\n                height: node.clientHeight\n            };\n        }\n        if (withoutTransformations) {\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(box);\n        }\n        var matrix = this.getTransformToElement(target || ownerSVGElement);\n        return V.transformRect(box, matrix);\n    };\n    // Returns an SVGRect that contains coordinates and dimensions of the real bounding box,\n    // i.e. after transformations are applied.\n    // Fixes a browser implementation bug that returns incorrect bounding boxes for groups of svg elements.\n    // Takes an (Object) `opt` argument (optional) with the following attributes:\n    // (Object) `target` (optional): if not undefined, transform bounding boxes relative to `target`; if undefined, transform relative to this\n    // (Boolean) `recursive` (optional): if true, recursively enter all groups and get a union of element bounding boxes (svg bbox fix); if false or undefined, return result of native function this.node.getBBox();\n    VPrototype.getBBox = function(opt) {\n        var options = {};\n        var outputBBox;\n        var node = this.node;\n        var ownerSVGElement = node.ownerSVGElement;\n        // If the element is not in the live DOM, it does not have a bounding box defined and\n        // so fall back to 'zero' dimension element.\n        // If the element is not an SVGGraphicsElement, we could not measure the bounding box either\n        if (!ownerSVGElement || !V.isSVGGraphicsElement(node)) {\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(0, 0, 0, 0);\n        }\n        if (opt) {\n            if (opt.target) {\n                options.target = V.toNode(opt.target); // works for V objects, jquery objects, and node objects\n            }\n            if (opt.recursive) {\n                options.recursive = opt.recursive;\n            }\n        }\n        if (!options.recursive) {\n            try {\n                outputBBox = node.getBBox();\n            } catch (e) {\n                // Fallback for IE.\n                outputBBox = {\n                    x: node.clientLeft,\n                    y: node.clientTop,\n                    width: node.clientWidth,\n                    height: node.clientHeight\n                };\n            }\n            if (!options.target) {\n                // transform like this (that is, not at all)\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(outputBBox);\n            } else {\n                // transform like target\n                var matrix = this.getTransformToElement(options.target);\n                return V.transformRect(outputBBox, matrix);\n            }\n        } else {\n            // browsers report correct bbox around svg elements (one that envelops the path lines tightly)\n            // but some browsers fail to report the same bbox when the elements are in a group (returning a looser bbox that also includes control points, like node.getClientRect())\n            // this happens even if we wrap a single svg element into a group!\n            // this option setting makes the function recursively enter all the groups from this and deeper, get bboxes of the elements inside, then return a union of those bboxes\n            var children = this.children();\n            var n = children.length;\n            if (n === 0) {\n                return this.getBBox({\n                    target: options.target,\n                    recursive: false\n                });\n            }\n            // recursion's initial pass-through setting:\n            // recursive passes-through just keep the target as whatever was set up here during the initial pass-through\n            if (!options.target) {\n                // transform children/descendants like this (their parent/ancestor)\n                options.target = this;\n            } // else transform children/descendants like target\n            for(var i = 0; i < n; i++){\n                var currentChild = children[i];\n                var childBBox;\n                // if currentChild is not a group element, get its bbox with a nonrecursive call\n                if (currentChild.children().length === 0) {\n                    childBBox = currentChild.getBBox({\n                        target: options.target,\n                        recursive: false\n                    });\n                } else {\n                    // if currentChild is a group element (determined by checking the number of children), enter it with a recursive call\n                    childBBox = currentChild.getBBox({\n                        target: options.target,\n                        recursive: true\n                    });\n                }\n                if (!outputBBox) {\n                    // if this is the first iteration\n                    outputBBox = childBBox;\n                } else {\n                    // make a new bounding box rectangle that contains this child's bounding box and previous bounding box\n                    outputBBox = outputBBox.union(childBBox);\n                }\n            }\n            return outputBBox;\n        }\n    };\n    // Text() helpers\n    function createTextPathNode(attrs, vel) {\n        attrs || (attrs = {});\n        var textPathElement = V(\"textPath\");\n        var d = attrs.d;\n        if (d && attrs[\"xlink:href\"] === undefined) {\n            // If `opt.attrs` is a plain string, consider it to be directly the\n            // SVG path data for the text to go along (this is a shortcut).\n            // Otherwise if it is an object and contains the `d` property, then this is our path.\n            // Wrap the text in the SVG <textPath> element that points\n            // to a path defined by `opt.attrs` inside the `<defs>` element.\n            var linkedPath = V(\"path\").attr(\"d\", d).appendTo(vel.defs());\n            textPathElement.attr(\"xlink:href\", \"#\" + linkedPath.id);\n        }\n        if (V.isObject(attrs)) {\n            // Set attributes on the `<textPath>`. The most important one\n            // is the `xlink:href` that points to our newly created `<path/>` element in `<defs/>`.\n            // Note that we also allow the following construct:\n            // `t.text('my text', { textPath: { 'xlink:href': '#my-other-path' } })`.\n            // In other words, one can completely skip the auto-creation of the path\n            // and use any other arbitrary path that is in the document.\n            textPathElement.attr(attrs);\n        }\n        return textPathElement.node;\n    }\n    function annotateTextLine(lineNode, lineAnnotations, opt) {\n        opt || (opt = {});\n        var includeAnnotationIndices = opt.includeAnnotationIndices;\n        var eol = opt.eol;\n        var lineHeight = opt.lineHeight;\n        var baseSize = opt.baseSize;\n        var maxFontSize = 0;\n        var fontMetrics = {};\n        var lastJ = lineAnnotations.length - 1;\n        for(var j = 0; j <= lastJ; j++){\n            var annotation = lineAnnotations[j];\n            var fontSize = null;\n            if (V.isObject(annotation)) {\n                var annotationAttrs = annotation.attrs;\n                var vTSpan = V(\"tspan\", annotationAttrs);\n                var tspanNode = vTSpan.node;\n                var t = annotation.t;\n                if (eol && j === lastJ) t += eol;\n                tspanNode.textContent = t;\n                // Per annotation className\n                var annotationClass = annotationAttrs[\"class\"];\n                if (annotationClass) vTSpan.addClass(annotationClass);\n                // If `opt.includeAnnotationIndices` is `true`,\n                // set the list of indices of all the applied annotations\n                // in the `annotations` attribute. This list is a comma\n                // separated list of indices.\n                if (includeAnnotationIndices) vTSpan.attr(\"annotations\", annotation.annotations);\n                // Check for max font size\n                fontSize = parseFloat(annotationAttrs[\"font-size\"]);\n                if (!isFinite(fontSize)) fontSize = baseSize;\n                if (fontSize && fontSize > maxFontSize) maxFontSize = fontSize;\n            } else {\n                if (eol && j === lastJ) annotation += eol;\n                tspanNode = document.createTextNode(annotation || \" \");\n                if (baseSize && baseSize > maxFontSize) maxFontSize = baseSize;\n            }\n            lineNode.appendChild(tspanNode);\n        }\n        if (maxFontSize) fontMetrics.maxFontSize = maxFontSize;\n        if (lineHeight) {\n            fontMetrics.lineHeight = lineHeight;\n        } else if (maxFontSize) {\n            fontMetrics.lineHeight = maxFontSize * 1.2;\n        }\n        return fontMetrics;\n    }\n    var emRegex = /em$/;\n    function convertEmToPx(em, fontSize) {\n        var numerical = parseFloat(em);\n        if (emRegex.test(em)) return numerical * fontSize;\n        return numerical;\n    }\n    function calculateDY(alignment, linesMetrics, baseSizePx, lineHeight) {\n        if (!Array.isArray(linesMetrics)) return 0;\n        var n = linesMetrics.length;\n        if (!n) return 0;\n        var lineMetrics = linesMetrics[0];\n        var flMaxFont = convertEmToPx(lineMetrics.maxFontSize, baseSizePx) || baseSizePx;\n        var rLineHeights = 0;\n        var lineHeightPx = convertEmToPx(lineHeight, baseSizePx);\n        for(var i = 1; i < n; i++){\n            lineMetrics = linesMetrics[i];\n            var iLineHeight = convertEmToPx(lineMetrics.lineHeight, baseSizePx) || lineHeightPx;\n            rLineHeights += iLineHeight;\n        }\n        var llMaxFont = convertEmToPx(lineMetrics.maxFontSize, baseSizePx) || baseSizePx;\n        var dy;\n        switch(alignment){\n            case \"middle\":\n                dy = flMaxFont / 2 - 0.15 * llMaxFont - rLineHeights / 2;\n                break;\n            case \"bottom\":\n                dy = -(0.25 * llMaxFont) - rLineHeights;\n                break;\n            default:\n            case \"top\":\n                dy = 0.8 * flMaxFont;\n                break;\n        }\n        return dy;\n    }\n    VPrototype.text = function(content, opt) {\n        if (content && typeof content !== \"string\") throw new Error(\"Vectorizer: text() expects the first argument to be a string.\");\n        // Replace all spaces with the Unicode No-break space (http://www.fileformat.info/info/unicode/char/a0/index.htm).\n        // IE would otherwise collapse all spaces into one.\n        content = V.sanitizeText(content);\n        opt || (opt = {});\n        // Should we allow the text to be selected?\n        var displayEmpty = opt.displayEmpty;\n        // End of Line character\n        var eol = opt.eol;\n        // Text along path\n        var textPath = opt.textPath;\n        // Vertical shift\n        var verticalAnchor = opt.textVerticalAnchor;\n        var namedVerticalAnchor = verticalAnchor === \"middle\" || verticalAnchor === \"bottom\" || verticalAnchor === \"top\";\n        // Horizontal shift applied to all the lines but the first.\n        var x = opt.x;\n        if (x === undefined) x = this.attr(\"x\") || 0;\n        // Annotations\n        var iai = opt.includeAnnotationIndices;\n        var annotations = opt.annotations;\n        if (annotations && !V.isArray(annotations)) annotations = [\n            annotations\n        ];\n        // Shift all the <tspan> but first by one line (`1em`)\n        var defaultLineHeight = opt.lineHeight;\n        var autoLineHeight = defaultLineHeight === \"auto\";\n        var lineHeight = autoLineHeight ? \"1.5em\" : defaultLineHeight || \"1em\";\n        // Clearing the element\n        this.empty();\n        this.attr({\n            // Preserve spaces. In other words, we do not want consecutive spaces to get collapsed to one.\n            \"xml:space\": \"preserve\",\n            // An empty text gets rendered into the DOM in webkit-based browsers.\n            // In order to unify this behaviour across all browsers\n            // we rather hide the text element when it's empty.\n            \"display\": content || displayEmpty ? null : \"none\"\n        });\n        // Set default font-size if none\n        var fontSize = parseFloat(this.attr(\"font-size\"));\n        if (!fontSize) {\n            fontSize = 16;\n            if (namedVerticalAnchor || annotations) this.attr(\"font-size\", fontSize);\n        }\n        var doc = document;\n        var containerNode;\n        if (textPath) {\n            // Now all the `<tspan>`s will be inside the `<textPath>`.\n            if (typeof textPath === \"string\") textPath = {\n                d: textPath\n            };\n            containerNode = createTextPathNode(textPath, this);\n        } else {\n            containerNode = doc.createDocumentFragment();\n        }\n        var offset = 0;\n        var lines = content.split(\"\\n\");\n        var linesMetrics = [];\n        var annotatedY;\n        for(var i = 0, lastI = lines.length - 1; i <= lastI; i++){\n            var dy = lineHeight;\n            var lineClassName = \"v-line\";\n            var lineNode = doc.createElementNS(ns.svg, \"tspan\");\n            var line = lines[i];\n            var lineMetrics;\n            if (line) {\n                if (annotations) {\n                    // Find the *compacted* annotations for this line.\n                    var lineAnnotations = V.annotateString(line, annotations, {\n                        offset: -offset,\n                        includeAnnotationIndices: iai\n                    });\n                    lineMetrics = annotateTextLine(lineNode, lineAnnotations, {\n                        includeAnnotationIndices: iai,\n                        eol: i !== lastI && eol,\n                        lineHeight: autoLineHeight ? null : lineHeight,\n                        baseSize: fontSize\n                    });\n                    // Get the line height based on the biggest font size in the annotations for this line.\n                    var iLineHeight = lineMetrics.lineHeight;\n                    if (iLineHeight && autoLineHeight && i !== 0) dy = iLineHeight;\n                    if (i === 0) annotatedY = lineMetrics.maxFontSize * 0.8;\n                } else {\n                    if (eol && i !== lastI) line += eol;\n                    lineNode.textContent = line;\n                }\n            } else {\n                // Make sure the textContent is never empty. If it is, add a dummy\n                // character and make it invisible, making the following lines correctly\n                // relatively positioned. `dy=1em` won't work with empty lines otherwise.\n                lineNode.textContent = \"-\";\n                lineClassName += \" v-empty-line\";\n                // 'opacity' needs to be specified with fill, stroke. Opacity without specification\n                // is not applied in Firefox\n                var lineNodeStyle = lineNode.style;\n                lineNodeStyle.fillOpacity = 0;\n                lineNodeStyle.strokeOpacity = 0;\n                if (annotations) {\n                    // Empty line with annotations.\n                    lineMetrics = {};\n                    lineAnnotations = V.findAnnotationsAtIndex(annotations, offset);\n                    let lineFontSize = fontSize;\n                    // Check if any of the annotations overrides the font size.\n                    for(let j = lineAnnotations.length; j > 0; j--){\n                        const attrs = lineAnnotations[j - 1].attrs;\n                        if (!attrs || !(\"font-size\" in attrs)) continue;\n                        const fs = parseFloat(attrs[\"font-size\"]);\n                        if (isFinite(fs)) {\n                            lineFontSize = fs;\n                            break;\n                        }\n                    }\n                    if (autoLineHeight) {\n                        if (i > 0) {\n                            dy = lineFontSize * 1.2;\n                        } else {\n                            annotatedY = lineFontSize * 0.8;\n                        }\n                    }\n                    // The font size is important for the native selection box height.\n                    lineNode.setAttribute(\"font-size\", lineFontSize);\n                    lineMetrics.maxFontSize = lineFontSize;\n                }\n            }\n            if (lineMetrics) linesMetrics.push(lineMetrics);\n            if (i > 0) lineNode.setAttribute(\"dy\", dy);\n            // Firefox requires 'x' to be set on the first line when inside a text path\n            if (i > 0 || textPath) lineNode.setAttribute(\"x\", x);\n            lineNode.className.baseVal = lineClassName;\n            containerNode.appendChild(lineNode);\n            offset += line.length + 1; // + 1 = newline character.\n        }\n        // Y Alignment calculation\n        if (namedVerticalAnchor) {\n            if (annotations) {\n                dy = calculateDY(verticalAnchor, linesMetrics, fontSize, lineHeight);\n            } else if (verticalAnchor === \"top\") {\n                // A shortcut for top alignment. It does not depend on font-size nor line-height\n                dy = \"0.8em\";\n            } else {\n                var rh; // remaining height\n                if (lastI > 0) {\n                    rh = parseFloat(lineHeight) || 1;\n                    rh *= lastI;\n                    if (!emRegex.test(lineHeight)) rh /= fontSize;\n                } else {\n                    // Single-line text\n                    rh = 0;\n                }\n                switch(verticalAnchor){\n                    case \"middle\":\n                        dy = 0.3 - rh / 2 + \"em\";\n                        break;\n                    case \"bottom\":\n                        dy = -rh - 0.3 + \"em\";\n                        break;\n                }\n            }\n        } else {\n            if (verticalAnchor === 0) {\n                dy = \"0em\";\n            } else if (verticalAnchor) {\n                dy = verticalAnchor;\n            } else {\n                // No vertical anchor is defined\n                dy = 0;\n                // Backwards compatibility - we change the `y` attribute instead of `dy`.\n                if (this.attr(\"y\") === null) this.attr(\"y\", annotatedY || \"0.8em\");\n            }\n        }\n        containerNode.firstChild.setAttribute(\"dy\", dy);\n        // Appending lines to the element.\n        this.append(containerNode);\n        return this;\n    };\n    /**\n     * @public\n     * @param {string} name\n     * @returns {Vectorizer}\n     */ VPrototype.removeAttr = function(name) {\n        const trueName = attributeNames[name];\n        const { ns, local } = V.qualifyAttr(trueName);\n        const el = this.node;\n        if (ns) {\n            if (el.hasAttributeNS(ns, local)) {\n                el.removeAttributeNS(ns, local);\n            }\n        } else if (el.hasAttribute(trueName)) {\n            el.removeAttribute(trueName);\n        }\n        return this;\n    };\n    VPrototype.attr = function(name, value) {\n        if (V.isUndefined(name)) {\n            // Return all attributes.\n            var attributes = this.node.attributes;\n            var attrs = {};\n            for(var i = 0; i < attributes.length; i++){\n                attrs[attributes[i].name] = attributes[i].value;\n            }\n            return attrs;\n        }\n        if (V.isString(name) && V.isUndefined(value)) {\n            return this.node.getAttribute(attributeNames[name]);\n        }\n        if (typeof name === \"object\") {\n            for(var attrName in name){\n                if (name.hasOwnProperty(attrName)) {\n                    this.setAttribute(attrName, name[attrName]);\n                }\n            }\n        } else {\n            this.setAttribute(name, value);\n        }\n        return this;\n    };\n    VPrototype.normalizePath = function() {\n        var tagName = this.tagName();\n        if (tagName === \"PATH\") {\n            this.attr(\"d\", V.normalizePathData(this.attr(\"d\")));\n        }\n        return this;\n    };\n    VPrototype.remove = function() {\n        if (this.node.parentNode) {\n            this.node.parentNode.removeChild(this.node);\n        }\n        return this;\n    };\n    VPrototype.empty = function() {\n        while(this.node.firstChild){\n            this.node.removeChild(this.node.firstChild);\n        }\n        return this;\n    };\n    /**\n     * @private\n     * @param {object} attrs\n     * @returns {Vectorizer}\n     */ VPrototype.setAttributes = function(attrs) {\n        for(var key in attrs){\n            if (attrs.hasOwnProperty(key)) {\n                this.setAttribute(key, attrs[key]);\n            }\n        }\n        return this;\n    };\n    VPrototype.append = function(els) {\n        if (!V.isArray(els)) {\n            els = [\n                els\n            ];\n        }\n        for(var i = 0, len = els.length; i < len; i++){\n            this.node.appendChild(V.toNode(els[i])); // lgtm [js/xss-through-dom]\n        }\n        return this;\n    };\n    VPrototype.prepend = function(els) {\n        var child = this.node.firstChild;\n        return child ? V(child).before(els) : this.append(els);\n    };\n    VPrototype.before = function(els) {\n        var node = this.node;\n        var parent = node.parentNode;\n        if (parent) {\n            if (!V.isArray(els)) {\n                els = [\n                    els\n                ];\n            }\n            for(var i = 0, len = els.length; i < len; i++){\n                parent.insertBefore(V.toNode(els[i]), node);\n            }\n        }\n        return this;\n    };\n    VPrototype.appendTo = function(node) {\n        V.toNode(node).appendChild(this.node); // lgtm [js/xss-through-dom]\n        return this;\n    };\n    VPrototype.svg = function() {\n        return this.node instanceof window.SVGSVGElement ? this : V(this.node.ownerSVGElement);\n    };\n    VPrototype.tagName = function() {\n        return this.node.tagName.toUpperCase();\n    };\n    VPrototype.defs = function() {\n        var context = this.svg() || this;\n        var defsNode = context.node.getElementsByTagName(\"defs\")[0];\n        if (defsNode) return V(defsNode);\n        return V(\"defs\").appendTo(context);\n    };\n    VPrototype.clone = function() {\n        var clone = V(this.node.cloneNode(true));\n        // Note that clone inherits also ID. Therefore, we need to change it here.\n        clone.node.id = V.uniqueId();\n        return clone;\n    };\n    VPrototype.findOne = function(selector) {\n        var found = this.node.querySelector(selector);\n        return found ? V(found) : undefined;\n    };\n    VPrototype.find = function(selector) {\n        var vels = [];\n        var nodes = this.node.querySelectorAll(selector);\n        if (nodes) {\n            // Map DOM elements to `V`s.\n            for(var i = 0; i < nodes.length; i++){\n                vels.push(V(nodes[i]));\n            }\n        }\n        return vels;\n    };\n    // Returns an array of V elements made from children of this.node.\n    VPrototype.children = function() {\n        var children = this.node.childNodes;\n        var outputArray = [];\n        for(var i = 0; i < children.length; i++){\n            var currentChild = children[i];\n            if (currentChild.nodeType === 1) {\n                outputArray.push(V(children[i]));\n            }\n        }\n        return outputArray;\n    };\n    // Returns the V element from parentNode of this.node.\n    VPrototype.parent = function() {\n        return V(this.node.parentNode) || null;\n    }, // Find an index of an element inside its container.\n    VPrototype.index = function() {\n        var index = 0;\n        var node = this.node.previousSibling;\n        while(node){\n            // nodeType 1 for ELEMENT_NODE\n            if (node.nodeType === 1) index++;\n            node = node.previousSibling;\n        }\n        return index;\n    };\n    VPrototype.findParentByClass = function(className, terminator) {\n        var ownerSVGElement = this.node.ownerSVGElement;\n        var node = this.node.parentNode;\n        while(node && node !== terminator && node !== ownerSVGElement){\n            var vel = V(node);\n            if (vel.hasClass(className)) {\n                return vel;\n            }\n            node = node.parentNode;\n        }\n        return null;\n    };\n    // https://jsperf.com/get-common-parent\n    VPrototype.contains = function(el) {\n        var a = this.node;\n        var b = V.toNode(el);\n        var bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && a.compareDocumentPosition(bup) & 16);\n    };\n    // Convert global point into the coordinate space of this element.\n    VPrototype.toLocalPoint = function(x, y) {\n        var svg = this.svg().node;\n        var p = svg.createSVGPoint();\n        p.x = x;\n        p.y = y;\n        try {\n            var globalPoint = p.matrixTransform(svg.getScreenCTM().inverse());\n            var globalToLocalMatrix = this.getTransformToElement(svg).inverse();\n        } catch (e) {\n            // IE9 throws an exception in odd cases. (`Unexpected call to method or property access`)\n            // We have to make do with the original coordianates.\n            return p;\n        }\n        return globalPoint.matrixTransform(globalToLocalMatrix);\n    };\n    VPrototype.translateCenterToPoint = function(p) {\n        var bbox = this.getBBox({\n            target: this.svg()\n        });\n        var center = bbox.center();\n        this.translate(p.x - center.x, p.y - center.y);\n        return this;\n    };\n    // Efficiently auto-orient an element. This basically implements the orient=auto attribute\n    // of markers. The easiest way of understanding on what this does is to imagine the element is an\n    // arrowhead. Calling this method on the arrowhead makes it point to the `position` point while\n    // being auto-oriented (properly rotated) towards the `reference` point.\n    // `target` is the element relative to which the transformations are applied. Usually a viewport.\n    VPrototype.translateAndAutoOrient = function(position, reference, target) {\n        position = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(position);\n        reference = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(reference);\n        target || (target = this.svg());\n        // Clean-up previously set transformations except the scale. If we didn't clean up the\n        // previous transformations then they'd add up with the old ones. Scale is an exception as\n        // it doesn't add up, consider: `this.scale(2).scale(2).scale(2)`. The result is that the\n        // element is scaled by the factor 2, not 8.\n        var scale = this.scale();\n        this.attr(\"transform\", \"\");\n        var bbox = this.getBBox({\n            target: target\n        }).scale(scale.sx, scale.sy);\n        // 1. Translate to origin.\n        var translateToOrigin = V.createSVGTransform();\n        translateToOrigin.setTranslate(-bbox.x - bbox.width / 2, -bbox.y - bbox.height / 2);\n        // 2. Rotate around origin.\n        var rotateAroundOrigin = V.createSVGTransform();\n        var angle = position.angleBetween(reference, position.clone().offset(1, 0));\n        if (angle) rotateAroundOrigin.setRotate(angle, 0, 0);\n        // 3. Translate to the `position` + the offset (half my width) towards the `reference` point.\n        var translateFromOrigin = V.createSVGTransform();\n        var finalPosition = position.clone().move(reference, bbox.width / 2);\n        translateFromOrigin.setTranslate(2 * position.x - finalPosition.x, 2 * position.y - finalPosition.y);\n        // 4. Get the current transformation matrix of this node\n        var ctm = this.getTransformToElement(target);\n        // 5. Apply transformations and the scale\n        var transform = V.createSVGTransform();\n        transform.setMatrix(translateFromOrigin.matrix.multiply(rotateAroundOrigin.matrix.multiply(translateToOrigin.matrix.multiply(ctm.scale(scale.sx, scale.sy)))));\n        this.attr(\"transform\", V.matrixToTransformString(transform.matrix));\n        return this;\n    };\n    VPrototype.animateAlongPath = function(attrs, path) {\n        path = V.toNode(path);\n        var id = V.ensureId(path);\n        var animateMotion = V(\"animateMotion\", attrs);\n        var mpath = V(\"mpath\", {\n            \"xlink:href\": \"#\" + id\n        });\n        animateMotion.append(mpath);\n        this.append(animateMotion);\n        try {\n            animateMotion.node.beginElement();\n        } catch (e) {\n            // Fallback for IE 9.\n            // Run the animation programmatically if FakeSmile (`http://leunen.me/fakesmile/`) present\n            if (document.documentElement.getAttribute(\"smiling\") === \"fake\") {\n                /* global getTargets:true, Animator:true, animators:true id2anim:true */ // Register the animation. (See `https://answers.launchpad.net/smil/+question/203333`)\n                var animation = animateMotion.node;\n                animation.animators = [];\n                var animationID = animation.getAttribute(\"id\");\n                if (animationID) id2anim[animationID] = animation;\n                var targets = getTargets(animation);\n                for(var i = 0, len = targets.length; i < len; i++){\n                    var target = targets[i];\n                    var animator = new Animator(animation, target, i);\n                    animators.push(animator);\n                    animation.animators[i] = animator;\n                    animator.register();\n                }\n            }\n        }\n        return this;\n    };\n    // Split a string into an array of tokens.\n    // https://infra.spec.whatwg.org/#ascii-whitespace\n    const noHTMLWhitespaceRegex = /[^\\x20\\t\\r\\n\\f]+/g;\n    function getTokenList(str) {\n        if (!V.isString(str)) return [];\n        return str.trim().match(noHTMLWhitespaceRegex) || [];\n    }\n    VPrototype.hasClass = function(className) {\n        if (!V.isString(className)) return false;\n        return this.node.classList.contains(className.trim());\n    };\n    VPrototype.addClass = function(className) {\n        this.node.classList.add(...getTokenList(className));\n        return this;\n    };\n    VPrototype.removeClass = function(className) {\n        this.node.classList.remove(...getTokenList(className));\n        return this;\n    };\n    VPrototype.toggleClass = function(className, toAdd) {\n        const tokens = getTokenList(className);\n        for(let i = 0; i < tokens.length; i++){\n            this.node.classList.toggle(tokens[i], toAdd);\n        }\n        return this;\n    };\n    // Interpolate path by discrete points. The precision of the sampling\n    // is controlled by `interval`. In other words, `sample()` will generate\n    // a point on the path starting at the beginning of the path going to the end\n    // every `interval` pixels.\n    // The sampler can be very useful for e.g. finding intersection between two\n    // paths (finding the two closest points from two samples).\n    VPrototype.sample = function(interval) {\n        interval = interval || 1;\n        var node = this.node;\n        var length = node.getTotalLength();\n        var samples = [];\n        var distance = 0;\n        var sample;\n        while(distance < length){\n            sample = node.getPointAtLength(distance);\n            samples.push({\n                x: sample.x,\n                y: sample.y,\n                distance: distance\n            });\n            distance += interval;\n        }\n        return samples;\n    };\n    VPrototype.convertToPath = function() {\n        var path = V(\"path\");\n        path.attr(this.attr());\n        var d = this.convertToPathData();\n        if (d) {\n            path.attr(\"d\", d);\n        }\n        return path;\n    };\n    VPrototype.convertToPathData = function() {\n        var tagName = this.tagName();\n        switch(tagName){\n            case \"PATH\":\n                return this.attr(\"d\");\n            case \"LINE\":\n                return V.convertLineToPathData(this.node);\n            case \"POLYGON\":\n                return V.convertPolygonToPathData(this.node);\n            case \"POLYLINE\":\n                return V.convertPolylineToPathData(this.node);\n            case \"ELLIPSE\":\n                return V.convertEllipseToPathData(this.node);\n            case \"CIRCLE\":\n                return V.convertCircleToPathData(this.node);\n            case \"RECT\":\n                return V.convertRectToPathData(this.node);\n        }\n        throw new Error(tagName + \" cannot be converted to PATH.\");\n    };\n    V.prototype.toGeometryShape = function() {\n        var x, y, width, height, cx, cy, r, rx, ry, points, d, x1, x2, y1, y2;\n        switch(this.tagName()){\n            case \"RECT\":\n                x = parseFloat(this.attr(\"x\")) || 0;\n                y = parseFloat(this.attr(\"y\")) || 0;\n                width = parseFloat(this.attr(\"width\")) || 0;\n                height = parseFloat(this.attr(\"height\")) || 0;\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(x, y, width, height);\n            case \"CIRCLE\":\n                cx = parseFloat(this.attr(\"cx\")) || 0;\n                cy = parseFloat(this.attr(\"cy\")) || 0;\n                r = parseFloat(this.attr(\"r\")) || 0;\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Ellipse({\n                    x: cx,\n                    y: cy\n                }, r, r);\n            case \"ELLIPSE\":\n                cx = parseFloat(this.attr(\"cx\")) || 0;\n                cy = parseFloat(this.attr(\"cy\")) || 0;\n                rx = parseFloat(this.attr(\"rx\")) || 0;\n                ry = parseFloat(this.attr(\"ry\")) || 0;\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Ellipse({\n                    x: cx,\n                    y: cy\n                }, rx, ry);\n            case \"POLYLINE\":\n                points = V.getPointsFromSvgNode(this);\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Polyline(points);\n            case \"POLYGON\":\n                points = V.getPointsFromSvgNode(this);\n                if (points.length > 1) points.push(points[0]);\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Polyline(points);\n            case \"PATH\":\n                d = this.attr(\"d\");\n                if (!_g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Path.isDataSupported(d)) d = V.normalizePathData(d);\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Path(d);\n            case \"LINE\":\n                x1 = parseFloat(this.attr(\"x1\")) || 0;\n                y1 = parseFloat(this.attr(\"y1\")) || 0;\n                x2 = parseFloat(this.attr(\"x2\")) || 0;\n                y2 = parseFloat(this.attr(\"y2\")) || 0;\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Line({\n                    x: x1,\n                    y: y1\n                }, {\n                    x: x2,\n                    y: y2\n                });\n        }\n        // Anything else is a rectangle\n        return this.getBBox();\n    };\n    // Find the intersection of a line starting in the center\n    // of the SVG `node` ending in the point `ref`.\n    // `target` is an SVG element to which `node`s transformations are relative to.\n    // Note that `ref` point must be in the coordinate system of the `target` for this function to work properly.\n    // Returns a point in the `target` coordinate system (the same system as `ref` is in) if\n    // an intersection is found. Returns `undefined` otherwise.\n    VPrototype.findIntersection = function(ref, target) {\n        var svg = this.svg().node;\n        target = target || svg;\n        var bbox = this.getBBox({\n            target: target\n        });\n        var center = bbox.center();\n        if (!bbox.intersectionWithLineFromCenterToPoint(ref)) return undefined;\n        var spot;\n        var tagName = this.tagName();\n        // Little speed up optimization for `<rect>` element. We do not do conversion\n        // to path element and sampling but directly calculate the intersection through\n        // a transformed geometrical rectangle.\n        if (tagName === \"RECT\") {\n            var gRect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(parseFloat(this.attr(\"x\") || 0), parseFloat(this.attr(\"y\") || 0), parseFloat(this.attr(\"width\")), parseFloat(this.attr(\"height\")));\n            // Get the rect transformation matrix with regards to the SVG document.\n            var rectMatrix = this.getTransformToElement(target);\n            // Decompose the matrix to find the rotation angle.\n            var rectMatrixComponents = V.decomposeMatrix(rectMatrix);\n            // Now we want to rotate the rectangle back so that we\n            // can use `intersectionWithLineFromCenterToPoint()` passing the angle as the second argument.\n            var resetRotation = svg.createSVGTransform();\n            resetRotation.setRotate(-rectMatrixComponents.rotation, center.x, center.y);\n            var rect = V.transformRect(gRect, resetRotation.matrix.multiply(rectMatrix));\n            spot = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(rect).intersectionWithLineFromCenterToPoint(ref, rectMatrixComponents.rotation);\n        } else if (tagName === \"PATH\" || tagName === \"POLYGON\" || tagName === \"POLYLINE\" || tagName === \"CIRCLE\" || tagName === \"ELLIPSE\") {\n            var pathNode = tagName === \"PATH\" ? this : this.convertToPath();\n            var samples = pathNode.sample();\n            var minDistance = Infinity;\n            var closestSamples = [];\n            var i, sample, gp, centerDistance, refDistance, distance;\n            for(i = 0; i < samples.length; i++){\n                sample = samples[i];\n                // Convert the sample point in the local coordinate system to the global coordinate system.\n                gp = V.createSVGPoint(sample.x, sample.y);\n                gp = gp.matrixTransform(this.getTransformToElement(target));\n                sample = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(gp);\n                centerDistance = sample.distance(center);\n                // Penalize a higher distance to the reference point by 10%.\n                // This gives better results. This is due to\n                // inaccuracies introduced by rounding errors and getPointAtLength() returns.\n                refDistance = sample.distance(ref) * 1.1;\n                distance = centerDistance + refDistance;\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    closestSamples = [\n                        {\n                            sample: sample,\n                            refDistance: refDistance\n                        }\n                    ];\n                } else if (distance < minDistance + 1) {\n                    closestSamples.push({\n                        sample: sample,\n                        refDistance: refDistance\n                    });\n                }\n            }\n            closestSamples.sort(function(a, b) {\n                return a.refDistance - b.refDistance;\n            });\n            if (closestSamples[0]) {\n                spot = closestSamples[0].sample;\n            }\n        }\n        return spot;\n    };\n    /**\n     * @private\n     * @param {string} name\n     * @param {string} value\n     * @returns {Vectorizer}\n     */ VPrototype.setAttribute = function(name, value) {\n        const el = this.node;\n        if (value === null) {\n            this.removeAttr(name);\n            return this;\n        }\n        const trueName = attributeNames[name];\n        const { ns } = V.qualifyAttr(trueName);\n        if (ns) {\n            // Attribute names can be namespaced. E.g. `image` elements\n            // have a `xlink:href` attribute to set the source of the image.\n            el.setAttributeNS(ns, trueName, value);\n        } else if (trueName === \"id\") {\n            el.id = value;\n        } else {\n            el.setAttribute(trueName, value);\n        }\n        return this;\n    };\n    // Create an SVG document element.\n    // If `content` is passed, it will be used as the SVG content of the `<svg>` root element.\n    V.createSvgDocument = function(content) {\n        if (content) {\n            const XMLString = `<svg xmlns=\"${ns.svg}\" xmlns:xlink=\"${ns.xlink}\" version=\"${SVGVersion}\">${content}</svg>`;\n            const { documentElement } = V.parseXML(XMLString, {\n                async: false\n            });\n            return documentElement;\n        }\n        const svg = document.createElementNS(ns.svg, \"svg\");\n        svg.setAttributeNS(ns.xmlns, \"xmlns:xlink\", ns.xlink);\n        svg.setAttribute(\"version\", SVGVersion);\n        return svg;\n    };\n    V.createSVGStyle = function(stylesheet) {\n        const { node } = V(\"style\", {\n            type: \"text/css\"\n        }, [\n            V.createCDATASection(stylesheet)\n        ]);\n        return node;\n    }, V.createCDATASection = function(data = \"\") {\n        const xml = document.implementation.createDocument(null, \"xml\", null);\n        return xml.createCDATASection(data);\n    };\n    V.idCounter = 0;\n    // A function returning a unique identifier for this client session with every call.\n    V.uniqueId = function() {\n        return \"v-\" + ++V.idCounter;\n    };\n    V.toNode = function(el) {\n        return V.isV(el) ? el.node : el.nodeName && el || el[0];\n    };\n    V.ensureId = function(node) {\n        node = V.toNode(node);\n        return node.id || (node.id = V.uniqueId());\n    };\n    // Replace all spaces with the Unicode No-break space (http://www.fileformat.info/info/unicode/char/a0/index.htm).\n    // IE would otherwise collapse all spaces into one. This is used in the text() method but it is\n    // also exposed so that the programmer can use it in case he needs to. This is useful e.g. in tests\n    // when you want to compare the actual DOM text content without having to add the unicode character in\n    // the place of all spaces.\n    V.sanitizeText = function(text) {\n        return (text || \"\").replace(/ /g, \"\\xa0\");\n    };\n    V.isUndefined = function(value) {\n        return typeof value === \"undefined\";\n    };\n    V.isString = function(value) {\n        return typeof value === \"string\";\n    };\n    V.isObject = function(value) {\n        return value && typeof value === \"object\";\n    };\n    V.isArray = Array.isArray;\n    V.parseXML = function(data, opt) {\n        opt = opt || {};\n        var xml;\n        try {\n            var parser = new DOMParser();\n            if (!V.isUndefined(opt.async)) {\n                parser.async = opt.async;\n            }\n            xml = parser.parseFromString(data, \"text/xml\");\n        } catch (error) {\n            xml = undefined;\n        }\n        if (!xml || xml.getElementsByTagName(\"parsererror\").length) {\n            throw new Error(\"Invalid XML: \" + data);\n        }\n        return xml;\n    };\n    // Create an empty object which does not inherit any properties from `Object.prototype`.\n    // This is useful when we want to use an object as a dictionary without having to\n    // worry about inherited properties such as `toString`, `valueOf` etc.\n    const _attributeNames = Object.create(null);\n    // List of attributes for which not to split camel case words.\n    // It contains known SVG attribute names and may be extended with user-defined attribute names.\n    [\n        \"baseFrequency\",\n        \"baseProfile\",\n        \"clipPathUnits\",\n        \"contentScriptType\",\n        \"contentStyleType\",\n        \"diffuseConstant\",\n        \"edgeMode\",\n        \"externalResourcesRequired\",\n        \"filterRes\",\n        \"filterUnits\",\n        \"gradientTransform\",\n        \"gradientUnits\",\n        \"kernelMatrix\",\n        \"kernelUnitLength\",\n        \"keyPoints\",\n        \"lengthAdjust\",\n        \"limitingConeAngle\",\n        \"markerHeight\",\n        \"markerUnits\",\n        \"markerWidth\",\n        \"maskContentUnits\",\n        \"maskUnits\",\n        \"numOctaves\",\n        \"pathLength\",\n        \"patternContentUnits\",\n        \"patternTransform\",\n        \"patternUnits\",\n        \"pointsAtX\",\n        \"pointsAtY\",\n        \"pointsAtZ\",\n        \"preserveAlpha\",\n        \"preserveAspectRatio\",\n        \"primitiveUnits\",\n        \"refX\",\n        \"refY\",\n        \"requiredExtensions\",\n        \"requiredFeatures\",\n        \"specularConstant\",\n        \"specularExponent\",\n        \"spreadMethod\",\n        \"startOffset\",\n        \"stdDeviation\",\n        \"stitchTiles\",\n        \"surfaceScale\",\n        \"systemLanguage\",\n        \"tableValues\",\n        \"targetX\",\n        \"targetY\",\n        \"textLength\",\n        \"viewBox\",\n        \"viewTarget\",\n        \"xChannelSelector\",\n        \"yChannelSelector\",\n        \"zoomAndPan\" // deprecated\n    ].forEach((name)=>_attributeNames[name] = name);\n    const attributeNames = new Proxy(_attributeNames, {\n        get (cache, name) {\n            // The cache is a dictionary of attribute names. See `_attributeNames` above.\n            // If the attribute name is not in the cache, it means that it is not\n            // a camel-case attribute name. In that case, we need to convert\n            // the attribute name to dash-separated words.\n            if (!V.supportCamelCaseAttributes) return name;\n            if (name in cache) {\n                return cache[name];\n            }\n            // Convert camel case to dash-separated words.\n            return cache[name] = name.replace(/[A-Z]/g, \"-$&\").toLowerCase();\n        }\n    });\n    // Note: The `attributeNames` and `supportCamelCaseAttributes` properties are not enumerable\n    // in this version to avoid breaking changes. They will be made enumerable in the next major version.\n    // Dictionary of attribute names\n    Object.defineProperty(V, \"attributeNames\", {\n        value: attributeNames,\n        writable: false\n    });\n    // Should camel case attributes be supported?\n    Object.defineProperty(V, \"supportCamelCaseAttributes\", {\n        value: false,\n        writable: true\n    });\n    /**\n     * @param {string} name\n     * @returns {{ns: string|null, local: string}} namespace and attribute name\n     */ V.qualifyAttr = function(name) {\n        if (name.indexOf(\":\") !== -1) {\n            var combinedKey = name.split(\":\");\n            return {\n                ns: ns[combinedKey[0]],\n                local: combinedKey[1]\n            };\n        }\n        return {\n            ns: null,\n            local: name\n        };\n    };\n    // Note: This regex allows multiple commas as separator which is incorrect in SVG\n    // This regex is used by `split()`, so it doesn't need to use /g\n    V.transformSeparatorRegex = /[ ,]+/;\n    // Note: All following regexes are more restrictive than SVG specification\n    // ReDoS mitigation: Use an anchor at the beginning of the match\n    // ReDoS mitigation: Avoid backtracking (uses `[^()]+` instead of `.*?`)\n    // ReDoS mitigation: Don't match initial `(` inside repeated part\n    // The following regex needs to use /g (= cannot use capturing groups)\n    V.transformRegex = /\\b\\w+\\([^()]+\\)/g;\n    // The following regexes need to use capturing groups (= cannot use /g)\n    V.transformFunctionRegex = /\\b(\\w+)\\(([^()]+)\\)/;\n    V.transformTranslateRegex = /\\btranslate\\(([^()]+)\\)/;\n    V.transformRotateRegex = /\\brotate\\(([^()]+)\\)/;\n    V.transformScaleRegex = /\\bscale\\(([^()]+)\\)/;\n    V.transformStringToMatrix = function(transform) {\n        // Initialize result matrix as identity matrix\n        let transformationMatrix = V.createSVGMatrix();\n        // Note: Multiple transform functions are allowed in `transform` string\n        // `match()` returns `null` if none found\n        const transformMatches = transform && transform.match(V.transformRegex);\n        if (!transformMatches) {\n            // Return identity matrix\n            return transformationMatrix;\n        }\n        const numMatches = transformMatches.length;\n        for(let i = 0; i < numMatches; i++){\n            const transformMatch = transformMatches[i];\n            // Use same regex as above, but with capturing groups\n            // `match()` returns values of capturing groups as `[1]`, `[2]`\n            const transformFunctionMatch = transformMatch.match(V.transformFunctionRegex);\n            if (transformFunctionMatch) {\n                let sx, sy, tx, ty, angle;\n                let ctm = V.createSVGMatrix();\n                const transformFunction = transformFunctionMatch[1].toLowerCase();\n                const args = transformFunctionMatch[2].split(V.transformSeparatorRegex);\n                switch(transformFunction){\n                    case \"scale\":\n                        sx = parseFloat(args[0]);\n                        sy = args[1] === undefined ? sx : parseFloat(args[1]);\n                        ctm = ctm.scaleNonUniform(sx, sy);\n                        break;\n                    case \"translate\":\n                        tx = parseFloat(args[0]);\n                        ty = parseFloat(args[1]);\n                        ctm = ctm.translate(tx, ty);\n                        break;\n                    case \"rotate\":\n                        angle = parseFloat(args[0]);\n                        tx = parseFloat(args[1]) || 0;\n                        ty = parseFloat(args[2]) || 0;\n                        if (tx !== 0 || ty !== 0) {\n                            ctm = ctm.translate(tx, ty).rotate(angle).translate(-tx, -ty);\n                        } else {\n                            ctm = ctm.rotate(angle);\n                        }\n                        break;\n                    case \"skewx\":\n                        angle = parseFloat(args[0]);\n                        ctm = ctm.skewX(angle);\n                        break;\n                    case \"skewy\":\n                        angle = parseFloat(args[0]);\n                        ctm = ctm.skewY(angle);\n                        break;\n                    case \"matrix\":\n                        ctm.a = parseFloat(args[0]);\n                        ctm.b = parseFloat(args[1]);\n                        ctm.c = parseFloat(args[2]);\n                        ctm.d = parseFloat(args[3]);\n                        ctm.e = parseFloat(args[4]);\n                        ctm.f = parseFloat(args[5]);\n                        break;\n                    default:\n                        continue;\n                }\n                // Multiply current transformation into result matrix\n                transformationMatrix = transformationMatrix.multiply(ctm);\n            }\n        }\n        return transformationMatrix;\n    };\n    V.matrixToTransformString = function(matrix) {\n        matrix || (matrix = true);\n        return \"matrix(\" + (matrix.a !== undefined ? matrix.a : 1) + \",\" + (matrix.b !== undefined ? matrix.b : 0) + \",\" + (matrix.c !== undefined ? matrix.c : 0) + \",\" + (matrix.d !== undefined ? matrix.d : 1) + \",\" + (matrix.e !== undefined ? matrix.e : 0) + \",\" + (matrix.f !== undefined ? matrix.f : 0) + \")\";\n    };\n    V.parseTransformString = function(transform) {\n        var translate, rotate, scale;\n        if (transform) {\n            var separator = V.transformSeparatorRegex;\n            // Special handling for `transform` with one or more matrix functions\n            if (transform.trim().indexOf(\"matrix\") >= 0) {\n                // Convert EVERYTHING in `transform` string to a matrix\n                // Will combine ALL matrixes * ALL translates * ALL scales * ALL rotates\n                // Note: In non-matrix case, we only take first one of each (if any)\n                var matrix = V.transformStringToMatrix(transform);\n                var decomposedMatrix = V.decomposeMatrix(matrix);\n                // Extract `translate`, `scale`, `rotate` from matrix\n                translate = [\n                    decomposedMatrix.translateX,\n                    decomposedMatrix.translateY\n                ];\n                scale = [\n                    decomposedMatrix.scaleX,\n                    decomposedMatrix.scaleY\n                ];\n                rotate = [\n                    decomposedMatrix.rotation\n                ];\n                // Rewrite `transform` string in `translate scale rotate` format\n                var transformations = [];\n                if (translate[0] !== 0 || translate[1] !== 0) {\n                    transformations.push(\"translate(\" + translate + \")\");\n                }\n                if (scale[0] !== 1 || scale[1] !== 1) {\n                    transformations.push(\"scale(\" + scale + \")\");\n                }\n                if (rotate[0] !== 0) {\n                    transformations.push(\"rotate(\" + rotate + \")\");\n                }\n                transform = transformations.join(\" \");\n            } else {\n                // Extract `translate`, `rotate`, `scale` functions from `transform` string\n                // Note: We only detect the first match of each (if any)\n                // `match()` returns value of capturing group as `[1]`\n                const translateMatch = transform.match(V.transformTranslateRegex);\n                if (translateMatch) {\n                    translate = translateMatch[1].split(separator);\n                }\n                const rotateMatch = transform.match(V.transformRotateRegex);\n                if (rotateMatch) {\n                    rotate = rotateMatch[1].split(separator);\n                }\n                const scaleMatch = transform.match(V.transformScaleRegex);\n                if (scaleMatch) {\n                    scale = scaleMatch[1].split(separator);\n                }\n            }\n        }\n        var sx = scale && scale[0] ? parseFloat(scale[0]) : 1;\n        return {\n            value: transform,\n            translate: {\n                tx: translate && translate[0] ? parseInt(translate[0], 10) : 0,\n                ty: translate && translate[1] ? parseInt(translate[1], 10) : 0\n            },\n            rotate: {\n                angle: rotate && rotate[0] ? parseInt(rotate[0], 10) : 0,\n                cx: rotate && rotate[1] ? parseInt(rotate[1], 10) : undefined,\n                cy: rotate && rotate[2] ? parseInt(rotate[2], 10) : undefined\n            },\n            scale: {\n                sx: sx,\n                sy: scale && scale[1] ? parseFloat(scale[1]) : sx\n            }\n        };\n    };\n    V.deltaTransformPoint = function(matrix, point) {\n        var dx = point.x * matrix.a + point.y * matrix.c + 0;\n        var dy = point.x * matrix.b + point.y * matrix.d + 0;\n        return {\n            x: dx,\n            y: dy\n        };\n    };\n    V.decomposeMatrix = function(matrix) {\n        // @see https://gist.github.com/2052247\n        // calculate delta transform point\n        var px = V.deltaTransformPoint(matrix, {\n            x: 0,\n            y: 1\n        });\n        var py = V.deltaTransformPoint(matrix, {\n            x: 1,\n            y: 0\n        });\n        // calculate skew\n        var skewX = 180 / PI * atan2(px.y, px.x) - 90;\n        var skewY = 180 / PI * atan2(py.y, py.x);\n        return {\n            translateX: matrix.e,\n            translateY: matrix.f,\n            scaleX: sqrt(matrix.a * matrix.a + matrix.b * matrix.b),\n            scaleY: sqrt(matrix.c * matrix.c + matrix.d * matrix.d),\n            skewX: skewX,\n            skewY: skewY,\n            rotation: skewX // rotation is the same as skew x\n        };\n    };\n    // Return the `scale` transformation from the following equation:\n    // `translate(tx, ty) . rotate(angle) . scale(sx, sy) === matrix(a,b,c,d,e,f)`\n    V.matrixToScale = function(matrix) {\n        var a, b, c, d;\n        if (matrix) {\n            a = V.isUndefined(matrix.a) ? 1 : matrix.a;\n            d = V.isUndefined(matrix.d) ? 1 : matrix.d;\n            b = matrix.b;\n            c = matrix.c;\n        } else {\n            a = d = 1;\n        }\n        return {\n            sx: b ? sqrt(a * a + b * b) : a,\n            sy: c ? sqrt(c * c + d * d) : d\n        };\n    };\n    // Return the `rotate` transformation from the following equation:\n    // `translate(tx, ty) . rotate(angle) . scale(sx, sy) === matrix(a,b,c,d,e,f)`\n    V.matrixToRotate = function(matrix) {\n        var p = {\n            x: 0,\n            y: 1\n        };\n        if (matrix) {\n            p = V.deltaTransformPoint(matrix, p);\n        }\n        return {\n            angle: _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.normalizeAngle(_g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.toDeg(atan2(p.y, p.x)) - 90)\n        };\n    };\n    // Return the `translate` transformation from the following equation:\n    // `translate(tx, ty) . rotate(angle) . scale(sx, sy) === matrix(a,b,c,d,e,f)`\n    V.matrixToTranslate = function(matrix) {\n        return {\n            tx: matrix && matrix.e || 0,\n            ty: matrix && matrix.f || 0\n        };\n    };\n    V.isV = function(object) {\n        return object instanceof V;\n    };\n    // For backwards compatibility:\n    V.isVElement = V.isV;\n    // Element implements `getBBox()`, `getCTM()` and `getScreenCTM()`\n    // https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement\n    V.isSVGGraphicsElement = function(node) {\n        if (!node) return false;\n        node = V.toNode(node);\n        // IE/Edge does not implement SVGGraphicsElement interface, thus check for `getScreenCTM` below\n        return node instanceof SVGElement && typeof node.getScreenCTM === \"function\";\n    };\n    var svgDocument = V(\"svg\").node;\n    V.createSVGMatrix = function(matrix) {\n        var svgMatrix = svgDocument.createSVGMatrix();\n        for(var component in matrix){\n            svgMatrix[component] = matrix[component];\n        }\n        return svgMatrix;\n    };\n    V.createSVGTransform = function(matrix) {\n        if (!V.isUndefined(matrix)) {\n            if (!(matrix instanceof SVGMatrix)) {\n                matrix = V.createSVGMatrix(matrix);\n            }\n            return svgDocument.createSVGTransformFromMatrix(matrix);\n        }\n        return svgDocument.createSVGTransform();\n    };\n    V.createSVGPoint = function(x, y) {\n        var p = svgDocument.createSVGPoint();\n        p.x = x;\n        p.y = y;\n        return p;\n    };\n    V.transformRect = function(r, matrix) {\n        var p = svgDocument.createSVGPoint();\n        p.x = r.x;\n        p.y = r.y;\n        var corner1 = p.matrixTransform(matrix);\n        p.x = r.x + r.width;\n        p.y = r.y;\n        var corner2 = p.matrixTransform(matrix);\n        p.x = r.x + r.width;\n        p.y = r.y + r.height;\n        var corner3 = p.matrixTransform(matrix);\n        p.x = r.x;\n        p.y = r.y + r.height;\n        var corner4 = p.matrixTransform(matrix);\n        var minX = min(corner1.x, corner2.x, corner3.x, corner4.x);\n        var maxX = max(corner1.x, corner2.x, corner3.x, corner4.x);\n        var minY = min(corner1.y, corner2.y, corner3.y, corner4.y);\n        var maxY = max(corner1.y, corner2.y, corner3.y, corner4.y);\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(minX, minY, maxX - minX, maxY - minY);\n    };\n    V.transformPoint = function(p, matrix) {\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(V.createSVGPoint(p.x, p.y).matrixTransform(matrix));\n    };\n    V.transformLine = function(l, matrix) {\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Line(V.transformPoint(l.start, matrix), V.transformPoint(l.end, matrix));\n    };\n    V.transformPolyline = function(p, matrix) {\n        var inPoints = p instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Polyline ? p.points : p;\n        if (!V.isArray(inPoints)) inPoints = [];\n        var outPoints = [];\n        for(var i = 0, n = inPoints.length; i < n; i++)outPoints[i] = V.transformPoint(inPoints[i], matrix);\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Polyline(outPoints);\n    };\n    // Convert a style represented as string (e.g. `'fill=\"blue\"; stroke=\"red\"'`) to\n    // an object (`{ fill: 'blue', stroke: 'red' }`).\n    V.styleToObject = function(styleString) {\n        var ret = {};\n        var styles = styleString.split(\";\");\n        for(var i = 0; i < styles.length; i++){\n            var style = styles[i];\n            var pair = style.split(\"=\");\n            ret[pair[0].trim()] = pair[1].trim();\n        }\n        return ret;\n    };\n    // Inspired by d3.js https://github.com/mbostock/d3/blob/master/src/svg/arc.js\n    V.createSlicePathData = function(innerRadius, outerRadius, startAngle, endAngle) {\n        var svgArcMax = 2 * PI - 1e-6;\n        var r0 = innerRadius;\n        var r1 = outerRadius;\n        var a0 = startAngle;\n        var a1 = endAngle;\n        var da = (a1 < a0 && (da = a0, a0 = a1, a1 = da), a1 - a0);\n        var df = da < PI ? \"0\" : \"1\";\n        var c0 = cos(a0);\n        var s0 = sin(a0);\n        var c1 = cos(a1);\n        var s1 = sin(a1);\n        return da >= svgArcMax ? r0 ? \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + r1 + \"M0,\" + r0 + \"A\" + r0 + \",\" + r0 + \" 0 1,0 0,\" + -r0 + \"A\" + r0 + \",\" + r0 + \" 0 1,0 0,\" + r0 + \"Z\" : \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + r1 + \"Z\" : r0 ? \"M\" + r1 * c0 + \",\" + r1 * s0 + \"A\" + r1 + \",\" + r1 + \" 0 \" + df + \",1 \" + r1 * c1 + \",\" + r1 * s1 + \"L\" + r0 * c1 + \",\" + r0 * s1 + \"A\" + r0 + \",\" + r0 + \" 0 \" + df + \",0 \" + r0 * c0 + \",\" + r0 * s0 + \"Z\" : \"M\" + r1 * c0 + \",\" + r1 * s0 + \"A\" + r1 + \",\" + r1 + \" 0 \" + df + \",1 \" + r1 * c1 + \",\" + r1 * s1 + \"L0,0\" + \"Z\";\n    };\n    // Merge attributes from object `b` with attributes in object `a`.\n    // Note that this modifies the object `a`.\n    // Also important to note that attributes are merged but CSS classes are concatenated.\n    V.mergeAttrs = function(a, b) {\n        for(var attr in b){\n            if (attr === \"class\") {\n                // Concatenate classes.\n                a[attr] = a[attr] ? a[attr] + \" \" + b[attr] : b[attr];\n            } else if (attr === \"style\") {\n                // `style` attribute can be an object.\n                if (V.isObject(a[attr]) && V.isObject(b[attr])) {\n                    // `style` stored in `a` is an object.\n                    a[attr] = V.mergeAttrs(a[attr], b[attr]);\n                } else if (V.isObject(a[attr])) {\n                    // `style` in `a` is an object but it's a string in `b`.\n                    // Convert the style represented as a string to an object in `b`.\n                    a[attr] = V.mergeAttrs(a[attr], V.styleToObject(b[attr]));\n                } else if (V.isObject(b[attr])) {\n                    // `style` in `a` is a string, in `b` it's an object.\n                    a[attr] = V.mergeAttrs(V.styleToObject(a[attr]), b[attr]);\n                } else {\n                    // Both styles are strings.\n                    a[attr] = V.mergeAttrs(V.styleToObject(a[attr]), V.styleToObject(b[attr]));\n                }\n            } else {\n                a[attr] = b[attr];\n            }\n        }\n        return a;\n    };\n    V.annotateString = function(t, annotations, opt) {\n        annotations = annotations || [];\n        opt = opt || {};\n        var offset = opt.offset || 0;\n        var compacted = [];\n        var batch;\n        var ret = [];\n        var item;\n        var prev;\n        for(var i = 0; i < t.length; i++){\n            item = ret[i] = t[i];\n            for(var j = 0; j < annotations.length; j++){\n                var annotation = annotations[j];\n                var start = annotation.start + offset;\n                var end = annotation.end + offset;\n                if (i >= start && i < end) {\n                    // Annotation applies.\n                    if (V.isObject(item)) {\n                        // There is more than one annotation to be applied => Merge attributes.\n                        item.attrs = V.mergeAttrs(V.mergeAttrs({}, item.attrs), annotation.attrs);\n                    } else {\n                        item = ret[i] = {\n                            t: t[i],\n                            attrs: annotation.attrs\n                        };\n                    }\n                    if (opt.includeAnnotationIndices) {\n                        (item.annotations || (item.annotations = [])).push(j);\n                    }\n                }\n            }\n            prev = ret[i - 1];\n            if (!prev) {\n                batch = item;\n            } else if (V.isObject(item) && V.isObject(prev)) {\n                // Both previous item and the current one are annotations. If the attributes\n                // didn't change, merge the text.\n                if (JSON.stringify(item.attrs) === JSON.stringify(prev.attrs)) {\n                    batch.t += item.t;\n                } else {\n                    compacted.push(batch);\n                    batch = item;\n                }\n            } else if (V.isObject(item)) {\n                // Previous item was a string, current item is an annotation.\n                compacted.push(batch);\n                batch = item;\n            } else if (V.isObject(prev)) {\n                // Previous item was an annotation, current item is a string.\n                compacted.push(batch);\n                batch = item;\n            } else {\n                // Both previous and current item are strings.\n                batch = (batch || \"\") + item;\n            }\n        }\n        if (batch) {\n            compacted.push(batch);\n        }\n        return compacted;\n    };\n    V.findAnnotationsAtIndex = function(annotations, index) {\n        var found = [];\n        if (annotations) {\n            annotations.forEach(function(annotation) {\n                if (annotation.start < index && index <= annotation.end) {\n                    found.push(annotation);\n                }\n            });\n        }\n        return found;\n    };\n    V.findAnnotationsBetweenIndexes = function(annotations, start, end) {\n        var found = [];\n        if (annotations) {\n            annotations.forEach(function(annotation) {\n                if (start >= annotation.start && start < annotation.end || end > annotation.start && end <= annotation.end || annotation.start >= start && annotation.end < end) {\n                    found.push(annotation);\n                }\n            });\n        }\n        return found;\n    };\n    // Shift all the text annotations after character `index` by `offset` positions.\n    V.shiftAnnotations = function(annotations, index, offset) {\n        if (annotations) {\n            annotations.forEach(function(annotation) {\n                if (annotation.start < index && annotation.end >= index) {\n                    annotation.end += offset;\n                } else if (annotation.start >= index) {\n                    annotation.start += offset;\n                    annotation.end += offset;\n                }\n            });\n        }\n        return annotations;\n    };\n    V.convertLineToPathData = function(line) {\n        line = V(line);\n        var d = [\n            \"M\",\n            line.attr(\"x1\"),\n            line.attr(\"y1\"),\n            \"L\",\n            line.attr(\"x2\"),\n            line.attr(\"y2\")\n        ].join(\" \");\n        return d;\n    };\n    V.convertPolygonToPathData = function(polygon) {\n        var points = V.getPointsFromSvgNode(polygon);\n        if (points.length === 0) return null;\n        return V.svgPointsToPath(points) + \" Z\";\n    };\n    V.convertPolylineToPathData = function(polyline) {\n        var points = V.getPointsFromSvgNode(polyline);\n        if (points.length === 0) return null;\n        return V.svgPointsToPath(points);\n    };\n    V.svgPointsToPath = function(points) {\n        for(var i = 0, n = points.length; i < n; i++){\n            points[i] = points[i].x + \" \" + points[i].y;\n        }\n        return \"M \" + points.join(\" L\");\n    };\n    V.getPointsFromSvgNode = function(node) {\n        node = V.toNode(node);\n        var points = [];\n        var nodePoints = node.points;\n        if (nodePoints) {\n            for(var i = 0, n = nodePoints.numberOfItems; i < n; i++){\n                points.push(nodePoints.getItem(i));\n            }\n        }\n        return points;\n    };\n    V.KAPPA = 0.551784;\n    V.convertCircleToPathData = function(circle) {\n        circle = V(circle);\n        var cx = parseFloat(circle.attr(\"cx\")) || 0;\n        var cy = parseFloat(circle.attr(\"cy\")) || 0;\n        var r = parseFloat(circle.attr(\"r\"));\n        var cd = r * V.KAPPA; // Control distance.\n        var d = [\n            \"M\",\n            cx,\n            cy - r,\n            \"C\",\n            cx + cd,\n            cy - r,\n            cx + r,\n            cy - cd,\n            cx + r,\n            cy,\n            \"C\",\n            cx + r,\n            cy + cd,\n            cx + cd,\n            cy + r,\n            cx,\n            cy + r,\n            \"C\",\n            cx - cd,\n            cy + r,\n            cx - r,\n            cy + cd,\n            cx - r,\n            cy,\n            \"C\",\n            cx - r,\n            cy - cd,\n            cx - cd,\n            cy - r,\n            cx,\n            cy - r,\n            \"Z\"\n        ].join(\" \");\n        return d;\n    };\n    V.convertEllipseToPathData = function(ellipse) {\n        ellipse = V(ellipse);\n        var cx = parseFloat(ellipse.attr(\"cx\")) || 0;\n        var cy = parseFloat(ellipse.attr(\"cy\")) || 0;\n        var rx = parseFloat(ellipse.attr(\"rx\"));\n        var ry = parseFloat(ellipse.attr(\"ry\")) || rx;\n        var cdx = rx * V.KAPPA; // Control distance x.\n        var cdy = ry * V.KAPPA; // Control distance y.\n        var d = [\n            \"M\",\n            cx,\n            cy - ry,\n            \"C\",\n            cx + cdx,\n            cy - ry,\n            cx + rx,\n            cy - cdy,\n            cx + rx,\n            cy,\n            \"C\",\n            cx + rx,\n            cy + cdy,\n            cx + cdx,\n            cy + ry,\n            cx,\n            cy + ry,\n            \"C\",\n            cx - cdx,\n            cy + ry,\n            cx - rx,\n            cy + cdy,\n            cx - rx,\n            cy,\n            \"C\",\n            cx - rx,\n            cy - cdy,\n            cx - cdx,\n            cy - ry,\n            cx,\n            cy - ry,\n            \"Z\"\n        ].join(\" \");\n        return d;\n    };\n    V.convertRectToPathData = function(rect) {\n        rect = V(rect);\n        return V.rectToPath({\n            x: parseFloat(rect.attr(\"x\")) || 0,\n            y: parseFloat(rect.attr(\"y\")) || 0,\n            width: parseFloat(rect.attr(\"width\")) || 0,\n            height: parseFloat(rect.attr(\"height\")) || 0,\n            rx: parseFloat(rect.attr(\"rx\")) || 0,\n            ry: parseFloat(rect.attr(\"ry\")) || 0\n        });\n    };\n    // Convert a rectangle to SVG path commands. `r` is an object of the form:\n    // `{ x: [number], y: [number], width: [number], height: [number], top-ry: [number], top-ry: [number], bottom-rx: [number], bottom-ry: [number] }`,\n    // where `x, y, width, height` are the usual rectangle attributes and [top-/bottom-]rx/ry allows for\n    // specifying radius of the rectangle for all its sides (as opposed to the built-in SVG rectangle\n    // that has only `rx` and `ry` attributes).\n    V.rectToPath = function(r) {\n        var d;\n        var x = r.x;\n        var y = r.y;\n        var width = r.width;\n        var height = r.height;\n        var topRx = min(r.rx || r[\"top-rx\"] || 0, width / 2);\n        var bottomRx = min(r.rx || r[\"bottom-rx\"] || 0, width / 2);\n        var topRy = min(r.ry || r[\"top-ry\"] || 0, height / 2);\n        var bottomRy = min(r.ry || r[\"bottom-ry\"] || 0, height / 2);\n        if (topRx || bottomRx || topRy || bottomRy) {\n            d = [\n                \"M\",\n                x,\n                y + topRy,\n                \"v\",\n                height - topRy - bottomRy,\n                \"a\",\n                bottomRx,\n                bottomRy,\n                0,\n                0,\n                0,\n                bottomRx,\n                bottomRy,\n                \"h\",\n                width - 2 * bottomRx,\n                \"a\",\n                bottomRx,\n                bottomRy,\n                0,\n                0,\n                0,\n                bottomRx,\n                -bottomRy,\n                \"v\",\n                -(height - bottomRy - topRy),\n                \"a\",\n                topRx,\n                topRy,\n                0,\n                0,\n                0,\n                -topRx,\n                -topRy,\n                \"h\",\n                -(width - 2 * topRx),\n                \"a\",\n                topRx,\n                topRy,\n                0,\n                0,\n                0,\n                -topRx,\n                topRy,\n                \"Z\"\n            ];\n        } else {\n            d = [\n                \"M\",\n                x,\n                y,\n                \"H\",\n                x + width,\n                \"V\",\n                y + height,\n                \"H\",\n                x,\n                \"V\",\n                y,\n                \"Z\"\n            ];\n        }\n        return d.join(\" \");\n    };\n    // Take a path data string\n    // Return a normalized path data string\n    // If data cannot be parsed, return 'M 0 0'\n    // Adapted from Rappid normalizePath polyfill\n    // Highly inspired by Raphael Library (www.raphael.com)\n    V.normalizePathData = function() {\n        var spaces = \"\t\\n\\v\\f\\r \\xa0 ᠎             　\\u2028\\u2029\";\n        var pathCommand = new RegExp(\"([a-z])[\" + spaces + \",]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[\" + spaces + \"]*,?[\" + spaces + \"]*)+)\", \"ig\");\n        var pathValues = new RegExp(\"(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[\" + spaces + \"]*,?[\" + spaces + \"]*\", \"ig\");\n        var math = Math;\n        var PI = math.PI;\n        var sin = math.sin;\n        var cos = math.cos;\n        var tan = math.tan;\n        var asin = math.asin;\n        var sqrt = math.sqrt;\n        var abs = math.abs;\n        function q2c(x1, y1, ax, ay, x2, y2) {\n            var _13 = 1 / 3;\n            var _23 = 2 / 3;\n            return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n        }\n        function rotate(x, y, rad) {\n            var X = x * cos(rad) - y * sin(rad);\n            var Y = x * sin(rad) + y * cos(rad);\n            return {\n                x: X,\n                y: Y\n            };\n        }\n        function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n            // for more information of where this math came from visit:\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n            var _120 = PI * 120 / 180;\n            var rad = PI / 180 * (+angle || 0);\n            var res = [];\n            var xy;\n            if (!recursive) {\n                xy = rotate(x1, y1, -rad);\n                x1 = xy.x;\n                y1 = xy.y;\n                xy = rotate(x2, y2, -rad);\n                x2 = xy.x;\n                y2 = xy.y;\n                var x = (x1 - x2) / 2;\n                var y = (y1 - y2) / 2;\n                var h = x * x / (rx * rx) + y * y / (ry * ry);\n                if (h > 1) {\n                    h = sqrt(h);\n                    rx = h * rx;\n                    ry = h * ry;\n                }\n                var rx2 = rx * rx;\n                var ry2 = ry * ry;\n                var k = (large_arc_flag == sweep_flag ? -1 : 1) * sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n                var cx = k * rx * y / ry + (x1 + x2) / 2;\n                var cy = k * -ry * x / rx + (y1 + y2) / 2;\n                var f1 = asin(((y1 - cy) / ry).toFixed(9));\n                var f2 = asin(((y2 - cy) / ry).toFixed(9));\n                f1 = x1 < cx ? PI - f1 : f1;\n                f2 = x2 < cx ? PI - f2 : f2;\n                if (f1 < 0) f1 = PI * 2 + f1;\n                if (f2 < 0) f2 = PI * 2 + f2;\n                if (sweep_flag && f1 > f2) f1 = f1 - PI * 2;\n                if (!sweep_flag && f2 > f1) f2 = f2 - PI * 2;\n            } else {\n                f1 = recursive[0];\n                f2 = recursive[1];\n                cx = recursive[2];\n                cy = recursive[3];\n            }\n            var df = f2 - f1;\n            if (abs(df) > _120) {\n                var f2old = f2;\n                var x2old = x2;\n                var y2old = y2;\n                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n                x2 = cx + rx * cos(f2);\n                y2 = cy + ry * sin(f2);\n                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [\n                    f2,\n                    f2old,\n                    cx,\n                    cy\n                ]);\n            }\n            df = f2 - f1;\n            var c1 = cos(f1);\n            var s1 = sin(f1);\n            var c2 = cos(f2);\n            var s2 = sin(f2);\n            var t = tan(df / 4);\n            var hx = 4 / 3 * (rx * t);\n            var hy = 4 / 3 * (ry * t);\n            var m1 = [\n                x1,\n                y1\n            ];\n            var m2 = [\n                x1 + hx * s1,\n                y1 - hy * c1\n            ];\n            var m3 = [\n                x2 + hx * s2,\n                y2 - hy * c2\n            ];\n            var m4 = [\n                x2,\n                y2\n            ];\n            m2[0] = 2 * m1[0] - m2[0];\n            m2[1] = 2 * m1[1] - m2[1];\n            if (recursive) {\n                return [\n                    m2,\n                    m3,\n                    m4\n                ].concat(res);\n            } else {\n                res = [\n                    m2,\n                    m3,\n                    m4\n                ].concat(res).join().split(\",\");\n                var newres = [];\n                var ii = res.length;\n                for(var i = 0; i < ii; i++){\n                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n                }\n                return newres;\n            }\n        }\n        function parsePathString(pathString) {\n            if (!pathString) return null;\n            var paramCounts = {\n                a: 7,\n                c: 6,\n                h: 1,\n                l: 2,\n                m: 2,\n                q: 4,\n                s: 4,\n                t: 2,\n                v: 1,\n                z: 0\n            };\n            var data = [];\n            String(pathString).replace(pathCommand, function(a, b, c) {\n                var params = [];\n                var name = b.toLowerCase();\n                c.replace(pathValues, function(a, b) {\n                    if (b) params.push(+b);\n                });\n                if (name === \"m\" && params.length > 2) {\n                    data.push([\n                        b\n                    ].concat(params.splice(0, 2)));\n                    name = \"l\";\n                    b = b === \"m\" ? \"l\" : \"L\";\n                }\n                while(params.length >= paramCounts[name]){\n                    data.push([\n                        b\n                    ].concat(params.splice(0, paramCounts[name])));\n                    if (!paramCounts[name]) break;\n                }\n            });\n            return data;\n        }\n        function pathToAbsolute(pathArray) {\n            if (!Array.isArray(pathArray) || !Array.isArray(pathArray && pathArray[0])) {\n                pathArray = parsePathString(pathArray);\n            }\n            // if invalid string, return 'M 0 0'\n            if (!pathArray || !pathArray.length) return [\n                [\n                    \"M\",\n                    0,\n                    0\n                ]\n            ];\n            var res = [];\n            var x = 0;\n            var y = 0;\n            var mx = 0;\n            var my = 0;\n            var start = 0;\n            var pa0;\n            var ii = pathArray.length;\n            for(var i = start; i < ii; i++){\n                var r = [];\n                res.push(r);\n                var pa = pathArray[i];\n                pa0 = pa[0];\n                if (pa0 != pa0.toUpperCase()) {\n                    r[0] = pa0.toUpperCase();\n                    var jj;\n                    var j;\n                    switch(r[0]){\n                        case \"A\":\n                            r[1] = pa[1];\n                            r[2] = pa[2];\n                            r[3] = pa[3];\n                            r[4] = pa[4];\n                            r[5] = pa[5];\n                            r[6] = +pa[6] + x;\n                            r[7] = +pa[7] + y;\n                            break;\n                        case \"V\":\n                            r[1] = +pa[1] + y;\n                            break;\n                        case \"H\":\n                            r[1] = +pa[1] + x;\n                            break;\n                        case \"M\":\n                            mx = +pa[1] + x;\n                            my = +pa[2] + y;\n                            jj = pa.length;\n                            for(j = 1; j < jj; j++){\n                                r[j] = +pa[j] + (j % 2 ? x : y);\n                            }\n                            break;\n                        default:\n                            jj = pa.length;\n                            for(j = 1; j < jj; j++){\n                                r[j] = +pa[j] + (j % 2 ? x : y);\n                            }\n                            break;\n                    }\n                } else {\n                    var kk = pa.length;\n                    for(var k = 0; k < kk; k++){\n                        r[k] = pa[k];\n                    }\n                }\n                switch(r[0]){\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                        break;\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                        break;\n                }\n            }\n            return res;\n        }\n        function normalize(path) {\n            var p = pathToAbsolute(path);\n            var attrs = {\n                x: 0,\n                y: 0,\n                bx: 0,\n                by: 0,\n                X: 0,\n                Y: 0,\n                qx: null,\n                qy: null\n            };\n            function processPath(path, d, pcom) {\n                var nx, ny;\n                if (!path) return [\n                    \"C\",\n                    d.x,\n                    d.y,\n                    d.x,\n                    d.y,\n                    d.x,\n                    d.y\n                ];\n                if (!(path[0] in {\n                    T: 1,\n                    Q: 1\n                })) {\n                    d.qx = null;\n                    d.qy = null;\n                }\n                switch(path[0]){\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n                            // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n                            // \"If either rx or ry is 0, then this arc is treated as a\n                            // straight line segment (a \"lineto\") joining the endpoints.\"\n                            path = [\n                                \"L\",\n                                path[6],\n                                path[7]\n                            ];\n                        } else {\n                            path = [\n                                \"C\"\n                            ].concat(a2c.apply(0, [\n                                d.x,\n                                d.y\n                            ].concat(path.slice(1))));\n                        }\n                        break;\n                    case \"S\":\n                        if (pcom === \"C\" || pcom === \"S\") {\n                            nx = d.x * 2 - d.bx; // And reflect the previous\n                            ny = d.y * 2 - d.by; // command's control point relative to the current point.\n                        } else {\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\n                            \"C\",\n                            nx,\n                            ny\n                        ].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom === \"Q\" || pcom === \"T\") {\n                            d.qx = d.x * 2 - d.qx; // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy; // to case 'S'.\n                        } else {\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\n                            \"C\"\n                        ].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\n                            \"C\"\n                        ].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"H\":\n                        path = [\n                            \"L\"\n                        ].concat(path[1], d.y);\n                        break;\n                    case \"V\":\n                        path = [\n                            \"L\"\n                        ].concat(d.x, path[1]);\n                        break;\n                    case \"L\":\n                        break;\n                    case \"Z\":\n                        break;\n                }\n                return path;\n            }\n            function fixArc(pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while(pi.length){\n                        pcoms[i] = \"A\"; // if created multiple 'C's, their original seg is saved\n                        pp.splice(i++, 0, [\n                            \"C\"\n                        ].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = p.length;\n                }\n            }\n            var pcoms = []; // path commands of original path p\n            var pfirst = \"\"; // temporary holder for original path command\n            var pcom = \"\"; // holder for previous path command of original path\n            var ii = p.length;\n            for(var i = 0; i < ii; i++){\n                if (p[i]) pfirst = p[i][0]; // save current path command\n                if (pfirst !== \"C\") {\n                    pcoms[i] = pfirst; // Save current path command\n                    if (i > 0) pcom = pcoms[i - 1]; // Get previous path command pcom\n                }\n                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n                if (pcoms[i] !== \"A\" && pfirst === \"C\") pcoms[i] = \"C\"; // 'A' is the only command\n                // which may produce multiple 'C's\n                // so we have to make sure that 'C' is also 'C' in original path\n                fixArc(p, i); // fixArc adds also the right amount of 'A's to pcoms\n                var seg = p[i];\n                var seglen = seg.length;\n                attrs.x = seg[seglen - 2];\n                attrs.y = seg[seglen - 1];\n                attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n                attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n            }\n            // make sure normalized path data string starts with an M segment\n            if (!p[0][0] || p[0][0] !== \"M\") {\n                p.unshift([\n                    \"M\",\n                    0,\n                    0\n                ]);\n            }\n            return p;\n        }\n        return function(pathData) {\n            return normalize(pathData).join(\",\").split(\",\").join(\" \");\n        };\n    }();\n    V.namespace = ns;\n    V.g = _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__;\n    return V;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (V);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/V/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/anchors/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/jointjs/src/anchors/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bottom: () => (/* binding */ bottom),\n/* harmony export */   bottomLeft: () => (/* binding */ bottomLeft),\n/* harmony export */   bottomRight: () => (/* binding */ bottomRight),\n/* harmony export */   center: () => (/* binding */ center),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   midSide: () => (/* binding */ midSide),\n/* harmony export */   modelCenter: () => (/* binding */ modelCenter),\n/* harmony export */   perpendicular: () => (/* binding */ perpendicular),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   top: () => (/* binding */ top),\n/* harmony export */   topLeft: () => (/* binding */ topLeft),\n/* harmony export */   topRight: () => (/* binding */ topRight)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _linkAnchors_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../linkAnchors/index.mjs */ \"(ssr)/./node_modules/jointjs/src/linkAnchors/index.mjs\");\n\n\n\nfunction bboxWrapper(method) {\n    return function(view, magnet, ref, opt) {\n        var rotate = !!opt.rotate;\n        var bbox = rotate ? view.getNodeUnrotatedBBox(magnet) : view.getNodeBBox(magnet);\n        var anchor = bbox[method]();\n        var dx = opt.dx;\n        if (dx) {\n            var dxPercentage = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isPercentage(dx);\n            dx = parseFloat(dx);\n            if (isFinite(dx)) {\n                if (dxPercentage) {\n                    dx /= 100;\n                    dx *= bbox.width;\n                }\n                anchor.x += dx;\n            }\n        }\n        var dy = opt.dy;\n        if (dy) {\n            var dyPercentage = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isPercentage(dy);\n            dy = parseFloat(dy);\n            if (isFinite(dy)) {\n                if (dyPercentage) {\n                    dy /= 100;\n                    dy *= bbox.height;\n                }\n                anchor.y += dy;\n            }\n        }\n        return rotate ? anchor.rotate(view.model.getBBox().center(), -view.model.angle()) : anchor;\n    };\n}\nfunction _perpendicular(view, magnet, refPoint, opt) {\n    var angle = view.model.angle();\n    var bbox = view.getNodeBBox(magnet);\n    var anchor = bbox.center();\n    var topLeft = bbox.origin();\n    var bottomRight = bbox.corner();\n    var padding = opt.padding;\n    if (!isFinite(padding)) padding = 0;\n    if (topLeft.y + padding <= refPoint.y && refPoint.y <= bottomRight.y - padding) {\n        var dy = refPoint.y - anchor.y;\n        anchor.x += angle === 0 || angle === 180 ? 0 : dy * 1 / Math.tan((0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toRad)(angle));\n        anchor.y += dy;\n    } else if (topLeft.x + padding <= refPoint.x && refPoint.x <= bottomRight.x - padding) {\n        var dx = refPoint.x - anchor.x;\n        anchor.y += angle === 90 || angle === 270 ? 0 : dx * Math.tan((0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toRad)(angle));\n        anchor.x += dx;\n    }\n    return anchor;\n}\nfunction _midSide(view, magnet, refPoint, opt) {\n    var rotate = !!opt.rotate;\n    var bbox, angle, center;\n    if (rotate) {\n        bbox = view.getNodeUnrotatedBBox(magnet);\n        center = view.model.getBBox().center();\n        angle = view.model.angle();\n    } else {\n        bbox = view.getNodeBBox(magnet);\n    }\n    var padding = opt.padding;\n    if (isFinite(padding)) bbox.inflate(padding);\n    if (rotate) refPoint.rotate(center, angle);\n    var side = bbox.sideNearestToPoint(refPoint);\n    var anchor;\n    switch(side){\n        case \"left\":\n            anchor = bbox.leftMiddle();\n            break;\n        case \"right\":\n            anchor = bbox.rightMiddle();\n            break;\n        case \"top\":\n            anchor = bbox.topMiddle();\n            break;\n        case \"bottom\":\n            anchor = bbox.bottomMiddle();\n            break;\n    }\n    return rotate ? anchor.rotate(center, -angle) : anchor;\n}\n// Can find anchor from model, when there is no selector or the link end\n// is connected to a port\nfunction _modelCenter(view, _magnet, _refPoint, opt, endType) {\n    return view.model.getPointFromConnectedLink(this.model, endType).offset(opt.dx, opt.dy);\n}\n//joint.anchors\nconst center = bboxWrapper(\"center\");\nconst top = bboxWrapper(\"topMiddle\");\nconst bottom = bboxWrapper(\"bottomMiddle\");\nconst left = bboxWrapper(\"leftMiddle\");\nconst right = bboxWrapper(\"rightMiddle\");\nconst topLeft = bboxWrapper(\"origin\");\nconst topRight = bboxWrapper(\"topRight\");\nconst bottomLeft = bboxWrapper(\"bottomLeft\");\nconst bottomRight = bboxWrapper(\"corner\");\nconst perpendicular = (0,_linkAnchors_index_mjs__WEBPACK_IMPORTED_MODULE_2__.resolveRef)(_perpendicular);\nconst midSide = (0,_linkAnchors_index_mjs__WEBPACK_IMPORTED_MODULE_2__.resolveRef)(_midSide);\nconst modelCenter = _modelCenter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvYW5jaG9ycy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBDO0FBQ0g7QUFDZTtBQUV0RCxTQUFTRyxZQUFZQyxNQUFNO0lBRXZCLE9BQU8sU0FBU0MsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztRQUVsQyxJQUFJQyxTQUFTLENBQUMsQ0FBQ0QsSUFBSUMsTUFBTTtRQUN6QixJQUFJQyxPQUFPLFNBQVdMLEtBQUtNLG9CQUFvQixDQUFDTCxVQUFVRCxLQUFLTyxXQUFXLENBQUNOO1FBQzNFLElBQUlPLFNBQVNILElBQUksQ0FBQ04sT0FBTztRQUV6QixJQUFJVSxLQUFLTixJQUFJTSxFQUFFO1FBQ2YsSUFBSUEsSUFBSTtZQUNKLElBQUlDLGVBQWVmLHlEQUFpQixDQUFDYztZQUNyQ0EsS0FBS0csV0FBV0g7WUFDaEIsSUFBSUksU0FBU0osS0FBSztnQkFDZCxJQUFJQyxjQUFjO29CQUNkRCxNQUFNO29CQUNOQSxNQUFNSixLQUFLUyxLQUFLO2dCQUNwQjtnQkFDQU4sT0FBT08sQ0FBQyxJQUFJTjtZQUNoQjtRQUNKO1FBRUEsSUFBSU8sS0FBS2IsSUFBSWEsRUFBRTtRQUNmLElBQUlBLElBQUk7WUFDSixJQUFJQyxlQUFldEIseURBQWlCLENBQUNxQjtZQUNyQ0EsS0FBS0osV0FBV0k7WUFDaEIsSUFBSUgsU0FBU0csS0FBSztnQkFDZCxJQUFJQyxjQUFjO29CQUNkRCxNQUFNO29CQUNOQSxNQUFNWCxLQUFLYSxNQUFNO2dCQUNyQjtnQkFDQVYsT0FBT1csQ0FBQyxJQUFJSDtZQUNoQjtRQUNKO1FBRUEsT0FBTyxTQUFXUixPQUFPSixNQUFNLENBQUNKLEtBQUtvQixLQUFLLENBQUNDLE9BQU8sR0FBR0MsTUFBTSxJQUFJLENBQUN0QixLQUFLb0IsS0FBSyxDQUFDRyxLQUFLLE1BQU1mO0lBQzFGO0FBQ0o7QUFFQSxTQUFTZ0IsZUFBZXhCLElB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QUFZLGFBQWE7QUFDckMsTUFBTWtELFNBQVNsRCxZQUFZLGdCQUFnQjtBQUMzQyxNQUFNbUQsT0FBT25ELFlBQVksY0FBYztBQUN2QyxNQUFNb0QsUUFBUXBELFlBQVksZUFBZTtBQUN6QyxNQUFNNEIsVUFBVTVCLFlBQVksVUFBVTtBQUN0QyxNQUFNcUQsV0FBV3JELFlBQVksWUFBWTtBQUN6QyxNQUFNc0QsYUFBYXRELFlBQVksY0FBYztBQUM3QyxNQUFNOEIsY0FBYzlCLFlBQVksVUFBVTtBQUMxQyxNQUFNdUQsZ0JBQWdCeEQsa0VBQVVBLENBQUMyQixnQkFBZ0I7QUFDakQsTUFBTThCLFVBQVV6RCxrRUFBVUEsQ0FBQ29DLFVBQVU7QUFDckMsTUFBTXNCLGNBQWNkLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9hbmNob3JzL2luZGV4Lm1qcz9hZmIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdG9SYWQgfSBmcm9tICcuLi9nL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlUmVmIH0gZnJvbSAnLi4vbGlua0FuY2hvcnMvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gYmJveFdyYXBwZXIobWV0aG9kKSB7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24odmlldywgbWFnbmV0LCByZWYsIG9wdCkge1xuXG4gICAgICAgIHZhciByb3RhdGUgPSAhIW9wdC5yb3RhdGU7XG4gICAgICAgIHZhciBiYm94ID0gKHJvdGF0ZSkgPyB2aWV3LmdldE5vZGVVbnJvdGF0ZWRCQm94KG1hZ25ldCkgOiB2aWV3LmdldE5vZGVCQm94KG1hZ25ldCk7XG4gICAgICAgIHZhciBhbmNob3IgPSBiYm94W21ldGhvZF0oKTtcblxuICAgICAgICB2YXIgZHggPSBvcHQuZHg7XG4gICAgICAgIGlmIChkeCkge1xuICAgICAgICAgICAgdmFyIGR4UGVyY2VudGFnZSA9IHV0aWwuaXNQZXJjZW50YWdlKGR4KTtcbiAgICAgICAgICAgIGR4ID0gcGFyc2VGbG9hdChkeCk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZHgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGR4UGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgICAgICBkeCAvPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgIGR4ICo9IGJib3gud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFuY2hvci54ICs9IGR4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGR5ID0gb3B0LmR5O1xuICAgICAgICBpZiAoZHkpIHtcbiAgICAgICAgICAgIHZhciBkeVBlcmNlbnRhZ2UgPSB1dGlsLmlzUGVyY2VudGFnZShkeSk7XG4gICAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQoZHkpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGR5KSkge1xuICAgICAgICAgICAgICAgIGlmIChkeVBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZHkgLz0gMTAwO1xuICAgICAgICAgICAgICAgICAgICBkeSAqPSBiYm94LmhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5jaG9yLnkgKz0gZHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHJvdGF0ZSkgPyBhbmNob3Iucm90YXRlKHZpZXcubW9kZWwuZ2V0QkJveCgpLmNlbnRlcigpLCAtdmlldy5tb2RlbC5hbmdsZSgpKSA6IGFuY2hvcjtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBfcGVycGVuZGljdWxhcih2aWV3LCBtYWduZXQsIHJlZlBvaW50LCBvcHQpIHtcblxuICAgIHZhciBhbmdsZSA9IHZpZXcubW9kZWwuYW5nbGUoKTtcbiAgICB2YXIgYmJveCA9IHZpZXcuZ2V0Tm9kZUJCb3gobWFnbmV0KTtcbiAgICB2YXIgYW5jaG9yID0gYmJveC5jZW50ZXIoKTtcbiAgICB2YXIgdG9wTGVmdCA9IGJib3gub3JpZ2luKCk7XG4gICAgdmFyIGJvdHRvbVJpZ2h0ID0gYmJveC5jb3JuZXIoKTtcblxuICAgIHZhciBwYWRkaW5nID0gb3B0LnBhZGRpbmc7XG4gICAgaWYgKCFpc0Zpbml0ZShwYWRkaW5nKSkgcGFkZGluZyA9IDA7XG5cbiAgICBpZiAoKHRvcExlZnQueSArIHBhZGRpbmcpIDw9IHJlZlBvaW50LnkgJiYgcmVmUG9pbnQueSA8PSAoYm90dG9tUmlnaHQueSAtIHBhZGRpbmcpKSB7XG4gICAgICAgIHZhciBkeSA9IChyZWZQb2ludC55IC0gYW5jaG9yLnkpO1xuICAgICAgICBhbmNob3IueCArPSAoYW5nbGUgPT09IDAgfHwgYW5nbGUgPT09IDE4MCkgPyAwIDogZHkgKiAxIC8gTWF0aC50YW4odG9SYWQoYW5nbGUpKTtcbiAgICAgICAgYW5jaG9yLnkgKz0gZHk7XG4gICAgfSBlbHNlIGlmICgodG9wTGVmdC54ICsgcGFkZGluZykgPD0gcmVmUG9pbnQueCAmJiByZWZQb2ludC54IDw9IChib3R0b21SaWdodC54IC0gcGFkZGluZykpIHtcbiAgICAgICAgdmFyIGR4ID0gKHJlZlBvaW50LnggLSBhbmNob3IueCk7XG4gICAgICAgIGFuY2hvci55ICs9IChhbmdsZSA9PT0gOTAgfHwgYW5nbGUgPT09IDI3MCkgPyAwIDogZHggKiBNYXRoLnRhbih0b1JhZChhbmdsZSkpO1xuICAgICAgICBhbmNob3IueCArPSBkeDtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5jaG9yO1xufVxuXG5mdW5jdGlvbiBfbWlkU2lkZSh2aWV3LCBtYWduZXQsIHJlZlBvaW50LCBvcHQpIHtcblxuICAgIHZhciByb3RhdGUgPSAhIW9wdC5yb3RhdGU7XG4gICAgdmFyIGJib3gsIGFuZ2xlLCBjZW50ZXI7XG4gICAgaWYgKHJvdGF0ZSkge1xuICAgICAgICBiYm94ID0gdmlldy5nZXROb2RlVW5yb3RhdGVkQkJveChtYWduZXQpO1xuICAgICAgICBjZW50ZXIgPSB2aWV3Lm1vZGVsLmdldEJCb3goKS5jZW50ZXIoKTtcbiAgICAgICAgYW5nbGUgPSB2aWV3Lm1vZGVsLmFuZ2xlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmJveCA9IHZpZXcuZ2V0Tm9kZUJCb3gobWFnbmV0KTtcbiAgICB9XG5cbiAgICB2YXIgcGFkZGluZyA9IG9wdC5wYWRkaW5nO1xuICAgIGlmIChpc0Zpbml0ZShwYWRkaW5nKSkgYmJveC5pbmZsYXRlKHBhZGRpbmcpO1xuXG4gICAgaWYgKHJvdGF0ZSkgcmVmUG9pbnQucm90YXRlKGNlbnRlciwgYW5nbGUpO1xuXG4gICAgdmFyIHNpZGUgPSBiYm94LnNpZGVOZWFyZXN0VG9Qb2ludChyZWZQb2ludCk7XG4gICAgdmFyIGFuY2hvcjtcbiAgICBzd2l0Y2ggKHNpZGUpIHtcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBhbmNob3IgPSBiYm94LmxlZnRNaWRkbGUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICBhbmNob3IgPSBiYm94LnJpZ2h0TWlkZGxlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGFuY2hvciA9IGJib3gudG9wTWlkZGxlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIGFuY2hvciA9IGJib3guYm90dG9tTWlkZGxlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gKHJvdGF0ZSkgPyBhbmNob3Iucm90YXRlKGNlbnRlciwgLWFuZ2xlKSA6IGFuY2hvcjtcbn1cblxuLy8gQ2FuIGZpbmQgYW5jaG9yIGZyb20gbW9kZWwsIHdoZW4gdGhlcmUgaXMgbm8gc2VsZWN0b3Igb3IgdGhlIGxpbmsgZW5kXG4vLyBpcyBjb25uZWN0ZWQgdG8gYSBwb3J0XG5mdW5jdGlvbiBfbW9kZWxDZW50ZXIodmlldywgX21hZ25ldCwgX3JlZlBvaW50LCBvcHQsIGVuZFR5cGUpIHtcbiAgICByZXR1cm4gdmlldy5tb2RlbC5nZXRQb2ludEZyb21Db25uZWN0ZWRMaW5rKHRoaXMubW9kZWwsIGVuZFR5cGUpLm9mZnNldChvcHQuZHgsIG9wdC5keSk7XG59XG5cbi8vam9pbnQuYW5jaG9yc1xuZXhwb3J0IGNvbnN0IGNlbnRlciA9IGJib3hXcmFwcGVyKCdjZW50ZXInKTtcbmV4cG9ydCBjb25zdCB0b3AgPSBiYm94V3JhcHBlcigndG9wTWlkZGxlJyk7XG5leHBvcnQgY29uc3QgYm90dG9tID0gYmJveFdyYXBwZXIoJ2JvdHRvbU1pZGRsZScpO1xuZXhwb3J0IGNvbnN0IGxlZnQgPSBiYm94V3JhcHBlcignbGVmdE1pZGRsZScpO1xuZXhwb3J0IGNvbnN0IHJpZ2h0ID0gYmJveFdyYXBwZXIoJ3JpZ2h0TWlkZGxlJyk7XG5leHBvcnQgY29uc3QgdG9wTGVmdCA9IGJib3hXcmFwcGVyKCdvcmlnaW4nKTtcbmV4cG9ydCBjb25zdCB0b3BSaWdodCA9IGJib3hXcmFwcGVyKCd0b3BSaWdodCcpO1xuZXhwb3J0IGNvbnN0IGJvdHRvbUxlZnQgPSBiYm94V3JhcHBlcignYm90dG9tTGVmdCcpO1xuZXhwb3J0IGNvbnN0IGJvdHRvbVJpZ2h0ID0gYmJveFdyYXBwZXIoJ2Nvcm5lcicpO1xuZXhwb3J0IGNvbnN0IHBlcnBlbmRpY3VsYXIgPSByZXNvbHZlUmVmKF9wZXJwZW5kaWN1bGFyKTtcbmV4cG9ydCBjb25zdCBtaWRTaWRlID0gcmVzb2x2ZVJlZihfbWlkU2lkZSk7XG5leHBvcnQgY29uc3QgbW9kZWxDZW50ZXIgPSBfbW9kZWxDZW50ZXI7XG5cbiJdLCJuYW1lcyI6WyJ1dGlsIiwidG9SYWQiLCJyZXNvbHZlUmVmIiwiYmJveFdyYXBwZXIiLCJtZXRob2QiLCJ2aWV3IiwibWFnbmV0IiwicmVmIiwib3B0Iiwicm90YXRlIiwiYmJveCIsImdldE5vZGVVbnJvdGF0ZWRCQm94IiwiZ2V0Tm9kZUJCb3giLCJhbmNob3IiLCJkeCIsImR4UGVyY2VudGFnZSIsImlzUGVyY2VudGFnZSIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsIndpZHRoIiwieCIsImR5IiwiZHlQZXJjZW50YWdlIiwiaGVpZ2h0IiwieSIsIm1vZGVsIiwiZ2V0QkJveCIsImNlbnRlciIsImFuZ2xlIiwiX3BlcnBlbmRpY3VsYXIiLCJyZWZQb2ludCIsInRvcExlZnQiLCJvcmlnaW4iLCJib3R0b21SaWdodCIsImNvcm5lciIsInBhZGRpbmciLCJNYXRoIiwidGFuIiwiX21pZFNpZGUiLCJpbmZsYXRlIiwic2lkZSIsInNpZGVOZWFyZXN0VG9Qb2ludCIsImxlZnRNaWRkbGUiLCJyaWdodE1pZGRsZSIsInRvcE1pZGRsZSIsImJvdHRvbU1pZGRsZSIsIl9tb2RlbENlbnRlciIsIl9tYWduZXQiLCJfcmVmUG9pbnQiLCJlbmRUeXBlIiwiZ2V0UG9pbnRGcm9tQ29ubmVjdGVkTGluayIsIm9mZnNldCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInRvcFJpZ2h0IiwiYm90dG9tTGVmdCIsInBlcnBlbmRpY3VsYXIiLCJtaWRTaWRlIiwibW9kZWxDZW50ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/anchors/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/config/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/jointjs/src/config/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\nconst config = {\n    // When set to `true` the cell selectors could be defined as CSS selectors.\n    // If not, only JSON Markup selectors are taken into account.\n    // export let useCSSSelectors = true;\n    useCSSSelectors: true,\n    // The class name prefix config is for advanced use only.\n    // Be aware that if you change the prefix, the JointJS CSS will no longer function properly.\n    // export let classNamePrefix = 'joint-';\n    // export let defaultTheme = 'default';\n    classNamePrefix: \"joint-\",\n    defaultTheme: \"default\",\n    // The maximum delay required for two consecutive touchend events to be interpreted\n    // as a double-tap.\n    doubleTapInterval: 300\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvY29uZmlnL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsU0FBUztJQUNsQiwyRUFBMkU7SUFDM0UsNkRBQTZEO0lBQzdELHFDQUFxQztJQUNyQ0MsaUJBQWlCO0lBQ2pCLHlEQUF5RDtJQUN6RCw0RkFBNEY7SUFDNUYseUNBQXlDO0lBQ3pDLHVDQUF1QztJQUN2Q0MsaUJBQWlCO0lBQ2pCQyxjQUFjO0lBQ2QsbUZBQW1GO0lBQ25GLG1CQUFtQjtJQUNuQkMsbUJBQW1CO0FBQ3ZCLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9jb25maWcvaW5kZXgubWpzPzBkYTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgICAvLyBXaGVuIHNldCB0byBgdHJ1ZWAgdGhlIGNlbGwgc2VsZWN0b3JzIGNvdWxkIGJlIGRlZmluZWQgYXMgQ1NTIHNlbGVjdG9ycy5cbiAgICAvLyBJZiBub3QsIG9ubHkgSlNPTiBNYXJrdXAgc2VsZWN0b3JzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQuXG4gICAgLy8gZXhwb3J0IGxldCB1c2VDU1NTZWxlY3RvcnMgPSB0cnVlO1xuICAgIHVzZUNTU1NlbGVjdG9yczogdHJ1ZSxcbiAgICAvLyBUaGUgY2xhc3MgbmFtZSBwcmVmaXggY29uZmlnIGlzIGZvciBhZHZhbmNlZCB1c2Ugb25seS5cbiAgICAvLyBCZSBhd2FyZSB0aGF0IGlmIHlvdSBjaGFuZ2UgdGhlIHByZWZpeCwgdGhlIEpvaW50SlMgQ1NTIHdpbGwgbm8gbG9uZ2VyIGZ1bmN0aW9uIHByb3Blcmx5LlxuICAgIC8vIGV4cG9ydCBsZXQgY2xhc3NOYW1lUHJlZml4ID0gJ2pvaW50LSc7XG4gICAgLy8gZXhwb3J0IGxldCBkZWZhdWx0VGhlbWUgPSAnZGVmYXVsdCc7XG4gICAgY2xhc3NOYW1lUHJlZml4OiAnam9pbnQtJyxcbiAgICBkZWZhdWx0VGhlbWU6ICdkZWZhdWx0JyxcbiAgICAvLyBUaGUgbWF4aW11bSBkZWxheSByZXF1aXJlZCBmb3IgdHdvIGNvbnNlY3V0aXZlIHRvdWNoZW5kIGV2ZW50cyB0byBiZSBpbnRlcnByZXRlZFxuICAgIC8vIGFzIGEgZG91YmxlLXRhcC5cbiAgICBkb3VibGVUYXBJbnRlcnZhbDogMzAwXG59O1xuIl0sIm5hbWVzIjpbImNvbmZpZyIsInVzZUNTU1NlbGVjdG9ycyIsImNsYXNzTmFtZVByZWZpeCIsImRlZmF1bHRUaGVtZSIsImRvdWJsZVRhcEludGVydmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/config/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectionPoints/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/jointjs/src/connectionPoints/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anchor: () => (/* binding */ anchor),\n/* harmony export */   bbox: () => (/* binding */ bbox),\n/* harmony export */   boundary: () => (/* binding */ boundary),\n/* harmony export */   rectangle: () => (/* binding */ rectangle)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/ellipse.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n\n\n\nfunction offsetPoint(p1, p2, offset) {\n    if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isPlainObject(offset)) {\n        const { x, y } = offset;\n        if (isFinite(y)) {\n            const line = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Line(p2, p1);\n            const { start, end } = line.parallel(y);\n            p2 = start;\n            p1 = end;\n        }\n        offset = x;\n    }\n    if (!isFinite(offset)) return p1;\n    var length = p1.distance(p2);\n    if (offset === 0 && length > 0) return p1;\n    return p1.move(p2, -Math.min(offset, length - 1));\n}\nfunction stroke(magnet) {\n    var stroke = magnet.getAttribute(\"stroke-width\");\n    if (stroke === null) return 0;\n    return parseFloat(stroke) || 0;\n}\nfunction alignLine(line, type, offset = 0) {\n    let coordinate, a, b, direction;\n    const { start, end } = line;\n    switch(type){\n        case \"left\":\n            coordinate = \"x\";\n            a = end;\n            b = start;\n            direction = -1;\n            break;\n        case \"right\":\n            coordinate = \"x\";\n            a = start;\n            b = end;\n            direction = 1;\n            break;\n        case \"top\":\n            coordinate = \"y\";\n            a = end;\n            b = start;\n            direction = -1;\n            break;\n        case \"bottom\":\n            coordinate = \"y\";\n            a = start;\n            b = end;\n            direction = 1;\n            break;\n        default:\n            return;\n    }\n    if (start[coordinate] < end[coordinate]) {\n        a[coordinate] = b[coordinate];\n    } else {\n        b[coordinate] = a[coordinate];\n    }\n    if (isFinite(offset)) {\n        a[coordinate] += direction * offset;\n        b[coordinate] += direction * offset;\n    }\n}\n// Connection Points\nfunction anchorConnectionPoint(line, _view, _magnet, opt) {\n    let { offset, alignOffset, align } = opt;\n    if (align) alignLine(line, align, alignOffset);\n    return offsetPoint(line.end, line.start, offset);\n}\nfunction bboxIntersection(line, view, magnet, opt) {\n    var bbox = view.getNodeBBox(magnet);\n    if (opt.stroke) bbox.inflate(stroke(magnet) / 2);\n    var intersections = line.intersect(bbox);\n    var cp = intersections ? line.start.chooseClosest(intersections) : line.end;\n    return offsetPoint(cp, line.start, opt.offset);\n}\nfunction rectangleIntersection(line, view, magnet, opt) {\n    var angle = view.model.angle();\n    if (angle === 0) {\n        return bboxIntersection(line, view, magnet, opt);\n    }\n    var bboxWORotation = view.getNodeUnrotatedBBox(magnet);\n    if (opt.stroke) bboxWORotation.inflate(stroke(magnet) / 2);\n    var center = bboxWORotation.center();\n    var lineWORotation = line.clone().rotate(center, angle);\n    var intersections = lineWORotation.setLength(1e6).intersect(bboxWORotation);\n    var cp = intersections ? lineWORotation.start.chooseClosest(intersections).rotate(center, -angle) : line.end;\n    return offsetPoint(cp, line.start, opt.offset);\n}\nfunction findShapeNode(magnet) {\n    if (!magnet) return null;\n    var node = magnet;\n    do {\n        var tagName = node.tagName;\n        if (typeof tagName !== \"string\") return null;\n        tagName = tagName.toUpperCase();\n        if (tagName === \"G\") {\n            node = node.firstElementChild;\n        } else if (tagName === \"TITLE\") {\n            node = node.nextElementSibling;\n        } else break;\n    }while (node);\n    return node;\n}\nvar BNDR_SUBDIVISIONS = \"segmentSubdivisons\";\nvar BNDR_SHAPE_BBOX = \"shapeBBox\";\nfunction boundaryIntersection(line, view, magnet, opt) {\n    var node, intersection;\n    var selector = opt.selector;\n    var anchor = line.end;\n    if (typeof selector === \"string\") {\n        node = view.findBySelector(selector)[0];\n    } else if (selector === false) {\n        node = magnet;\n    } else if (Array.isArray(selector)) {\n        node = _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.getByPath(magnet, selector);\n    } else {\n        node = findShapeNode(magnet);\n    }\n    if (!_V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isSVGGraphicsElement(node)) {\n        if (node === magnet || !_V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isSVGGraphicsElement(magnet)) return anchor;\n        node = magnet;\n    }\n    var localShape = view.getNodeShape(node);\n    var magnetMatrix = view.getNodeMatrix(node);\n    var translateMatrix = view.getRootTranslateMatrix();\n    var rotateMatrix = view.getRootRotateMatrix();\n    var targetMatrix = translateMatrix.multiply(rotateMatrix).multiply(magnetMatrix);\n    var localMatrix = targetMatrix.inverse();\n    var localLine = _V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].transformLine(line, localMatrix);\n    var localRef = localLine.start.clone();\n    var data = view.getNodeData(node);\n    if (opt.insideout === false) {\n        if (!data[BNDR_SHAPE_BBOX]) data[BNDR_SHAPE_BBOX] = localShape.bbox();\n        var localBBox = data[BNDR_SHAPE_BBOX];\n        if (localBBox.containsPoint(localRef)) return anchor;\n    }\n    // Caching segment subdivisions for paths\n    var pathOpt;\n    if (localShape instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Path) {\n        var precision = opt.precision || 2;\n        if (!data[BNDR_SUBDIVISIONS]) data[BNDR_SUBDIVISIONS] = localShape.getSegmentSubdivisions({\n            precision: precision\n        });\n        pathOpt = {\n            precision: precision,\n            segmentSubdivisions: data[BNDR_SUBDIVISIONS]\n        };\n    }\n    if (opt.extrapolate === true) localLine.setLength(1e6);\n    intersection = localLine.intersect(localShape, pathOpt);\n    if (intersection) {\n        // More than one intersection\n        if (_V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isArray(intersection)) intersection = localRef.chooseClosest(intersection);\n    } else if (opt.sticky === true) {\n        // No intersection, find the closest point instead\n        if (localShape instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect) {\n            intersection = localShape.pointNearestToPoint(localRef);\n        } else if (localShape instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Ellipse) {\n            intersection = localShape.intersectionWithLineFromCenterToPoint(localRef);\n        } else {\n            intersection = localShape.closestPoint(localRef, pathOpt);\n        }\n    }\n    var cp = intersection ? _V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].transformPoint(intersection, targetMatrix) : anchor;\n    var cpOffset = opt.offset || 0;\n    if (opt.stroke) cpOffset += stroke(node) / 2;\n    return offsetPoint(cp, line.start, cpOffset);\n}\nconst anchor = anchorConnectionPoint;\nconst bbox = bboxIntersection;\nconst rectangle = rectangleIntersection;\nconst boundary = boundaryIntersection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectionPoints/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/curve.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/curve.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   curve: () => (/* binding */ curve)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/curve.mjs\");\n\nconst Directions = {\n    AUTO: \"auto\",\n    HORIZONTAL: \"horizontal\",\n    VERTICAL: \"vertical\",\n    CLOSEST_POINT: \"closest-point\",\n    OUTWARDS: \"outwards\"\n};\nconst TangentDirections = {\n    UP: \"up\",\n    DOWN: \"down\",\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    AUTO: \"auto\",\n    CLOSEST_POINT: \"closest-point\",\n    OUTWARDS: \"outwards\"\n};\nconst curve = function(sourcePoint, targetPoint, route = [], opt = {}, linkView) {\n    const raw = Boolean(opt.raw);\n    // distanceCoefficient - a coefficient of the tangent vector length relative to the distance between points.\n    // angleTangentCoefficient - a coefficient of the end tangents length in the case of angles larger than 45 degrees.\n    // tension - a Catmull-Rom curve tension parameter.\n    // sourceTangent - a tangent vector along the curve at the sourcePoint.\n    // sourceDirection - a unit direction vector along the curve at the sourcePoint.\n    // targetTangent - a tangent vector along the curve at the targetPoint.\n    // targetDirection - a unit direction vector along the curve at the targetPoint.\n    // precision - a rounding precision for path values.\n    const { direction = Directions.AUTO, precision = 3 } = opt;\n    const options = {\n        coeff: opt.distanceCoefficient || 0.6,\n        angleTangentCoefficient: opt.angleTangentCoefficient || 80,\n        tau: opt.tension || 0.5,\n        sourceTangent: opt.sourceTangent ? new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(opt.sourceTangent) : null,\n        targetTangent: opt.targetTangent ? new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(opt.targetTangent) : null,\n        rotate: Boolean(opt.rotate)\n    };\n    if (typeof opt.sourceDirection === \"string\") options.sourceDirection = opt.sourceDirection;\n    else if (typeof opt.sourceDirection === \"number\") options.sourceDirection = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0).rotate(null, opt.sourceDirection);\n    else options.sourceDirection = opt.sourceDirection ? new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(opt.sourceDirection).normalize() : null;\n    if (typeof opt.targetDirection === \"string\") options.targetDirection = opt.targetDirection;\n    else if (typeof opt.targetDirection === \"number\") options.targetDirection = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0).rotate(null, opt.targetDirection);\n    else options.targetDirection = opt.targetDirection ? new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(opt.targetDirection).normalize() : null;\n    const completeRoute = [\n        sourcePoint,\n        ...route,\n        targetPoint\n    ].map((p)=>new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p));\n    // The calculation of a sourceTangent\n    let sourceTangent;\n    if (options.sourceTangent) {\n        sourceTangent = options.sourceTangent;\n    } else {\n        const sourceDirection = getSourceTangentDirection(linkView, completeRoute, direction, options);\n        const tangentLength = completeRoute[0].distance(completeRoute[1]) * options.coeff;\n        const pointsVector = completeRoute[1].difference(completeRoute[0]).normalize();\n        const angle = angleBetweenVectors(sourceDirection, pointsVector);\n        if (angle > Math.PI / 4) {\n            const updatedLength = tangentLength + (angle - Math.PI / 4) * options.angleTangentCoefficient;\n            sourceTangent = sourceDirection.clone().scale(updatedLength, updatedLength);\n        } else {\n            sourceTangent = sourceDirection.clone().scale(tangentLength, tangentLength);\n        }\n    }\n    // The calculation of a targetTangent\n    let targetTangent;\n    if (options.targetTangent) {\n        targetTangent = options.targetTangent;\n    } else {\n        const targetDirection = getTargetTangentDirection(linkView, completeRoute, direction, options);\n        const last = completeRoute.length - 1;\n        const tangentLength = completeRoute[last - 1].distance(completeRoute[last]) * options.coeff;\n        const pointsVector = completeRoute[last - 1].difference(completeRoute[last]).normalize();\n        const angle = angleBetweenVectors(targetDirection, pointsVector);\n        if (angle > Math.PI / 4) {\n            const updatedLength = tangentLength + (angle - Math.PI / 4) * options.angleTangentCoefficient;\n            targetTangent = targetDirection.clone().scale(updatedLength, updatedLength);\n        } else {\n            targetTangent = targetDirection.clone().scale(tangentLength, tangentLength);\n        }\n    }\n    const catmullRomCurves = createCatmullRomCurves(completeRoute, sourceTangent, targetTangent, options);\n    const bezierCurves = catmullRomCurves.map((curve)=>catmullRomToBezier(curve, options));\n    const path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path(bezierCurves).round(precision);\n    return raw ? path : path.serialize();\n};\ncurve.Directions = Directions;\ncurve.TangentDirections = TangentDirections;\nfunction getHorizontalSourceDirection(linkView, route, options) {\n    const { sourceBBox } = linkView;\n    let sourceSide;\n    let rotation;\n    if (!linkView.sourceView) {\n        if (sourceBBox.x > route[1].x) sourceSide = \"right\";\n        else sourceSide = \"left\";\n    } else {\n        rotation = linkView.sourceView.model.angle();\n        if (options.rotate && rotation) {\n            const unrotatedBBox = linkView.sourceView.getNodeUnrotatedBBox(linkView.sourceView.el);\n            const sourcePoint = route[0].clone();\n            sourcePoint.rotate(sourceBBox.center(), rotation);\n            sourceSide = unrotatedBBox.sideNearestToPoint(sourcePoint);\n        } else {\n            sourceSide = sourceBBox.sideNearestToPoint(route[0]);\n        }\n    }\n    let direction;\n    switch(sourceSide){\n        case \"left\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(-1, 0);\n            break;\n        case \"right\":\n        default:\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0);\n            break;\n    }\n    if (options.rotate && rotation) {\n        direction.rotate(null, -rotation);\n    }\n    return direction;\n}\nfunction getHorizontalTargetDirection(linkView, route, options) {\n    const { targetBBox } = linkView;\n    let targetSide;\n    let rotation;\n    if (!linkView.targetView) {\n        if (targetBBox.x > route[route.length - 2].x) targetSide = \"left\";\n        else targetSide = \"right\";\n    } else {\n        rotation = linkView.targetView.model.angle();\n        if (options.rotate && rotation) {\n            const unrotatedBBox = linkView.targetView.getNodeUnrotatedBBox(linkView.targetView.el);\n            const targetPoint = route[route.length - 1].clone();\n            targetPoint.rotate(targetBBox.center(), rotation);\n            targetSide = unrotatedBBox.sideNearestToPoint(targetPoint);\n        } else {\n            targetSide = targetBBox.sideNearestToPoint(route[route.length - 1]);\n        }\n    }\n    let direction;\n    switch(targetSide){\n        case \"left\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(-1, 0);\n            break;\n        case \"right\":\n        default:\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0);\n            break;\n    }\n    if (options.rotate && rotation) {\n        direction.rotate(null, -rotation);\n    }\n    return direction;\n}\nfunction getVerticalSourceDirection(linkView, route, options) {\n    const { sourceBBox } = linkView;\n    let sourceSide;\n    let rotation;\n    if (!linkView.sourceView) {\n        if (sourceBBox.y > route[1].y) sourceSide = \"bottom\";\n        else sourceSide = \"top\";\n    } else {\n        rotation = linkView.sourceView.model.angle();\n        if (options.rotate && rotation) {\n            const unrotatedBBox = linkView.sourceView.getNodeUnrotatedBBox(linkView.sourceView.el);\n            const sourcePoint = route[0].clone();\n            sourcePoint.rotate(sourceBBox.center(), rotation);\n            sourceSide = unrotatedBBox.sideNearestToPoint(sourcePoint);\n        } else {\n            sourceSide = sourceBBox.sideNearestToPoint(route[0]);\n        }\n    }\n    let direction;\n    switch(sourceSide){\n        case \"top\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, -1);\n            break;\n        case \"bottom\":\n        default:\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, 1);\n            break;\n    }\n    if (options.rotate && rotation) {\n        direction.rotate(null, -rotation);\n    }\n    return direction;\n}\nfunction getVerticalTargetDirection(linkView, route, options) {\n    const { targetBBox } = linkView;\n    let targetSide;\n    let rotation;\n    if (!linkView.targetView) {\n        if (targetBBox.y > route[route.length - 2].y) targetSide = \"top\";\n        else targetSide = \"bottom\";\n    } else {\n        rotation = linkView.targetView.model.angle();\n        if (options.rotate && rotation) {\n            const unrotatedBBox = linkView.targetView.getNodeUnrotatedBBox(linkView.targetView.el);\n            const targetPoint = route[route.length - 1].clone();\n            targetPoint.rotate(targetBBox.center(), rotation);\n            targetSide = unrotatedBBox.sideNearestToPoint(targetPoint);\n        } else {\n            targetSide = targetBBox.sideNearestToPoint(route[route.length - 1]);\n        }\n    }\n    let direction;\n    switch(targetSide){\n        case \"top\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, -1);\n            break;\n        case \"bottom\":\n        default:\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, 1);\n            break;\n    }\n    if (options.rotate && rotation) {\n        direction.rotate(null, -rotation);\n    }\n    return direction;\n}\nfunction getAutoSourceDirection(linkView, route, options) {\n    const { sourceBBox } = linkView;\n    let sourceSide;\n    let rotation;\n    if (!linkView.sourceView) {\n        sourceSide = sourceBBox.sideNearestToPoint(route[1]);\n    } else {\n        rotation = linkView.sourceView.model.angle();\n        if (options.rotate && rotation) {\n            const unrotatedBBox = linkView.sourceView.getNodeUnrotatedBBox(linkView.sourceView.el);\n            const sourcePoint = route[0].clone();\n            sourcePoint.rotate(sourceBBox.center(), rotation);\n            sourceSide = unrotatedBBox.sideNearestToPoint(sourcePoint);\n        } else {\n            sourceSide = sourceBBox.sideNearestToPoint(route[0]);\n        }\n    }\n    let direction;\n    switch(sourceSide){\n        case \"top\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, -1);\n            break;\n        case \"bottom\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, 1);\n            break;\n        case \"right\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0);\n            break;\n        case \"left\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(-1, 0);\n            break;\n    }\n    if (options.rotate && rotation) {\n        direction.rotate(null, -rotation);\n    }\n    return direction;\n}\nfunction getAutoTargetDirection(linkView, route, options) {\n    const { targetBBox } = linkView;\n    let targetSide;\n    let rotation;\n    if (!linkView.targetView) {\n        targetSide = targetBBox.sideNearestToPoint(route[route.length - 2]);\n    } else {\n        rotation = linkView.targetView.model.angle();\n        if (options.rotate && rotation) {\n            const unrotatedBBox = linkView.targetView.getNodeUnrotatedBBox(linkView.targetView.el);\n            const targetPoint = route[route.length - 1].clone();\n            targetPoint.rotate(targetBBox.center(), rotation);\n            targetSide = unrotatedBBox.sideNearestToPoint(targetPoint);\n        } else {\n            targetSide = targetBBox.sideNearestToPoint(route[route.length - 1]);\n        }\n    }\n    let direction;\n    switch(targetSide){\n        case \"top\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, -1);\n            break;\n        case \"bottom\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, 1);\n            break;\n        case \"right\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0);\n            break;\n        case \"left\":\n            direction = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(-1, 0);\n            break;\n    }\n    if (options.rotate && rotation) {\n        direction.rotate(null, -rotation);\n    }\n    return direction;\n}\nfunction getClosestPointSourceDirection(linkView, route, options) {\n    return route[1].difference(route[0]).normalize();\n}\nfunction getClosestPointTargetDirection(linkView, route, options) {\n    const last = route.length - 1;\n    return route[last - 1].difference(route[last]).normalize();\n}\nfunction getOutwardsSourceDirection(linkView, route, options) {\n    const { sourceBBox } = linkView;\n    const sourceCenter = sourceBBox.center();\n    return route[0].difference(sourceCenter).normalize();\n}\nfunction getOutwardsTargetDirection(linkView, route, options) {\n    const { targetBBox } = linkView;\n    const targetCenter = targetBBox.center();\n    return route[route.length - 1].difference(targetCenter).normalize();\n}\nfunction getSourceTangentDirection(linkView, route, direction, options) {\n    if (options.sourceDirection) {\n        switch(options.sourceDirection){\n            case TangentDirections.UP:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, -1);\n            case TangentDirections.DOWN:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, 1);\n            case TangentDirections.LEFT:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(-1, 0);\n            case TangentDirections.RIGHT:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0);\n            case TangentDirections.AUTO:\n                return getAutoSourceDirection(linkView, route, options);\n            case TangentDirections.CLOSEST_POINT:\n                return getClosestPointSourceDirection(linkView, route, options);\n            case TangentDirections.OUTWARDS:\n                return getOutwardsSourceDirection(linkView, route, options);\n            default:\n                return options.sourceDirection;\n        }\n    }\n    switch(direction){\n        case Directions.HORIZONTAL:\n            return getHorizontalSourceDirection(linkView, route, options);\n        case Directions.VERTICAL:\n            return getVerticalSourceDirection(linkView, route, options);\n        case Directions.CLOSEST_POINT:\n            return getClosestPointSourceDirection(linkView, route, options);\n        case Directions.OUTWARDS:\n            return getOutwardsSourceDirection(linkView, route, options);\n        case Directions.AUTO:\n        default:\n            return getAutoSourceDirection(linkView, route, options);\n    }\n}\nfunction getTargetTangentDirection(linkView, route, direction, options) {\n    if (options.targetDirection) {\n        switch(options.targetDirection){\n            case TangentDirections.UP:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, -1);\n            case TangentDirections.DOWN:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(0, 1);\n            case TangentDirections.LEFT:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(-1, 0);\n            case TangentDirections.RIGHT:\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(1, 0);\n            case TangentDirections.AUTO:\n                return getAutoTargetDirection(linkView, route, options);\n            case TangentDirections.CLOSEST_POINT:\n                return getClosestPointTargetDirection(linkView, route, options);\n            case TangentDirections.OUTWARDS:\n                return getOutwardsTargetDirection(linkView, route, options);\n            default:\n                return options.targetDirection;\n        }\n    }\n    switch(direction){\n        case Directions.HORIZONTAL:\n            return getHorizontalTargetDirection(linkView, route, options);\n        case Directions.VERTICAL:\n            return getVerticalTargetDirection(linkView, route, options);\n        case Directions.CLOSEST_POINT:\n            return getClosestPointTargetDirection(linkView, route, options);\n        case Directions.OUTWARDS:\n            return getOutwardsTargetDirection(linkView, route, options);\n        case Directions.AUTO:\n        default:\n            return getAutoTargetDirection(linkView, route, options);\n    }\n}\nfunction rotateVector(vector, angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const x = cos * vector.x - sin * vector.y;\n    const y = sin * vector.x + cos * vector.y;\n    vector.x = x;\n    vector.y = y;\n}\nfunction angleBetweenVectors(v1, v2) {\n    let cos = v1.dot(v2) / (v1.magnitude() * v2.magnitude());\n    if (cos < -1) cos = -1;\n    if (cos > 1) cos = 1;\n    return Math.acos(cos);\n}\nfunction determinant(v1, v2) {\n    return v1.x * v2.y - v1.y * v2.x;\n}\nfunction createCatmullRomCurves(points, sourceTangent, targetTangent, options) {\n    const { tau, coeff } = options;\n    const distances = [];\n    const tangents = [];\n    const catmullRomCurves = [];\n    const n = points.length - 1;\n    for(let i = 0; i < n; i++){\n        distances[i] = points[i].distance(points[i + 1]);\n    }\n    tangents[0] = sourceTangent;\n    tangents[n] = targetTangent;\n    // The calculation of tangents of vertices\n    for(let i = 1; i < n; i++){\n        let tpPrev;\n        let tpNext;\n        if (i === 1) {\n            tpPrev = points[i - 1].clone().offset(tangents[i - 1].x, tangents[i - 1].y);\n        } else {\n            tpPrev = points[i - 1].clone();\n        }\n        if (i === n - 1) {\n            tpNext = points[i + 1].clone().offset(tangents[i + 1].x, tangents[i + 1].y);\n        } else {\n            tpNext = points[i + 1].clone();\n        }\n        const v1 = tpPrev.difference(points[i]).normalize();\n        const v2 = tpNext.difference(points[i]).normalize();\n        const vAngle = angleBetweenVectors(v1, v2);\n        let rot = (Math.PI - vAngle) / 2;\n        let t;\n        const vectorDeterminant = determinant(v1, v2);\n        let pointsDeterminant;\n        pointsDeterminant = determinant(points[i].difference(points[i + 1]), points[i].difference(points[i - 1]));\n        if (vectorDeterminant < 0) {\n            rot = -rot;\n        }\n        if (vAngle < Math.PI / 2 && (rot < 0 && pointsDeterminant < 0 || rot > 0 && pointsDeterminant > 0)) {\n            rot = rot - Math.PI;\n        }\n        t = v2.clone();\n        rotateVector(t, rot);\n        const t1 = t.clone();\n        const t2 = t.clone();\n        const scaleFactor1 = distances[i - 1] * coeff;\n        const scaleFactor2 = distances[i] * coeff;\n        t1.scale(scaleFactor1, scaleFactor1);\n        t2.scale(scaleFactor2, scaleFactor2);\n        tangents[i] = [\n            t1,\n            t2\n        ];\n    }\n    // The building of a Catmull-Rom curve based of tangents of points\n    for(let i = 0; i < n; i++){\n        let p0;\n        let p3;\n        if (i === 0) {\n            p0 = points[i + 1].difference(tangents[i].x / tau, tangents[i].y / tau);\n        } else {\n            p0 = points[i + 1].difference(tangents[i][1].x / tau, tangents[i][1].y / tau);\n        }\n        if (i === n - 1) {\n            p3 = points[i].clone().offset(tangents[i + 1].x / tau, tangents[i + 1].y / tau);\n        } else {\n            p3 = points[i].difference(tangents[i + 1][0].x / tau, tangents[i + 1][0].y / tau);\n        }\n        catmullRomCurves[i] = [\n            p0,\n            points[i],\n            points[i + 1],\n            p3\n        ];\n    }\n    return catmullRomCurves;\n}\n// The function to convert Catmull-Rom curve to Bezier curve using the tension (tau)\nfunction catmullRomToBezier(points, options) {\n    const { tau } = options;\n    const bcp1 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point();\n    bcp1.x = points[1].x + (points[2].x - points[0].x) / (6 * tau);\n    bcp1.y = points[1].y + (points[2].y - points[0].y) / (6 * tau);\n    const bcp2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point();\n    bcp2.x = points[2].x + (points[3].x - points[1].x) / (6 * tau);\n    bcp2.y = points[2].y + (points[3].y - points[1].y) / (6 * tau);\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Curve(points[1], bcp1, bcp2, points[2]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/curve.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   curve: () => (/* reexport safe */ _curve_mjs__WEBPACK_IMPORTED_MODULE_5__.curve),\n/* harmony export */   jumpover: () => (/* reexport safe */ _jumpover_mjs__WEBPACK_IMPORTED_MODULE_1__.jumpover),\n/* harmony export */   normal: () => (/* reexport safe */ _normal_mjs__WEBPACK_IMPORTED_MODULE_2__.normal),\n/* harmony export */   rounded: () => (/* reexport safe */ _rounded_mjs__WEBPACK_IMPORTED_MODULE_3__.rounded),\n/* harmony export */   smooth: () => (/* reexport safe */ _smooth_mjs__WEBPACK_IMPORTED_MODULE_4__.smooth),\n/* harmony export */   straight: () => (/* reexport safe */ _straight_mjs__WEBPACK_IMPORTED_MODULE_0__.straight)\n/* harmony export */ });\n/* harmony import */ var _straight_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./straight.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/straight.mjs\");\n/* harmony import */ var _jumpover_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jumpover.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/jumpover.mjs\");\n/* harmony import */ var _normal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normal.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/normal.mjs\");\n/* harmony import */ var _rounded_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rounded.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/rounded.mjs\");\n/* harmony import */ var _smooth_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./smooth.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/smooth.mjs\");\n/* harmony import */ var _curve_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./curve.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/curve.mjs\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvY29ubmVjdG9ycy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ0E7QUFDRjtBQUNDO0FBQ0Q7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL2Nvbm5lY3RvcnMvaW5kZXgubWpzPzAwMzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9zdHJhaWdodC5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9qdW1wb3Zlci5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9ub3JtYWwubWpzJztcbmV4cG9ydCAqIGZyb20gJy4vcm91bmRlZC5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zbW9vdGgubWpzJztcbmV4cG9ydCAqIGZyb20gJy4vY3VydmUubWpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/jumpover.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/jumpover.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jumpover: () => (/* binding */ jumpover)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n\n\n// default size of jump if not specified in options\nvar JUMP_SIZE = 5;\n// available jump types\n// first one taken as default\nvar JUMP_TYPES = [\n    \"arc\",\n    \"gap\",\n    \"cubic\"\n];\n// default radius\nvar RADIUS = 0;\n// takes care of math. error for case when jump is too close to end of line\nvar CLOSE_PROXIMITY_PADDING = 1;\n// list of connector types not to jump over.\nvar IGNORED_CONNECTORS = [\n    \"smooth\"\n];\n// internal constants for round segment\nvar _13 = 1 / 3;\nvar _23 = 2 / 3;\nfunction sortPointsAscending(p1, p2) {\n    let { x: x1, y: y1 } = p1;\n    let { x: x2, y: y2 } = p2;\n    if (x1 > x2) {\n        let swap = x1;\n        x1 = x2;\n        x2 = swap;\n        swap = y1;\n        y1 = y2;\n        y2 = swap;\n    }\n    if (y1 > y2) {\n        let swap = x1;\n        x1 = x2;\n        x2 = swap;\n        swap = y1;\n        y1 = y2;\n        y2 = swap;\n    }\n    return [\n        new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(x1, y1),\n        new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(x2, y2)\n    ];\n}\nfunction overlapExists(line1, line2) {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = sortPointsAscending(line1.start, line1.end);\n    const [{ x: x3, y: y3 }, { x: x4, y: y4 }] = sortPointsAscending(line2.start, line2.end);\n    const xMatch = x1 <= x4 && x3 <= x2;\n    const yMatch = y1 <= y4 && y3 <= y2;\n    return xMatch && yMatch;\n}\n/**\n * Transform start/end and route into series of lines\n * @param {g.point} sourcePoint start point\n * @param {g.point} targetPoint end point\n * @param {g.point[]} route optional list of route\n * @return {g.line[]} [description]\n */ function createLines(sourcePoint, targetPoint, route) {\n    // make a flattened array of all points\n    var points = [].concat(sourcePoint, route, targetPoint);\n    return points.reduce(function(resultLines, point, idx) {\n        // if there is a next point, make a line with it\n        var nextPoint = points[idx + 1];\n        if (nextPoint != null) {\n            resultLines[idx] = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.line(point, nextPoint);\n        }\n        return resultLines;\n    }, []);\n}\nfunction setupUpdating(jumpOverLinkView) {\n    var paper = jumpOverLinkView.paper;\n    var updateList = paper._jumpOverUpdateList;\n    // first time setup for this paper\n    if (updateList == null) {\n        updateList = paper._jumpOverUpdateList = [];\n        var graph = paper.model;\n        graph.on(\"batch:stop\", function() {\n            if (this.hasActiveBatch()) return;\n            updateJumpOver(paper);\n        });\n        graph.on(\"reset\", function() {\n            updateList = paper._jumpOverUpdateList = [];\n        });\n    }\n    // add this link to a list so it can be updated when some other link is updated\n    if (updateList.indexOf(jumpOverLinkView) < 0) {\n        updateList.push(jumpOverLinkView);\n        // watch for change of connector type or removal of link itself\n        // to remove the link from a list of jump over connectors\n        jumpOverLinkView.listenToOnce(jumpOverLinkView.model, \"change:connector remove\", function() {\n            updateList.splice(updateList.indexOf(jumpOverLinkView), 1);\n        });\n    }\n}\n/**\n * Handler for a batch:stop event to force\n * update of all registered links with jump over connector\n * @param {object} batchEvent optional object with info about batch\n */ function updateJumpOver(paper) {\n    var updateList = paper._jumpOverUpdateList;\n    for(var i = 0; i < updateList.length; i++){\n        const linkView = updateList[i];\n        const updateFlag = linkView.getFlag(linkView.constructor.Flags.CONNECTOR);\n        linkView.requestUpdate(updateFlag);\n    }\n}\n/**\n * Utility function to collect all intersection points of a single\n * line against group of other lines.\n * @param {g.line} line where to find points\n * @param {g.line[]} crossCheckLines lines to cross\n * @return {g.point[]} list of intersection points\n */ function findLineIntersections(line, crossCheckLines) {\n    return _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray(crossCheckLines).reduce(function(res, crossCheckLine) {\n        var intersection = line.intersection(crossCheckLine);\n        if (intersection) {\n            res.push(intersection);\n        }\n        return res;\n    }, []);\n}\n/**\n * Sorting function for list of points by their distance.\n * @param {g.point} p1 first point\n * @param {g.point} p2 second point\n * @return {number} squared distance between points\n */ function sortPoints(p1, p2) {\n    return _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.line(p1, p2).squaredLength();\n}\n/**\n * Split input line into multiple based on intersection points.\n * @param {g.line} line input line to split\n * @param {g.point[]} intersections points where to split the line\n * @param {number} jumpSize the size of jump arc (length empty spot on a line)\n * @return {g.line[]} list of lines being split\n */ function createJumps(line, intersections, jumpSize) {\n    return intersections.reduce(function(resultLines, point, idx) {\n        // skipping points that were merged with the previous line\n        // to make bigger arc over multiple lines that are close to each other\n        if (point.skip === true) {\n            return resultLines;\n        }\n        // always grab the last line from buffer and modify it\n        var lastLine = resultLines.pop() || line;\n        // calculate start and end of jump by moving by a given size of jump\n        var jumpStart = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.point(point).move(lastLine.start, -jumpSize);\n        var jumpEnd = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.point(point).move(lastLine.start, +jumpSize);\n        // now try to look at the next intersection point\n        var nextPoint = intersections[idx + 1];\n        if (nextPoint != null) {\n            var distance = jumpEnd.distance(nextPoint);\n            if (distance <= jumpSize) {\n                // next point is close enough, move the jump end by this\n                // difference and mark the next point to be skipped\n                jumpEnd = nextPoint.move(lastLine.start, distance);\n                nextPoint.skip = true;\n            }\n        } else {\n            // this block is inside of `else` as an optimization so the distance is\n            // not calculated when we know there are no other intersection points\n            var endDistance = jumpStart.distance(lastLine.end);\n            // if the end is too close to possible jump, draw remaining line instead of a jump\n            if (endDistance < jumpSize * 2 + CLOSE_PROXIMITY_PADDING) {\n                resultLines.push(lastLine);\n                return resultLines;\n            }\n        }\n        var startDistance = jumpEnd.distance(lastLine.start);\n        if (startDistance < jumpSize * 2 + CLOSE_PROXIMITY_PADDING) {\n            // if the start of line is too close to jump, draw that line instead of a jump\n            resultLines.push(lastLine);\n            return resultLines;\n        }\n        // finally create a jump line\n        var jumpLine = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.line(jumpStart, jumpEnd);\n        // it's just simple line but with a `isJump` property\n        jumpLine.isJump = true;\n        resultLines.push(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.line(lastLine.start, jumpStart), jumpLine, _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.line(jumpEnd, lastLine.end));\n        return resultLines;\n    }, []);\n}\n/**\n * Assemble `D` attribute of a SVG path by iterating given lines.\n * @param {g.line[]} lines source lines to use\n * @param {number} jumpSize the size of jump arc (length empty spot on a line)\n * @param {number} radius the radius\n * @return {string}\n */ function buildPath(lines, jumpSize, jumpType, radius) {\n    var path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path();\n    var segment;\n    // first move to the start of a first line\n    segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"M\", lines[0].start);\n    path.appendSegment(segment);\n    // make a paths from lines\n    _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray(lines).forEach(function(line, index) {\n        if (line.isJump) {\n            var angle, diff;\n            var control1, control2;\n            if (jumpType === \"arc\") {\n                angle = -90;\n                // determine rotation of arc based on difference between points\n                diff = line.start.difference(line.end);\n                // make sure the arc always points up (or right)\n                var xAxisRotate = Number(diff.x < 0 || diff.x === 0 && diff.y < 0);\n                if (xAxisRotate) angle += 180;\n                var midpoint = line.midpoint();\n                var centerLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Line(midpoint, line.end).rotate(midpoint, angle);\n                var halfLine;\n                // first half\n                halfLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Line(line.start, midpoint);\n                control1 = halfLine.pointAt(2 / 3).rotate(line.start, angle);\n                control2 = centerLine.pointAt(1 / 3).rotate(centerLine.end, -angle);\n                segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"C\", control1, control2, centerLine.end);\n                path.appendSegment(segment);\n                // second half\n                halfLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Line(midpoint, line.end);\n                control1 = centerLine.pointAt(1 / 3).rotate(centerLine.end, angle);\n                control2 = halfLine.pointAt(1 / 3).rotate(line.end, -angle);\n                segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"C\", control1, control2, line.end);\n                path.appendSegment(segment);\n            } else if (jumpType === \"gap\") {\n                segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"M\", line.end);\n                path.appendSegment(segment);\n            } else if (jumpType === \"cubic\") {\n                angle = line.start.theta(line.end);\n                var xOffset = jumpSize * 0.6;\n                var yOffset = jumpSize * 1.35;\n                // determine rotation of arc based on difference between points\n                diff = line.start.difference(line.end);\n                // make sure the arc always points up (or right)\n                xAxisRotate = Number(diff.x < 0 || diff.x === 0 && diff.y < 0);\n                if (xAxisRotate) yOffset *= -1;\n                control1 = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(line.start.x + xOffset, line.start.y + yOffset).rotate(line.start, angle);\n                control2 = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(line.end.x - xOffset, line.end.y + yOffset).rotate(line.end, angle);\n                segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"C\", control1, control2, line.end);\n                path.appendSegment(segment);\n            }\n        } else {\n            var nextLine = lines[index + 1];\n            if (radius == 0 || !nextLine || nextLine.isJump) {\n                segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"L\", line.end);\n                path.appendSegment(segment);\n            } else {\n                buildRoundedSegment(radius, path, line.end, line.start, nextLine.end);\n            }\n        }\n    });\n    return path;\n}\nfunction buildRoundedSegment(offset, path, curr, prev, next) {\n    var prevDistance = curr.distance(prev) / 2;\n    var nextDistance = curr.distance(next) / 2;\n    var startMove = -Math.min(offset, prevDistance);\n    var endMove = -Math.min(offset, nextDistance);\n    var roundedStart = curr.clone().move(prev, startMove).round();\n    var roundedEnd = curr.clone().move(next, endMove).round();\n    var control1 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(_13 * roundedStart.x + _23 * curr.x, _23 * curr.y + _13 * roundedStart.y);\n    var control2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(_13 * roundedEnd.x + _23 * curr.x, _23 * curr.y + _13 * roundedEnd.y);\n    var segment;\n    segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"L\", roundedStart);\n    path.appendSegment(segment);\n    segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path.createSegment(\"C\", control1, control2, roundedEnd);\n    path.appendSegment(segment);\n}\n/**\n * Actual connector function that will be run on every update.\n * @param {g.point} sourcePoint start point of this link\n * @param {g.point} targetPoint end point of this link\n * @param {g.point[]} route of this link\n * @param {object} opt options\n * @property {number} size optional size of a jump arc\n * @return {string} created `D` attribute of SVG path\n */ const jumpover = function(sourcePoint, targetPoint, route, opt) {\n    setupUpdating(this);\n    var raw = opt.raw;\n    var jumpSize = opt.size || JUMP_SIZE;\n    var jumpType = opt.jump && (\"\" + opt.jump).toLowerCase();\n    var radius = opt.radius || RADIUS;\n    var ignoreConnectors = opt.ignoreConnectors || IGNORED_CONNECTORS;\n    // grab the first jump type as a default if specified one is invalid\n    if (JUMP_TYPES.indexOf(jumpType) === -1) {\n        jumpType = JUMP_TYPES[0];\n    }\n    var paper = this.paper;\n    var graph = paper.model;\n    var allLinks = graph.getLinks();\n    // there is just one link, draw it directly\n    if (allLinks.length === 1) {\n        return buildPath(createLines(sourcePoint, targetPoint, route), jumpSize, jumpType, radius);\n    }\n    var thisModel = this.model;\n    var thisIndex = allLinks.indexOf(thisModel);\n    var defaultConnector = paper.options.defaultConnector || {};\n    // not all links are meant to be jumped over.\n    var links = allLinks.filter(function(link, idx) {\n        var connector = link.get(\"connector\") || defaultConnector;\n        // avoid jumping over links with connector type listed in `ignored connectors`.\n        if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.toArray(ignoreConnectors).includes(connector.name)) {\n            return false;\n        }\n        // filter out links that are above this one and  have the same connector type\n        // otherwise there would double hoops for each intersection\n        if (idx > thisIndex) {\n            return connector.name !== \"jumpover\";\n        }\n        return true;\n    });\n    // find views for all links\n    var linkViews = links.map(function(link) {\n        return paper.findViewByModel(link);\n    });\n    // create lines for this link\n    var thisLines = createLines(sourcePoint, targetPoint, route);\n    // create lines for all other links\n    var linkLines = linkViews.map(function(linkView) {\n        if (linkView == null) {\n            return [];\n        }\n        if (linkView === this) {\n            return thisLines;\n        }\n        return createLines(linkView.sourcePoint, linkView.targetPoint, linkView.route);\n    }, this);\n    // transform lines for this link by splitting with jump lines at\n    // points of intersection with other links\n    var jumpingLines = thisLines.reduce(function(resultLines, thisLine) {\n        // iterate all links and grab the intersections with this line\n        // these are then sorted by distance so the line can be split more easily\n        var intersections = links.reduce(function(res, link, i) {\n            // don't intersection with itself\n            if (link !== thisModel) {\n                const linkLinesToTest = linkLines[i].slice();\n                const overlapIndex = linkLinesToTest.findIndex((line)=>overlapExists(thisLine, line));\n                // Overlap occurs and the end point of one segment lies on thisLine\n                if (overlapIndex > -1 && thisLine.containsPoint(linkLinesToTest[overlapIndex].end)) {\n                    // Remove the next segment because there will never be a jump\n                    linkLinesToTest.splice(overlapIndex + 1, 1);\n                }\n                const lineIntersections = findLineIntersections(thisLine, linkLinesToTest);\n                res.push.apply(res, lineIntersections);\n            }\n            return res;\n        }, []).sort(function(a, b) {\n            return sortPoints(thisLine.start, a) - sortPoints(thisLine.start, b);\n        });\n        if (intersections.length > 0) {\n            // split the line based on found intersection points\n            resultLines.push.apply(resultLines, createJumps(thisLine, intersections, jumpSize));\n        } else {\n            // without any intersection the line goes uninterrupted\n            resultLines.push(thisLine);\n        }\n        return resultLines;\n    }, []);\n    var path = buildPath(jumpingLines, jumpSize, jumpType, radius);\n    return raw ? path : path.serialize();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/jumpover.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/normal.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/normal.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normal: () => (/* binding */ normal)\n/* harmony export */ });\n/* harmony import */ var _straight_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./straight.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/straight.mjs\");\n\nconst normal = function(sourcePoint, targetPoint, route = [], opt = {}) {\n    const { raw } = opt;\n    const localOpt = {\n        cornerType: \"point\",\n        raw\n    };\n    return (0,_straight_mjs__WEBPACK_IMPORTED_MODULE_0__.straight)(sourcePoint, targetPoint, route, localOpt);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvY29ubmVjdG9ycy9ub3JtYWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBRW5DLE1BQU1DLFNBQVMsU0FBU0MsV0FBVyxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsRUFBRSxFQUFFQyxNQUFNLENBQUMsQ0FBQztJQUV6RSxNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHRDtJQUNoQixNQUFNRSxXQUFXO1FBQ2JDLFlBQVk7UUFDWkY7SUFDSjtJQUVBLE9BQU9OLHVEQUFRQSxDQUFDRSxhQUFhQyxhQUFhQyxPQUFPRztBQUNyRCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvY29ubmVjdG9ycy9ub3JtYWwubWpzP2U5MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyYWlnaHQgfSBmcm9tICcuL3N0cmFpZ2h0Lm1qcyc7XG5cbmV4cG9ydCBjb25zdCBub3JtYWwgPSBmdW5jdGlvbihzb3VyY2VQb2ludCwgdGFyZ2V0UG9pbnQsIHJvdXRlID0gW10sIG9wdCA9IHt9KSB7XG5cbiAgICBjb25zdCB7IHJhdyB9ID0gb3B0O1xuICAgIGNvbnN0IGxvY2FsT3B0ID0ge1xuICAgICAgICBjb3JuZXJUeXBlOiAncG9pbnQnLFxuICAgICAgICByYXdcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0cmFpZ2h0KHNvdXJjZVBvaW50LCB0YXJnZXRQb2ludCwgcm91dGUsIGxvY2FsT3B0KTtcbn07XG4iXSwibmFtZXMiOlsic3RyYWlnaHQiLCJub3JtYWwiLCJzb3VyY2VQb2ludCIsInRhcmdldFBvaW50Iiwicm91dGUiLCJvcHQiLCJyYXciLCJsb2NhbE9wdCIsImNvcm5lclR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/normal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/rounded.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/rounded.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rounded: () => (/* binding */ rounded)\n/* harmony export */ });\n/* harmony import */ var _straight_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./straight.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/straight.mjs\");\n\nconst CORNER_RADIUS = 10;\nconst PRECISION = 0;\nconst rounded = function(sourcePoint, targetPoint, route = [], opt = {}) {\n    const { radius = CORNER_RADIUS, raw } = opt;\n    const localOpt = {\n        cornerType: \"cubic\",\n        cornerRadius: radius,\n        precision: PRECISION,\n        raw\n    };\n    return (0,_straight_mjs__WEBPACK_IMPORTED_MODULE_0__.straight)(sourcePoint, targetPoint, route, localOpt);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvY29ubmVjdG9ycy9yb3VuZGVkLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUUxQyxNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsWUFBWTtBQUVYLE1BQU1DLFVBQVUsU0FBU0MsV0FBVyxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsRUFBRSxFQUFFQyxNQUFNLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUVDLFNBQVNQLGFBQWEsRUFBRVEsR0FBRyxFQUFFLEdBQUdGO0lBQ3hDLE1BQU1HLFdBQVc7UUFDYkMsWUFBWTtRQUNaQyxjQUFjSjtRQUNkSyxXQUFXWDtRQUNYTztJQUNKO0lBRUEsT0FBT1QsdURBQVFBLENBQUNJLGFBQWFDLGFBQWFDLE9BQU9JO0FBQ3JELEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9jb25uZWN0b3JzL3JvdW5kZWQubWpzPzY2ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyYWlnaHQgfSBmcm9tICcuL3N0cmFpZ2h0Lm1qcyc7XG5cbmNvbnN0IENPUk5FUl9SQURJVVMgPSAxMDtcbmNvbnN0IFBSRUNJU0lPTiA9IDA7XG5cbmV4cG9ydCBjb25zdCByb3VuZGVkID0gZnVuY3Rpb24oc291cmNlUG9pbnQsIHRhcmdldFBvaW50LCByb3V0ZSA9IFtdLCBvcHQgPSB7fSkge1xuXG4gICAgY29uc3QgeyByYWRpdXMgPSBDT1JORVJfUkFESVVTLCByYXcgfSA9IG9wdDtcbiAgICBjb25zdCBsb2NhbE9wdCA9IHtcbiAgICAgICAgY29ybmVyVHlwZTogJ2N1YmljJyxcbiAgICAgICAgY29ybmVyUmFkaXVzOiByYWRpdXMsXG4gICAgICAgIHByZWNpc2lvbjogUFJFQ0lTSU9OLFxuICAgICAgICByYXdcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0cmFpZ2h0KHNvdXJjZVBvaW50LCB0YXJnZXRQb2ludCwgcm91dGUsIGxvY2FsT3B0KTtcbn07XG4iXSwibmFtZXMiOlsic3RyYWlnaHQiLCJDT1JORVJfUkFESVVTIiwiUFJFQ0lTSU9OIiwicm91bmRlZCIsInNvdXJjZVBvaW50IiwidGFyZ2V0UG9pbnQiLCJyb3V0ZSIsIm9wdCIsInJhZGl1cyIsInJhdyIsImxvY2FsT3B0IiwiY29ybmVyVHlwZSIsImNvcm5lclJhZGl1cyIsInByZWNpc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/rounded.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/smooth.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/smooth.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   smooth: () => (/* binding */ smooth)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/curve.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n\nconst smooth = function(sourcePoint, targetPoint, route, opt) {\n    var raw = opt && opt.raw;\n    var path;\n    if (route && route.length !== 0) {\n        var points = [\n            sourcePoint\n        ].concat(route).concat([\n            targetPoint\n        ]);\n        var curves = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Curve.throughPoints(points);\n        path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path(curves);\n    } else {\n        // if we have no route, use a default cubic bezier curve\n        // cubic bezier requires two control points\n        // the control points have `x` midway between source and target\n        // this produces an S-like curve\n        path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path();\n        var segment;\n        segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"M\", sourcePoint);\n        path.appendSegment(segment);\n        if (Math.abs(sourcePoint.x - targetPoint.x) >= Math.abs(sourcePoint.y - targetPoint.y)) {\n            var controlPointX = (sourcePoint.x + targetPoint.x) / 2;\n            segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"C\", controlPointX, sourcePoint.y, controlPointX, targetPoint.y, targetPoint.x, targetPoint.y);\n            path.appendSegment(segment);\n        } else {\n            var controlPointY = (sourcePoint.y + targetPoint.y) / 2;\n            segment = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"C\", sourcePoint.x, controlPointY, targetPoint.x, controlPointY, targetPoint.x, targetPoint.y);\n            path.appendSegment(segment);\n        }\n    }\n    return raw ? path : path.serialize();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvY29ubmVjdG9ycy9zbW9vdGgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUU3QixNQUFNQyxTQUFTLFNBQVNDLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLEdBQUc7SUFFL0QsSUFBSUMsTUFBTUQsT0FBT0EsSUFBSUMsR0FBRztJQUN4QixJQUFJQztJQUVKLElBQUlILFNBQVNBLE1BQU1JLE1BQU0sS0FBSyxHQUFHO1FBRTdCLElBQUlDLFNBQVM7WUFBQ1A7U0FBWSxDQUFDUSxNQUFNLENBQUNOLE9BQU9NLE1BQU0sQ0FBQztZQUFDUDtTQUFZO1FBQzdELElBQUlRLFNBQVNYLCtDQUFPLENBQUNhLGFBQWEsQ0FBQ0o7UUFFbkNGLE9BQU8sSUFBSVAsOENBQU0sQ0FBQ1c7SUFFdEIsT0FBTztRQUNILHdEQUF3RDtRQUN4RCwyQ0FBMkM7UUFDM0MsK0RBQStEO1FBQy9ELGdDQUFnQztRQUVoQ0osT0FBTyxJQUFJUCw4Q0FBTTtRQUVqQixJQUFJZTtRQUVKQSxVQUFVZiw4Q0FBTSxDQUFDZ0IsYUFBYSxDQUFDLEtBQUtkO1FBQ3BDSyxLQUFLVSxhQUFhLENBQUNGO1FBRW5CLElBQUksS0FBTUksR0FBRyxDQUFDakIsWUFBWWtCLENBQUMsR0FBR2pCLFlBQVlpQixDQUFDLEtBQU9GLEtBQUtDLEdBQUcsQ0FBQ2pCLFlBQVltQixDQUFDLEdBQUdsQixZQUFZa0IsQ0FBQyxHQUFJO1lBQ3hGLElBQUlDLGdCQUFnQixDQUFDcEIsWUFBWWtCLENBQUMsR0FBR2pCLFlBQVlpQixDQUFDLElBQUk7WUFFdERMLFVBQVVmLDhDQUFNLENBQUNnQixhQUFhLENBQUMsS0FBS00sZUFBZXBCLFlBQVltQixDQUFDLEVBQUVDLGVBQWVuQixZQUFZa0IsQ0FBQyxFQUFFbEIsWUFBWWlCLENBQUMsRUFBRWpCLFlBQVlrQixDQUFDO1lBQzVIZCxLQUFLVSxhQUFhLENBQUNGO1FBRXZCLE9BQU87WUFDSCxJQUFJUSxnQkFBZ0IsQ0FBQ3JCLFlBQVltQixDQUFDLEdBQUdsQixZQUFZa0IsQ0FBQyxJQUFJO1lBRXRETixVQUFVZiw4Q0FBTSxDQUFDZ0IsYUFBYSxDQUFDLEtBQUtkLFlBQVlrQixDQUFDLEVBQUVHLGVBQWVwQixZQUFZaUIsQ0FBQyxFQUFFRyxlQUFlcEIsWUFBWWlCLENBQUMsRUFBRWpCLFlBQVlrQixDQUFDO1lBQzVIZCxLQUFLVSxhQUFhLENBQUNGO1FBRXZCO0lBQ0o7SUFFQSxPQUFPLE1BQVFSLE9BQU9BLEtBQUtpQixTQUFTO0FBQ3hDLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9jb25uZWN0b3JzL3Ntb290aC5tanM/MmFlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBnIGZyb20gJy4uL2cvaW5kZXgubWpzJztcblxuZXhwb3J0IGNvbnN0IHNtb290aCA9IGZ1bmN0aW9uKHNvdXJjZVBvaW50LCB0YXJnZXRQb2ludCwgcm91dGUsIG9wdCkge1xuXG4gICAgdmFyIHJhdyA9IG9wdCAmJiBvcHQucmF3O1xuICAgIHZhciBwYXRoO1xuXG4gICAgaWYgKHJvdXRlICYmIHJvdXRlLmxlbmd0aCAhPT0gMCkge1xuXG4gICAgICAgIHZhciBwb2ludHMgPSBbc291cmNlUG9pbnRdLmNvbmNhdChyb3V0ZSkuY29uY2F0KFt0YXJnZXRQb2ludF0pO1xuICAgICAgICB2YXIgY3VydmVzID0gZy5DdXJ2ZS50aHJvdWdoUG9pbnRzKHBvaW50cyk7XG5cbiAgICAgICAgcGF0aCA9IG5ldyBnLlBhdGgoY3VydmVzKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gcm91dGUsIHVzZSBhIGRlZmF1bHQgY3ViaWMgYmV6aWVyIGN1cnZlXG4gICAgICAgIC8vIGN1YmljIGJlemllciByZXF1aXJlcyB0d28gY29udHJvbCBwb2ludHNcbiAgICAgICAgLy8gdGhlIGNvbnRyb2wgcG9pbnRzIGhhdmUgYHhgIG1pZHdheSBiZXR3ZWVuIHNvdXJjZSBhbmQgdGFyZ2V0XG4gICAgICAgIC8vIHRoaXMgcHJvZHVjZXMgYW4gUy1saWtlIGN1cnZlXG5cbiAgICAgICAgcGF0aCA9IG5ldyBnLlBhdGgoKTtcblxuICAgICAgICB2YXIgc2VnbWVudDtcblxuICAgICAgICBzZWdtZW50ID0gZy5QYXRoLmNyZWF0ZVNlZ21lbnQoJ00nLCBzb3VyY2VQb2ludCk7XG4gICAgICAgIHBhdGguYXBwZW5kU2VnbWVudChzZWdtZW50KTtcblxuICAgICAgICBpZiAoKE1hdGguYWJzKHNvdXJjZVBvaW50LnggLSB0YXJnZXRQb2ludC54KSkgPj0gKE1hdGguYWJzKHNvdXJjZVBvaW50LnkgLSB0YXJnZXRQb2ludC55KSkpIHtcbiAgICAgICAgICAgIHZhciBjb250cm9sUG9pbnRYID0gKHNvdXJjZVBvaW50LnggKyB0YXJnZXRQb2ludC54KSAvIDI7XG5cbiAgICAgICAgICAgIHNlZ21lbnQgPSBnLlBhdGguY3JlYXRlU2VnbWVudCgnQycsIGNvbnRyb2xQb2ludFgsIHNvdXJjZVBvaW50LnksIGNvbnRyb2xQb2ludFgsIHRhcmdldFBvaW50LnksIHRhcmdldFBvaW50LngsIHRhcmdldFBvaW50LnkpO1xuICAgICAgICAgICAgcGF0aC5hcHBlbmRTZWdtZW50KHNlZ21lbnQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udHJvbFBvaW50WSA9IChzb3VyY2VQb2ludC55ICsgdGFyZ2V0UG9pbnQueSkgLyAyO1xuXG4gICAgICAgICAgICBzZWdtZW50ID0gZy5QYXRoLmNyZWF0ZVNlZ21lbnQoJ0MnLCBzb3VyY2VQb2ludC54LCBjb250cm9sUG9pbnRZLCB0YXJnZXRQb2ludC54LCBjb250cm9sUG9pbnRZLCB0YXJnZXRQb2ludC54LCB0YXJnZXRQb2ludC55KTtcbiAgICAgICAgICAgIHBhdGguYXBwZW5kU2VnbWVudChzZWdtZW50KTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChyYXcpID8gcGF0aCA6IHBhdGguc2VyaWFsaXplKCk7XG59O1xuIl0sIm5hbWVzIjpbImciLCJzbW9vdGgiLCJzb3VyY2VQb2ludCIsInRhcmdldFBvaW50Iiwicm91dGUiLCJvcHQiLCJyYXciLCJwYXRoIiwibGVuZ3RoIiwicG9pbnRzIiwiY29uY2F0IiwiY3VydmVzIiwiQ3VydmUiLCJ0aHJvdWdoUG9pbnRzIiwiUGF0aCIsInNlZ21lbnQiLCJjcmVhdGVTZWdtZW50IiwiYXBwZW5kU2VnbWVudCIsIk1hdGgiLCJhYnMiLCJ4IiwieSIsImNvbnRyb2xQb2ludFgiLCJjb250cm9sUG9pbnRZIiwic2VyaWFsaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/smooth.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/connectors/straight.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/jointjs/src/connectors/straight.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   straight: () => (/* binding */ straight)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n\nconst CornerTypes = {\n    POINT: \"point\",\n    CUBIC: \"cubic\",\n    LINE: \"line\",\n    GAP: \"gap\"\n};\nconst DEFINED_CORNER_TYPES = Object.values(CornerTypes);\nconst CORNER_RADIUS = 10;\nconst PRECISION = 1;\nconst straight = function(sourcePoint, targetPoint, routePoints = [], opt = {}) {\n    const { cornerType = CornerTypes.POINT, cornerRadius = CORNER_RADIUS, cornerPreserveAspectRatio = false, precision = PRECISION, raw = false } = opt;\n    if (DEFINED_CORNER_TYPES.indexOf(cornerType) === -1) {\n        // unknown `cornerType` provided => error\n        throw new Error(\"Invalid `cornerType` provided to `straight` connector.\");\n    }\n    let path;\n    if (cornerType === CornerTypes.POINT || !cornerRadius) {\n        // default option => normal connector\n        // simply connect all points with straight lines\n        const points = [\n            sourcePoint\n        ].concat(routePoints).concat([\n            targetPoint\n        ]);\n        const polyline = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Polyline(points);\n        path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path(polyline);\n    } else {\n        // `cornerType` is not unknown and not 'point' (default) => must be one of other valid types\n        path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path();\n        // add initial gap segment = to source point\n        path.appendSegment(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"M\", sourcePoint));\n        let nextDistance;\n        const routePointsLength = routePoints.length;\n        for(let i = 0; i < routePointsLength; i++){\n            const curr = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(routePoints[i]);\n            const prev = routePoints[i - 1] || sourcePoint;\n            const next = routePoints[i + 1] || targetPoint;\n            const prevDistance = nextDistance || curr.distance(prev) / 2; // try to re-use previously-computed `nextDistance`\n            nextDistance = curr.distance(next) / 2;\n            let startMove, endMove;\n            if (!cornerPreserveAspectRatio) {\n                // `startMove` and `endMove` may be different\n                // (this happens when next or previous path point is closer than `2 * cornerRadius`)\n                startMove = -Math.min(cornerRadius, prevDistance);\n                endMove = -Math.min(cornerRadius, nextDistance);\n            } else {\n                // force `startMove` and `endMove` to be the same\n                startMove = endMove = -Math.min(cornerRadius, prevDistance, nextDistance);\n            }\n            // to find `cornerStart` and `cornerEnd`, the logic is as follows (using `cornerStart` as example):\n            // - find a point lying on the line `prev - startMove` such that...\n            // - ...the point lies `abs(startMove)` distance away from `curr`...\n            // - ...and its coordinates are rounded to whole numbers\n            const cornerStart = curr.clone().move(prev, startMove).round(precision);\n            const cornerEnd = curr.clone().move(next, endMove).round(precision);\n            // add in-between straight segment = from previous route point to corner start point\n            // (may have zero length)\n            path.appendSegment(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"L\", cornerStart));\n            // add corner segment = from corner start point to corner end point\n            switch(cornerType){\n                case CornerTypes.CUBIC:\n                    {\n                        // corner is rounded\n                        const _13 = 1 / 3;\n                        const _23 = 2 / 3;\n                        const control1 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(_13 * cornerStart.x + _23 * curr.x, _23 * curr.y + _13 * cornerStart.y);\n                        const control2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(_13 * cornerEnd.x + _23 * curr.x, _23 * curr.y + _13 * cornerEnd.y);\n                        path.appendSegment(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"C\", control1, control2, cornerEnd));\n                        break;\n                    }\n                case CornerTypes.LINE:\n                    {\n                        // corner has bevel\n                        path.appendSegment(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"L\", cornerEnd));\n                        break;\n                    }\n                case CornerTypes.GAP:\n                    {\n                        // corner has empty space\n                        path.appendSegment(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"M\", cornerEnd));\n                        break;\n                    }\n            }\n        }\n        // add final straight segment = from last corner end point to target point\n        // (= or from start point to end point, if there are no route points)\n        // (may have zero length)\n        path.appendSegment(_g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Path.createSegment(\"L\", targetPoint));\n    }\n    return raw ? path : path.serialize();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/connectors/straight.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/Cell.mjs":
/*!***********************************************!*\
  !*** ./node_modules/jointjs/src/dia/Cell.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cell: () => (/* binding */ Cell)\n/* harmony export */ });\n/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ \"(ssr)/./node_modules/backbone/backbone.js\");\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_cloneCells_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/cloneCells.mjs */ \"(ssr)/./node_modules/jointjs/src/util/cloneCells.mjs\");\n/* harmony import */ var _attributes_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./attributes/index.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/attributes/index.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n\n\n\n\n\n// Cell base model.\n// --------------------------\nconst Cell = backbone__WEBPACK_IMPORTED_MODULE_0__.Model.extend({\n    // This is the same as Backbone.Model with the only difference that is uses util.merge\n    // instead of just _.extend. The reason is that we want to mixin attributes set in upper classes.\n    constructor: function(attributes, options) {\n        var defaults;\n        var attrs = attributes || {};\n        if (typeof this.preinitialize === \"function\") {\n            // Check to support an older version of Backbone (prior v1.4)\n            this.preinitialize.apply(this, arguments);\n        }\n        this.cid = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.uniqueId)(\"c\");\n        this.attributes = {};\n        if (options && options.collection) this.collection = options.collection;\n        if (options && options.parse) attrs = this.parse(attrs, options) || {};\n        if (defaults = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.result)(this, \"defaults\")) {\n            //<custom code>\n            // Replaced the call to _.defaults with util.merge.\n            attrs = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.merge)({}, defaults, attrs);\n        //</custom code>\n        }\n        this.set(attrs, options);\n        this.changed = {};\n        this.initialize.apply(this, arguments);\n    },\n    translate: function(dx, dy, opt) {\n        throw new Error(\"Must define a translate() method.\");\n    },\n    toJSON: function() {\n        const defaults = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.result)(this.constructor.prototype, \"defaults\");\n        const defaultAttrs = defaults.attrs || {};\n        const attrs = this.attributes.attrs;\n        const finalAttrs = {};\n        // Loop through all the attributes and\n        // omit the default attributes as they are implicitly reconstructible by the cell 'type'.\n        (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn)(attrs, function(attr, selector) {\n            const defaultAttr = defaultAttrs[selector];\n            (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn)(attr, function(value, name) {\n                // attr is mainly flat though it might have one more level (consider the `style` attribute).\n                // Check if the `value` is object and if yes, go one level deep.\n                if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(value) && !Array.isArray(value)) {\n                    (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn)(value, function(value2, name2) {\n                        if (!defaultAttr || !defaultAttr[name] || !(0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isEqual)(defaultAttr[name][name2], value2)) {\n                            finalAttrs[selector] = finalAttrs[selector] || {};\n                            (finalAttrs[selector][name] || (finalAttrs[selector][name] = {}))[name2] = value2;\n                        }\n                    });\n                } else if (!defaultAttr || !(0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isEqual)(defaultAttr[name], value)) {\n                    // `value` is not an object, default attribute for such a selector does not exist\n                    // or it is different than the attribute value set on the model.\n                    finalAttrs[selector] = finalAttrs[selector] || {};\n                    finalAttrs[selector][name] = value;\n                }\n            });\n        });\n        const attributes = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.cloneDeep)((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.omit)(this.attributes, \"attrs\"));\n        attributes.attrs = finalAttrs;\n        return attributes;\n    },\n    initialize: function(options) {\n        const idAttribute = this.getIdAttribute();\n        if (!options || options[idAttribute] === undefined) {\n            this.set(idAttribute, this.generateId(), {\n                silent: true\n            });\n        }\n        this._transitionIds = {};\n        this._scheduledTransitionIds = {};\n        // Collect ports defined in `attrs` and keep collecting whenever `attrs` object changes.\n        this.processPorts();\n        this.on(\"change:attrs\", this.processPorts, this);\n    },\n    getIdAttribute: function() {\n        return this.idAttribute || \"id\";\n    },\n    generateId: function() {\n        return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.uuid)();\n    },\n    /**\n     * @deprecated\n     */ processPorts: function() {\n        // Whenever `attrs` changes, we extract ports from the `attrs` object and store it\n        // in a more accessible way. Also, if any port got removed and there were links that had `target`/`source`\n        // set to that port, we remove those links as well (to follow the same behaviour as\n        // with a removed element).\n        var previousPorts = this.ports;\n        // Collect ports from the `attrs` object.\n        var ports = {};\n        (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn)(this.get(\"attrs\"), function(attrs, selector) {\n            if (attrs && attrs.port) {\n                // `port` can either be directly an `id` or an object containing an `id` (and potentially other data).\n                if (attrs.port.id !== undefined) {\n                    ports[attrs.port.id] = attrs.port;\n                } else {\n                    ports[attrs.port] = {\n                        id: attrs.port\n                    };\n                }\n            }\n        });\n        // Collect ports that have been removed (compared to the previous ports) - if any.\n        // Use hash table for quick lookup.\n        var removedPorts = {};\n        (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn)(previousPorts, function(port, id) {\n            if (!ports[id]) removedPorts[id] = true;\n        });\n        // Remove all the incoming/outgoing links that have source/target port set to any of the removed ports.\n        if (this.graph && !(0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(removedPorts)) {\n            var inboundLinks = this.graph.getConnectedLinks(this, {\n                inbound: true\n            });\n            inboundLinks.forEach(function(link) {\n                if (removedPorts[link.get(\"target\").port]) link.remove();\n            });\n            var outboundLinks = this.graph.getConnectedLinks(this, {\n                outbound: true\n            });\n            outboundLinks.forEach(function(link) {\n                if (removedPorts[link.get(\"source\").port]) link.remove();\n            });\n        }\n        // Update the `ports` object.\n        this.ports = ports;\n    },\n    remove: function(opt = {}) {\n        // Store the graph in a variable because `this.graph` won't be accessible\n        // after `this.trigger('remove', ...)` down below.\n        const { graph, collection } = this;\n        if (!graph) {\n            // The collection is a common Backbone collection (not the graph collection).\n            if (collection) collection.remove(this, opt);\n            return this;\n        }\n        graph.startBatch(\"remove\");\n        // First, unembed this cell from its parent cell if there is one.\n        const parentCell = this.getParentCell();\n        if (parentCell) {\n            parentCell.unembed(this, opt);\n        }\n        // Remove also all the cells, which were embedded into this cell\n        const embeddedCells = this.getEmbeddedCells();\n        for(let i = 0, n = embeddedCells.length; i < n; i++){\n            const embed = embeddedCells[i];\n            if (embed) {\n                embed.remove(opt);\n            }\n        }\n        this.trigger(\"remove\", this, graph.attributes.cells, opt);\n        graph.stopBatch(\"remove\");\n        return this;\n    },\n    toFront: function(opt) {\n        var graph = this.graph;\n        if (graph) {\n            opt = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.defaults)(opt || {}, {\n                foregroundEmbeds: true\n            });\n            let cells;\n            if (opt.deep) {\n                cells = this.getEmbeddedCells({\n                    deep: true,\n                    breadthFirst: opt.breadthFirst !== false,\n                    sortSiblings: opt.foregroundEmbeds\n                });\n                cells.unshift(this);\n            } else {\n                cells = [\n                    this\n                ];\n            }\n            const sortedCells = opt.foregroundEmbeds ? cells : (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.sortBy)(cells, (cell)=>cell.z());\n            const maxZ = graph.maxZIndex();\n            let z = maxZ - cells.length + 1;\n            const collection = graph.get(\"cells\");\n            let shouldUpdate = collection.indexOf(sortedCells[0]) !== collection.length - cells.length;\n            if (!shouldUpdate) {\n                shouldUpdate = sortedCells.some(function(cell, index) {\n                    return cell.z() !== z + index;\n                });\n            }\n            if (shouldUpdate) {\n                this.startBatch(\"to-front\");\n                z = z + cells.length;\n                sortedCells.forEach(function(cell, index) {\n                    cell.set(\"z\", z + index, opt);\n                });\n                this.stopBatch(\"to-front\");\n            }\n        }\n        return this;\n    },\n    toBack: function(opt) {\n        var graph = this.graph;\n        if (graph) {\n            opt = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.defaults)(opt || {}, {\n                foregroundEmbeds: true\n            });\n            let cells;\n            if (opt.deep) {\n                cells = this.getEmbeddedCells({\n                    deep: true,\n                    breadthFirst: opt.breadthFirst !== false,\n                    sortSiblings: opt.foregroundEmbeds\n                });\n                cells.unshift(this);\n            } else {\n                cells = [\n                    this\n                ];\n            }\n            const sortedCells = opt.foregroundEmbeds ? cells : (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.sortBy)(cells, (cell)=>cell.z());\n            let z = graph.minZIndex();\n            var collection = graph.get(\"cells\");\n            let shouldUpdate = collection.indexOf(sortedCells[0]) !== 0;\n            if (!shouldUpdate) {\n                shouldUpdate = sortedCells.some(function(cell, index) {\n                    return cell.z() !== z + index;\n                });\n            }\n            if (shouldUpdate) {\n                this.startBatch(\"to-back\");\n                z -= cells.length;\n                sortedCells.forEach(function(cell, index) {\n                    cell.set(\"z\", z + index, opt);\n                });\n                this.stopBatch(\"to-back\");\n            }\n        }\n        return this;\n    },\n    parent: function(parent, opt) {\n        // getter\n        if (parent === undefined) return this.get(\"parent\");\n        // setter\n        return this.set(\"parent\", parent, opt);\n    },\n    embed: function(cell, opt) {\n        const cells = Array.isArray(cell) ? cell : [\n            cell\n        ];\n        if (!this.canEmbed(cells)) {\n            throw new Error(\"Recursive embedding not allowed.\");\n        }\n        if (cells.some((c)=>c.isEmbedded() && this.id !== c.parent())) {\n            throw new Error(\"Embedding of already embedded cells is not allowed.\");\n        }\n        this._embedCells(cells, opt);\n        return this;\n    },\n    unembed: function(cell, opt) {\n        const cells = Array.isArray(cell) ? cell : [\n            cell\n        ];\n        this._unembedCells(cells, opt);\n        return this;\n    },\n    canEmbed: function(cell) {\n        const cells = Array.isArray(cell) ? cell : [\n            cell\n        ];\n        return cells.every((c)=>this !== c && !this.isEmbeddedIn(c));\n    },\n    _embedCells: function(cells, opt) {\n        const batchName = \"embed\";\n        this.startBatch(batchName);\n        const embeds = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)([], this.get(\"embeds\"));\n        cells.forEach((cell)=>{\n            // We keep all element ids after link ids.\n            embeds[cell.isLink() ? \"unshift\" : \"push\"](cell.id);\n            cell.parent(this.id, opt);\n        });\n        this.set(\"embeds\", (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.uniq)(embeds), opt);\n        this.stopBatch(batchName);\n    },\n    _unembedCells: function(cells, opt) {\n        const batchName = \"unembed\";\n        this.startBatch(batchName);\n        cells.forEach((cell)=>cell.unset(\"parent\", opt));\n        this.set(\"embeds\", (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.without)(this.get(\"embeds\"), ...cells.map((cell)=>cell.id)), opt);\n        this.stopBatch(batchName);\n    },\n    getParentCell: function() {\n        // unlike link.source/target, cell.parent stores id directly as a string\n        var parentId = this.parent();\n        var graph = this.graph;\n        return parentId && graph && graph.getCell(parentId) || null;\n    },\n    // Return an array of ancestor cells.\n    // The array is ordered from the parent of the cell\n    // to the most distant ancestor.\n    getAncestors: function() {\n        var ancestors = [];\n        if (!this.graph) {\n            return ancestors;\n        }\n        var parentCell = this.getParentCell();\n        while(parentCell){\n            ancestors.push(parentCell);\n            parentCell = parentCell.getParentCell();\n        }\n        return ancestors;\n    },\n    getEmbeddedCells: function(opt) {\n        opt = opt || {};\n        // Cell models can only be retrieved when this element is part of a collection.\n        // There is no way this element knows about other cells otherwise.\n        // This also means that calling e.g. `translate()` on an element with embeds before\n        // adding it to a graph does not translate its embeds.\n        if (!this.graph) {\n            return [];\n        }\n        if (opt.deep) {\n            if (opt.breadthFirst) {\n                return this._getEmbeddedCellsBfs(opt.sortSiblings);\n            } else {\n                return this._getEmbeddedCellsDfs(opt.sortSiblings);\n            }\n        }\n        const embeddedIds = this.get(\"embeds\");\n        if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(embeddedIds)) {\n            return [];\n        }\n        let cells = embeddedIds.map(this.graph.getCell, this.graph);\n        if (opt.sortSiblings) {\n            cells = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.sortBy)(cells, (cell)=>cell.z());\n        }\n        return cells;\n    },\n    _getEmbeddedCellsBfs: function(sortSiblings) {\n        const cells = [];\n        const queue = [];\n        queue.push(this);\n        while(queue.length > 0){\n            const current = queue.shift();\n            cells.push(current);\n            const embeddedCells = current.getEmbeddedCells({\n                sortSiblings: sortSiblings\n            });\n            queue.push(...embeddedCells);\n        }\n        cells.shift();\n        return cells;\n    },\n    _getEmbeddedCellsDfs: function(sortSiblings) {\n        const cells = [];\n        const stack = [];\n        stack.push(this);\n        while(stack.length > 0){\n            const current = stack.pop();\n            cells.push(current);\n            const embeddedCells = current.getEmbeddedCells({\n                sortSiblings: sortSiblings\n            });\n            // When using the stack, cells that are embedded last are processed first.\n            // To maintain the original order, we need to push the cells in reverse order\n            for(let i = embeddedCells.length - 1; i >= 0; --i){\n                stack.push(embeddedCells[i]);\n            }\n        }\n        cells.shift();\n        return cells;\n    },\n    isEmbeddedIn: function(cell, opt) {\n        var cellId = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isString)(cell) ? cell : cell.id;\n        var parentId = this.parent();\n        opt = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)({\n            deep: true\n        }, opt);\n        // See getEmbeddedCells().\n        if (this.graph && opt.deep) {\n            while(parentId){\n                if (parentId === cellId) {\n                    return true;\n                }\n                parentId = this.graph.getCell(parentId).parent();\n            }\n            return false;\n        } else {\n            // When this cell is not part of a collection check\n            // at least whether it's a direct child of given cell.\n            return parentId === cellId;\n        }\n    },\n    // Whether or not the cell is embedded in any other cell.\n    isEmbedded: function() {\n        return !!this.parent();\n    },\n    // Isolated cloning. Isolated cloning has two versions: shallow and deep (pass `{ deep: true }` in `opt`).\n    // Shallow cloning simply clones the cell and returns a new cell with different ID.\n    // Deep cloning clones the cell and all its embedded cells recursively.\n    clone: function(opt) {\n        opt = opt || {};\n        if (!opt.deep) {\n            // Shallow cloning.\n            var clone = backbone__WEBPACK_IMPORTED_MODULE_0__.Model.prototype.clone.apply(this, arguments);\n            // We don't want the clone to have the same ID as the original.\n            clone.set(this.getIdAttribute(), this.generateId());\n            // A shallow cloned element does not carry over the original embeds.\n            clone.unset(\"embeds\");\n            // And can not be embedded in any cell\n            // as the clone is not part of the graph.\n            clone.unset(\"parent\");\n            return clone;\n        } else {\n            // Deep cloning.\n            // For a deep clone, simply call `graph.cloneCells()` with the cell and all its embedded cells.\n            return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.toArray)((0,_util_cloneCells_mjs__WEBPACK_IMPORTED_MODULE_3__.cloneCells)([\n                this\n            ].concat(this.getEmbeddedCells({\n                deep: true\n            }))));\n        }\n    },\n    // A convenient way to set nested properties.\n    // This method merges the properties you'd like to set with the ones\n    // stored in the cell and makes sure change events are properly triggered.\n    // You can either set a nested property with one object\n    // or use a property path.\n    // The most simple use case is:\n    // `cell.prop('name/first', 'John')` or\n    // `cell.prop({ name: { first: 'John' } })`.\n    // Nested arrays are supported too:\n    // `cell.prop('series/0/data/0/degree', 50)` or\n    // `cell.prop({ series: [ { data: [ { degree: 50 } ] } ] })`.\n    prop: function(props, value, opt) {\n        var delim = \"/\";\n        var _isString = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isString)(props);\n        if (_isString || Array.isArray(props)) {\n            // Get/set an attribute by a special path syntax that delimits\n            // nested objects by the colon character.\n            if (arguments.length > 1) {\n                var path;\n                var pathArray;\n                if (_isString) {\n                    path = props;\n                    pathArray = path.split(\"/\");\n                } else {\n                    path = props.join(delim);\n                    pathArray = props.slice();\n                }\n                var property = pathArray[0];\n                var pathArrayLength = pathArray.length;\n                const options = opt || {};\n                options.propertyPath = path;\n                options.propertyValue = value;\n                options.propertyPathArray = pathArray;\n                if (!(\"rewrite\" in options)) {\n                    options.rewrite = false;\n                }\n                var update = {};\n                // Initialize the nested object. Sub-objects are either arrays or objects.\n                // An empty array is created if the sub-key is an integer. Otherwise, an empty object is created.\n                // Note that this imposes a limitation on object keys one can use with Inspector.\n                // Pure integer keys will cause issues and are therefore not allowed.\n                var initializer = update;\n                var prevProperty = property;\n                for(var i = 1; i < pathArrayLength; i++){\n                    var pathItem = pathArray[i];\n                    var isArrayIndex = Number.isFinite(_isString ? Number(pathItem) : pathItem);\n                    initializer = initializer[prevProperty] = isArrayIndex ? [] : {};\n                    prevProperty = pathItem;\n                }\n                // Fill update with the `value` on `path`.\n                update = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.setByPath)(update, pathArray, value, \"/\");\n                var baseAttributes = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.merge)({}, this.attributes);\n                // if rewrite mode enabled, we replace value referenced by path with\n                // the new one (we don't merge).\n                options.rewrite && (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.unsetByPath)(baseAttributes, path, \"/\");\n                // Merge update with the model attributes.\n                var attributes = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.merge)(baseAttributes, update);\n                // Finally, set the property to the updated attributes.\n                return this.set(property, attributes[property], options);\n            } else {\n                return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.getByPath)(this.attributes, props, delim);\n            }\n        }\n        const options = value || {};\n        // Note: '' is not the path to the root. It's a path with an empty string i.e. { '': {}}.\n        options.propertyPath = null;\n        options.propertyValue = props;\n        options.propertyPathArray = [];\n        if (!(\"rewrite\" in options)) {\n            options.rewrite = false;\n        }\n        // Create a new object containing only the changed attributes.\n        const changedAttributes = {};\n        for(const key in props){\n            // Merging the values of changed attributes with the current ones.\n            const { changedValue } = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.merge)({}, {\n                changedValue: this.attributes[key]\n            }, {\n                changedValue: props[key]\n            });\n            changedAttributes[key] = changedValue;\n        }\n        return this.set(changedAttributes, options);\n    },\n    // A convenient way to unset nested properties\n    removeProp: function(path, opt) {\n        opt = opt || {};\n        var pathArray = Array.isArray(path) ? path : path.split(\"/\");\n        // Once a property is removed from the `attrs` attribute\n        // the cellView will recognize a `dirty` flag and re-render itself\n        // in order to remove the attribute from SVG element.\n        var property = pathArray[0];\n        if (property === \"attrs\") opt.dirty = true;\n        if (pathArray.length === 1) {\n            // A top level property\n            return this.unset(path, opt);\n        }\n        // A nested property\n        var nestedPath = pathArray.slice(1);\n        var propertyValue = this.get(property);\n        if (propertyValue === undefined || propertyValue === null) return this;\n        propertyValue = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.cloneDeep)(propertyValue);\n        (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.unsetByPath)(propertyValue, nestedPath, \"/\");\n        return this.set(property, propertyValue, opt);\n    },\n    // A convenient way to set nested attributes.\n    attr: function(attrs, value, opt) {\n        var args = Array.from(arguments);\n        if (args.length === 0) {\n            return this.get(\"attrs\");\n        }\n        if (Array.isArray(attrs)) {\n            args[0] = [\n                \"attrs\"\n            ].concat(attrs);\n        } else if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isString)(attrs)) {\n            // Get/set an attribute by a special path syntax that delimits\n            // nested objects by the colon character.\n            args[0] = \"attrs/\" + attrs;\n        } else {\n            args[0] = {\n                \"attrs\": attrs\n            };\n        }\n        return this.prop.apply(this, args);\n    },\n    // A convenient way to unset nested attributes\n    removeAttr: function(path, opt) {\n        if (Array.isArray(path)) {\n            return this.removeProp([\n                \"attrs\"\n            ].concat(path));\n        }\n        return this.removeProp(\"attrs/\" + path, opt);\n    },\n    transition: function(path, value, opt, delim) {\n        delim = delim || \"/\";\n        var defaults = {\n            duration: 100,\n            delay: 10,\n            timingFunction: _util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.timing.linear,\n            valueFunction: _util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.interpolate.number\n        };\n        opt = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)(defaults, opt);\n        var firstFrameTime = 0;\n        var interpolatingFunction;\n        var setter = (function(runtime) {\n            var id, progress, propertyValue;\n            firstFrameTime = firstFrameTime || runtime;\n            runtime -= firstFrameTime;\n            progress = runtime / opt.duration;\n            if (progress < 1) {\n                this._transitionIds[path] = id = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.nextFrame)(setter);\n            } else {\n                progress = 1;\n                delete this._transitionIds[path];\n            }\n            propertyValue = interpolatingFunction(opt.timingFunction(progress));\n            opt.transitionId = id;\n            this.prop(path, propertyValue, opt);\n            if (!id) this.trigger(\"transition:end\", this, path);\n        }).bind(this);\n        const { _scheduledTransitionIds } = this;\n        let initialId;\n        var initiator = (callback)=>{\n            if (_scheduledTransitionIds[path]) {\n                _scheduledTransitionIds[path] = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.without)(_scheduledTransitionIds[path], initialId);\n                if (_scheduledTransitionIds[path].length === 0) {\n                    delete _scheduledTransitionIds[path];\n                }\n            }\n            this.stopPendingTransitions(path, delim);\n            interpolatingFunction = opt.valueFunction((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.getByPath)(this.attributes, path, delim), value);\n            this._transitionIds[path] = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.nextFrame)(callback);\n            this.trigger(\"transition:start\", this, path);\n        };\n        initialId = setTimeout(initiator, opt.delay, setter);\n        _scheduledTransitionIds[path] || (_scheduledTransitionIds[path] = []);\n        _scheduledTransitionIds[path].push(initialId);\n        return initialId;\n    },\n    getTransitions: function() {\n        return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.union)(Object.keys(this._transitionIds), Object.keys(this._scheduledTransitionIds));\n    },\n    stopScheduledTransitions: function(path, delim = \"/\") {\n        const { _scheduledTransitionIds = {} } = this;\n        let transitions = Object.keys(_scheduledTransitionIds);\n        if (path) {\n            const pathArray = path.split(delim);\n            transitions = transitions.filter((key)=>{\n                return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isEqual)(pathArray, key.split(delim).slice(0, pathArray.length));\n            });\n        }\n        transitions.forEach((key)=>{\n            const transitionIds = _scheduledTransitionIds[key];\n            // stop the initiator\n            transitionIds.forEach((transitionId)=>clearTimeout(transitionId));\n            delete _scheduledTransitionIds[key];\n        // Note: we could trigger transition:cancel` event here\n        });\n        return this;\n    },\n    stopPendingTransitions (path, delim = \"/\") {\n        const { _transitionIds = {} } = this;\n        let transitions = Object.keys(_transitionIds);\n        if (path) {\n            const pathArray = path.split(delim);\n            transitions = transitions.filter((key)=>{\n                return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isEqual)(pathArray, key.split(delim).slice(0, pathArray.length));\n            });\n        }\n        transitions.forEach((key)=>{\n            const transitionId = _transitionIds[key];\n            // stop the setter\n            (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.cancelFrame)(transitionId);\n            delete _transitionIds[key];\n            this.trigger(\"transition:end\", this, key);\n        });\n    },\n    stopTransitions: function(path, delim = \"/\") {\n        this.stopScheduledTransitions(path, delim);\n        this.stopPendingTransitions(path, delim);\n        return this;\n    },\n    // A shorcut making it easy to create constructs like the following:\n    // `var el = (new joint.shapes.basic.Rect).addTo(graph)`.\n    addTo: function(graph, opt) {\n        graph.addCell(this, opt);\n        return this;\n    },\n    // A shortcut for an equivalent call: `paper.findViewByModel(cell)`\n    // making it easy to create constructs like the following:\n    // `cell.findView(paper).highlight()`\n    findView: function(paper) {\n        return paper.findViewByModel(this);\n    },\n    isElement: function() {\n        return false;\n    },\n    isLink: function() {\n        return false;\n    },\n    startBatch: function(name, opt) {\n        if (this.graph) {\n            this.graph.startBatch(name, (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)({}, opt, {\n                cell: this\n            }));\n        }\n        return this;\n    },\n    stopBatch: function(name, opt) {\n        if (this.graph) {\n            this.graph.stopBatch(name, (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)({}, opt, {\n                cell: this\n            }));\n        }\n        return this;\n    },\n    getChangeFlag: function(attributes) {\n        var flag = 0;\n        if (!attributes) return flag;\n        for(var key in attributes){\n            if (!attributes.hasOwnProperty(key) || !this.hasChanged(key)) continue;\n            flag |= attributes[key];\n        }\n        return flag;\n    },\n    angle: function() {\n        // To be overridden.\n        return 0;\n    },\n    position: function() {\n        // To be overridden.\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Point(0, 0);\n    },\n    z: function() {\n        return this.get(\"z\") || 0;\n    },\n    getPointFromConnectedLink: function() {\n        // To be overridden\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Point();\n    },\n    getBBox: function() {\n        // To be overridden\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(0, 0, 0, 0);\n    },\n    getPointRotatedAroundCenter (angle, x, y) {\n        const point = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Point(x, y);\n        if (angle) point.rotate(this.getBBox().center(), angle);\n        return point;\n    },\n    getAbsolutePointFromRelative (x, y) {\n        // Rotate the position to take the model angle into account\n        return this.getPointRotatedAroundCenter(-this.angle(), // Transform the relative position to absolute\n        this.position().offset(x, y));\n    },\n    getRelativePointFromAbsolute (x, y) {\n        return this// Rotate the coordinates to mitigate the element's rotation.\n        .getPointRotatedAroundCenter(this.angle(), x, y)// Transform the absolute position into relative\n        .difference(this.position());\n    }\n}, {\n    getAttributeDefinition: function(attrName) {\n        var defNS = this.attributes;\n        var globalDefNS = _attributes_index_mjs__WEBPACK_IMPORTED_MODULE_6__.attributes;\n        return defNS && defNS[attrName] || globalDefNS[attrName];\n    },\n    define: function(type, defaults, protoProps, staticProps) {\n        protoProps = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)({\n            defaults: (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultsDeep)({\n                type: type\n            }, defaults, this.prototype.defaults)\n        }, protoProps);\n        var Cell = this.extend(protoProps, staticProps);\n        // es5 backward compatibility\n        /* eslint-disable no-undef */ if (typeof joint !== \"undefined\" && (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.has)(joint, \"shapes\")) {\n            (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_2__.setByPath)(joint.shapes, type, Cell, \".\");\n        }\n        /* eslint-enable no-undef */ return Cell;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/Cell.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/CellView.mjs":
/*!***************************************************!*\
  !*** ./node_modules/jointjs/src/dia/CellView.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellView: () => (/* binding */ CellView)\n/* harmony export */ });\n/* harmony import */ var _config_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/index.mjs */ \"(ssr)/./node_modules/jointjs/src/config/index.mjs\");\n/* harmony import */ var _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mvc/index.mjs */ \"(ssr)/./node_modules/jointjs/src/mvc/View.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var _HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./HighlighterView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\");\n\n\n\n\n\n\n\nconst HighlightingTypes = {\n    DEFAULT: \"default\",\n    EMBEDDING: \"embedding\",\n    CONNECTING: \"connecting\",\n    MAGNET_AVAILABILITY: \"magnetAvailability\",\n    ELEMENT_AVAILABILITY: \"elementAvailability\"\n};\nconst Flags = {\n    TOOLS: \"TOOLS\"\n};\n// CellView base view and controller.\n// --------------------------------------------\n// This is the base view and controller for `ElementView` and `LinkView`.\nconst CellView = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_1__.View.extend({\n    tagName: \"g\",\n    svgElement: true,\n    selector: \"root\",\n    metrics: null,\n    className: function() {\n        var classNames = [\n            \"cell\"\n        ];\n        var type = this.model.get(\"type\");\n        if (type) {\n            type.toLowerCase().split(\".\").forEach(function(value, index, list) {\n                classNames.push(\"type-\" + list.slice(0, index + 1).join(\"-\"));\n            });\n        }\n        return classNames.join(\" \");\n    },\n    _presentationAttributes: null,\n    _flags: null,\n    setFlags: function() {\n        var flags = {};\n        var attributes = {};\n        var shift = 0;\n        var i, n, label;\n        var presentationAttributes = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.result)(this, \"presentationAttributes\");\n        for(var attribute in presentationAttributes){\n            if (!presentationAttributes.hasOwnProperty(attribute)) continue;\n            var labels = presentationAttributes[attribute];\n            if (!Array.isArray(labels)) labels = [\n                labels\n            ];\n            for(i = 0, n = labels.length; i < n; i++){\n                label = labels[i];\n                var flag = flags[label];\n                if (!flag) {\n                    flag = flags[label] = 1 << shift++;\n                }\n                attributes[attribute] |= flag;\n            }\n        }\n        var initFlag = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.result)(this, \"initFlag\");\n        if (!Array.isArray(initFlag)) initFlag = [\n            initFlag\n        ];\n        for(i = 0, n = initFlag.length; i < n; i++){\n            label = initFlag[i];\n            if (!flags[label]) flags[label] = 1 << shift++;\n        }\n        // 26 - 30 are reserved for paper flags\n        // 31+ overflows maximal number\n        if (shift > 25) throw new Error(\"dia.CellView: Maximum number of flags exceeded.\");\n        this._flags = flags;\n        this._presentationAttributes = attributes;\n    },\n    hasFlag: function(flag, label) {\n        return flag & this.getFlag(label);\n    },\n    removeFlag: function(flag, label) {\n        return flag ^ flag & this.getFlag(label);\n    },\n    getFlag: function(label) {\n        var flags = this._flags;\n        if (!flags) return 0;\n        var flag = 0;\n        if (Array.isArray(label)) {\n            for(var i = 0, n = label.length; i < n; i++)flag |= flags[label[i]];\n        } else {\n            flag |= flags[label];\n        }\n        return flag;\n    },\n    attributes: function() {\n        var cell = this.model;\n        return {\n            \"model-id\": cell.id,\n            \"data-type\": cell.attributes.type\n        };\n    },\n    constructor: function(options) {\n        // Make sure a global unique id is assigned to this view. Store this id also to the properties object.\n        // The global unique id makes sure that the same view can be rendered on e.g. different machines and\n        // still be associated to the same object among all those clients. This is necessary for real-time\n        // collaboration mechanism.\n        options.id = options.id || (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.guid)(this);\n        _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_1__.View.call(this, options);\n    },\n    initialize: function() {\n        this.setFlags();\n        _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_1__.View.prototype.initialize.apply(this, arguments);\n        this.cleanNodesCache();\n        // Store reference to this to the <g> DOM element so that the view is accessible through the DOM tree.\n        this.$el.data(\"view\", this);\n        this.startListening();\n    },\n    startListening: function() {\n        this.listenTo(this.model, \"change\", this.onAttributesChange);\n    },\n    onAttributesChange: function(model, opt) {\n        var flag = model.getChangeFlag(this._presentationAttributes);\n        if (opt.updateHandled || !flag) return;\n        if (opt.dirty && this.hasFlag(flag, \"UPDATE\")) flag |= this.getFlag(\"RENDER\");\n        // TODO: tool changes does not need to be sync\n        // Fix Segments tools\n        if (opt.tool) opt.async = false;\n        this.requestUpdate(flag, opt);\n    },\n    requestUpdate: function(flags, opt) {\n        const { paper } = this;\n        if (paper && flags > 0) {\n            paper.requestViewUpdate(this, flags, this.UPDATE_PRIORITY, opt);\n        }\n    },\n    parseDOMJSON: function(markup, root) {\n        var doc = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.parseDOMJSON)(markup);\n        var selectors = doc.selectors;\n        var groups = doc.groupSelectors;\n        for(var group in groups){\n            if (selectors[group]) throw new Error(\"dia.CellView: ambiguous group selector\");\n            selectors[group] = groups[group];\n        }\n        if (root) {\n            var rootSelector = this.selector;\n            if (selectors[rootSelector]) throw new Error(\"dia.CellView: ambiguous root selector.\");\n            selectors[rootSelector] = root;\n        }\n        return {\n            fragment: doc.fragment,\n            selectors: selectors\n        };\n    },\n    // Return `true` if cell link is allowed to perform a certain UI `feature`.\n    // Example: `can('vertexMove')`, `can('labelMove')`.\n    can: function(feature) {\n        var interactive = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isFunction)(this.options.interactive) ? this.options.interactive(this) : this.options.interactive;\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(interactive) && interactive[feature] !== false || (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(interactive) && interactive !== false;\n    },\n    findBySelector: function(selector, root, selectors) {\n        root || (root = this.el);\n        selectors || (selectors = this.selectors);\n        // These are either descendants of `this.$el` of `this.$el` itself.\n        // `.` is a special selector used to select the wrapping `<g>` element.\n        if (!selector || selector === \".\") return [\n            root\n        ];\n        if (selectors) {\n            var nodes = selectors[selector];\n            if (nodes) {\n                if (Array.isArray(nodes)) return nodes;\n                return [\n                    nodes\n                ];\n            }\n        }\n        // Maintaining backwards compatibility\n        // e.g. `circle:first` would fail with querySelector() call\n        if (_config_index_mjs__WEBPACK_IMPORTED_MODULE_4__.config.useCSSSelectors) return jquery__WEBPACK_IMPORTED_MODULE_0__(root).find(selector).toArray();\n        return [];\n    },\n    notify: function(eventName) {\n        if (this.paper) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            // Trigger the event on both the element itself and also on the paper.\n            this.trigger.apply(this, [\n                eventName\n            ].concat(args));\n            // Paper event handlers receive the view object as the first argument.\n            this.paper.trigger.apply(this.paper, [\n                eventName,\n                this\n            ].concat(args));\n        }\n    },\n    getBBox: function(opt) {\n        var bbox;\n        if (opt && opt.useModelGeometry) {\n            var model = this.model;\n            bbox = model.getBBox().bbox(model.angle());\n        } else {\n            bbox = this.getNodeBBox(this.el);\n        }\n        return this.paper.localToPaperRect(bbox);\n    },\n    getNodeBBox: function(magnet) {\n        const rect = this.getNodeBoundingRect(magnet);\n        const transformMatrix = this.getRootTranslateMatrix().multiply(this.getNodeRotateMatrix(magnet));\n        const magnetMatrix = this.getNodeMatrix(magnet);\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].transformRect(rect, transformMatrix.multiply(magnetMatrix));\n    },\n    getNodeRotateMatrix (node) {\n        if (!this.rotatableNode || this.rotatableNode.contains(node)) {\n            // Rotate transformation is applied to all nodes when no rotatableGroup\n            // is present or to nodes inside the rotatableGroup only.\n            return this.getRootRotateMatrix();\n        }\n        // Nodes outside the rotatable group\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createSVGMatrix();\n    },\n    getNodeUnrotatedBBox: function(magnet) {\n        var rect = this.getNodeBoundingRect(magnet);\n        var magnetMatrix = this.getNodeMatrix(magnet);\n        var translateMatrix = this.getRootTranslateMatrix();\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].transformRect(rect, translateMatrix.multiply(magnetMatrix));\n    },\n    getRootTranslateMatrix: function() {\n        var model = this.model;\n        var position = model.position();\n        var mt = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createSVGMatrix().translate(position.x, position.y);\n        return mt;\n    },\n    getRootRotateMatrix: function() {\n        var mr = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createSVGMatrix();\n        var model = this.model;\n        var angle = model.angle();\n        if (angle) {\n            var bbox = model.getBBox();\n            var cx = bbox.width / 2;\n            var cy = bbox.height / 2;\n            mr = mr.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n        }\n        return mr;\n    },\n    _notifyHighlight: function(eventName, el, opt = {}) {\n        const { el: rootNode } = this;\n        let node;\n        if (typeof el === \"string\") {\n            [node = rootNode] = this.findBySelector(el);\n        } else {\n            [node = rootNode] = this.$(el);\n        }\n        // set partial flag if the highlighted element is not the entire view.\n        opt.partial = node !== rootNode;\n        // translate type flag into a type string\n        if (opt.type === undefined) {\n            let type;\n            switch(true){\n                case opt.embedding:\n                    type = HighlightingTypes.EMBEDDING;\n                    break;\n                case opt.connecting:\n                    type = HighlightingTypes.CONNECTING;\n                    break;\n                case opt.magnetAvailability:\n                    type = HighlightingTypes.MAGNET_AVAILABILITY;\n                    break;\n                case opt.elementAvailability:\n                    type = HighlightingTypes.ELEMENT_AVAILABILITY;\n                    break;\n                default:\n                    type = HighlightingTypes.DEFAULT;\n                    break;\n            }\n            opt.type = type;\n        }\n        this.notify(eventName, node, opt);\n        return this;\n    },\n    highlight: function(el, opt) {\n        return this._notifyHighlight(\"cell:highlight\", el, opt);\n    },\n    unhighlight: function(el, opt = {}) {\n        return this._notifyHighlight(\"cell:unhighlight\", el, opt);\n    },\n    // Find the closest element that has the `magnet` attribute set to `true`. If there was not such\n    // an element found, return the root element of the cell view.\n    findMagnet: function(el) {\n        const root = this.el;\n        let magnet = this.$(el)[0];\n        if (!magnet) {\n            magnet = root;\n        }\n        do {\n            const magnetAttribute = magnet.getAttribute(\"magnet\");\n            const isMagnetRoot = magnet === root;\n            if ((magnetAttribute || isMagnetRoot) && magnetAttribute !== \"false\") {\n                return magnet;\n            }\n            if (isMagnetRoot) {\n                // If the overall cell has set `magnet === false`, then return `undefined` to\n                // announce there is no magnet found for this cell.\n                // This is especially useful to set on cells that have 'ports'. In this case,\n                // only the ports have set `magnet === true` and the overall element has `magnet === false`.\n                return undefined;\n            }\n            magnet = magnet.parentNode;\n        }while (magnet);\n        return undefined;\n    },\n    findProxyNode: function(el, type) {\n        el || (el = this.el);\n        const nodeSelector = el.getAttribute(`${type}-selector`);\n        if (nodeSelector) {\n            const [proxyNode] = this.findBySelector(nodeSelector);\n            if (proxyNode) return proxyNode;\n        }\n        return el;\n    },\n    // Construct a unique selector for the `el` element within this view.\n    // `prevSelector` is being collected through the recursive call.\n    // No value for `prevSelector` is expected when using this method.\n    getSelector: function(el, prevSelector) {\n        var selector;\n        if (el === this.el) {\n            if (typeof prevSelector === \"string\") selector = \"> \" + prevSelector;\n            return selector;\n        }\n        if (el) {\n            var nthChild = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(el).index() + 1;\n            selector = el.tagName + \":nth-child(\" + nthChild + \")\";\n            if (prevSelector) {\n                selector += \" > \" + prevSelector;\n            }\n            selector = this.getSelector(el.parentNode, selector);\n        }\n        return selector;\n    },\n    addLinkFromMagnet: function(magnet, x, y) {\n        var paper = this.paper;\n        var graph = paper.model;\n        var link = paper.getDefaultLink(this, magnet);\n        link.set({\n            source: this.getLinkEnd(magnet, x, y, link, \"source\"),\n            target: {\n                x: x,\n                y: y\n            }\n        }).addTo(graph, {\n            async: false,\n            ui: true\n        });\n        return link.findView(paper);\n    },\n    getLinkEnd: function(magnet, ...args) {\n        var model = this.model;\n        var id = model.id;\n        var port = this.findAttribute(\"port\", magnet);\n        // Find a unique `selector` of the element under pointer that is a magnet.\n        var selector = magnet.getAttribute(\"joint-selector\");\n        var end = {\n            id: id\n        };\n        if (selector != null) end.magnet = selector;\n        if (port != null) {\n            end.port = port;\n            if (!model.hasPort(port) && !selector) {\n                // port created via the `port` attribute (not API)\n                end.selector = this.getSelector(magnet);\n            }\n        } else if (selector == null && this.el !== magnet) {\n            end.selector = this.getSelector(magnet);\n        }\n        return this.customizeLinkEnd(end, magnet, ...args);\n    },\n    customizeLinkEnd: function(end, magnet, x, y, link, endType) {\n        const { paper } = this;\n        const { connectionStrategy } = paper.options;\n        if (typeof connectionStrategy === \"function\") {\n            var strategy = connectionStrategy.call(paper, end, this, magnet, new _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Point(x, y), link, endType, paper);\n            if (strategy) return strategy;\n        }\n        return end;\n    },\n    getMagnetFromLinkEnd: function(end) {\n        var root = this.el;\n        var port = end.port;\n        var selector = end.magnet;\n        var model = this.model;\n        var magnet;\n        if (port != null && model.isElement() && model.hasPort(port)) {\n            magnet = this.findPortNode(port, selector) || root;\n        } else {\n            if (!selector) selector = end.selector;\n            if (!selector && port != null) {\n                // link end has only `id` and `port` property referencing\n                // a port created via the `port` attribute (not API).\n                selector = '[port=\"' + port + '\"]';\n            }\n            magnet = this.findBySelector(selector, root, this.selectors)[0];\n        }\n        return this.findProxyNode(magnet, \"magnet\");\n    },\n    dragLinkStart: function(evt, magnet, x, y) {\n        this.model.startBatch(\"add-link\");\n        const linkView = this.addLinkFromMagnet(magnet, x, y);\n        // backwards compatibility events\n        linkView.notifyPointerdown(evt, x, y);\n        linkView.eventData(evt, linkView.startArrowheadMove(\"target\", {\n            whenNotAllowed: \"remove\"\n        }));\n        this.eventData(evt, {\n            linkView\n        });\n    },\n    dragLink: function(evt, x, y) {\n        var data = this.eventData(evt);\n        var linkView = data.linkView;\n        if (linkView) {\n            linkView.pointermove(evt, x, y);\n        } else {\n            var paper = this.paper;\n            var magnetThreshold = paper.options.magnetThreshold;\n            var currentTarget = this.getEventTarget(evt);\n            var targetMagnet = data.targetMagnet;\n            if (magnetThreshold === \"onleave\") {\n                // magnetThreshold when the pointer leaves the magnet\n                if (targetMagnet === currentTarget || (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(targetMagnet).contains(currentTarget)) return;\n            } else {\n                // magnetThreshold defined as a number of movements\n                if (paper.eventData(evt).mousemoved <= magnetThreshold) return;\n            }\n            this.dragLinkStart(evt, targetMagnet, x, y);\n        }\n    },\n    dragLinkEnd: function(evt, x, y) {\n        var data = this.eventData(evt);\n        var linkView = data.linkView;\n        if (!linkView) return;\n        linkView.pointerup(evt, x, y);\n        this.model.stopBatch(\"add-link\");\n    },\n    getAttributeDefinition: function(attrName) {\n        return this.model.constructor.getAttributeDefinition(attrName);\n    },\n    setNodeAttributes: function(node, attrs) {\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(attrs)) {\n            if (node instanceof SVGElement) {\n                (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(node).attr(attrs);\n            } else {\n                jquery__WEBPACK_IMPORTED_MODULE_0__(node).attr(attrs);\n            }\n        }\n    },\n    processNodeAttributes: function(node, attrs) {\n        var attrName, attrVal, def, i, n;\n        var normalAttrs, setAttrs, positionAttrs, offsetAttrs;\n        var relatives = [];\n        // divide the attributes between normal and special\n        for(attrName in attrs){\n            if (!attrs.hasOwnProperty(attrName)) continue;\n            attrVal = attrs[attrName];\n            def = this.getAttributeDefinition(attrName);\n            if (def && (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isFunction)(def.qualify) || def.qualify.call(this, attrVal, node, attrs, this))) {\n                if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isString)(def.set)) {\n                    normalAttrs || (normalAttrs = {});\n                    normalAttrs[def.set] = attrVal;\n                }\n                if (attrVal !== null) {\n                    relatives.push(attrName, def);\n                }\n            } else {\n                normalAttrs || (normalAttrs = {});\n                normalAttrs[(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.toKebabCase)(attrName)] = attrVal;\n            }\n        }\n        // handle the rest of attributes via related method\n        // from the special attributes namespace.\n        for(i = 0, n = relatives.length; i < n; i += 2){\n            attrName = relatives[i];\n            def = relatives[i + 1];\n            attrVal = attrs[attrName];\n            if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isFunction)(def.set)) {\n                setAttrs || (setAttrs = {});\n                setAttrs[attrName] = attrVal;\n            }\n            if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isFunction)(def.position)) {\n                positionAttrs || (positionAttrs = {});\n                positionAttrs[attrName] = attrVal;\n            }\n            if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isFunction)(def.offset)) {\n                offsetAttrs || (offsetAttrs = {});\n                offsetAttrs[attrName] = attrVal;\n            }\n        }\n        return {\n            raw: attrs,\n            normal: normalAttrs,\n            set: setAttrs,\n            position: positionAttrs,\n            offset: offsetAttrs\n        };\n    },\n    updateRelativeAttributes: function(node, attrs, refBBox, opt) {\n        opt || (opt = {});\n        var attrName, attrVal, def;\n        var rawAttrs = attrs.raw || {};\n        var nodeAttrs = attrs.normal || {};\n        var setAttrs = attrs.set;\n        var positionAttrs = attrs.position;\n        var offsetAttrs = attrs.offset;\n        for(attrName in setAttrs){\n            attrVal = setAttrs[attrName];\n            def = this.getAttributeDefinition(attrName);\n            // SET - set function should return attributes to be set on the node,\n            // which will affect the node dimensions based on the reference bounding\n            // box. e.g. `width`, `height`, `d`, `rx`, `ry`, `points\n            var setResult = def.set.call(this, attrVal, refBBox.clone(), node, rawAttrs, this);\n            if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(setResult)) {\n                (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.assign)(nodeAttrs, setResult);\n            } else if (setResult !== undefined) {\n                nodeAttrs[attrName] = setResult;\n            }\n        }\n        if (node instanceof HTMLElement) {\n            // TODO: setting the `transform` attribute on HTMLElements\n            // via `node.style.transform = 'matrix(...)';` would introduce\n            // a breaking change (e.g. basic.TextBlock).\n            this.setNodeAttributes(node, nodeAttrs);\n            return;\n        }\n        // The final translation of the subelement.\n        var nodeTransform = nodeAttrs.transform;\n        var nodeMatrix = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].transformStringToMatrix(nodeTransform);\n        var nodePosition = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Point)(nodeMatrix.e, nodeMatrix.f);\n        if (nodeTransform) {\n            nodeAttrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.omit)(nodeAttrs, \"transform\");\n            nodeMatrix.e = nodeMatrix.f = 0;\n        }\n        // Calculate node scale determined by the scalable group\n        // only if later needed.\n        var sx, sy, translation;\n        if (positionAttrs || offsetAttrs) {\n            var nodeScale = this.getNodeScale(node, opt.scalableNode);\n            sx = nodeScale.sx;\n            sy = nodeScale.sy;\n        }\n        var positioned = false;\n        for(attrName in positionAttrs){\n            attrVal = positionAttrs[attrName];\n            def = this.getAttributeDefinition(attrName);\n            // POSITION - position function should return a point from the\n            // reference bounding box. The default position of the node is x:0, y:0 of\n            // the reference bounding box or could be further specify by some\n            // SVG attributes e.g. `x`, `y`\n            translation = def.position.call(this, attrVal, refBBox.clone(), node, rawAttrs, this);\n            if (translation) {\n                nodePosition.offset((0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Point)(translation).scale(sx, sy));\n                positioned || (positioned = true);\n            }\n        }\n        // The node bounding box could depend on the `size` set from the previous loop.\n        // Here we know, that all the size attributes have been already set.\n        this.setNodeAttributes(node, nodeAttrs);\n        var offseted = false;\n        if (offsetAttrs) {\n            // Check if the node is visible\n            var nodeBoundingRect = this.getNodeBoundingRect(node);\n            if (nodeBoundingRect.width > 0 && nodeBoundingRect.height > 0) {\n                var nodeBBox = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].transformRect(nodeBoundingRect, nodeMatrix).scale(1 / sx, 1 / sy);\n                for(attrName in offsetAttrs){\n                    attrVal = offsetAttrs[attrName];\n                    def = this.getAttributeDefinition(attrName);\n                    // OFFSET - offset function should return a point from the element\n                    // bounding box. The default offset point is x:0, y:0 (origin) or could be further\n                    // specify with some SVG attributes e.g. `text-anchor`, `cx`, `cy`\n                    translation = def.offset.call(this, attrVal, nodeBBox, node, rawAttrs, this);\n                    if (translation) {\n                        nodePosition.offset((0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Point)(translation).scale(sx, sy));\n                        offseted || (offseted = true);\n                    }\n                }\n            }\n        }\n        // Do not touch node's transform attribute if there is no transformation applied.\n        if (nodeTransform !== undefined || positioned || offseted) {\n            // Round the coordinates to 1 decimal point.\n            nodePosition.round(1);\n            nodeMatrix.e = nodePosition.x;\n            nodeMatrix.f = nodePosition.y;\n            node.setAttribute(\"transform\", _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].matrixToTransformString(nodeMatrix));\n        // TODO: store nodeMatrix metrics?\n        }\n    },\n    getNodeScale: function(node, scalableNode) {\n        // Check if the node is a descendant of the scalable group.\n        var sx, sy;\n        if (scalableNode && scalableNode.contains(node)) {\n            var scale = scalableNode.scale();\n            sx = 1 / scale.sx;\n            sy = 1 / scale.sy;\n        } else {\n            sx = 1;\n            sy = 1;\n        }\n        return {\n            sx: sx,\n            sy: sy\n        };\n    },\n    cleanNodesCache: function() {\n        this.metrics = {};\n    },\n    nodeCache: function(magnet) {\n        var metrics = this.metrics;\n        // Don't use cache? It most likely a custom view with overridden update.\n        if (!metrics) return {};\n        var id = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ensureId(magnet);\n        var value = metrics[id];\n        if (!value) value = metrics[id] = {};\n        return value;\n    },\n    getNodeData: function(magnet) {\n        var metrics = this.nodeCache(magnet);\n        if (!metrics.data) metrics.data = {};\n        return metrics.data;\n    },\n    getNodeBoundingRect: function(magnet) {\n        var metrics = this.nodeCache(magnet);\n        if (metrics.boundingRect === undefined) metrics.boundingRect = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(magnet).getBBox();\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Rect(metrics.boundingRect);\n    },\n    getNodeMatrix: function(magnet) {\n        const metrics = this.nodeCache(magnet);\n        if (metrics.magnetMatrix === undefined) {\n            const { rotatableNode, el } = this;\n            let target;\n            if (rotatableNode && rotatableNode.contains(magnet)) {\n                target = rotatableNode;\n            } else {\n                target = el;\n            }\n            metrics.magnetMatrix = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(magnet).getTransformToElement(target);\n        }\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createSVGMatrix(metrics.magnetMatrix);\n    },\n    getNodeShape: function(magnet) {\n        var metrics = this.nodeCache(magnet);\n        if (metrics.geometryShape === undefined) metrics.geometryShape = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(magnet).toGeometryShape();\n        return metrics.geometryShape.clone();\n    },\n    isNodeConnection: function(node) {\n        return this.model.isLink() && (!node || node === this.el);\n    },\n    findNodesAttributes: function(attrs, root, selectorCache, selectors) {\n        var i, n, nodeAttrs, nodeId;\n        var nodesAttrs = {};\n        var mergeIds = [];\n        for(var selector in attrs){\n            if (!attrs.hasOwnProperty(selector)) continue;\n            nodeAttrs = attrs[selector];\n            if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(nodeAttrs)) continue; // Not a valid selector-attributes pair\n            var selected = selectorCache[selector] = this.findBySelector(selector, root, selectors);\n            for(i = 0, n = selected.length; i < n; i++){\n                var node = selected[i];\n                nodeId = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ensureId(node);\n                // \"unique\" selectors are selectors that referencing a single node (defined by `selector`)\n                // groupSelector referencing a single node is not \"unique\"\n                var unique = selectors && selectors[selector] === node;\n                var prevNodeAttrs = nodesAttrs[nodeId];\n                if (prevNodeAttrs) {\n                    // Note, that nodes referenced by deprecated `CSS selectors` are not taken into account.\n                    // e.g. css:`.circle` and selector:`circle` can be applied in a random order\n                    if (!prevNodeAttrs.array) {\n                        mergeIds.push(nodeId);\n                        prevNodeAttrs.array = true;\n                        prevNodeAttrs.attributes = [\n                            prevNodeAttrs.attributes\n                        ];\n                        prevNodeAttrs.selectedLength = [\n                            prevNodeAttrs.selectedLength\n                        ];\n                    }\n                    var attributes = prevNodeAttrs.attributes;\n                    var selectedLength = prevNodeAttrs.selectedLength;\n                    if (unique) {\n                        // node referenced by `selector`\n                        attributes.unshift(nodeAttrs);\n                        selectedLength.unshift(-1);\n                    } else {\n                        // node referenced by `groupSelector`\n                        var sortIndex = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.sortedIndex)(selectedLength, n);\n                        attributes.splice(sortIndex, 0, nodeAttrs);\n                        selectedLength.splice(sortIndex, 0, n);\n                    }\n                } else {\n                    nodesAttrs[nodeId] = {\n                        attributes: nodeAttrs,\n                        selectedLength: unique ? -1 : n,\n                        node: node,\n                        array: false\n                    };\n                }\n            }\n        }\n        for(i = 0, n = mergeIds.length; i < n; i++){\n            nodeId = mergeIds[i];\n            nodeAttrs = nodesAttrs[nodeId];\n            nodeAttrs.attributes = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.merge)({}, ...nodeAttrs.attributes.reverse());\n        }\n        return nodesAttrs;\n    },\n    getEventTarget: function(evt, opt = {}) {\n        const { target, type, clientX = 0, clientY = 0 } = evt;\n        if (// Explicitly defined `fromPoint` option\n        opt.fromPoint || // Touchmove/Touchend event's target is not reflecting the element under the coordinates as mousemove does.\n        // It holds the element when a touchstart triggered.\n        type === \"touchmove\" || type === \"touchend\" || // Pointermove/Pointerup event with the pointer captured\n        \"pointerId\" in evt && target.hasPointerCapture(evt.pointerId)) {\n            return document.elementFromPoint(clientX, clientY);\n        }\n        return target;\n    },\n    // Default is to process the `model.attributes.attrs` object and set attributes on subelements based on the selectors,\n    // unless `attrs` parameter was passed.\n    updateDOMSubtreeAttributes: function(rootNode, attrs, opt) {\n        opt || (opt = {});\n        opt.rootBBox || (opt.rootBBox = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Rect)());\n        opt.selectors || (opt.selectors = this.selectors); // selector collection to use\n        // Cache table for query results and bounding box calculation.\n        // Note that `selectorCache` needs to be invalidated for all\n        // `updateAttributes` calls, as the selectors might pointing\n        // to nodes designated by an attribute or elements dynamically\n        // created.\n        var selectorCache = {};\n        var bboxCache = {};\n        var relativeItems = [];\n        var relativeRefItems = [];\n        var item, node, nodeAttrs, nodeData, processedAttrs;\n        var roAttrs = opt.roAttributes;\n        var nodesAttrs = this.findNodesAttributes(roAttrs || attrs, rootNode, selectorCache, opt.selectors);\n        // `nodesAttrs` are different from all attributes, when\n        // rendering only  attributes sent to this method.\n        var nodesAllAttrs = roAttrs ? this.findNodesAttributes(attrs, rootNode, selectorCache, opt.selectors) : nodesAttrs;\n        for(var nodeId in nodesAttrs){\n            nodeData = nodesAttrs[nodeId];\n            nodeAttrs = nodeData.attributes;\n            node = nodeData.node;\n            processedAttrs = this.processNodeAttributes(node, nodeAttrs);\n            if (!processedAttrs.set && !processedAttrs.position && !processedAttrs.offset) {\n                // Set all the normal attributes right on the SVG/HTML element.\n                this.setNodeAttributes(node, processedAttrs.normal);\n            } else {\n                var nodeAllAttrs = nodesAllAttrs[nodeId] && nodesAllAttrs[nodeId].attributes;\n                var refSelector = nodeAllAttrs && nodeAttrs.ref === undefined ? nodeAllAttrs.ref : nodeAttrs.ref;\n                var refNode;\n                if (refSelector) {\n                    refNode = (selectorCache[refSelector] || this.findBySelector(refSelector, rootNode, opt.selectors))[0];\n                    if (!refNode) {\n                        throw new Error('dia.CellView: \"' + refSelector + '\" reference does not exist.');\n                    }\n                } else {\n                    refNode = null;\n                }\n                item = {\n                    node: node,\n                    refNode: refNode,\n                    processedAttributes: processedAttrs,\n                    allAttributes: nodeAllAttrs\n                };\n                if (refNode) {\n                    // If an element in the list is positioned relative to this one, then\n                    // we want to insert this one before it in the list.\n                    var itemIndex = relativeRefItems.findIndex(function(item) {\n                        return item.refNode === node;\n                    });\n                    if (itemIndex > -1) {\n                        relativeRefItems.splice(itemIndex, 0, item);\n                    } else {\n                        relativeRefItems.push(item);\n                    }\n                } else {\n                    // A node with no ref attribute. To be updated before the nodes referencing other nodes.\n                    // The order of no-ref-items is not specified/important.\n                    relativeItems.push(item);\n                }\n            }\n        }\n        relativeItems.push(...relativeRefItems);\n        for(let i = 0, n = relativeItems.length; i < n; i++){\n            item = relativeItems[i];\n            node = item.node;\n            refNode = item.refNode;\n            // Find the reference element bounding box. If no reference was provided, we\n            // use the optional bounding box.\n            const refNodeId = refNode ? _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ensureId(refNode) : \"\";\n            let refBBox = bboxCache[refNodeId];\n            if (!refBBox) {\n                // Get the bounding box of the reference element using to the common ancestor\n                // transformation space.\n                //\n                // @example 1\n                // <g transform=\"translate(11, 13)\">\n                //     <rect @selector=\"b\" x=\"1\" y=\"2\" width=\"3\" height=\"4\"/>\n                //     <rect @selector=\"a\"/>\n                // </g>\n                //\n                // In this case, the reference bounding box can not be affected\n                // by the `transform` attribute of the `<g>` element,\n                // because the exact transformation will be applied to the `a` element\n                // as well as to the `b` element.\n                //\n                // @example 2\n                // <g transform=\"translate(11, 13)\">\n                //     <rect @selector=\"b\" x=\"1\" y=\"2\" width=\"3\" height=\"4\"/>\n                // </g>\n                // <rect @selector=\"a\"/>\n                //\n                // In this case, the reference bounding box have to be affected by the\n                // `transform` attribute of the `<g>` element, because the `a` element\n                // is not descendant of the `<g>` element and will not be affected\n                // by the transformation.\n                refBBox = bboxCache[refNodeId] = refNode ? (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(refNode).getBBox({\n                    target: getCommonAncestorNode(node, refNode)\n                }) : opt.rootBBox;\n            }\n            if (roAttrs) {\n                // if there was a special attribute affecting the position amongst passed-in attributes\n                // we have to merge it with the rest of the element's attributes as they are necessary\n                // to update the position relatively (i.e `ref-x` && 'ref-dx')\n                processedAttrs = this.processNodeAttributes(node, item.allAttributes);\n                this.mergeProcessedAttributes(processedAttrs, item.processedAttributes);\n            } else {\n                processedAttrs = item.processedAttributes;\n            }\n            this.updateRelativeAttributes(node, processedAttrs, refBBox, opt);\n        }\n    },\n    mergeProcessedAttributes: function(processedAttrs, roProcessedAttrs) {\n        processedAttrs.set || (processedAttrs.set = {});\n        processedAttrs.position || (processedAttrs.position = {});\n        processedAttrs.offset || (processedAttrs.offset = {});\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.assign)(processedAttrs.set, roProcessedAttrs.set);\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.assign)(processedAttrs.position, roProcessedAttrs.position);\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.assign)(processedAttrs.offset, roProcessedAttrs.offset);\n        // Handle also the special transform property.\n        var transform = processedAttrs.normal && processedAttrs.normal.transform;\n        if (transform !== undefined && roProcessedAttrs.normal) {\n            roProcessedAttrs.normal.transform = transform;\n        }\n        processedAttrs.normal = roProcessedAttrs.normal;\n    },\n    // Lifecycle methods\n    // Called when the view is attached to the DOM,\n    // as result of `cell.addTo(graph)` being called (isInitialMount === true)\n    // or `paper.options.viewport` returning `true` (isInitialMount === false).\n    onMount (isInitialMount) {\n        if (isInitialMount) return;\n        this.mountTools();\n        _HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_8__.HighlighterView.mount(this);\n    },\n    // Called when the view is detached from the DOM,\n    // as result of `paper.options.viewport` returning `false`.\n    onDetach () {\n        this.unmountTools();\n        _HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_8__.HighlighterView.unmount(this);\n    },\n    // Called when the view is removed from the DOM\n    // as result of `cell.remove()`.\n    onRemove: function() {\n        this.removeTools();\n        this.removeHighlighters();\n    },\n    _toolsView: null,\n    hasTools: function(name) {\n        var toolsView = this._toolsView;\n        if (!toolsView) return false;\n        if (!name) return true;\n        return toolsView.getName() === name;\n    },\n    addTools: function(toolsView) {\n        this.removeTools();\n        if (toolsView) {\n            this._toolsView = toolsView;\n            toolsView.configure({\n                relatedView: this\n            });\n            toolsView.listenTo(this.paper, \"tools:event\", this.onToolEvent.bind(this));\n        }\n        return this;\n    },\n    unmountTools () {\n        const toolsView = this._toolsView;\n        if (toolsView) toolsView.unmount();\n        return this;\n    },\n    mountTools () {\n        const toolsView = this._toolsView;\n        // Prevent unnecessary re-appending of the tools.\n        if (toolsView && !toolsView.isMounted()) toolsView.mount();\n        return this;\n    },\n    updateTools: function(opt) {\n        var toolsView = this._toolsView;\n        if (toolsView) toolsView.update(opt);\n        return this;\n    },\n    removeTools: function() {\n        var toolsView = this._toolsView;\n        if (toolsView) {\n            toolsView.remove();\n            this._toolsView = null;\n        }\n        return this;\n    },\n    hideTools: function() {\n        var toolsView = this._toolsView;\n        if (toolsView) toolsView.hide();\n        return this;\n    },\n    showTools: function() {\n        var toolsView = this._toolsView;\n        if (toolsView) toolsView.show();\n        return this;\n    },\n    onToolEvent: function(event) {\n        switch(event){\n            case \"remove\":\n                this.removeTools();\n                break;\n            case \"hide\":\n                this.hideTools();\n                break;\n            case \"show\":\n                this.showTools();\n                break;\n        }\n    },\n    removeHighlighters: function() {\n        _HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_8__.HighlighterView.remove(this);\n    },\n    updateHighlighters: function(dirty = false) {\n        _HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_8__.HighlighterView.update(this, null, dirty);\n    },\n    transformHighlighters: function() {\n        _HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_8__.HighlighterView.transform(this);\n    },\n    // Interaction. The controller part.\n    // ---------------------------------\n    preventDefaultInteraction (evt) {\n        this.eventData(evt, {\n            defaultInteractionPrevented: true\n        });\n    },\n    isDefaultInteractionPrevented (evt) {\n        const { defaultInteractionPrevented = false } = this.eventData(evt);\n        return defaultInteractionPrevented;\n    },\n    // Interaction is handled by the paper and delegated to the view in interest.\n    // `x` & `y` parameters passed to these functions represent the coordinates already snapped to the paper grid.\n    // If necessary, real coordinates can be obtained from the `evt` event object.\n    // These functions are supposed to be overridden by the views that inherit from `joint.dia.Cell`,\n    // i.e. `joint.dia.Element` and `joint.dia.Link`.\n    pointerdblclick: function(evt, x, y) {\n        this.notify(\"cell:pointerdblclick\", evt, x, y);\n    },\n    pointerclick: function(evt, x, y) {\n        this.notify(\"cell:pointerclick\", evt, x, y);\n    },\n    contextmenu: function(evt, x, y) {\n        this.notify(\"cell:contextmenu\", evt, x, y);\n    },\n    pointerdown: function(evt, x, y) {\n        const { model } = this;\n        const { graph } = model;\n        if (graph) {\n            model.startBatch(\"pointer\");\n            this.eventData(evt, {\n                graph\n            });\n        }\n        this.notify(\"cell:pointerdown\", evt, x, y);\n    },\n    pointermove: function(evt, x, y) {\n        this.notify(\"cell:pointermove\", evt, x, y);\n    },\n    pointerup: function(evt, x, y) {\n        const { graph } = this.eventData(evt);\n        this.notify(\"cell:pointerup\", evt, x, y);\n        if (graph) {\n            // we don't want to trigger event on model as model doesn't\n            // need to be member of collection anymore (remove)\n            graph.stopBatch(\"pointer\", {\n                cell: this.model\n            });\n        }\n    },\n    mouseover: function(evt) {\n        this.notify(\"cell:mouseover\", evt);\n    },\n    mouseout: function(evt) {\n        this.notify(\"cell:mouseout\", evt);\n    },\n    mouseenter: function(evt) {\n        this.notify(\"cell:mouseenter\", evt);\n    },\n    mouseleave: function(evt) {\n        this.notify(\"cell:mouseleave\", evt);\n    },\n    mousewheel: function(evt, x, y, delta) {\n        this.notify(\"cell:mousewheel\", evt, x, y, delta);\n    },\n    onevent: function(evt, eventName, x, y) {\n        this.notify(eventName, evt, x, y);\n    },\n    onmagnet: function() {\n    // noop\n    },\n    magnetpointerdblclick: function() {\n    // noop\n    },\n    magnetcontextmenu: function() {\n    // noop\n    },\n    checkMouseleave (evt) {\n        const { paper, model } = this;\n        if (paper.isAsync()) {\n            // Make sure the source/target views are updated before this view.\n            // It's not 100% bulletproof (see below) but it's a good enough solution for now.\n            // The connected cells could be links as well. In that case, we would\n            // need to recursively go through all the connected links and update\n            // their source/target views as well.\n            if (model.isLink()) {\n                // The `this.sourceView` and `this.targetView` might not be updated yet.\n                // We need to find the view by the model.\n                const sourceElement = model.getSourceElement();\n                if (sourceElement) {\n                    const sourceView = paper.findViewByModel(sourceElement);\n                    if (sourceView) {\n                        paper.dumpView(sourceView);\n                        paper.checkViewVisibility(sourceView);\n                    }\n                }\n                const targetElement = model.getTargetElement();\n                if (targetElement) {\n                    const targetView = paper.findViewByModel(targetElement);\n                    if (targetView) {\n                        paper.dumpView(targetView);\n                        paper.checkViewVisibility(targetView);\n                    }\n                }\n            }\n            // Do the updates of the current view synchronously now\n            paper.dumpView(this);\n            paper.checkViewVisibility(this);\n        }\n        const target = this.getEventTarget(evt, {\n            fromPoint: true\n        });\n        const view = paper.findView(target);\n        if (view === this) return;\n        // Leaving the current view\n        this.mouseleave(evt);\n        if (!view) return;\n        // Entering another view\n        view.mouseenter(evt);\n    },\n    setInteractivity: function(value) {\n        this.options.interactive = value;\n    }\n}, {\n    Flags,\n    Highlighting: HighlightingTypes,\n    addPresentationAttributes: function(presentationAttributes) {\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.merge)({}, (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.result)(this.prototype, \"presentationAttributes\"), presentationAttributes, function(a, b) {\n            if (!a || !b) return;\n            if (typeof a === \"string\") a = [\n                a\n            ];\n            if (typeof b === \"string\") b = [\n                b\n            ];\n            if (Array.isArray(a) && Array.isArray(b)) return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.uniq)(a.concat(b));\n        });\n    }\n});\n// TODO: Move to Vectorizer library.\nfunction getCommonAncestorNode(node1, node2) {\n    let parent = node1;\n    do {\n        if (parent.contains(node2)) return parent;\n        parent = parent.parentNode;\n    }while (parent);\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/CellView.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/Element.mjs":
/*!**************************************************!*\
  !*** ./node_modules/jointjs/src/dia/Element.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Element: () => (/* binding */ Element)\n/* harmony export */ });\n/* harmony import */ var _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cell.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Cell.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _ports_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ports.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/ports.mjs\");\n\n\n\n\n// Element base model.\n// -----------------------------\nconst Element = _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__.Cell.extend({\n    defaults: {\n        position: {\n            x: 0,\n            y: 0\n        },\n        size: {\n            width: 1,\n            height: 1\n        },\n        angle: 0\n    },\n    initialize: function() {\n        this._initializePorts();\n        _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__.Cell.prototype.initialize.apply(this, arguments);\n    },\n    /**\n     * @abstract\n     */ _initializePorts: function() {\n    // implemented in ports.js\n    },\n    _refreshPorts: function() {\n    // implemented in ports.js\n    },\n    isElement: function() {\n        return true;\n    },\n    position: function(x, y, opt) {\n        const isSetter = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isNumber)(y);\n        opt = (isSetter ? opt : x) || {};\n        const { parentRelative, deep, restrictedArea } = opt;\n        // option `parentRelative` for setting the position relative to the element's parent.\n        let parentPosition;\n        if (parentRelative) {\n            // Getting the parent's position requires the collection.\n            // Cell.parent() holds cell id only.\n            if (!this.graph) throw new Error(\"Element must be part of a graph.\");\n            const parent = this.getParentCell();\n            if (parent && !parent.isLink()) {\n                parentPosition = parent.get(\"position\");\n            }\n        }\n        if (isSetter) {\n            if (parentPosition) {\n                x += parentPosition.x;\n                y += parentPosition.y;\n            }\n            if (deep || restrictedArea) {\n                const { x: x0, y: y0 } = this.get(\"position\");\n                this.translate(x - x0, y - y0, opt);\n            } else {\n                this.set(\"position\", {\n                    x,\n                    y\n                }, opt);\n            }\n            return this;\n        } else {\n            const elementPosition = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point)(this.get(\"position\"));\n            return parentRelative ? elementPosition.difference(parentPosition) : elementPosition;\n        }\n    },\n    translate: function(tx, ty, opt) {\n        tx = tx || 0;\n        ty = ty || 0;\n        if (tx === 0 && ty === 0) {\n            // Like nothing has happened.\n            return this;\n        }\n        opt = opt || {};\n        // Pass the initiator of the translation.\n        opt.translateBy = opt.translateBy || this.id;\n        var position = this.get(\"position\") || {\n            x: 0,\n            y: 0\n        };\n        var ra = opt.restrictedArea;\n        if (ra && opt.translateBy === this.id) {\n            if (typeof ra === \"function\") {\n                var newPosition = ra.call(this, position.x + tx, position.y + ty, opt);\n                tx = newPosition.x - position.x;\n                ty = newPosition.y - position.y;\n            } else {\n                // We are restricting the translation for the element itself only. We get\n                // the bounding box of the element including all its embeds.\n                // All embeds have to be translated the exact same way as the element.\n                var bbox = this.getBBox({\n                    deep: true\n                });\n                //- - - - - - - - - - - - -> ra.x + ra.width\n                // - - - -> position.x      |\n                // -> bbox.x\n                //                ▓▓▓▓▓▓▓   |\n                //         ░░░░░░░▓▓▓▓▓▓▓\n                //         ░░░░░░░░░        |\n                //   ▓▓▓▓▓▓▓▓░░░░░░░\n                //   ▓▓▓▓▓▓▓▓               |\n                //   <-dx->                     | restricted area right border\n                //         <-width->        |   ░ translated element\n                //   <- - bbox.width - ->       ▓ embedded element\n                var dx = position.x - bbox.x;\n                var dy = position.y - bbox.y;\n                // Find the maximal/minimal coordinates that the element can be translated\n                // while complies the restrictions.\n                var x = Math.max(ra.x + dx, Math.min(ra.x + ra.width + dx - bbox.width, position.x + tx));\n                var y = Math.max(ra.y + dy, Math.min(ra.y + ra.height + dy - bbox.height, position.y + ty));\n                // recalculate the translation taking the restrictions into account.\n                tx = x - position.x;\n                ty = y - position.y;\n            }\n        }\n        var translatedPosition = {\n            x: position.x + tx,\n            y: position.y + ty\n        };\n        // To find out by how much an element was translated in event 'change:position' handlers.\n        opt.tx = tx;\n        opt.ty = ty;\n        if (opt.transition) {\n            if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(opt.transition)) opt.transition = {};\n            this.transition(\"position\", translatedPosition, (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)({}, opt.transition, {\n                valueFunction: _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.interpolate.object\n            }));\n            // Recursively call `translate()` on all the embeds cells.\n            (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke)(this.getEmbeddedCells(), \"translate\", tx, ty, opt);\n        } else {\n            this.startBatch(\"translate\", opt);\n            this.set(\"position\", translatedPosition, opt);\n            (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke)(this.getEmbeddedCells(), \"translate\", tx, ty, opt);\n            this.stopBatch(\"translate\", opt);\n        }\n        return this;\n    },\n    size: function(width, height, opt) {\n        var currentSize = this.get(\"size\");\n        // Getter\n        // () signature\n        if (width === undefined) {\n            return {\n                width: currentSize.width,\n                height: currentSize.height\n            };\n        }\n        // Setter\n        // (size, opt) signature\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(width)) {\n            opt = height;\n            height = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isNumber)(width.height) ? width.height : currentSize.height;\n            width = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isNumber)(width.width) ? width.width : currentSize.width;\n        }\n        return this.resize(width, height, opt);\n    },\n    resize: function(width, height, opt) {\n        opt = opt || {};\n        this.startBatch(\"resize\", opt);\n        if (opt.direction) {\n            var currentSize = this.get(\"size\");\n            switch(opt.direction){\n                case \"left\":\n                case \"right\":\n                    // Don't change height when resizing horizontally.\n                    height = currentSize.height;\n                    break;\n                case \"top\":\n                case \"bottom\":\n                    // Don't change width when resizing vertically.\n                    width = currentSize.width;\n                    break;\n            }\n            // Get the angle and clamp its value between 0 and 360 degrees.\n            var angle = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.normalizeAngle)(this.get(\"angle\") || 0);\n            // This is a rectangle in size of the un-rotated element.\n            var bbox = this.getBBox();\n            var origin;\n            if (angle) {\n                var quadrant = {\n                    \"top-right\": 0,\n                    \"right\": 0,\n                    \"top-left\": 1,\n                    \"top\": 1,\n                    \"bottom-left\": 2,\n                    \"left\": 2,\n                    \"bottom-right\": 3,\n                    \"bottom\": 3\n                }[opt.direction];\n                if (opt.absolute) {\n                    // We are taking the element's rotation into account\n                    quadrant += Math.floor((angle + 45) / 90);\n                    quadrant %= 4;\n                }\n                // Pick the corner point on the element, which meant to stay on its place before and\n                // after the rotation.\n                var fixedPoint = bbox[[\n                    \"bottomLeft\",\n                    \"corner\",\n                    \"topRight\",\n                    \"origin\"\n                ][quadrant]]();\n                // Find  an image of the previous indent point. This is the position, where is the\n                // point actually located on the screen.\n                var imageFixedPoint = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point)(fixedPoint).rotate(bbox.center(), -angle);\n                // Every point on the element rotates around a circle with the centre of rotation\n                // in the middle of the element while the whole element is being rotated. That means\n                // that the distance from a point in the corner of the element (supposed its always rect) to\n                // the center of the element doesn't change during the rotation and therefore it equals\n                // to a distance on un-rotated element.\n                // We can find the distance as DISTANCE = (ELEMENTWIDTH/2)^2 + (ELEMENTHEIGHT/2)^2)^0.5.\n                var radius = Math.sqrt(width * width + height * height) / 2;\n                // Now we are looking for an angle between x-axis and the line starting at image of fixed point\n                // and ending at the center of the element. We call this angle `alpha`.\n                // The image of a fixed point is located in n-th quadrant. For each quadrant passed\n                // going anti-clockwise we have to add 90 degrees. Note that the first quadrant has index 0.\n                //\n                // 3 | 2\n                // --c-- Quadrant positions around the element's center `c`\n                // 0 | 1\n                //\n                var alpha = quadrant * Math.PI / 2;\n                // Add an angle between the beginning of the current quadrant (line parallel with x-axis or y-axis\n                // going through the center of the element) and line crossing the indent of the fixed point and the center\n                // of the element. This is the angle we need but on the un-rotated element.\n                alpha += Math.atan(quadrant % 2 == 0 ? height / width : width / height);\n                // Lastly we have to deduct the original angle the element was rotated by and that's it.\n                alpha -= (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.toRad)(angle);\n                // With this angle and distance we can easily calculate the centre of the un-rotated element.\n                // Note that fromPolar constructor accepts an angle in radians.\n                var center = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point.fromPolar(radius, alpha, imageFixedPoint);\n                // The top left corner on the un-rotated element has to be half a width on the left\n                // and half a height to the top from the center. This will be the origin of rectangle\n                // we were looking for.\n                origin = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point)(center).offset(width / -2, height / -2);\n            } else {\n                // calculation for the origin Point when there is no rotation of the element\n                origin = bbox.topLeft();\n                switch(opt.direction){\n                    case \"top\":\n                    case \"top-right\":\n                        origin.offset(0, bbox.height - height);\n                        break;\n                    case \"left\":\n                    case \"bottom-left\":\n                        origin.offset(bbox.width - width, 0);\n                        break;\n                    case \"top-left\":\n                        origin.offset(bbox.width - width, bbox.height - height);\n                        break;\n                }\n            }\n            // Resize the element (before re-positioning it).\n            this.set(\"size\", {\n                width: width,\n                height: height\n            }, opt);\n            // Finally, re-position the element.\n            this.position(origin.x, origin.y, opt);\n        } else {\n            // Resize the element.\n            this.set(\"size\", {\n                width: width,\n                height: height\n            }, opt);\n        }\n        this.stopBatch(\"resize\", opt);\n        return this;\n    },\n    scale: function(sx, sy, origin, opt) {\n        var scaledBBox = this.getBBox().scale(sx, sy, origin);\n        this.startBatch(\"scale\", opt);\n        this.position(scaledBBox.x, scaledBBox.y, opt);\n        this.resize(scaledBBox.width, scaledBBox.height, opt);\n        this.stopBatch(\"scale\");\n        return this;\n    },\n    fitEmbeds: function(opt) {\n        return this.fitToChildren(opt);\n    },\n    fitToChildren: function(opt = {}) {\n        // Getting the children's size and position requires the collection.\n        // Cell.get('embeds') holds an array of cell ids only.\n        const { graph } = this;\n        if (!graph) throw new Error(\"Element must be part of a graph.\");\n        const childElements = this.getEmbeddedCells().filter((cell)=>cell.isElement());\n        if (childElements.length === 0) return this;\n        this.startBatch(\"fit-embeds\", opt);\n        if (opt.deep) {\n            // `opt.deep = true` means \"fit to all descendants\".\n            // As the first action of the fitting algorithm, recursively apply `fitToChildren()` on all descendants.\n            // - i.e. the algorithm is applied in reverse-depth order - start from deepest descendant, then go up (= this element).\n            (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke)(childElements, \"fitToChildren\", opt);\n        }\n        // Set new size and position of this element, based on:\n        // - union of bboxes of all children\n        // - inflated by given `opt.padding`\n        this._fitToElements(Object.assign({\n            elements: childElements\n        }, opt));\n        this.stopBatch(\"fit-embeds\");\n        return this;\n    },\n    fitParent: function(opt = {}) {\n        const { graph } = this;\n        if (!graph) throw new Error(\"Element must be part of a graph.\");\n        // When `opt.deep = true`, we want `opt.terminator` to be the last ancestor processed.\n        // If the current element is `opt.terminator`, it means that this element has already been processed as parent so we can exit now.\n        if (opt.deep && opt.terminator && (opt.terminator === this || opt.terminator === this.id)) return this;\n        const parentElement = this.getParentCell();\n        if (!parentElement || !parentElement.isElement()) return this;\n        // Get all children of parent element (i.e. this element + any sibling elements).\n        const siblingElements = parentElement.getEmbeddedCells().filter((cell)=>cell.isElement());\n        if (siblingElements.length === 0) return this;\n        this.startBatch(\"fit-parent\", opt);\n        // Set new size and position of parent element, based on:\n        // - union of bboxes of all children of parent element (i.e. this element + any sibling elements)\n        // - inflated by given `opt.padding`\n        parentElement._fitToElements(Object.assign({\n            elements: siblingElements\n        }, opt));\n        if (opt.deep) {\n            // `opt.deep = true` means \"fit all ancestors to their respective children\".\n            // As the last action of the fitting algorithm, recursively apply `fitParent()` on all ancestors.\n            // - i.e. the algorithm is applied in reverse-depth order - start from deepest descendant (= this element), then go up.\n            parentElement.fitParent(opt);\n        }\n        this.stopBatch(\"fit-parent\");\n        return this;\n    },\n    // Assumption: This element is part of a graph.\n    _fitToElements: function(opt = {}) {\n        const elementsBBox = this.graph.getCellsBBox(opt.elements);\n        // If no `opt.elements` were provided, do nothing.\n        if (!elementsBBox) return;\n        const { expandOnly, shrinkOnly } = opt;\n        // This combination is meaningless, do nothing.\n        if (expandOnly && shrinkOnly) return;\n        // Calculate new size and position of this element based on:\n        // - union of bboxes of `opt.elements`\n        // - inflated by `opt.padding` (if not provided, all four properties = 0)\n        let { x, y, width, height } = elementsBBox;\n        const { left, right, top, bottom } = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.normalizeSides)(opt.padding);\n        x -= left;\n        y -= top;\n        width += left + right;\n        height += bottom + top;\n        let resultBBox = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(x, y, width, height);\n        if (expandOnly) {\n            // Non-shrinking is enforced by taking union of this element's current bbox with bbox calculated from `opt.elements`.\n            resultBBox = this.getBBox().union(resultBBox);\n        } else if (shrinkOnly) {\n            // Non-expansion is enforced by taking intersection of this element's current bbox with bbox calculated from `opt.elements`.\n            const intersectionBBox = this.getBBox().intersect(resultBBox);\n            // If all children are outside this element's current bbox, then `intersectionBBox` is `null` - does not make sense, do nothing.\n            if (!intersectionBBox) return;\n            resultBBox = intersectionBBox;\n        }\n        // Set the new size and position of this element.\n        this.set({\n            position: {\n                x: resultBBox.x,\n                y: resultBBox.y\n            },\n            size: {\n                width: resultBBox.width,\n                height: resultBBox.height\n            }\n        }, opt);\n    },\n    // Rotate element by `angle` degrees, optionally around `origin` point.\n    // If `origin` is not provided, it is considered to be the center of the element.\n    // If `absolute` is `true`, the `angle` is considered is absolute, i.e. it is not\n    // the difference from the previous angle.\n    rotate: function(angle, absolute, origin, opt) {\n        if (origin) {\n            var center = this.getBBox().center();\n            var size = this.get(\"size\");\n            var position = this.get(\"position\");\n            center.rotate(origin, this.get(\"angle\") - angle);\n            var dx = center.x - size.width / 2 - position.x;\n            var dy = center.y - size.height / 2 - position.y;\n            this.startBatch(\"rotate\", {\n                angle: angle,\n                absolute: absolute,\n                origin: origin\n            });\n            this.position(position.x + dx, position.y + dy, opt);\n            this.rotate(angle, absolute, null, opt);\n            this.stopBatch(\"rotate\");\n        } else {\n            this.set(\"angle\", absolute ? angle : (this.get(\"angle\") + angle) % 360, opt);\n        }\n        return this;\n    },\n    angle: function() {\n        return (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.normalizeAngle)(this.get(\"angle\") || 0);\n    },\n    getBBox: function(opt = {}) {\n        const { graph, attributes } = this;\n        const { deep, rotate } = opt;\n        if (deep && graph) {\n            // Get all the embedded elements using breadth first algorithm.\n            const elements = this.getEmbeddedCells({\n                deep: true,\n                breadthFirst: true\n            });\n            // Add the model itself.\n            elements.push(this);\n            // Note: the default of getCellsBBox() is rotate=true and can't be\n            // changed without a breaking change\n            return graph.getCellsBBox(elements, opt);\n        }\n        const { angle = 0, position: { x, y }, size: { width, height } } = attributes;\n        const bbox = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(x, y, width, height);\n        if (rotate) {\n            bbox.rotateAroundCenter(angle);\n        }\n        return bbox;\n    },\n    getPointFromConnectedLink: function(link, endType) {\n        // Center of the model\n        var bbox = this.getBBox();\n        var center = bbox.center();\n        // Center of a port\n        var endDef = link.get(endType);\n        if (!endDef) return center;\n        var portId = endDef.port;\n        if (!portId || !this.hasPort(portId)) return center;\n        var portGroup = this.portProp(portId, [\n            \"group\"\n        ]);\n        var portsPositions = this.getPortsPositions(portGroup);\n        var portCenter = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(portsPositions[portId]).offset(bbox.origin());\n        var angle = this.angle();\n        if (angle) portCenter.rotate(center, -angle);\n        return portCenter;\n    }\n});\n(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign)(Element.prototype, _ports_mjs__WEBPACK_IMPORTED_MODULE_6__.elementPortPrototype);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/Element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/ElementView.mjs":
/*!******************************************************!*\
  !*** ./node_modules/jointjs/src/dia/ElementView.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElementView: () => (/* binding */ ElementView)\n/* harmony export */ });\n/* harmony import */ var _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/index.mjs */ \"(ssr)/./node_modules/jointjs/src/config/index.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CellView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/CellView.mjs\");\n/* harmony import */ var _Cell_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Cell.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Cell.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _ports_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ports.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/ports.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n\n\n\n\n\n\n\nconst Flags = {\n    TOOLS: _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.Flags.TOOLS,\n    UPDATE: \"UPDATE\",\n    TRANSLATE: \"TRANSLATE\",\n    RESIZE: \"RESIZE\",\n    PORTS: \"PORTS\",\n    ROTATE: \"ROTATE\",\n    RENDER: \"RENDER\"\n};\nconst DragActions = {\n    MOVE: \"move\",\n    MAGNET: \"magnet\"\n};\n// Element base view and controller.\n// -------------------------------------------\nconst ElementView = _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.extend({\n    /**\n     * @abstract\n     */ _removePorts: function() {\n    // implemented in ports.js\n    },\n    /**\n     *\n     * @abstract\n     */ _renderPorts: function() {\n    // implemented in ports.js\n    },\n    className: function() {\n        var classNames = _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.className.apply(this).split(\" \");\n        classNames.push(\"element\");\n        return classNames.join(\" \");\n    },\n    initialize: function() {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.initialize.apply(this, arguments);\n        this._initializePorts();\n    },\n    presentationAttributes: {\n        \"attrs\": [\n            Flags.UPDATE\n        ],\n        \"position\": [\n            Flags.TRANSLATE,\n            Flags.TOOLS\n        ],\n        \"size\": [\n            Flags.RESIZE,\n            Flags.PORTS,\n            Flags.TOOLS\n        ],\n        \"angle\": [\n            Flags.ROTATE,\n            Flags.TOOLS\n        ],\n        \"markup\": [\n            Flags.RENDER\n        ],\n        \"ports\": [\n            Flags.PORTS\n        ]\n    },\n    initFlag: [\n        Flags.RENDER\n    ],\n    UPDATE_PRIORITY: 0,\n    confirmUpdate: function(flag, opt) {\n        const { useCSSSelectors } = _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config;\n        if (this.hasFlag(flag, Flags.PORTS)) {\n            this._removePorts();\n            this._cleanPortsCache();\n        }\n        let transformHighlighters = false;\n        if (this.hasFlag(flag, Flags.RENDER)) {\n            this.render();\n            this.updateTools(opt);\n            this.updateHighlighters(true);\n            transformHighlighters = true;\n            flag = this.removeFlag(flag, [\n                Flags.RENDER,\n                Flags.UPDATE,\n                Flags.RESIZE,\n                Flags.TRANSLATE,\n                Flags.ROTATE,\n                Flags.PORTS,\n                Flags.TOOLS\n            ]);\n        } else {\n            let updateHighlighters = false;\n            // Skip this branch if render is required\n            if (this.hasFlag(flag, Flags.RESIZE)) {\n                this.resize(opt);\n                updateHighlighters = true;\n                // Resize method is calling `update()` internally\n                flag = this.removeFlag(flag, [\n                    Flags.RESIZE,\n                    Flags.UPDATE\n                ]);\n                if (useCSSSelectors) {\n                    // `resize()` rendered the ports when useCSSSelectors are enabled\n                    flag = this.removeFlag(flag, Flags.PORTS);\n                }\n            }\n            if (this.hasFlag(flag, Flags.UPDATE)) {\n                this.update(this.model, null, opt);\n                flag = this.removeFlag(flag, Flags.UPDATE);\n                updateHighlighters = true;\n                if (useCSSSelectors) {\n                    // `update()` will render ports when useCSSSelectors are enabled\n                    flag = this.removeFlag(flag, Flags.PORTS);\n                }\n            }\n            if (this.hasFlag(flag, Flags.TRANSLATE)) {\n                this.translate();\n                flag = this.removeFlag(flag, Flags.TRANSLATE);\n                transformHighlighters = true;\n            }\n            if (this.hasFlag(flag, Flags.ROTATE)) {\n                this.rotate();\n                flag = this.removeFlag(flag, Flags.ROTATE);\n                transformHighlighters = true;\n            }\n            if (this.hasFlag(flag, Flags.PORTS)) {\n                this._renderPorts();\n                updateHighlighters = true;\n                flag = this.removeFlag(flag, Flags.PORTS);\n            }\n            if (updateHighlighters) {\n                this.updateHighlighters(false);\n            }\n        }\n        if (transformHighlighters) {\n            this.transformHighlighters();\n        }\n        if (this.hasFlag(flag, Flags.TOOLS)) {\n            this.updateTools(opt);\n            flag = this.removeFlag(flag, Flags.TOOLS);\n        }\n        return flag;\n    },\n    /**\n     * @abstract\n     */ _initializePorts: function() {},\n    update: function(_, renderingOnlyAttrs) {\n        this.cleanNodesCache();\n        // When CSS selector strings are used, make sure no rule matches port nodes.\n        const { useCSSSelectors } = _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config;\n        if (useCSSSelectors) this._removePorts();\n        var model = this.model;\n        var modelAttrs = model.attr();\n        this.updateDOMSubtreeAttributes(this.el, modelAttrs, {\n            rootBBox: new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Rect(model.size()),\n            selectors: this.selectors,\n            scalableNode: this.scalableNode,\n            rotatableNode: this.rotatableNode,\n            // Use rendering only attributes if they differs from the model attributes\n            roAttributes: renderingOnlyAttrs === modelAttrs ? null : renderingOnlyAttrs\n        });\n        if (useCSSSelectors) {\n            this._renderPorts();\n        }\n    },\n    rotatableSelector: \"rotatable\",\n    scalableSelector: \"scalable\",\n    scalableNode: null,\n    rotatableNode: null,\n    // `prototype.markup` is rendered by default. Set the `markup` attribute on the model if the\n    // default markup is not desirable.\n    renderMarkup: function() {\n        var element = this.model;\n        var markup = element.get(\"markup\") || element.markup;\n        if (!markup) throw new Error(\"dia.ElementView: markup required\");\n        if (Array.isArray(markup)) return this.renderJSONMarkup(markup);\n        if (typeof markup === \"string\") return this.renderStringMarkup(markup);\n        throw new Error(\"dia.ElementView: invalid markup\");\n    },\n    renderJSONMarkup: function(markup) {\n        var doc = this.parseDOMJSON(markup, this.el);\n        var selectors = this.selectors = doc.selectors;\n        this.rotatableNode = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(selectors[this.rotatableSelector]) || null;\n        this.scalableNode = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(selectors[this.scalableSelector]) || null;\n        // Fragment\n        this.vel.append(doc.fragment);\n    },\n    renderStringMarkup: function(markup) {\n        var vel = this.vel;\n        vel.append((0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(markup));\n        // Cache transformation groups\n        this.rotatableNode = vel.findOne(\".rotatable\");\n        this.scalableNode = vel.findOne(\".scalable\");\n        var selectors = this.selectors = {};\n        selectors[this.selector] = this.el;\n    },\n    render: function() {\n        this.vel.empty();\n        this.renderMarkup();\n        if (this.scalableNode) {\n            // Double update is necessary for elements with the scalable group only\n            // Note the resize() triggers the other `update`.\n            this.update();\n        }\n        this.resize();\n        if (this.rotatableNode) {\n            // Translate transformation is applied on `this.el` while the rotation transformation\n            // on `this.rotatableNode`\n            this.rotate();\n            this.translate();\n        } else {\n            this.updateTransformation();\n        }\n        if (!_config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.useCSSSelectors) this._renderPorts();\n        return this;\n    },\n    resize: function(opt) {\n        if (this.scalableNode) return this.sgResize(opt);\n        if (this.model.attributes.angle) this.rotate();\n        this.update();\n    },\n    translate: function() {\n        if (this.rotatableNode) return this.rgTranslate();\n        this.updateTransformation();\n    },\n    rotate: function() {\n        if (this.rotatableNode) {\n            this.rgRotate();\n            // It's necessary to call the update for the nodes outside\n            // the rotatable group referencing nodes inside the group\n            this.update();\n            return;\n        }\n        this.updateTransformation();\n    },\n    updateTransformation: function() {\n        var transformation = this.getTranslateString();\n        var rotateString = this.getRotateString();\n        if (rotateString) transformation += \" \" + rotateString;\n        this.vel.attr(\"transform\", transformation);\n    },\n    getTranslateString: function() {\n        var position = this.model.attributes.position;\n        return \"translate(\" + position.x + \",\" + position.y + \")\";\n    },\n    getRotateString: function() {\n        var attributes = this.model.attributes;\n        var angle = attributes.angle;\n        if (!angle) return null;\n        var size = attributes.size;\n        return \"rotate(\" + angle + \",\" + size.width / 2 + \",\" + size.height / 2 + \")\";\n    },\n    // Rotatable & Scalable Group\n    // always slower, kept mainly for backwards compatibility\n    rgRotate: function() {\n        this.rotatableNode.attr(\"transform\", this.getRotateString());\n    },\n    rgTranslate: function() {\n        this.vel.attr(\"transform\", this.getTranslateString());\n    },\n    sgResize: function(opt) {\n        var model = this.model;\n        var angle = model.angle();\n        var size = model.size();\n        var scalable = this.scalableNode;\n        // Getting scalable group's bbox.\n        // Due to a bug in webkit's native SVG .getBBox implementation, the bbox of groups with path children includes the paths' control points.\n        // To work around the issue, we need to check whether there are any path elements inside the scalable group.\n        var recursive = false;\n        if (scalable.node.getElementsByTagName(\"path\").length > 0) {\n            // If scalable has at least one descendant that is a path, we need to switch to recursive bbox calculation.\n            // If there are no path descendants, group bbox calculation works and so we can use the (faster) native function directly.\n            recursive = true;\n        }\n        var scalableBBox = scalable.getBBox({\n            recursive: recursive\n        });\n        // Make sure `scalableBbox.width` and `scalableBbox.height` are not zero which can happen if the element does not have any content. By making\n        // the width/height 1, we prevent HTML errors of the type `scale(Infinity, Infinity)`.\n        var sx = size.width / (scalableBBox.width || 1);\n        var sy = size.height / (scalableBBox.height || 1);\n        scalable.attr(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n        // Now the interesting part. The goal is to be able to store the object geometry via just `x`, `y`, `angle`, `width` and `height`\n        // Order of transformations is significant but we want to reconstruct the object always in the order:\n        // resize(), rotate(), translate() no matter of how the object was transformed. For that to work,\n        // we must adjust the `x` and `y` coordinates of the object whenever we resize it (because the origin of the\n        // rotation changes). The new `x` and `y` coordinates are computed by canceling the previous rotation\n        // around the center of the resized object (which is a different origin then the origin of the previous rotation)\n        // and getting the top-left corner of the resulting object. Then we clean up the rotation back to what it originally was.\n        // Cancel the rotation but now around a different origin, which is the center of the scaled object.\n        var rotatable = this.rotatableNode;\n        var rotation = rotatable && rotatable.attr(\"transform\");\n        if (rotation) {\n            rotatable.attr(\"transform\", rotation + \" rotate(\" + -angle + \",\" + size.width / 2 + \",\" + size.height / 2 + \")\");\n            var rotatableBBox = scalable.getBBox({\n                target: this.paper.cells\n            });\n            // Store new x, y and perform rotate() again against the new rotation origin.\n            model.set(\"position\", {\n                x: rotatableBBox.x,\n                y: rotatableBBox.y\n            }, (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign)({\n                updateHandled: true\n            }, opt));\n            this.translate();\n            this.rotate();\n        }\n        // Update must always be called on non-rotated element. Otherwise, relative positioning\n        // would work with wrong (rotated) bounding boxes.\n        this.update();\n    },\n    // Embedding mode methods.\n    // -----------------------\n    prepareEmbedding: function(data = {}) {\n        const element = data.model || this.model;\n        const paper = data.paper || this.paper;\n        const graph = paper.model;\n        const initialZIndices = data.initialZIndices = {};\n        const embeddedCells = element.getEmbeddedCells({\n            deep: true\n        });\n        const connectedLinks = graph.getConnectedLinks(element, {\n            deep: true,\n            includeEnclosed: true\n        });\n        // Note: an embedded cell can be a connect link, but it's fine\n        // to iterate over the cell twice.\n        [\n            element,\n            ...embeddedCells,\n            ...connectedLinks\n        ].forEach((cell)=>initialZIndices[cell.id] = cell.attributes.z);\n        element.startBatch(\"to-front\");\n        // Bring the model to the front with all his embeds.\n        element.toFront({\n            deep: true,\n            ui: true\n        });\n        // Note that at this point cells in the collection are not sorted by z index (it's running in the batch, see\n        // the dia.Graph._sortOnChangeZ), so we can't assume that the last cell in the collection has the highest z.\n        const maxZ = graph.getElements().reduce((max, cell)=>Math.max(max, cell.attributes.z || 0), 0);\n        // Move to front also all the inbound and outbound links that are connected\n        // to any of the element descendant. If we bring to front only embedded elements,\n        // links connected to them would stay in the background.\n        connectedLinks.forEach((link)=>{\n            if (link.attributes.z <= maxZ) {\n                link.set(\"z\", maxZ + 1, {\n                    ui: true\n                });\n            }\n        });\n        element.stopBatch(\"to-front\");\n        // Before we start looking for suitable parent we remove the current one.\n        const parentId = element.parent();\n        if (parentId) {\n            const parent = graph.getCell(parentId);\n            parent.unembed(element, {\n                ui: true\n            });\n            data.initialParentId = parentId;\n        } else {\n            data.initialParentId = null;\n        }\n    },\n    processEmbedding: function(data = {}, evt, x, y) {\n        const model = data.model || this.model;\n        const paper = data.paper || this.paper;\n        const graph = paper.model;\n        const { findParentBy, frontParentOnly, validateEmbedding } = paper.options;\n        let candidates;\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isFunction)(findParentBy)) {\n            candidates = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(findParentBy.call(graph, this, evt, x, y));\n        } else if (findParentBy === \"pointer\") {\n            candidates = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(graph.findModelsFromPoint({\n                x,\n                y\n            }));\n        } else {\n            candidates = graph.findModelsUnderElement(model, {\n                searchBy: findParentBy\n            });\n        }\n        candidates = candidates.filter((el)=>{\n            return el instanceof _Cell_mjs__WEBPACK_IMPORTED_MODULE_5__.Cell && model.id !== el.id && !el.isEmbeddedIn(model);\n        });\n        if (frontParentOnly) {\n            // pick the element with the highest `z` index\n            candidates = candidates.slice(-1);\n        }\n        let newCandidateView = null;\n        const prevCandidateView = data.candidateEmbedView;\n        // iterate over all candidates starting from the last one (has the highest z-index).\n        for(let i = candidates.length - 1; i >= 0; i--){\n            const candidate = candidates[i];\n            if (prevCandidateView && prevCandidateView.model.id == candidate.id) {\n                // candidate remains the same\n                newCandidateView = prevCandidateView;\n                break;\n            } else {\n                const view = candidate.findView(paper);\n                if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isFunction)(validateEmbedding) || validateEmbedding.call(paper, this, view)) {\n                    // flip to the new candidate\n                    newCandidateView = view;\n                    break;\n                }\n            }\n        }\n        if (newCandidateView && newCandidateView != prevCandidateView) {\n            // A new candidate view found. Highlight the new one.\n            this.clearEmbedding(data);\n            data.candidateEmbedView = newCandidateView.highlight(newCandidateView.findProxyNode(null, \"container\"), {\n                embedding: true\n            });\n        }\n        if (!newCandidateView && prevCandidateView) {\n            // No candidate view found. Unhighlight the previous candidate.\n            this.clearEmbedding(data);\n        }\n    },\n    clearEmbedding: function(data) {\n        data || (data = {});\n        var candidateView = data.candidateEmbedView;\n        if (candidateView) {\n            // No candidate view found. Unhighlight the previous candidate.\n            candidateView.unhighlight(candidateView.findProxyNode(null, \"container\"), {\n                embedding: true\n            });\n            data.candidateEmbedView = null;\n        }\n    },\n    finalizeEmbedding: function(data = {}) {\n        const candidateView = data.candidateEmbedView;\n        const element = data.model || this.model;\n        const paper = data.paper || this.paper;\n        if (candidateView) {\n            // We finished embedding. Candidate view is chosen to become the parent of the model.\n            candidateView.model.embed(element, {\n                ui: true\n            });\n            candidateView.unhighlight(candidateView.findProxyNode(null, \"container\"), {\n                embedding: true\n            });\n            data.candidateEmbedView = null;\n        } else {\n            const { validateUnembedding } = paper.options;\n            const { initialParentId } = data;\n            // The element was originally embedded into another element.\n            // The interaction would unembed the element. Let's validate\n            // if the element can be unembedded.\n            if (initialParentId && typeof validateUnembedding === \"function\" && !validateUnembedding.call(paper, this)) {\n                this._disallowUnembed(data);\n                return;\n            }\n        }\n        paper.model.getConnectedLinks(element, {\n            deep: true\n        }).forEach((link)=>{\n            link.reparent({\n                ui: true\n            });\n        });\n    },\n    _disallowUnembed: function(data) {\n        const { model, whenNotAllowed = \"revert\" } = data;\n        const element = model || this.model;\n        const paper = data.paper || this.paper;\n        const graph = paper.model;\n        switch(whenNotAllowed){\n            case \"remove\":\n                {\n                    element.remove({\n                        ui: true\n                    });\n                    break;\n                }\n            case \"revert\":\n                {\n                    const { initialParentId, initialPosition, initialZIndices } = data;\n                    // Revert the element's position (and the position of its embedded cells if any)\n                    if (initialPosition) {\n                        const { x, y } = initialPosition;\n                        element.position(x, y, {\n                            deep: true,\n                            ui: true\n                        });\n                    }\n                    // Revert all the z-indices changed during the embedding\n                    if (initialZIndices) {\n                        Object.keys(initialZIndices).forEach((id)=>{\n                            const cell = graph.getCell(id);\n                            if (cell) {\n                                cell.set(\"z\", initialZIndices[id], {\n                                    ui: true\n                                });\n                            }\n                        });\n                    }\n                    // Revert the original parent\n                    const parent = graph.getCell(initialParentId);\n                    if (parent) {\n                        parent.embed(element, {\n                            ui: true\n                        });\n                    }\n                    break;\n                }\n        }\n    },\n    getDelegatedView: function() {\n        var view = this;\n        var model = view.model;\n        var paper = view.paper;\n        while(view){\n            if (model.isLink()) break;\n            if (!model.isEmbedded() || view.can(\"stopDelegation\")) return view;\n            model = model.getParentCell();\n            view = paper.findViewByModel(model);\n        }\n        return null;\n    },\n    findProxyNode: function(el, type) {\n        el || (el = this.el);\n        const nodeSelector = el.getAttribute(`${type}-selector`);\n        if (nodeSelector) {\n            const port = this.findAttribute(\"port\", el);\n            if (port) {\n                const proxyPortNode = this.findPortNode(port, nodeSelector);\n                if (proxyPortNode) return proxyPortNode;\n            } else {\n                const [proxyNode] = this.findBySelector(nodeSelector);\n                if (proxyNode) return proxyNode;\n            }\n        }\n        return el;\n    },\n    // Interaction. The controller part.\n    // ---------------------------------\n    notifyPointerdown (evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.pointerdown.call(this, evt, x, y);\n        this.notify(\"element:pointerdown\", evt, x, y);\n    },\n    notifyPointermove (evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.pointermove.call(this, evt, x, y);\n        this.notify(\"element:pointermove\", evt, x, y);\n    },\n    notifyPointerup (evt, x, y) {\n        this.notify(\"element:pointerup\", evt, x, y);\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.pointerup.call(this, evt, x, y);\n    },\n    pointerdblclick: function(evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.pointerdblclick.apply(this, arguments);\n        this.notify(\"element:pointerdblclick\", evt, x, y);\n    },\n    pointerclick: function(evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.pointerclick.apply(this, arguments);\n        this.notify(\"element:pointerclick\", evt, x, y);\n    },\n    contextmenu: function(evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.contextmenu.apply(this, arguments);\n        this.notify(\"element:contextmenu\", evt, x, y);\n    },\n    pointerdown: function(evt, x, y) {\n        this.notifyPointerdown(evt, x, y);\n        this.dragStart(evt, x, y);\n    },\n    pointermove: function(evt, x, y) {\n        const data = this.eventData(evt);\n        const { targetMagnet, action, delegatedView } = data;\n        if (targetMagnet) {\n            this.magnetpointermove(evt, targetMagnet, x, y);\n        }\n        switch(action){\n            case DragActions.MAGNET:\n                this.dragMagnet(evt, x, y);\n                break;\n            case DragActions.MOVE:\n                (delegatedView || this).drag(evt, x, y);\n            // eslint: no-fallthrough=false\n            default:\n                if (data.preventPointerEvents) break;\n                this.notifyPointermove(evt, x, y);\n                break;\n        }\n        // Make sure the element view data is passed along.\n        // It could have been wiped out in the handlers above.\n        this.eventData(evt, data);\n    },\n    pointerup: function(evt, x, y) {\n        const data = this.eventData(evt);\n        const { targetMagnet, action, delegatedView } = data;\n        if (targetMagnet) {\n            this.magnetpointerup(evt, targetMagnet, x, y);\n        }\n        switch(action){\n            case DragActions.MAGNET:\n                this.dragMagnetEnd(evt, x, y);\n                break;\n            case DragActions.MOVE:\n                (delegatedView || this).dragEnd(evt, x, y);\n            // eslint: no-fallthrough=false\n            default:\n                if (data.preventPointerEvents) break;\n                this.notifyPointerup(evt, x, y);\n        }\n        if (targetMagnet) {\n            this.magnetpointerclick(evt, targetMagnet, x, y);\n        }\n        this.checkMouseleave(evt);\n    },\n    mouseover: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.mouseover.apply(this, arguments);\n        this.notify(\"element:mouseover\", evt);\n    },\n    mouseout: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.mouseout.apply(this, arguments);\n        this.notify(\"element:mouseout\", evt);\n    },\n    mouseenter: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.mouseenter.apply(this, arguments);\n        this.notify(\"element:mouseenter\", evt);\n    },\n    mouseleave: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.mouseleave.apply(this, arguments);\n        this.notify(\"element:mouseleave\", evt);\n    },\n    mousewheel: function(evt, x, y, delta) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_0__.CellView.prototype.mousewheel.apply(this, arguments);\n        this.notify(\"element:mousewheel\", evt, x, y, delta);\n    },\n    onmagnet: function(evt, x, y) {\n        const { currentTarget: targetMagnet } = evt;\n        this.magnetpointerdown(evt, targetMagnet, x, y);\n        this.eventData(evt, {\n            targetMagnet\n        });\n        this.dragMagnetStart(evt, x, y);\n    },\n    magnetpointerdown: function(evt, magnet, x, y) {\n        this.notify(\"element:magnet:pointerdown\", evt, magnet, x, y);\n    },\n    magnetpointermove: function(evt, magnet, x, y) {\n        this.notify(\"element:magnet:pointermove\", evt, magnet, x, y);\n    },\n    magnetpointerup: function(evt, magnet, x, y) {\n        this.notify(\"element:magnet:pointerup\", evt, magnet, x, y);\n    },\n    magnetpointerdblclick: function(evt, magnet, x, y) {\n        this.notify(\"element:magnet:pointerdblclick\", evt, magnet, x, y);\n    },\n    magnetcontextmenu: function(evt, magnet, x, y) {\n        this.notify(\"element:magnet:contextmenu\", evt, magnet, x, y);\n    },\n    // Drag Start Handlers\n    dragStart: function(evt, x, y) {\n        if (this.isDefaultInteractionPrevented(evt)) return;\n        var view = this.getDelegatedView();\n        if (!view || !view.can(\"elementMove\")) return;\n        this.eventData(evt, {\n            action: DragActions.MOVE,\n            delegatedView: view\n        });\n        const position = view.model.position();\n        view.eventData(evt, {\n            initialPosition: position,\n            pointerOffset: position.difference(x, y),\n            restrictedArea: this.paper.getRestrictedArea(view, x, y)\n        });\n    },\n    dragMagnetStart: function(evt, x, y) {\n        const { paper } = this;\n        const isPropagationAlreadyStopped = evt.isPropagationStopped();\n        if (isPropagationAlreadyStopped) {\n            // Special case when the propagation was already stopped\n            // on the `element:magnet:pointerdown` event.\n            // Do not trigger any `element:pointer*` events\n            // but still start the magnet dragging.\n            this.eventData(evt, {\n                preventPointerEvents: true\n            });\n        }\n        if (this.isDefaultInteractionPrevented(evt) || !this.can(\"addLinkFromMagnet\")) {\n            // Stop the default action, which is to start dragging a link.\n            return;\n        }\n        const { targetMagnet = evt.currentTarget } = this.eventData(evt);\n        evt.stopPropagation();\n        // Invalid (Passive) magnet. Start dragging the element.\n        if (!paper.options.validateMagnet.call(paper, this, targetMagnet, evt)) {\n            if (isPropagationAlreadyStopped) {\n                // Do not trigger `element:pointerdown` and start element dragging\n                // if the propagation was stopped.\n                this.dragStart(evt, x, y);\n            // The `element:pointerdown` event is not triggered because\n            // of `preventPointerEvents` flag.\n            } else {\n                // We need to reset the action\n                // to `MOVE` so that the element is dragged.\n                this.pointerdown(evt, x, y);\n            }\n            return;\n        }\n        // Valid magnet. Start dragging a link.\n        if (paper.options.magnetThreshold <= 0) {\n            this.dragLinkStart(evt, targetMagnet, x, y);\n        }\n        this.eventData(evt, {\n            action: DragActions.MAGNET\n        });\n    },\n    // Drag Handlers\n    drag: function(evt, x, y) {\n        var paper = this.paper;\n        var grid = paper.options.gridSize;\n        var element = this.model;\n        var data = this.eventData(evt);\n        var { pointerOffset, restrictedArea, embedding } = data;\n        // Make sure the new element's position always snaps to the current grid\n        var elX = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.snapToGrid)(x + pointerOffset.x, grid);\n        var elY = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.snapToGrid)(y + pointerOffset.y, grid);\n        element.position(elX, elY, {\n            restrictedArea,\n            deep: true,\n            ui: true\n        });\n        if (paper.options.embeddingMode) {\n            if (!embedding) {\n                // Prepare the element for embedding only if the pointer moves.\n                // We don't want to do unnecessary action with the element\n                // if an user only clicks/dblclicks on it.\n                this.prepareEmbedding(data);\n                embedding = true;\n            }\n            this.processEmbedding(data, evt, x, y);\n        }\n        this.eventData(evt, {\n            embedding\n        });\n    },\n    dragMagnet: function(evt, x, y) {\n        this.dragLink(evt, x, y);\n    },\n    // Drag End Handlers\n    dragEnd: function(evt, x, y) {\n        var data = this.eventData(evt);\n        if (data.embedding) this.finalizeEmbedding(data);\n    },\n    dragMagnetEnd: function(evt, x, y) {\n        this.dragLinkEnd(evt, x, y);\n    },\n    magnetpointerclick: function(evt, magnet, x, y) {\n        var paper = this.paper;\n        if (paper.eventData(evt).mousemoved > paper.options.clickThreshold) return;\n        this.notify(\"element:magnet:pointerclick\", evt, magnet, x, y);\n    }\n}, {\n    Flags: Flags\n});\n(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign)(ElementView.prototype, _ports_mjs__WEBPACK_IMPORTED_MODULE_7__.elementViewPortPrototype);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/ElementView.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/Graph.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/dia/Graph.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graph: () => (/* binding */ Graph)\n/* harmony export */ });\n/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ \"(ssr)/./node_modules/backbone/backbone.js\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/getRectPoint.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _Link_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Link.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Link.mjs\");\n/* harmony import */ var _Element_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Element.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Element.mjs\");\n/* harmony import */ var _util_wrappers_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/wrappers.mjs */ \"(ssr)/./node_modules/jointjs/src/util/wrappers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/cloneCells.mjs\");\n\n\n\n\n\n\n\nconst GraphCells = backbone__WEBPACK_IMPORTED_MODULE_0__.Collection.extend({\n    initialize: function(models, opt) {\n        // Set the optional namespace where all model classes are defined.\n        if (opt.cellNamespace) {\n            this.cellNamespace = opt.cellNamespace;\n        } else {\n            /* eslint-disable no-undef */ this.cellNamespace = typeof joint !== \"undefined\" && _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.has(joint, \"shapes\") ? joint.shapes : null;\n        /* eslint-enable no-undef */ }\n        this.graph = opt.graph;\n    },\n    model: function(attrs, opt) {\n        var collection = opt.collection;\n        var namespace = collection.cellNamespace;\n        // Find the model class in the namespace or use the default one.\n        var ModelClass = attrs.type === \"link\" ? _Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link : _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.getByPath(namespace, attrs.type, \".\") || _Element_mjs__WEBPACK_IMPORTED_MODULE_4__.Element;\n        var cell = new ModelClass(attrs, opt);\n        // Add a reference to the graph. It is necessary to do this here because this is the earliest place\n        // where a new model is created from a plain JS object. For other objects, see `joint.dia.Graph>>_prepareCell()`.\n        if (!opt.dry) {\n            cell.graph = collection.graph;\n        }\n        return cell;\n    },\n    // `comparator` makes it easy to sort cells based on their `z` index.\n    comparator: function(model) {\n        return model.get(\"z\") || 0;\n    }\n});\nconst Graph = backbone__WEBPACK_IMPORTED_MODULE_0__.Model.extend({\n    initialize: function(attrs, opt) {\n        opt = opt || {};\n        // Passing `cellModel` function in the options object to graph allows for\n        // setting models based on attribute objects. This is especially handy\n        // when processing JSON graphs that are in a different than JointJS format.\n        var cells = new GraphCells([], {\n            model: opt.cellModel,\n            cellNamespace: opt.cellNamespace,\n            graph: this\n        });\n        backbone__WEBPACK_IMPORTED_MODULE_0__.Model.prototype.set.call(this, \"cells\", cells);\n        // Make all the events fired in the `cells` collection available.\n        // to the outside world.\n        cells.on(\"all\", this.trigger, this);\n        // Backbone automatically doesn't trigger re-sort if models attributes are changed later when\n        // they're already in the collection. Therefore, we're triggering sort manually here.\n        this.on(\"change:z\", this._sortOnChangeZ, this);\n        // `joint.dia.Graph` keeps an internal data structure (an adjacency list)\n        // for fast graph queries. All changes that affect the structure of the graph\n        // must be reflected in the `al` object. This object provides fast answers to\n        // questions such as \"what are the neighbours of this node\" or \"what\n        // are the sibling links of this link\".\n        // Outgoing edges per node. Note that we use a hash-table for the list\n        // of outgoing edges for a faster lookup.\n        // [nodeId] -> Object [edgeId] -> true\n        this._out = {};\n        // Ingoing edges per node.\n        // [nodeId] -> Object [edgeId] -> true\n        this._in = {};\n        // `_nodes` is useful for quick lookup of all the elements in the graph, without\n        // having to go through the whole cells array.\n        // [node ID] -> true\n        this._nodes = {};\n        // `_edges` is useful for quick lookup of all the links in the graph, without\n        // having to go through the whole cells array.\n        // [edgeId] -> true\n        this._edges = {};\n        this._batches = {};\n        cells.on(\"add\", this._restructureOnAdd, this);\n        cells.on(\"remove\", this._restructureOnRemove, this);\n        cells.on(\"reset\", this._restructureOnReset, this);\n        cells.on(\"change:source\", this._restructureOnChangeSource, this);\n        cells.on(\"change:target\", this._restructureOnChangeTarget, this);\n        cells.on(\"remove\", this._removeCell, this);\n    },\n    _sortOnChangeZ: function() {\n        this.get(\"cells\").sort();\n    },\n    _restructureOnAdd: function(cell) {\n        if (cell.isLink()) {\n            this._edges[cell.id] = true;\n            var { source, target } = cell.attributes;\n            if (source.id) {\n                (this._out[source.id] || (this._out[source.id] = {}))[cell.id] = true;\n            }\n            if (target.id) {\n                (this._in[target.id] || (this._in[target.id] = {}))[cell.id] = true;\n            }\n        } else {\n            this._nodes[cell.id] = true;\n        }\n    },\n    _restructureOnRemove: function(cell) {\n        if (cell.isLink()) {\n            delete this._edges[cell.id];\n            var { source, target } = cell.attributes;\n            if (source.id && this._out[source.id] && this._out[source.id][cell.id]) {\n                delete this._out[source.id][cell.id];\n            }\n            if (target.id && this._in[target.id] && this._in[target.id][cell.id]) {\n                delete this._in[target.id][cell.id];\n            }\n        } else {\n            delete this._nodes[cell.id];\n        }\n    },\n    _restructureOnReset: function(cells) {\n        // Normalize into an array of cells. The original `cells` is GraphCells Backbone collection.\n        cells = cells.models;\n        this._out = {};\n        this._in = {};\n        this._nodes = {};\n        this._edges = {};\n        cells.forEach(this._restructureOnAdd, this);\n    },\n    _restructureOnChangeSource: function(link) {\n        var prevSource = link.previous(\"source\");\n        if (prevSource.id && this._out[prevSource.id]) {\n            delete this._out[prevSource.id][link.id];\n        }\n        var source = link.attributes.source;\n        if (source.id) {\n            (this._out[source.id] || (this._out[source.id] = {}))[link.id] = true;\n        }\n    },\n    _restructureOnChangeTarget: function(link) {\n        var prevTarget = link.previous(\"target\");\n        if (prevTarget.id && this._in[prevTarget.id]) {\n            delete this._in[prevTarget.id][link.id];\n        }\n        var target = link.get(\"target\");\n        if (target.id) {\n            (this._in[target.id] || (this._in[target.id] = {}))[link.id] = true;\n        }\n    },\n    // Return all outbound edges for the node. Return value is an object\n    // of the form: [edgeId] -> true\n    getOutboundEdges: function(node) {\n        return this._out && this._out[node] || {};\n    },\n    // Return all inbound edges for the node. Return value is an object\n    // of the form: [edgeId] -> true\n    getInboundEdges: function(node) {\n        return this._in && this._in[node] || {};\n    },\n    toJSON: function() {\n        // Backbone does not recursively call `toJSON()` on attributes that are themselves models/collections.\n        // It just clones the attributes. Therefore, we must call `toJSON()` on the cells collection explicitly.\n        var json = backbone__WEBPACK_IMPORTED_MODULE_0__.Model.prototype.toJSON.apply(this, arguments);\n        json.cells = this.get(\"cells\").toJSON();\n        return json;\n    },\n    fromJSON: function(json, opt) {\n        if (!json.cells) {\n            throw new Error(\"Graph JSON must contain cells array.\");\n        }\n        return this.set(json, opt);\n    },\n    set: function(key, val, opt) {\n        var attrs;\n        // Handle both `key`, value and {key: value} style arguments.\n        if (typeof key === \"object\") {\n            attrs = key;\n            opt = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n        // Make sure that `cells` attribute is handled separately via resetCells().\n        if (attrs.hasOwnProperty(\"cells\")) {\n            this.resetCells(attrs.cells, opt);\n            attrs = _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.omit(attrs, \"cells\");\n        }\n        // The rest of the attributes are applied via original set method.\n        return backbone__WEBPACK_IMPORTED_MODULE_0__.Model.prototype.set.call(this, attrs, opt);\n    },\n    clear: function(opt) {\n        opt = _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign({}, opt, {\n            clear: true\n        });\n        var collection = this.get(\"cells\");\n        if (collection.length === 0) return this;\n        this.startBatch(\"clear\", opt);\n        // The elements come after the links.\n        var cells = collection.sortBy(function(cell) {\n            return cell.isLink() ? 1 : 2;\n        });\n        do {\n            // Remove all the cells one by one.\n            // Note that all the links are removed first, so it's\n            // safe to remove the elements without removing the connected\n            // links first.\n            cells.shift().remove(opt);\n        }while (cells.length > 0);\n        this.stopBatch(\"clear\");\n        return this;\n    },\n    _prepareCell: function(cell, opt) {\n        var attrs;\n        if (cell instanceof backbone__WEBPACK_IMPORTED_MODULE_0__.Model) {\n            attrs = cell.attributes;\n            if (!cell.graph && (!opt || !opt.dry)) {\n                // An element can not be member of more than one graph.\n                // A cell stops being the member of the graph after it's explicitly removed.\n                cell.graph = this;\n            }\n        } else {\n            // In case we're dealing with a plain JS object, we have to set the reference\n            // to the `graph` right after the actual model is created. This happens in the `model()` function\n            // of `joint.dia.GraphCells`.\n            attrs = cell;\n        }\n        if (!_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isString(attrs.type)) {\n            throw new TypeError(\"dia.Graph: cell type must be a string.\");\n        }\n        return cell;\n    },\n    minZIndex: function() {\n        var firstCell = this.get(\"cells\").first();\n        return firstCell ? firstCell.get(\"z\") || 0 : 0;\n    },\n    maxZIndex: function() {\n        var lastCell = this.get(\"cells\").last();\n        return lastCell ? lastCell.get(\"z\") || 0 : 0;\n    },\n    addCell: function(cell, opt) {\n        if (Array.isArray(cell)) {\n            return this.addCells(cell, opt);\n        }\n        if (cell instanceof backbone__WEBPACK_IMPORTED_MODULE_0__.Model) {\n            if (!cell.has(\"z\")) {\n                cell.set(\"z\", this.maxZIndex() + 1);\n            }\n        } else if (cell.z === undefined) {\n            cell.z = this.maxZIndex() + 1;\n        }\n        this.get(\"cells\").add(this._prepareCell(cell, opt), opt || {});\n        return this;\n    },\n    addCells: function(cells, opt) {\n        if (cells.length === 0) return this;\n        cells = _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.flattenDeep(cells);\n        opt.maxPosition = opt.position = cells.length - 1;\n        this.startBatch(\"add\", opt);\n        cells.forEach(function(cell) {\n            this.addCell(cell, opt);\n            opt.position--;\n        }, this);\n        this.stopBatch(\"add\", opt);\n        return this;\n    },\n    // When adding a lot of cells, it is much more efficient to\n    // reset the entire cells collection in one go.\n    // Useful for bulk operations and optimizations.\n    resetCells: function(cells, opt) {\n        var preparedCells = _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toArray(cells).map(function(cell) {\n            return this._prepareCell(cell, opt);\n        }, this);\n        this.get(\"cells\").reset(preparedCells, opt);\n        return this;\n    },\n    removeCells: function(cells, opt) {\n        if (cells.length) {\n            this.startBatch(\"remove\");\n            _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke(cells, \"remove\", opt);\n            this.stopBatch(\"remove\");\n        }\n        return this;\n    },\n    _removeCell: function(cell, collection, options) {\n        options = options || {};\n        if (!options.clear) {\n            // Applications might provide a `disconnectLinks` option set to `true` in order to\n            // disconnect links when a cell is removed rather then removing them. The default\n            // is to remove all the associated links.\n            if (options.disconnectLinks) {\n                this.disconnectLinks(cell, options);\n            } else {\n                this.removeLinks(cell, options);\n            }\n        }\n        // Silently remove the cell from the cells collection. Silently, because\n        // `joint.dia.Cell.prototype.remove` already triggers the `remove` event which is\n        // then propagated to the graph model. If we didn't remove the cell silently, two `remove` events\n        // would be triggered on the graph model.\n        this.get(\"cells\").remove(cell, {\n            silent: true\n        });\n        if (cell.graph === this) {\n            // Remove the element graph reference only if the cell is the member of this graph.\n            cell.graph = null;\n        }\n    },\n    // Get a cell by `id`.\n    getCell: function(id) {\n        return this.get(\"cells\").get(id);\n    },\n    getCells: function() {\n        return this.get(\"cells\").toArray();\n    },\n    getElements: function() {\n        return this.get(\"cells\").filter((cell)=>cell.isElement());\n    },\n    getLinks: function() {\n        return this.get(\"cells\").filter((cell)=>cell.isLink());\n    },\n    getFirstCell: function() {\n        return this.get(\"cells\").first();\n    },\n    getLastCell: function() {\n        return this.get(\"cells\").last();\n    },\n    // Get all inbound and outbound links connected to the cell `model`.\n    getConnectedLinks: function(model, opt) {\n        opt = opt || {};\n        var indirect = opt.indirect;\n        var inbound = opt.inbound;\n        var outbound = opt.outbound;\n        if (inbound === undefined && outbound === undefined) {\n            inbound = outbound = true;\n        }\n        // the final array of connected link models\n        var links = [];\n        // a hash table of connected edges of the form: [edgeId] -> true\n        // used for quick lookups to check if we already added a link\n        var edges = {};\n        if (outbound) {\n            addOutbounds(this, model);\n        }\n        if (inbound) {\n            addInbounds(this, model);\n        }\n        function addOutbounds(graph, model) {\n            _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn(graph.getOutboundEdges(model.id), (function(_, edge) {\n                // skip links that were already added\n                // (those must be self-loop links)\n                // (because they are inbound and outbound edges of the same two elements)\n                if (edges[edge]) return;\n                var link = graph.getCell(edge);\n                links.push(link);\n                edges[edge] = true;\n                if (indirect) {\n                    if (inbound) addInbounds(graph, link);\n                    if (outbound) addOutbounds(graph, link);\n                }\n            }).bind(graph));\n            if (indirect && model.isLink()) {\n                var outCell = model.getTargetCell();\n                if (outCell && outCell.isLink()) {\n                    if (!edges[outCell.id]) {\n                        links.push(outCell);\n                        addOutbounds(graph, outCell);\n                    }\n                }\n            }\n        }\n        function addInbounds(graph, model) {\n            _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn(graph.getInboundEdges(model.id), (function(_, edge) {\n                // skip links that were already added\n                // (those must be self-loop links)\n                // (because they are inbound and outbound edges of the same two elements)\n                if (edges[edge]) return;\n                var link = graph.getCell(edge);\n                links.push(link);\n                edges[edge] = true;\n                if (indirect) {\n                    if (inbound) addInbounds(graph, link);\n                    if (outbound) addOutbounds(graph, link);\n                }\n            }).bind(graph));\n            if (indirect && model.isLink()) {\n                var inCell = model.getSourceCell();\n                if (inCell && inCell.isLink()) {\n                    if (!edges[inCell.id]) {\n                        links.push(inCell);\n                        addInbounds(graph, inCell);\n                    }\n                }\n            }\n        }\n        // if `deep` option is `true`, check also all the links that are connected to any of the descendant cells\n        if (opt.deep) {\n            var embeddedCells = model.getEmbeddedCells({\n                deep: true\n            });\n            // in the first round, we collect all the embedded elements\n            var embeddedElements = {};\n            embeddedCells.forEach(function(cell) {\n                if (cell.isElement()) {\n                    embeddedElements[cell.id] = true;\n                }\n            });\n            embeddedCells.forEach(function(cell) {\n                if (cell.isLink()) return;\n                if (outbound) {\n                    _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn(this.getOutboundEdges(cell.id), (function(exists, edge) {\n                        if (!edges[edge]) {\n                            var edgeCell = this.getCell(edge);\n                            var { source, target } = edgeCell.attributes;\n                            var sourceId = source.id;\n                            var targetId = target.id;\n                            // if `includeEnclosed` option is falsy, skip enclosed links\n                            if (!opt.includeEnclosed && sourceId && embeddedElements[sourceId] && targetId && embeddedElements[targetId]) {\n                                return;\n                            }\n                            links.push(this.getCell(edge));\n                            edges[edge] = true;\n                        }\n                    }).bind(this));\n                }\n                if (inbound) {\n                    _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn(this.getInboundEdges(cell.id), (function(exists, edge) {\n                        if (!edges[edge]) {\n                            var edgeCell = this.getCell(edge);\n                            var { source, target } = edgeCell.attributes;\n                            var sourceId = source.id;\n                            var targetId = target.id;\n                            // if `includeEnclosed` option is falsy, skip enclosed links\n                            if (!opt.includeEnclosed && sourceId && embeddedElements[sourceId] && targetId && embeddedElements[targetId]) {\n                                return;\n                            }\n                            links.push(this.getCell(edge));\n                            edges[edge] = true;\n                        }\n                    }).bind(this));\n                }\n            }, this);\n        }\n        return links;\n    },\n    getNeighbors: function(model, opt) {\n        opt || (opt = {});\n        var inbound = opt.inbound;\n        var outbound = opt.outbound;\n        if (inbound === undefined && outbound === undefined) {\n            inbound = outbound = true;\n        }\n        var neighbors = this.getConnectedLinks(model, opt).reduce((function(res, link) {\n            var { source, target } = link.attributes;\n            var loop = link.hasLoop(opt);\n            // Discard if it is a point, or if the neighbor was already added.\n            if (inbound && _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.has(source, \"id\") && !res[source.id]) {\n                var sourceElement = this.getCell(source.id);\n                if (sourceElement.isElement()) {\n                    if (loop || sourceElement && sourceElement !== model && (!opt.deep || !sourceElement.isEmbeddedIn(model))) {\n                        res[source.id] = sourceElement;\n                    }\n                }\n            }\n            // Discard if it is a point, or if the neighbor was already added.\n            if (outbound && _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.has(target, \"id\") && !res[target.id]) {\n                var targetElement = this.getCell(target.id);\n                if (targetElement.isElement()) {\n                    if (loop || targetElement && targetElement !== model && (!opt.deep || !targetElement.isEmbeddedIn(model))) {\n                        res[target.id] = targetElement;\n                    }\n                }\n            }\n            return res;\n        }).bind(this), {});\n        if (model.isLink()) {\n            if (inbound) {\n                var sourceCell = model.getSourceCell();\n                if (sourceCell && sourceCell.isElement() && !neighbors[sourceCell.id]) {\n                    neighbors[sourceCell.id] = sourceCell;\n                }\n            }\n            if (outbound) {\n                var targetCell = model.getTargetCell();\n                if (targetCell && targetCell.isElement() && !neighbors[targetCell.id]) {\n                    neighbors[targetCell.id] = targetCell;\n                }\n            }\n        }\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toArray(neighbors);\n    },\n    getCommonAncestor: function() {\n        var cellsAncestors = Array.from(arguments).map(function(cell) {\n            var ancestors = [];\n            var parentId = cell.get(\"parent\");\n            while(parentId){\n                ancestors.push(parentId);\n                parentId = this.getCell(parentId).get(\"parent\");\n            }\n            return ancestors;\n        }, this);\n        cellsAncestors = cellsAncestors.sort(function(a, b) {\n            return a.length - b.length;\n        });\n        var commonAncestor = _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toArray(cellsAncestors.shift()).find(function(ancestor) {\n            return cellsAncestors.every(function(cellAncestors) {\n                return cellAncestors.includes(ancestor);\n            });\n        });\n        return this.getCell(commonAncestor);\n    },\n    // Find the whole branch starting at `element`.\n    // If `opt.deep` is `true`, take into account embedded elements too.\n    // If `opt.breadthFirst` is `true`, use the Breadth-first search algorithm, otherwise use Depth-first search.\n    getSuccessors: function(element, opt) {\n        opt = opt || {};\n        var res = [];\n        // Modify the options so that it includes the `outbound` neighbors only. In other words, search forwards.\n        this.search(element, function(el) {\n            if (el !== element) {\n                res.push(el);\n            }\n        }, _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign({}, opt, {\n            outbound: true\n        }));\n        return res;\n    },\n    cloneCells: _util_index_mjs__WEBPACK_IMPORTED_MODULE_5__.cloneCells,\n    // Clone the whole subgraph (including all the connected links whose source/target is in the subgraph).\n    // If `opt.deep` is `true`, also take into account all the embedded cells of all the subgraph cells.\n    // Return a map of the form: [original cell ID] -> [clone].\n    cloneSubgraph: function(cells, opt) {\n        var subgraph = this.getSubgraph(cells, opt);\n        return this.cloneCells(subgraph);\n    },\n    // Return `cells` and all the connected links that connect cells in the `cells` array.\n    // If `opt.deep` is `true`, return all the cells including all their embedded cells\n    // and all the links that connect any of the returned cells.\n    // For example, for a single shallow element, the result is that very same element.\n    // For two elements connected with a link: `A --- L ---> B`, the result for\n    // `getSubgraph([A, B])` is `[A, L, B]`. The same goes for `getSubgraph([L])`, the result is again `[A, L, B]`.\n    getSubgraph: function(cells, opt) {\n        opt = opt || {};\n        var subgraph = [];\n        // `cellMap` is used for a quick lookup of existence of a cell in the `cells` array.\n        var cellMap = {};\n        var elements = [];\n        var links = [];\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toArray(cells).forEach(function(cell) {\n            if (!cellMap[cell.id]) {\n                subgraph.push(cell);\n                cellMap[cell.id] = cell;\n                if (cell.isLink()) {\n                    links.push(cell);\n                } else {\n                    elements.push(cell);\n                }\n            }\n            if (opt.deep) {\n                var embeds = cell.getEmbeddedCells({\n                    deep: true\n                });\n                embeds.forEach(function(embed) {\n                    if (!cellMap[embed.id]) {\n                        subgraph.push(embed);\n                        cellMap[embed.id] = embed;\n                        if (embed.isLink()) {\n                            links.push(embed);\n                        } else {\n                            elements.push(embed);\n                        }\n                    }\n                });\n            }\n        });\n        links.forEach(function(link) {\n            // For links, return their source & target (if they are elements - not points).\n            var { source, target } = link.attributes;\n            if (source.id && !cellMap[source.id]) {\n                var sourceElement = this.getCell(source.id);\n                subgraph.push(sourceElement);\n                cellMap[sourceElement.id] = sourceElement;\n                elements.push(sourceElement);\n            }\n            if (target.id && !cellMap[target.id]) {\n                var targetElement = this.getCell(target.id);\n                subgraph.push(this.getCell(target.id));\n                cellMap[targetElement.id] = targetElement;\n                elements.push(targetElement);\n            }\n        }, this);\n        elements.forEach(function(element) {\n            // For elements, include their connected links if their source/target is in the subgraph;\n            var links = this.getConnectedLinks(element, opt);\n            links.forEach(function(link) {\n                var { source, target } = link.attributes;\n                if (!cellMap[link.id] && source.id && cellMap[source.id] && target.id && cellMap[target.id]) {\n                    subgraph.push(link);\n                    cellMap[link.id] = link;\n                }\n            });\n        }, this);\n        return subgraph;\n    },\n    // Find all the predecessors of `element`. This is a reverse operation of `getSuccessors()`.\n    // If `opt.deep` is `true`, take into account embedded elements too.\n    // If `opt.breadthFirst` is `true`, use the Breadth-first search algorithm, otherwise use Depth-first search.\n    getPredecessors: function(element, opt) {\n        opt = opt || {};\n        var res = [];\n        // Modify the options so that it includes the `inbound` neighbors only. In other words, search backwards.\n        this.search(element, function(el) {\n            if (el !== element) {\n                res.push(el);\n            }\n        }, _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign({}, opt, {\n            inbound: true\n        }));\n        return res;\n    },\n    // Perform search on the graph.\n    // If `opt.breadthFirst` is `true`, use the Breadth-first Search algorithm, otherwise use Depth-first search.\n    // By setting `opt.inbound` to `true`, you can reverse the direction of the search.\n    // If `opt.deep` is `true`, take into account embedded elements too.\n    // `iteratee` is a function of the form `function(element) {}`.\n    // If `iteratee` explicitly returns `false`, the searching stops.\n    search: function(element, iteratee, opt) {\n        opt = opt || {};\n        if (opt.breadthFirst) {\n            this.bfs(element, iteratee, opt);\n        } else {\n            this.dfs(element, iteratee, opt);\n        }\n    },\n    // Breadth-first search.\n    // If `opt.deep` is `true`, take into account embedded elements too.\n    // If `opt.inbound` is `true`, reverse the search direction (it's like reversing all the link directions).\n    // `iteratee` is a function of the form `function(element, distance) {}`.\n    // where `element` is the currently visited element and `distance` is the distance of that element\n    // from the root `element` passed the `bfs()`, i.e. the element we started the search from.\n    // Note that the `distance` is not the shortest or longest distance, it is simply the number of levels\n    // crossed till we visited the `element` for the first time. It is especially useful for tree graphs.\n    // If `iteratee` explicitly returns `false`, the searching stops.\n    bfs: function(element, iteratee, opt = {}) {\n        const visited = {};\n        const distance = {};\n        const queue = [];\n        queue.push(element);\n        distance[element.id] = 0;\n        while(queue.length > 0){\n            var next = queue.shift();\n            if (visited[next.id]) continue;\n            visited[next.id] = true;\n            if (iteratee.call(this, next, distance[next.id]) === false) continue;\n            const neighbors = this.getNeighbors(next, opt);\n            for(let i = 0, n = neighbors.length; i < n; i++){\n                const neighbor = neighbors[i];\n                distance[neighbor.id] = distance[next.id] + 1;\n                queue.push(neighbor);\n            }\n        }\n    },\n    // Depth-first search.\n    // If `opt.deep` is `true`, take into account embedded elements too.\n    // If `opt.inbound` is `true`, reverse the search direction (it's like reversing all the link directions).\n    // `iteratee` is a function of the form `function(element, distance) {}`.\n    // If `iteratee` explicitly returns `false`, the search stops.\n    dfs: function(element, iteratee, opt = {}) {\n        const visited = {};\n        const distance = {};\n        const queue = [];\n        queue.push(element);\n        distance[element.id] = 0;\n        while(queue.length > 0){\n            const next = queue.pop();\n            if (visited[next.id]) continue;\n            visited[next.id] = true;\n            if (iteratee.call(this, next, distance[next.id]) === false) continue;\n            const neighbors = this.getNeighbors(next, opt);\n            const lastIndex = queue.length;\n            for(let i = 0, n = neighbors.length; i < n; i++){\n                const neighbor = neighbors[i];\n                distance[neighbor.id] = distance[next.id] + 1;\n                queue.splice(lastIndex, 0, neighbor);\n            }\n        }\n    },\n    // Get all the roots of the graph. Time complexity: O(|V|).\n    getSources: function() {\n        var sources = [];\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn(this._nodes, (function(exists, node) {\n            if (!this._in[node] || _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmpty(this._in[node])) {\n                sources.push(this.getCell(node));\n            }\n        }).bind(this));\n        return sources;\n    },\n    // Get all the leafs of the graph. Time complexity: O(|V|).\n    getSinks: function() {\n        var sinks = [];\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.forIn(this._nodes, (function(exists, node) {\n            if (!this._out[node] || _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmpty(this._out[node])) {\n                sinks.push(this.getCell(node));\n            }\n        }).bind(this));\n        return sinks;\n    },\n    // Return `true` if `element` is a root. Time complexity: O(1).\n    isSource: function(element) {\n        return !this._in[element.id] || _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmpty(this._in[element.id]);\n    },\n    // Return `true` if `element` is a leaf. Time complexity: O(1).\n    isSink: function(element) {\n        return !this._out[element.id] || _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmpty(this._out[element.id]);\n    },\n    // Return `true` is `elementB` is a successor of `elementA`. Return `false` otherwise.\n    isSuccessor: function(elementA, elementB) {\n        var isSuccessor = false;\n        this.search(elementA, function(element) {\n            if (element === elementB && element !== elementA) {\n                isSuccessor = true;\n                return false;\n            }\n        }, {\n            outbound: true\n        });\n        return isSuccessor;\n    },\n    // Return `true` is `elementB` is a predecessor of `elementA`. Return `false` otherwise.\n    isPredecessor: function(elementA, elementB) {\n        var isPredecessor = false;\n        this.search(elementA, function(element) {\n            if (element === elementB && element !== elementA) {\n                isPredecessor = true;\n                return false;\n            }\n        }, {\n            inbound: true\n        });\n        return isPredecessor;\n    },\n    // Return `true` is `elementB` is a neighbor of `elementA`. Return `false` otherwise.\n    // `opt.deep` controls whether to take into account embedded elements as well. See `getNeighbors()`\n    // for more details.\n    // If `opt.outbound` is set to `true`, return `true` only if `elementB` is a successor neighbor.\n    // Similarly, if `opt.inbound` is set to `true`, return `true` only if `elementB` is a predecessor neighbor.\n    isNeighbor: function(elementA, elementB, opt) {\n        opt = opt || {};\n        var inbound = opt.inbound;\n        var outbound = opt.outbound;\n        if (inbound === undefined && outbound === undefined) {\n            inbound = outbound = true;\n        }\n        var isNeighbor = false;\n        this.getConnectedLinks(elementA, opt).forEach(function(link) {\n            var { source, target } = link.attributes;\n            // Discard if it is a point.\n            if (inbound && _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.has(source, \"id\") && source.id === elementB.id) {\n                isNeighbor = true;\n                return false;\n            }\n            // Discard if it is a point, or if the neighbor was already added.\n            if (outbound && _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.has(target, \"id\") && target.id === elementB.id) {\n                isNeighbor = true;\n                return false;\n            }\n        });\n        return isNeighbor;\n    },\n    // Disconnect links connected to the cell `model`.\n    disconnectLinks: function(model, opt) {\n        this.getConnectedLinks(model).forEach(function(link) {\n            link.set(link.attributes.source.id === model.id ? \"source\" : \"target\", {\n                x: 0,\n                y: 0\n            }, opt);\n        });\n    },\n    // Remove links connected to the cell `model` completely.\n    removeLinks: function(model, opt) {\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke(this.getConnectedLinks(model), \"remove\", opt);\n    },\n    // Find all elements at given point\n    findModelsFromPoint: function(p) {\n        return this.getElements().filter((el)=>el.getBBox({\n                rotate: true\n            }).containsPoint(p));\n    },\n    // Find all elements in given area\n    findModelsInArea: function(rect, opt = {}) {\n        const r = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Rect(rect);\n        const { strict = false } = opt;\n        const method = strict ? \"containsRect\" : \"intersect\";\n        return this.getElements().filter((el)=>r[method](el.getBBox({\n                rotate: true\n            })));\n    },\n    // Find all elements under the given element.\n    findModelsUnderElement: function(element, opt = {}) {\n        const { searchBy = \"bbox\" } = opt;\n        const bbox = element.getBBox().rotateAroundCenter(element.angle());\n        const elements = searchBy === \"bbox\" ? this.findModelsInArea(bbox) : this.findModelsFromPoint(_util_index_mjs__WEBPACK_IMPORTED_MODULE_7__.getRectPoint(bbox, searchBy));\n        // don't account element itself or any of its descendants\n        return elements.filter((el)=>element.id !== el.id && !el.isEmbeddedIn(element));\n    },\n    // Return bounding box of all elements.\n    getBBox: function() {\n        return this.getCellsBBox(this.getCells());\n    },\n    // Return the bounding box of all cells in array provided.\n    getCellsBBox: function(cells, opt = {}) {\n        const { rotate = true } = opt;\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.toArray(cells).reduce(function(memo, cell) {\n            const rect = cell.getBBox({\n                rotate\n            });\n            if (!rect) return memo;\n            if (memo) {\n                return memo.union(rect);\n            }\n            return rect;\n        }, null);\n    },\n    translate: function(dx, dy, opt) {\n        // Don't translate cells that are embedded in any other cell.\n        var cells = this.getCells().filter(function(cell) {\n            return !cell.isEmbedded();\n        });\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke(cells, \"translate\", dx, dy, opt);\n        return this;\n    },\n    resize: function(width, height, opt) {\n        return this.resizeCells(width, height, this.getCells(), opt);\n    },\n    resizeCells: function(width, height, cells, opt) {\n        // `getBBox` method returns `null` if no elements provided.\n        // i.e. cells can be an array of links\n        var bbox = this.getCellsBBox(cells);\n        if (bbox) {\n            var sx = Math.max(width / bbox.width, 0);\n            var sy = Math.max(height / bbox.height, 0);\n            _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.invoke(cells, \"scale\", sx, sy, bbox.origin(), opt);\n        }\n        return this;\n    },\n    startBatch: function(name, data) {\n        data = data || {};\n        this._batches[name] = (this._batches[name] || 0) + 1;\n        return this.trigger(\"batch:start\", _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign({}, data, {\n            batchName: name\n        }));\n    },\n    stopBatch: function(name, data) {\n        data = data || {};\n        this._batches[name] = (this._batches[name] || 0) - 1;\n        return this.trigger(\"batch:stop\", _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.assign({}, data, {\n            batchName: name\n        }));\n    },\n    hasActiveBatch: function(name) {\n        const batches = this._batches;\n        let names;\n        if (arguments.length === 0) {\n            names = Object.keys(batches);\n        } else if (Array.isArray(name)) {\n            names = name;\n        } else {\n            names = [\n                name\n            ];\n        }\n        return names.some((batch)=>batches[batch] > 0);\n    }\n}, {\n    validations: {\n        multiLinks: function(graph, link) {\n            // Do not allow multiple links to have the same source and target.\n            var { source, target } = link.attributes;\n            if (source.id && target.id) {\n                var sourceModel = link.getSourceCell();\n                if (sourceModel) {\n                    var connectedLinks = graph.getConnectedLinks(sourceModel, {\n                        outbound: true\n                    });\n                    var sameLinks = connectedLinks.filter(function(_link) {\n                        var { source: _source, target: _target } = _link.attributes;\n                        return _source && _source.id === source.id && (!_source.port || _source.port === source.port) && _target && _target.id === target.id && (!_target.port || _target.port === target.port);\n                    });\n                    if (sameLinks.length > 1) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n        linkPinning: function(_graph, link) {\n            var { source, target } = link.attributes;\n            return source.id && target.id;\n        }\n    }\n});\n(0,_util_wrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.wrapWith)(Graph.prototype, [\n    \"resetCells\",\n    \"addCells\",\n    \"removeCells\"\n], _util_wrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.wrappers.cells);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/Graph.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/jointjs/src/dia/HighlighterView.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HighlighterView: () => (/* binding */ HighlighterView)\n/* harmony export */ });\n/* harmony import */ var _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mvc/index.mjs */ \"(ssr)/./node_modules/jointjs/src/mvc/View.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\n\n\nfunction toArray(obj) {\n    if (!obj) return [];\n    if (Array.isArray(obj)) return obj;\n    return [\n        obj\n    ];\n}\nconst HighlighterView = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_0__.View.extend({\n    tagName: \"g\",\n    svgElement: true,\n    className: \"highlight\",\n    HIGHLIGHT_FLAG: 1,\n    UPDATE_PRIORITY: 3,\n    DETACHABLE: false,\n    UPDATABLE: true,\n    MOUNTABLE: true,\n    cellView: null,\n    nodeSelector: null,\n    node: null,\n    updateRequested: false,\n    postponedUpdate: false,\n    transformGroup: null,\n    detachedTransformGroup: null,\n    requestUpdate (cellView, nodeSelector) {\n        const { paper } = cellView;\n        this.cellView = cellView;\n        this.nodeSelector = nodeSelector;\n        if (paper) {\n            this.updateRequested = true;\n            paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n        }\n    },\n    confirmUpdate () {\n        // The cellView is now rendered/updated since it has a higher update priority.\n        this.updateRequested = false;\n        const { cellView, nodeSelector } = this;\n        if (!cellView.isMounted()) {\n            this.postponedUpdate = true;\n            return 0;\n        }\n        this.update(cellView, nodeSelector);\n        this.mount();\n        this.transform();\n        return 0;\n    },\n    findNode (cellView, nodeSelector = null) {\n        let el;\n        if (typeof nodeSelector === \"string\") {\n            [el] = cellView.findBySelector(nodeSelector);\n        } else if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(nodeSelector)) {\n            const isLink = cellView.model.isLink();\n            const { label = null, port, selector } = nodeSelector;\n            if (isLink && label !== null) {\n                // Link Label Selector\n                el = cellView.findLabelNode(label, selector);\n            } else if (!isLink && port) {\n                // Element Port Selector\n                el = cellView.findPortNode(port, selector);\n            } else {\n                // Cell Selector\n                [el] = cellView.findBySelector(selector);\n            }\n        } else if (nodeSelector) {\n            el = _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toNode(nodeSelector);\n            if (!(el instanceof SVGElement)) el = null;\n        }\n        return el ? el : null;\n    },\n    getNodeMatrix (cellView, node) {\n        const { options } = this;\n        const { layer } = options;\n        const { rotatableNode } = cellView;\n        const nodeMatrix = cellView.getNodeMatrix(node);\n        if (rotatableNode) {\n            if (layer) {\n                if (rotatableNode.contains(node)) {\n                    return nodeMatrix;\n                }\n                // The node is outside of the rotatable group.\n                // Compensate the rotation set by transformGroup.\n                return cellView.getRootRotateMatrix().inverse().multiply(nodeMatrix);\n            } else {\n                return cellView.getNodeRotateMatrix(node).multiply(nodeMatrix);\n            }\n        }\n        return nodeMatrix;\n    },\n    mount () {\n        const { MOUNTABLE, cellView, el, options, transformGroup, detachedTransformGroup, postponedUpdate, nodeSelector } = this;\n        if (!MOUNTABLE || transformGroup) return;\n        if (postponedUpdate) {\n            // The cellView was not mounted when the update was requested.\n            // The update was postponed until the cellView is mounted.\n            this.update(cellView, nodeSelector);\n            this.transform();\n            return;\n        }\n        const { vel: cellViewRoot, paper } = cellView;\n        const { layer: layerName } = options;\n        if (layerName) {\n            let vGroup;\n            if (detachedTransformGroup) {\n                vGroup = detachedTransformGroup;\n                this.detachedTransformGroup = null;\n            } else {\n                vGroup = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"g\").addClass(\"highlight-transform\").append(el);\n            }\n            this.transformGroup = vGroup;\n            paper.getLayerView(layerName).insertSortedNode(vGroup.node, options.z);\n        } else {\n            // TODO: prepend vs append\n            if (!el.parentNode || el.nextSibling) {\n                // Not appended yet or not the last child\n                cellViewRoot.append(el);\n            }\n        }\n    },\n    unmount () {\n        const { MOUNTABLE, transformGroup, vel } = this;\n        if (!MOUNTABLE) return;\n        if (transformGroup) {\n            this.transformGroup = null;\n            this.detachedTransformGroup = transformGroup;\n            transformGroup.remove();\n        } else {\n            vel.remove();\n        }\n    },\n    transform () {\n        const { transformGroup, cellView, updateRequested } = this;\n        if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n        const translateMatrix = cellView.getRootTranslateMatrix();\n        const rotateMatrix = cellView.getRootRotateMatrix();\n        const transformMatrix = translateMatrix.multiply(rotateMatrix);\n        transformGroup.attr(\"transform\", _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].matrixToTransformString(transformMatrix));\n    },\n    update () {\n        const { node: prevNode, cellView, nodeSelector, updateRequested, id } = this;\n        if (updateRequested) return;\n        this.postponedUpdate = false;\n        const node = this.node = this.findNode(cellView, nodeSelector);\n        if (prevNode) {\n            this.unhighlight(cellView, prevNode);\n        }\n        if (node) {\n            this.highlight(cellView, node);\n            this.mount();\n        } else {\n            this.unmount();\n            cellView.notify(\"cell:highlight:invalid\", id, this);\n        }\n    },\n    onRemove () {\n        const { node, cellView, id, constructor } = this;\n        if (node) {\n            this.unhighlight(cellView, node);\n        }\n        this.unmount();\n        constructor._removeRef(cellView, id);\n    },\n    highlight (_cellView, _node) {\n    // to be overridden\n    },\n    unhighlight (_cellView, _node) {\n    // to be overridden\n    },\n    // Update Attributes\n    listenToUpdateAttributes (cellView) {\n        const attributes = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.result)(this, \"UPDATE_ATTRIBUTES\");\n        if (!Array.isArray(attributes) || attributes.length === 0) return;\n        this.listenTo(cellView.model, \"change\", this.onCellAttributeChange);\n    },\n    onCellAttributeChange () {\n        const { cellView } = this;\n        if (!cellView) return;\n        const { model, paper } = cellView;\n        const attributes = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.result)(this, \"UPDATE_ATTRIBUTES\");\n        if (!attributes.some((attribute)=>model.hasChanged(attribute))) return;\n        paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n    }\n}, {\n    _views: {},\n    // Used internally by CellView highlight()\n    highlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.add(cellView, node, id, opt);\n    },\n    // Used internally by CellView unhighlight()\n    unhighlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.remove(cellView, id);\n    },\n    get (cellView, id = null) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (id === null) {\n            // all highlighters\n            const views = [];\n            if (!refs) return views;\n            for(let hid in refs){\n                const ref = refs[hid];\n                if (ref instanceof this) {\n                    views.push(ref);\n                }\n            }\n            return views;\n        } else {\n            // single highlighter\n            if (!refs) return null;\n            if (id in refs) {\n                const ref = refs[id];\n                if (ref instanceof this) return ref;\n            }\n            return null;\n        }\n    },\n    add (cellView, nodeSelector, id, opt = {}) {\n        if (!id) throw new Error(\"dia.HighlighterView: An ID required.\");\n        // Search the existing view amongst all the highlighters\n        const previousView = HighlighterView.get(cellView, id);\n        if (previousView) previousView.remove();\n        const view = new this(opt);\n        view.id = id;\n        this._addRef(cellView, id, view);\n        view.requestUpdate(cellView, nodeSelector);\n        view.listenToUpdateAttributes(cellView);\n        return view;\n    },\n    _addRef (cellView, id, view) {\n        const { cid } = cellView;\n        const { _views } = this;\n        let refs = _views[cid];\n        if (!refs) refs = _views[cid] = {};\n        refs[id] = view;\n    },\n    _removeRef (cellView, id) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (!refs) return;\n        if (id) delete refs[id];\n        for(let _ in refs)return;\n        delete _views[cid];\n    },\n    remove (cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach((view)=>{\n            view.remove();\n        });\n    },\n    removeAll (paper, id = null) {\n        const { _views } = this;\n        for(let cid in _views){\n            for(let hid in _views[cid]){\n                const view = _views[cid][hid];\n                if (view.cellView.paper === paper && view instanceof this && (id === null || hid === id)) {\n                    view.remove();\n                }\n            }\n        }\n    },\n    update (cellView, id = null, dirty = false) {\n        toArray(this.get(cellView, id)).forEach((view)=>{\n            if (dirty || view.UPDATABLE) view.update();\n        });\n    },\n    transform (cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach((view)=>{\n            if (view.UPDATABLE) view.transform();\n        });\n    },\n    unmount (cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach((view)=>view.unmount());\n    },\n    mount (cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach((view)=>view.mount());\n    },\n    uniqueId (node, opt = \"\") {\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ensureId(node) + JSON.stringify(opt);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/Link.mjs":
/*!***********************************************!*\
  !*** ./node_modules/jointjs/src/dia/Link.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Link: () => (/* binding */ Link)\n/* harmony export */ });\n/* harmony import */ var _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cell.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Cell.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n\n\n\n// Link base model.\n// --------------------------\nconst Link = _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__.Cell.extend({\n    // The default markup for links.\n    markup: [\n        '<path class=\"connection\" stroke=\"black\" d=\"M 0 0 0 0\"/>',\n        '<path class=\"marker-source\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>',\n        '<path class=\"marker-target\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>',\n        '<path class=\"connection-wrap\" d=\"M 0 0 0 0\"/>',\n        '<g class=\"labels\"/>',\n        '<g class=\"marker-vertices\"/>',\n        '<g class=\"marker-arrowheads\"/>',\n        '<g class=\"link-tools\"/>'\n    ].join(\"\"),\n    toolMarkup: [\n        '<g class=\"link-tool\">',\n        '<g class=\"tool-remove\" event=\"remove\">',\n        '<circle r=\"11\" />',\n        '<path transform=\"scale(.8) translate(-16, -16)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\" />',\n        \"<title>Remove link.</title>\",\n        \"</g>\",\n        '<g class=\"tool-options\" event=\"link:options\">',\n        '<circle r=\"11\" transform=\"translate(25)\"/>',\n        '<path fill=\"white\" transform=\"scale(.55) translate(29, -16)\" d=\"M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z\"/>',\n        \"<title>Link options.</title>\",\n        \"</g>\",\n        \"</g>\"\n    ].join(\"\"),\n    doubleToolMarkup: undefined,\n    // The default markup for showing/removing vertices. These elements are the children of the .marker-vertices element (see `this.markup`).\n    // Only .marker-vertex and .marker-vertex-remove element have special meaning. The former is used for\n    // dragging vertices (changing their position). The latter is used for removing vertices.\n    vertexMarkup: [\n        '<g class=\"marker-vertex-group\" transform=\"translate(<%= x %>, <%= y %>)\">',\n        '<circle class=\"marker-vertex\" idx=\"<%= idx %>\" r=\"10\" />',\n        '<path class=\"marker-vertex-remove-area\" idx=\"<%= idx %>\" d=\"M16,5.333c-7.732,0-14,4.701-14,10.5c0,1.982,0.741,3.833,2.016,5.414L2,25.667l5.613-1.441c2.339,1.317,5.237,2.107,8.387,2.107c7.732,0,14-4.701,14-10.5C30,10.034,23.732,5.333,16,5.333z\" transform=\"translate(5, -33)\"/>',\n        '<path class=\"marker-vertex-remove\" idx=\"<%= idx %>\" transform=\"scale(.8) translate(9.5, -37)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\">',\n        \"<title>Remove vertex.</title>\",\n        \"</path>\",\n        \"</g>\"\n    ].join(\"\"),\n    arrowheadMarkup: [\n        '<g class=\"marker-arrowhead-group marker-arrowhead-group-<%= end %>\">',\n        '<path class=\"marker-arrowhead\" end=\"<%= end %>\" d=\"M 26 0 L 0 13 L 26 26 z\" />',\n        \"</g>\"\n    ].join(\"\"),\n    // may be overwritten by user to change default label (its markup, size, attrs, position)\n    defaultLabel: undefined,\n    // deprecated\n    // may be overwritten by user to change default label markup\n    // lower priority than defaultLabel.markup\n    labelMarkup: undefined,\n    // private\n    _builtins: {\n        defaultLabel: {\n            // builtin default markup:\n            // used if neither defaultLabel.markup\n            // nor label.markup is set\n            markup: [\n                {\n                    tagName: \"rect\",\n                    selector: \"rect\" // faster than tagName CSS selector\n                },\n                {\n                    tagName: \"text\",\n                    selector: \"text\" // faster than tagName CSS selector\n                }\n            ],\n            // builtin default attributes:\n            // applied only if builtin default markup is used\n            attrs: {\n                text: {\n                    fill: \"#000000\",\n                    fontSize: 14,\n                    textAnchor: \"middle\",\n                    yAlignment: \"middle\",\n                    pointerEvents: \"none\"\n                },\n                rect: {\n                    ref: \"text\",\n                    fill: \"#ffffff\",\n                    rx: 3,\n                    ry: 3,\n                    refWidth: 1,\n                    refHeight: 1,\n                    refX: 0,\n                    refY: 0\n                }\n            },\n            // builtin default position:\n            // used if neither defaultLabel.position\n            // nor label.position is set\n            position: {\n                distance: 0.5\n            }\n        }\n    },\n    defaults: {\n        type: \"link\",\n        source: {},\n        target: {}\n    },\n    isLink: function() {\n        return true;\n    },\n    disconnect: function(opt) {\n        return this.set({\n            source: {\n                x: 0,\n                y: 0\n            },\n            target: {\n                x: 0,\n                y: 0\n            }\n        }, opt);\n    },\n    source: function(source, args, opt) {\n        // getter\n        if (source === undefined) {\n            return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(this.get(\"source\"));\n        }\n        // setter\n        var setSource;\n        var setOpt;\n        // `source` is a cell\n        // take only its `id` and combine with `args`\n        var isCellProvided = source instanceof _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__.Cell;\n        if (isCellProvided) {\n            setSource = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(args) || {};\n            setSource.id = source.id;\n            setOpt = opt;\n            return this.set(\"source\", setSource, setOpt);\n        }\n        // `source` is a point-like object\n        // for example, a g.Point\n        // take only its `x` and `y` and combine with `args`\n        var isPointProvided = !(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(source);\n        if (isPointProvided) {\n            setSource = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(args) || {};\n            setSource.x = source.x;\n            setSource.y = source.y;\n            setOpt = opt;\n            return this.set(\"source\", setSource, setOpt);\n        }\n        // `source` is an object\n        // no checking\n        // two arguments\n        setSource = source;\n        setOpt = args;\n        return this.set(\"source\", setSource, setOpt);\n    },\n    target: function(target, args, opt) {\n        // getter\n        if (target === undefined) {\n            return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(this.get(\"target\"));\n        }\n        // setter\n        var setTarget;\n        var setOpt;\n        // `target` is a cell\n        // take only its `id` argument and combine with `args`\n        var isCellProvided = target instanceof _Cell_mjs__WEBPACK_IMPORTED_MODULE_0__.Cell;\n        if (isCellProvided) {\n            setTarget = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(args) || {};\n            setTarget.id = target.id;\n            setOpt = opt;\n            return this.set(\"target\", setTarget, setOpt);\n        }\n        // `target` is a point-like object\n        // for example, a g.Point\n        // take only its `x` and `y` and combine with `args`\n        var isPointProvided = !(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(target);\n        if (isPointProvided) {\n            setTarget = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(args) || {};\n            setTarget.x = target.x;\n            setTarget.y = target.y;\n            setOpt = opt;\n            return this.set(\"target\", setTarget, setOpt);\n        }\n        // `target` is an object\n        // no checking\n        // two arguments\n        setTarget = target;\n        setOpt = args;\n        return this.set(\"target\", setTarget, setOpt);\n    },\n    router: function(name, args, opt) {\n        // getter\n        if (name === undefined) {\n            var router = this.get(\"router\");\n            if (!router) {\n                if (this.get(\"manhattan\")) return {\n                    name: \"orthogonal\"\n                }; // backwards compatibility\n                return null;\n            }\n            if (typeof router === \"object\") return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(router);\n            return router; // e.g. a function\n        }\n        // setter\n        var isRouterProvided = typeof name === \"object\" || typeof name === \"function\";\n        var localRouter = isRouterProvided ? name : {\n            name: name,\n            args: args\n        };\n        var localOpt = isRouterProvided ? args : opt;\n        return this.set(\"router\", localRouter, localOpt);\n    },\n    connector: function(name, args, opt) {\n        // getter\n        if (name === undefined) {\n            var connector = this.get(\"connector\");\n            if (!connector) {\n                if (this.get(\"smooth\")) return {\n                    name: \"smooth\"\n                }; // backwards compatibility\n                return null;\n            }\n            if (typeof connector === \"object\") return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.clone)(connector);\n            return connector; // e.g. a function\n        }\n        // setter\n        var isConnectorProvided = typeof name === \"object\" || typeof name === \"function\";\n        var localConnector = isConnectorProvided ? name : {\n            name: name,\n            args: args\n        };\n        var localOpt = isConnectorProvided ? args : opt;\n        return this.set(\"connector\", localConnector, localOpt);\n    },\n    // Labels API\n    // A convenient way to set labels. Currently set values will be mixined with `value` if used as a setter.\n    label: function(idx, label, opt) {\n        var labels = this.labels();\n        idx = isFinite(idx) && idx !== null ? idx | 0 : 0;\n        if (idx < 0) idx = labels.length + idx;\n        // getter\n        if (arguments.length <= 1) return this.prop([\n            \"labels\",\n            idx\n        ]);\n        // setter\n        return this.prop([\n            \"labels\",\n            idx\n        ], label, opt);\n    },\n    labels: function(labels, opt) {\n        // getter\n        if (arguments.length === 0) {\n            labels = this.get(\"labels\");\n            if (!Array.isArray(labels)) return [];\n            return labels.slice();\n        }\n        // setter\n        if (!Array.isArray(labels)) labels = [];\n        return this.set(\"labels\", labels, opt);\n    },\n    hasLabels: function() {\n        const { labels } = this.attributes;\n        return Array.isArray(labels) && labels.length > 0;\n    },\n    insertLabel: function(idx, label, opt) {\n        if (!label) throw new Error(\"dia.Link: no label provided\");\n        var labels = this.labels();\n        var n = labels.length;\n        idx = isFinite(idx) && idx !== null ? idx | 0 : n;\n        if (idx < 0) idx = n + idx + 1;\n        labels.splice(idx, 0, label);\n        return this.labels(labels, opt);\n    },\n    // convenience function\n    // add label to end of labels array\n    appendLabel: function(label, opt) {\n        return this.insertLabel(-1, label, opt);\n    },\n    removeLabel: function(idx, opt) {\n        var labels = this.labels();\n        idx = isFinite(idx) && idx !== null ? idx | 0 : -1;\n        labels.splice(idx, 1);\n        return this.labels(labels, opt);\n    },\n    // Vertices API\n    vertex: function(idx, vertex, opt) {\n        var vertices = this.vertices();\n        idx = isFinite(idx) && idx !== null ? idx | 0 : 0;\n        if (idx < 0) idx = vertices.length + idx;\n        // getter\n        if (arguments.length <= 1) return this.prop([\n            \"vertices\",\n            idx\n        ]);\n        // setter\n        var setVertex = this._normalizeVertex(vertex);\n        return this.prop([\n            \"vertices\",\n            idx\n        ], setVertex, opt);\n    },\n    vertices: function(vertices, opt) {\n        // getter\n        if (arguments.length === 0) {\n            vertices = this.get(\"vertices\");\n            if (!Array.isArray(vertices)) return [];\n            return vertices.slice();\n        }\n        // setter\n        if (!Array.isArray(vertices)) vertices = [];\n        var setVertices = [];\n        for(var i = 0; i < vertices.length; i++){\n            var vertex = vertices[i];\n            var setVertex = this._normalizeVertex(vertex);\n            setVertices.push(setVertex);\n        }\n        return this.set(\"vertices\", setVertices, opt);\n    },\n    insertVertex: function(idx, vertex, opt) {\n        if (!vertex) throw new Error(\"dia.Link: no vertex provided\");\n        var vertices = this.vertices();\n        var n = vertices.length;\n        idx = isFinite(idx) && idx !== null ? idx | 0 : n;\n        if (idx < 0) idx = n + idx + 1;\n        var setVertex = this._normalizeVertex(vertex);\n        vertices.splice(idx, 0, setVertex);\n        return this.vertices(vertices, opt);\n    },\n    removeVertex: function(idx, opt) {\n        var vertices = this.vertices();\n        idx = isFinite(idx) && idx !== null ? idx | 0 : -1;\n        vertices.splice(idx, 1);\n        return this.vertices(vertices, opt);\n    },\n    _normalizeVertex: function(vertex) {\n        // is vertex a point-like object?\n        // for example, a g.Point\n        var isPointProvided = !(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(vertex);\n        if (isPointProvided) return {\n            x: vertex.x,\n            y: vertex.y\n        };\n        // else: return vertex unchanged\n        return vertex;\n    },\n    // Transformations\n    translate: function(tx, ty, opt) {\n        // enrich the option object\n        opt = opt || {};\n        opt.translateBy = opt.translateBy || this.id;\n        opt.tx = tx;\n        opt.ty = ty;\n        return this.applyToPoints(function(p) {\n            return {\n                x: (p.x || 0) + tx,\n                y: (p.y || 0) + ty\n            };\n        }, opt);\n    },\n    scale: function(sx, sy, origin, opt) {\n        return this.applyToPoints(function(p) {\n            return (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point)(p).scale(sx, sy, origin).toJSON();\n        }, opt);\n    },\n    applyToPoints: function(fn, opt) {\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunction)(fn)) {\n            throw new TypeError(\"dia.Link: applyToPoints expects its first parameter to be a function.\");\n        }\n        var attrs = {};\n        var { source, target } = this.attributes;\n        if (!source.id) {\n            attrs.source = fn(source);\n        }\n        if (!target.id) {\n            attrs.target = fn(target);\n        }\n        var vertices = this.vertices();\n        if (vertices.length > 0) {\n            attrs.vertices = vertices.map(fn);\n        }\n        return this.set(attrs, opt);\n    },\n    getSourcePoint: function() {\n        var sourceCell = this.getSourceCell();\n        if (!sourceCell) return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(this.source());\n        return sourceCell.getPointFromConnectedLink(this, \"source\");\n    },\n    getTargetPoint: function() {\n        var targetCell = this.getTargetCell();\n        if (!targetCell) return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(this.target());\n        return targetCell.getPointFromConnectedLink(this, \"target\");\n    },\n    getPointFromConnectedLink: function() {\n        return this.getPolyline().pointAt(0.5);\n    },\n    getPolyline: function() {\n        const points = [\n            this.getSourcePoint(),\n            ...this.vertices().map(_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point),\n            this.getTargetPoint()\n        ];\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Polyline(points);\n    },\n    getBBox: function() {\n        return this.getPolyline().bbox();\n    },\n    reparent: function(opt) {\n        var newParent;\n        if (this.graph) {\n            var source = this.getSourceElement();\n            var target = this.getTargetElement();\n            var prevParent = this.getParentCell();\n            if (source && target) {\n                if (source === target || source.isEmbeddedIn(target)) {\n                    newParent = target;\n                } else if (target.isEmbeddedIn(source)) {\n                    newParent = source;\n                } else {\n                    newParent = this.graph.getCommonAncestor(source, target);\n                }\n            }\n            if (prevParent && (!newParent || newParent.id !== prevParent.id)) {\n                // Unembed the link if source and target has no common ancestor\n                // or common ancestor changed\n                prevParent.unembed(this, opt);\n            }\n            if (newParent) {\n                newParent.embed(this, opt);\n            }\n        }\n        return newParent;\n    },\n    hasLoop: function(opt) {\n        opt = opt || {};\n        var { source, target } = this.attributes;\n        var sourceId = source.id;\n        var targetId = target.id;\n        if (!sourceId || !targetId) {\n            // Link \"pinned\" to the paper does not have a loop.\n            return false;\n        }\n        var loop = sourceId === targetId;\n        // Note that there in the deep mode a link can have a loop,\n        // even if it connects only a parent and its embed.\n        // A loop \"target equals source\" is valid in both shallow and deep mode.\n        if (!loop && opt.deep && this.graph) {\n            var sourceElement = this.getSourceCell();\n            var targetElement = this.getTargetCell();\n            loop = sourceElement.isEmbeddedIn(targetElement) || targetElement.isEmbeddedIn(sourceElement);\n        }\n        return loop;\n    },\n    // unlike source(), this method returns null if source is a point\n    getSourceCell: function() {\n        const { graph, attributes } = this;\n        var source = attributes.source;\n        return source && source.id && graph && graph.getCell(source.id) || null;\n    },\n    getSourceElement: function() {\n        var cell = this;\n        var visited = {};\n        do {\n            if (visited[cell.id]) return null;\n            visited[cell.id] = true;\n            cell = cell.getSourceCell();\n        }while (cell && cell.isLink());\n        return cell;\n    },\n    // unlike target(), this method returns null if target is a point\n    getTargetCell: function() {\n        const { graph, attributes } = this;\n        var target = attributes.target;\n        return target && target.id && graph && graph.getCell(target.id) || null;\n    },\n    getTargetElement: function() {\n        var cell = this;\n        var visited = {};\n        do {\n            if (visited[cell.id]) return null;\n            visited[cell.id] = true;\n            cell = cell.getTargetCell();\n        }while (cell && cell.isLink());\n        return cell;\n    },\n    // Returns the common ancestor for the source element,\n    // target element and the link itself.\n    getRelationshipAncestor: function() {\n        var connectionAncestor;\n        if (this.graph) {\n            var cells = [\n                this,\n                this.getSourceElement(),\n                this.getTargetElement() // null if target is a point\n            ].filter(function(item) {\n                return !!item;\n            });\n            connectionAncestor = this.graph.getCommonAncestor.apply(this.graph, cells);\n        }\n        return connectionAncestor || null;\n    },\n    // Is source, target and the link itself embedded in a given cell?\n    isRelationshipEmbeddedIn: function(cell) {\n        var cellId = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isString)(cell) || (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cell) ? cell : cell.id;\n        var ancestor = this.getRelationshipAncestor();\n        return !!ancestor && (ancestor.id === cellId || ancestor.isEmbeddedIn(cellId));\n    },\n    // Get resolved default label.\n    _getDefaultLabel: function() {\n        var defaultLabel = this.get(\"defaultLabel\") || this.defaultLabel || {};\n        var label = {};\n        label.markup = defaultLabel.markup || this.get(\"labelMarkup\") || this.labelMarkup;\n        label.position = defaultLabel.position;\n        label.attrs = defaultLabel.attrs;\n        label.size = defaultLabel.size;\n        return label;\n    }\n}, {\n    endsEqual: function(a, b) {\n        var portsEqual = a.port === b.port || !a.port && !b.port;\n        return a.id === b.id && portsEqual;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/Link.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/LinkView.mjs":
/*!***************************************************!*\
  !*** ./node_modules/jointjs/src/dia/LinkView.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkView: () => (/* binding */ LinkView)\n/* harmony export */ });\n/* harmony import */ var _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CellView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/CellView.mjs\");\n/* harmony import */ var _Link_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Link.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Link.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _routers_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../routers/index.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/index.mjs\");\n/* harmony import */ var _connectors_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../connectors/index.mjs */ \"(ssr)/./node_modules/jointjs/src/connectors/index.mjs\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n\n\n\n\n\n\n\n\nconst Flags = {\n    TOOLS: _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.Flags.TOOLS,\n    RENDER: \"RENDER\",\n    UPDATE: \"UPDATE\",\n    LEGACY_TOOLS: \"LEGACY_TOOLS\",\n    LABELS: \"LABELS\",\n    VERTICES: \"VERTICES\",\n    SOURCE: \"SOURCE\",\n    TARGET: \"TARGET\",\n    CONNECTOR: \"CONNECTOR\"\n};\n// Link base view and controller.\n// ----------------------------------------\nconst LinkView = _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.extend({\n    className: function() {\n        var classNames = _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.className.apply(this).split(\" \");\n        classNames.push(\"link\");\n        return classNames.join(\" \");\n    },\n    options: {\n        shortLinkLength: 105,\n        doubleLinkTools: false,\n        longLinkLength: 155,\n        linkToolsOffset: 40,\n        doubleLinkToolsOffset: 65,\n        sampleInterval: 50\n    },\n    _labelCache: null,\n    _labelSelectors: null,\n    _markerCache: null,\n    _V: null,\n    _dragData: null,\n    metrics: null,\n    decimalsRounding: 2,\n    initialize: function() {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.initialize.apply(this, arguments);\n        // `_.labelCache` is a mapping of indexes of labels in the `this.get('labels')` array to\n        // `<g class=\"label\">` nodes wrapped by Vectorizer. This allows for quick access to the\n        // nodes in `updateLabelPosition()` in order to update the label positions.\n        this._labelCache = {};\n        // a cache of label selectors\n        this._labelSelectors = {};\n        // keeps markers bboxes and positions again for quicker access\n        this._markerCache = {};\n        // cache of default markup nodes\n        this._V = {};\n        // connection path metrics\n        this.cleanNodesCache();\n    },\n    presentationAttributes: {\n        markup: [\n            Flags.RENDER\n        ],\n        attrs: [\n            Flags.UPDATE\n        ],\n        router: [\n            Flags.UPDATE\n        ],\n        connector: [\n            Flags.CONNECTOR\n        ],\n        smooth: [\n            Flags.UPDATE\n        ],\n        manhattan: [\n            Flags.UPDATE\n        ],\n        toolMarkup: [\n            Flags.LEGACY_TOOLS\n        ],\n        labels: [\n            Flags.LABELS\n        ],\n        labelMarkup: [\n            Flags.LABELS\n        ],\n        vertices: [\n            Flags.VERTICES,\n            Flags.UPDATE\n        ],\n        vertexMarkup: [\n            Flags.VERTICES\n        ],\n        source: [\n            Flags.SOURCE,\n            Flags.UPDATE\n        ],\n        target: [\n            Flags.TARGET,\n            Flags.UPDATE\n        ]\n    },\n    initFlag: [\n        Flags.RENDER,\n        Flags.SOURCE,\n        Flags.TARGET,\n        Flags.TOOLS\n    ],\n    UPDATE_PRIORITY: 1,\n    confirmUpdate: function(flags, opt) {\n        opt || (opt = {});\n        if (this.hasFlag(flags, Flags.SOURCE)) {\n            if (!this.updateEndProperties(\"source\")) return flags;\n            flags = this.removeFlag(flags, Flags.SOURCE);\n        }\n        if (this.hasFlag(flags, Flags.TARGET)) {\n            if (!this.updateEndProperties(\"target\")) return flags;\n            flags = this.removeFlag(flags, Flags.TARGET);\n        }\n        const { paper, sourceView, targetView } = this;\n        if (paper && (sourceView && !paper.isViewMounted(sourceView) || targetView && !paper.isViewMounted(targetView))) {\n            // Wait for the sourceView and targetView to be rendered\n            return flags;\n        }\n        if (this.hasFlag(flags, Flags.RENDER)) {\n            this.render();\n            this.updateHighlighters(true);\n            this.updateTools(opt);\n            flags = this.removeFlag(flags, [\n                Flags.RENDER,\n                Flags.UPDATE,\n                Flags.VERTICES,\n                Flags.LABELS,\n                Flags.TOOLS,\n                Flags.LEGACY_TOOLS,\n                Flags.CONNECTOR\n            ]);\n            return flags;\n        }\n        let updateHighlighters = false;\n        if (this.hasFlag(flags, Flags.VERTICES)) {\n            this.renderVertexMarkers();\n            flags = this.removeFlag(flags, Flags.VERTICES);\n        }\n        const { model } = this;\n        const { attributes } = model;\n        let updateLabels = this.hasFlag(flags, Flags.LABELS);\n        let updateLegacyTools = this.hasFlag(flags, Flags.LEGACY_TOOLS);\n        if (updateLabels) {\n            this.onLabelsChange(model, attributes.labels, opt);\n            flags = this.removeFlag(flags, Flags.LABELS);\n            updateHighlighters = true;\n        }\n        if (updateLegacyTools) {\n            this.renderTools();\n            flags = this.removeFlag(flags, Flags.LEGACY_TOOLS);\n        }\n        const updateAll = this.hasFlag(flags, Flags.UPDATE);\n        const updateConnector = this.hasFlag(flags, Flags.CONNECTOR);\n        if (updateAll || updateConnector) {\n            if (!updateAll) {\n                // Keep the current route and update the geometry\n                this.updatePath();\n                this.updateDOM();\n            } else if (opt.translateBy && model.isRelationshipEmbeddedIn(opt.translateBy)) {\n                // The link is being translated by an ancestor that will\n                // shift source point, target point and all vertices\n                // by an equal distance.\n                this.translate(opt.tx, opt.ty);\n            } else {\n                this.update();\n            }\n            this.updateTools(opt);\n            flags = this.removeFlag(flags, [\n                Flags.UPDATE,\n                Flags.TOOLS,\n                Flags.CONNECTOR\n            ]);\n            updateLabels = false;\n            updateLegacyTools = false;\n            updateHighlighters = true;\n        }\n        if (updateLabels) {\n            this.updateLabelPositions();\n        }\n        if (updateLegacyTools) {\n            this.updateToolsPosition();\n        }\n        if (updateHighlighters) {\n            this.updateHighlighters();\n        }\n        if (this.hasFlag(flags, Flags.TOOLS)) {\n            this.updateTools(opt);\n            flags = this.removeFlag(flags, Flags.TOOLS);\n        }\n        return flags;\n    },\n    requestConnectionUpdate: function(opt) {\n        this.requestUpdate(this.getFlag(Flags.UPDATE), opt);\n    },\n    isLabelsRenderRequired: function(opt = {}) {\n        const previousLabels = this.model.previous(\"labels\");\n        if (!previousLabels) return true;\n        // Here is an optimization for cases when we know, that change does\n        // not require re-rendering of all labels.\n        if (\"propertyPathArray\" in opt && \"propertyValue\" in opt) {\n            // The label is setting by `prop()` method\n            var pathArray = opt.propertyPathArray || [];\n            var pathLength = pathArray.length;\n            if (pathLength > 1) {\n                // We are changing a single label here e.g. 'labels/0/position'\n                var labelExists = !!previousLabels[pathArray[1]];\n                if (labelExists) {\n                    if (pathLength === 2) {\n                        // We are changing the entire label. Need to check if the\n                        // markup is also being changed.\n                        return \"markup\" in Object(opt.propertyValue);\n                    } else if (pathArray[2] !== \"markup\") {\n                        // We are changing a label property but not the markup\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    },\n    onLabelsChange: function(_link, _labels, opt) {\n        // Note: this optimization works in async=false mode only\n        if (this.isLabelsRenderRequired(opt)) {\n            this.renderLabels();\n        } else {\n            this.updateLabels();\n        }\n    },\n    // Rendering.\n    // ----------\n    render: function() {\n        this.vel.empty();\n        this.unmountLabels();\n        this._V = {};\n        this.renderMarkup();\n        // rendering labels has to be run after the link is appended to DOM tree. (otherwise <Text> bbox\n        // returns zero values)\n        this.renderLabels();\n        this.update();\n        return this;\n    },\n    renderMarkup: function() {\n        var link = this.model;\n        var markup = link.get(\"markup\") || link.markup;\n        if (!markup) throw new Error(\"dia.LinkView: markup required\");\n        if (Array.isArray(markup)) return this.renderJSONMarkup(markup);\n        if (typeof markup === \"string\") return this.renderStringMarkup(markup);\n        throw new Error(\"dia.LinkView: invalid markup\");\n    },\n    renderJSONMarkup: function(markup) {\n        var doc = this.parseDOMJSON(markup, this.el);\n        // Selectors\n        this.selectors = doc.selectors;\n        // Fragment\n        this.vel.append(doc.fragment);\n    },\n    renderStringMarkup: function(markup) {\n        // A special markup can be given in the `properties.markup` property. This might be handy\n        // if e.g. arrowhead markers should be `<image>` elements or any other element than `<path>`s.\n        // `.connection`, `.connection-wrap`, `.marker-source` and `.marker-target` selectors\n        // of elements with special meaning though. Therefore, those classes should be preserved in any\n        // special markup passed in `properties.markup`.\n        var children = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(markup);\n        // custom markup may contain only one children\n        if (!Array.isArray(children)) children = [\n            children\n        ];\n        // Cache all children elements for quicker access.\n        var cache = this._V; // vectorized markup;\n        for(var i = 0, n = children.length; i < n; i++){\n            var child = children[i];\n            var className = child.attr(\"class\");\n            if (className) {\n                // Strip the joint class name prefix, if there is one.\n                className = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.removeClassNamePrefix)(className);\n                cache[jquery__WEBPACK_IMPORTED_MODULE_0__.camelCase(className)] = child;\n            }\n        }\n        // partial rendering\n        this.renderTools();\n        this.renderVertexMarkers();\n        this.renderArrowheadMarkers();\n        this.vel.append(children);\n    },\n    _getLabelMarkup: function(labelMarkup) {\n        if (!labelMarkup) return undefined;\n        if (Array.isArray(labelMarkup)) return this.parseDOMJSON(labelMarkup, null);\n        if (typeof labelMarkup === \"string\") return this._getLabelStringMarkup(labelMarkup);\n        throw new Error(\"dia.linkView: invalid label markup\");\n    },\n    _getLabelStringMarkup: function(labelMarkup) {\n        var children = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(labelMarkup);\n        var fragment = document.createDocumentFragment();\n        if (!Array.isArray(children)) {\n            fragment.appendChild(children.node);\n        } else {\n            for(var i = 0, n = children.length; i < n; i++){\n                var currentChild = children[i].node;\n                fragment.appendChild(currentChild);\n            }\n        }\n        return {\n            fragment: fragment,\n            selectors: {}\n        }; // no selectors\n    },\n    // Label markup fragment may come wrapped in <g class=\"label\" />, or not.\n    // If it doesn't, add the <g /> container here.\n    _normalizeLabelMarkup: function(markup) {\n        if (!markup) return undefined;\n        var fragment = markup.fragment;\n        if (!(markup.fragment instanceof DocumentFragment) || !markup.fragment.hasChildNodes()) throw new Error(\"dia.LinkView: invalid label markup.\");\n        var vNode;\n        var childNodes = fragment.childNodes;\n        if (childNodes.length > 1 || childNodes[0].nodeName.toUpperCase() !== \"G\") {\n            // default markup fragment is not wrapped in <g />\n            // add a <g /> container\n            vNode = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"g\").append(fragment);\n        } else {\n            vNode = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(childNodes[0]);\n        }\n        vNode.addClass(\"label\");\n        return {\n            node: vNode.node,\n            selectors: markup.selectors\n        };\n    },\n    renderLabels: function() {\n        var cache = this._V;\n        var vLabels = cache.labels;\n        var labelCache = this._labelCache = {};\n        var labelSelectors = this._labelSelectors = {};\n        var model = this.model;\n        var labels = model.attributes.labels || [];\n        var labelsCount = labels.length;\n        if (labelsCount === 0) {\n            if (vLabels) vLabels.remove();\n            return this;\n        }\n        if (vLabels) {\n            vLabels.empty();\n        } else {\n            // there is no label container in the markup but some labels are defined\n            // add a <g class=\"labels\" /> container\n            vLabels = cache.labels = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"g\").addClass(\"labels\");\n            if (this.options.labelsLayer) {\n                vLabels.addClass((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.addClassNamePrefix)((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result)(this, \"className\")));\n                vLabels.attr(\"model-id\", model.id);\n            }\n        }\n        for(var i = 0; i < labelsCount; i++){\n            var label = labels[i];\n            var labelMarkup = this._normalizeLabelMarkup(this._getLabelMarkup(label.markup));\n            var labelNode;\n            var selectors;\n            if (labelMarkup) {\n                labelNode = labelMarkup.node;\n                selectors = labelMarkup.selectors;\n            } else {\n                var builtinDefaultLabel = model._builtins.defaultLabel;\n                var builtinDefaultLabelMarkup = this._normalizeLabelMarkup(this._getLabelMarkup(builtinDefaultLabel.markup));\n                var defaultLabel = model._getDefaultLabel();\n                var defaultLabelMarkup = this._normalizeLabelMarkup(this._getLabelMarkup(defaultLabel.markup));\n                var defaultMarkup = defaultLabelMarkup || builtinDefaultLabelMarkup;\n                labelNode = defaultMarkup.node;\n                selectors = defaultMarkup.selectors;\n            }\n            labelNode.setAttribute(\"label-idx\", i); // assign label-idx\n            vLabels.append(labelNode);\n            labelCache[i] = labelNode; // cache node for `updateLabels()` so it can just update label node positions\n            var rootSelector = this.selector;\n            if (selectors[rootSelector]) throw new Error(\"dia.LinkView: ambiguous label root selector.\");\n            selectors[rootSelector] = labelNode;\n            labelSelectors[i] = selectors; // cache label selectors for `updateLabels()`\n        }\n        if (!vLabels.parent()) {\n            this.mountLabels();\n        }\n        this.updateLabels();\n        return this;\n    },\n    mountLabels: function() {\n        const { el, paper, model, _V, options } = this;\n        const { labels: vLabels } = _V;\n        if (!vLabels || !model.hasLabels()) return;\n        const { node } = vLabels;\n        if (options.labelsLayer) {\n            paper.getLayerView(options.labelsLayer).insertSortedNode(node, model.get(\"z\"));\n        } else {\n            if (node.parentNode !== el) {\n                el.appendChild(node);\n            }\n        }\n    },\n    unmountLabels: function() {\n        const { options, _V } = this;\n        if (!_V) return;\n        const { labels: vLabels } = _V;\n        if (vLabels && options.labelsLayer) {\n            vLabels.remove();\n        }\n    },\n    findLabelNode: function(labelIndex, selector) {\n        const labelRoot = this._labelCache[labelIndex];\n        if (!labelRoot) return null;\n        const labelSelectors = this._labelSelectors[labelIndex];\n        const [node = null] = this.findBySelector(selector, labelRoot, labelSelectors);\n        return node;\n    },\n    // merge default label attrs into label attrs (or use built-in default label attrs if neither is provided)\n    // keep `undefined` or `null` because `{}` means something else\n    _mergeLabelAttrs: function(hasCustomMarkup, labelAttrs, defaultLabelAttrs, builtinDefaultLabelAttrs) {\n        if (labelAttrs === null) return null;\n        if (labelAttrs === undefined) {\n            if (defaultLabelAttrs === null) return null;\n            if (defaultLabelAttrs === undefined) {\n                if (hasCustomMarkup) return undefined;\n                return builtinDefaultLabelAttrs;\n            }\n            if (hasCustomMarkup) return defaultLabelAttrs;\n            return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, builtinDefaultLabelAttrs, defaultLabelAttrs);\n        }\n        if (hasCustomMarkup) return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, defaultLabelAttrs, labelAttrs);\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, builtinDefaultLabelAttrs, defaultLabelAttrs, labelAttrs);\n    },\n    // merge default label size into label size (no built-in default)\n    // keep `undefined` or `null` because `{}` means something else\n    _mergeLabelSize: function(labelSize, defaultLabelSize) {\n        if (labelSize === null) return null;\n        if (labelSize === undefined) {\n            if (defaultLabelSize === null) return null;\n            if (defaultLabelSize === undefined) return undefined;\n            return defaultLabelSize;\n        }\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, defaultLabelSize, labelSize);\n    },\n    updateLabels: function() {\n        if (!this._V.labels) return this;\n        var model = this.model;\n        var labels = model.get(\"labels\") || [];\n        var canLabelMove = this.can(\"labelMove\");\n        var builtinDefaultLabel = model._builtins.defaultLabel;\n        var builtinDefaultLabelAttrs = builtinDefaultLabel.attrs;\n        var defaultLabel = model._getDefaultLabel();\n        var defaultLabelMarkup = defaultLabel.markup;\n        var defaultLabelAttrs = defaultLabel.attrs;\n        var defaultLabelSize = defaultLabel.size;\n        for(var i = 0, n = labels.length; i < n; i++){\n            var labelNode = this._labelCache[i];\n            labelNode.setAttribute(\"cursor\", canLabelMove ? \"move\" : \"default\");\n            var selectors = this._labelSelectors[i];\n            var label = labels[i];\n            var labelMarkup = label.markup;\n            var labelAttrs = label.attrs;\n            var labelSize = label.size;\n            var attrs = this._mergeLabelAttrs(labelMarkup || defaultLabelMarkup, labelAttrs, defaultLabelAttrs, builtinDefaultLabelAttrs);\n            var size = this._mergeLabelSize(labelSize, defaultLabelSize);\n            this.updateDOMSubtreeAttributes(labelNode, attrs, {\n                rootBBox: new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(size),\n                selectors: selectors\n            });\n        }\n        return this;\n    },\n    renderTools: function() {\n        if (!this._V.linkTools) return this;\n        // Tools are a group of clickable elements that manipulate the whole link.\n        // A good example of this is the remove tool that removes the whole link.\n        // Tools appear after hovering the link close to the `source` element/point of the link\n        // but are offset a bit so that they don't cover the `marker-arrowhead`.\n        var $tools = jquery__WEBPACK_IMPORTED_MODULE_0__(this._V.linkTools.node).empty();\n        var toolTemplate = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.template)(this.model.get(\"toolMarkup\") || this.model.toolMarkup);\n        var tool = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(toolTemplate());\n        $tools.append(tool.node);\n        // Cache the tool node so that the `updateToolsPosition()` can update the tool position quickly.\n        this._toolCache = tool;\n        // If `doubleLinkTools` is enabled, we render copy of the tools on the other side of the\n        // link as well but only if the link is longer than `longLinkLength`.\n        if (this.options.doubleLinkTools) {\n            var tool2;\n            if (this.model.get(\"doubleToolMarkup\") || this.model.doubleToolMarkup) {\n                toolTemplate = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.template)(this.model.get(\"doubleToolMarkup\") || this.model.doubleToolMarkup);\n                tool2 = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(toolTemplate());\n            } else {\n                tool2 = tool.clone();\n            }\n            $tools.append(tool2.node);\n            this._tool2Cache = tool2;\n        }\n        return this;\n    },\n    renderVertexMarkers: function() {\n        if (!this._V.markerVertices) return this;\n        var $markerVertices = jquery__WEBPACK_IMPORTED_MODULE_0__(this._V.markerVertices.node).empty();\n        // A special markup can be given in the `properties.vertexMarkup` property. This might be handy\n        // if default styling (elements) are not desired. This makes it possible to use any\n        // SVG elements for .marker-vertex and .marker-vertex-remove tools.\n        var markupTemplate = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.template)(this.model.get(\"vertexMarkup\") || this.model.vertexMarkup);\n        this.model.vertices().forEach(function(vertex, idx) {\n            $markerVertices.append((0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(markupTemplate((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign)({\n                idx: idx\n            }, vertex))).node);\n        });\n        return this;\n    },\n    renderArrowheadMarkers: function() {\n        // Custom markups might not have arrowhead markers. Therefore, jump of this function immediately if that's the case.\n        if (!this._V.markerArrowheads) return this;\n        var $markerArrowheads = jquery__WEBPACK_IMPORTED_MODULE_0__(this._V.markerArrowheads.node);\n        $markerArrowheads.empty();\n        // A special markup can be given in the `properties.vertexMarkup` property. This might be handy\n        // if default styling (elements) are not desired. This makes it possible to use any\n        // SVG elements for .marker-vertex and .marker-vertex-remove tools.\n        var markupTemplate = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.template)(this.model.get(\"arrowheadMarkup\") || this.model.arrowheadMarkup);\n        this._V.sourceArrowhead = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(markupTemplate({\n            end: \"source\"\n        }));\n        this._V.targetArrowhead = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(markupTemplate({\n            end: \"target\"\n        }));\n        $markerArrowheads.append(this._V.sourceArrowhead.node, this._V.targetArrowhead.node);\n        return this;\n    },\n    // remove vertices that lie on (or nearly on) straight lines within the link\n    // return the number of removed points\n    removeRedundantLinearVertices: function(opt) {\n        const SIMPLIFY_THRESHOLD = 0.001;\n        const link = this.model;\n        const vertices = link.vertices();\n        const routePoints = [\n            this.sourceAnchor,\n            ...vertices,\n            this.targetAnchor\n        ];\n        const numRoutePoints = routePoints.length;\n        // put routePoints into a polyline and try to simplify\n        const polyline = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Polyline(routePoints);\n        polyline.simplify({\n            threshold: SIMPLIFY_THRESHOLD\n        });\n        const polylinePoints = polyline.points.map((point)=>point.toJSON()); // JSON of points after simplification\n        const numPolylinePoints = polylinePoints.length; // number of points after simplification\n        // shortcut if simplification did not remove any redundant vertices:\n        if (numRoutePoints === numPolylinePoints) return 0;\n        // else: set simplified polyline points as link vertices\n        // remove first and last polyline points again (= source/target anchors)\n        link.vertices(polylinePoints.slice(1, numPolylinePoints - 1), opt);\n        return numRoutePoints - numPolylinePoints;\n    },\n    updateDefaultConnectionPath: function() {\n        var cache = this._V;\n        if (cache.connection) {\n            cache.connection.attr(\"d\", this.getSerializedConnection());\n        }\n        if (cache.connectionWrap) {\n            cache.connectionWrap.attr(\"d\", this.getSerializedConnection());\n        }\n        if (cache.markerSource && cache.markerTarget) {\n            this._translateAndAutoOrientArrows(cache.markerSource, cache.markerTarget);\n        }\n    },\n    getEndView: function(type) {\n        switch(type){\n            case \"source\":\n                return this.sourceView || null;\n            case \"target\":\n                return this.targetView || null;\n            default:\n                throw new Error(\"dia.LinkView: type parameter required.\");\n        }\n    },\n    getEndAnchor: function(type) {\n        switch(type){\n            case \"source\":\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(this.sourceAnchor);\n            case \"target\":\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(this.targetAnchor);\n            default:\n                throw new Error(\"dia.LinkView: type parameter required.\");\n        }\n    },\n    getEndConnectionPoint: function(type) {\n        switch(type){\n            case \"source\":\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(this.sourcePoint);\n            case \"target\":\n                return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(this.targetPoint);\n            default:\n                throw new Error(\"dia.LinkView: type parameter required.\");\n        }\n    },\n    getEndMagnet: function(type) {\n        switch(type){\n            case \"source\":\n                var sourceView = this.sourceView;\n                if (!sourceView) break;\n                return this.sourceMagnet || sourceView.el;\n            case \"target\":\n                var targetView = this.targetView;\n                if (!targetView) break;\n                return this.targetMagnet || targetView.el;\n            default:\n                throw new Error(\"dia.LinkView: type parameter required.\");\n        }\n        return null;\n    },\n    // Updating.\n    // ---------\n    update: function() {\n        this.updateRoute();\n        this.updatePath();\n        this.updateDOM();\n        return this;\n    },\n    translate: function(tx = 0, ty = 0) {\n        const { route, path } = this;\n        if (!route || !path) return;\n        // translate the route\n        const polyline = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Polyline(route);\n        polyline.translate(tx, ty);\n        this.route = polyline.points;\n        // translate source and target connection and marker points.\n        this._translateConnectionPoints(tx, ty);\n        // translate the geometry path\n        path.translate(tx, ty);\n        this.updateDOM();\n    },\n    updateDOM () {\n        const { el, model, selectors } = this;\n        this.cleanNodesCache();\n        // update SVG attributes defined by 'attrs/'.\n        this.updateDOMSubtreeAttributes(el, model.attr(), {\n            selectors\n        });\n        // legacy link path update\n        this.updateDefaultConnectionPath();\n        // update the label position etc.\n        this.updateLabelPositions();\n        this.updateToolsPosition();\n        this.updateArrowheadMarkers();\n        // *Deprecated*\n        // Local perpendicular flag (as opposed to one defined on paper).\n        // Could be enabled inside a connector/router. It's valid only\n        // during the update execution.\n        this.options.perpendicular = null;\n    },\n    updateRoute: function() {\n        const { model } = this;\n        const vertices = model.vertices();\n        // 1. Find Anchors\n        const anchors = this.findAnchors(vertices);\n        const sourceAnchor = this.sourceAnchor = anchors.source;\n        const targetAnchor = this.targetAnchor = anchors.target;\n        // 2. Find Route\n        const route = this.findRoute(vertices);\n        this.route = route;\n        // 3. Find Connection Points\n        var connectionPoints = this.findConnectionPoints(route, sourceAnchor, targetAnchor);\n        this.sourcePoint = connectionPoints.source;\n        this.targetPoint = connectionPoints.target;\n    },\n    updatePath: function() {\n        const { route, sourcePoint, targetPoint } = this;\n        // 3b. Find Marker Connection Point - Backwards Compatibility\n        const markerPoints = this.findMarkerPoints(route, sourcePoint, targetPoint);\n        // 4. Find Connection\n        const path = this.findPath(route, markerPoints.source || sourcePoint, markerPoints.target || targetPoint);\n        this.path = path;\n    },\n    findMarkerPoints: function(route, sourcePoint, targetPoint) {\n        var firstWaypoint = route[0];\n        var lastWaypoint = route[route.length - 1];\n        // Move the source point by the width of the marker taking into account\n        // its scale around x-axis. Note that scale is the only transform that\n        // makes sense to be set in `.marker-source` attributes object\n        // as all other transforms (translate/rotate) will be replaced\n        // by the `translateAndAutoOrient()` function.\n        var cache = this._markerCache;\n        // cache source and target points\n        var sourceMarkerPoint, targetMarkerPoint;\n        if (this._V.markerSource) {\n            cache.sourceBBox = cache.sourceBBox || this._V.markerSource.getBBox();\n            sourceMarkerPoint = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point)(sourcePoint).move(firstWaypoint || targetPoint, cache.sourceBBox.width * this._V.markerSource.scale().sx * -1).round();\n        }\n        if (this._V.markerTarget) {\n            cache.targetBBox = cache.targetBBox || this._V.markerTarget.getBBox();\n            targetMarkerPoint = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point)(targetPoint).move(lastWaypoint || sourcePoint, cache.targetBBox.width * this._V.markerTarget.scale().sx * -1).round();\n        }\n        // if there was no markup for the marker, use the connection point.\n        cache.sourcePoint = sourceMarkerPoint || sourcePoint.clone();\n        cache.targetPoint = targetMarkerPoint || targetPoint.clone();\n        return {\n            source: sourceMarkerPoint,\n            target: targetMarkerPoint\n        };\n    },\n    findAnchorsOrdered: function(firstEndType, firstRef, secondEndType, secondRef) {\n        var firstAnchor, secondAnchor;\n        var firstAnchorRef, secondAnchorRef;\n        var model = this.model;\n        var firstDef = model.get(firstEndType);\n        var secondDef = model.get(secondEndType);\n        var firstView = this.getEndView(firstEndType);\n        var secondView = this.getEndView(secondEndType);\n        var firstMagnet = this.getEndMagnet(firstEndType);\n        var secondMagnet = this.getEndMagnet(secondEndType);\n        // Anchor first\n        if (firstView) {\n            if (firstRef) {\n                firstAnchorRef = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(firstRef);\n            } else if (secondView) {\n                firstAnchorRef = secondMagnet;\n            } else {\n                firstAnchorRef = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(secondDef);\n            }\n            firstAnchor = this.getAnchor(firstDef.anchor, firstView, firstMagnet, firstAnchorRef, firstEndType);\n        } else {\n            firstAnchor = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(firstDef);\n        }\n        // Anchor second\n        if (secondView) {\n            secondAnchorRef = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(secondRef || firstAnchor);\n            secondAnchor = this.getAnchor(secondDef.anchor, secondView, secondMagnet, secondAnchorRef, secondEndType);\n        } else {\n            secondAnchor = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(secondDef);\n        }\n        var res = {};\n        res[firstEndType] = firstAnchor;\n        res[secondEndType] = secondAnchor;\n        return res;\n    },\n    findAnchors: function(vertices) {\n        var model = this.model;\n        var firstVertex = vertices[0];\n        var lastVertex = vertices[vertices.length - 1];\n        if (model.target().priority && !model.source().priority) {\n            // Reversed order\n            return this.findAnchorsOrdered(\"target\", lastVertex, \"source\", firstVertex);\n        }\n        // Usual order\n        return this.findAnchorsOrdered(\"source\", firstVertex, \"target\", lastVertex);\n    },\n    findConnectionPoints: function(route, sourceAnchor, targetAnchor) {\n        var firstWaypoint = route[0];\n        var lastWaypoint = route[route.length - 1];\n        var model = this.model;\n        var sourceDef = model.get(\"source\");\n        var targetDef = model.get(\"target\");\n        var sourceView = this.sourceView;\n        var targetView = this.targetView;\n        var paperOptions = this.paper.options;\n        var sourceMagnet, targetMagnet;\n        // Connection Point Source\n        var sourcePoint;\n        if (sourceView && !sourceView.isNodeConnection(this.sourceMagnet)) {\n            sourceMagnet = this.sourceMagnet || sourceView.el;\n            var sourceConnectionPointDef = sourceDef.connectionPoint || paperOptions.defaultConnectionPoint;\n            var sourcePointRef = firstWaypoint || targetAnchor;\n            var sourceLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Line(sourcePointRef, sourceAnchor);\n            sourcePoint = this.getConnectionPoint(sourceConnectionPointDef, sourceView, sourceMagnet, sourceLine, \"source\");\n        } else {\n            sourcePoint = sourceAnchor;\n        }\n        // Connection Point Target\n        var targetPoint;\n        if (targetView && !targetView.isNodeConnection(this.targetMagnet)) {\n            targetMagnet = this.targetMagnet || targetView.el;\n            var targetConnectionPointDef = targetDef.connectionPoint || paperOptions.defaultConnectionPoint;\n            var targetPointRef = lastWaypoint || sourceAnchor;\n            var targetLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Line(targetPointRef, targetAnchor);\n            targetPoint = this.getConnectionPoint(targetConnectionPointDef, targetView, targetMagnet, targetLine, \"target\");\n        } else {\n            targetPoint = targetAnchor;\n        }\n        return {\n            source: sourcePoint,\n            target: targetPoint\n        };\n    },\n    getAnchor: function(anchorDef, cellView, magnet, ref, endType) {\n        var isConnection = cellView.isNodeConnection(magnet);\n        var paperOptions = this.paper.options;\n        if (!anchorDef) {\n            if (isConnection) {\n                anchorDef = paperOptions.defaultLinkAnchor;\n            } else {\n                if (paperOptions.perpendicularLinks || this.options.perpendicular) {\n                    // Backwards compatibility\n                    // If `perpendicularLinks` flag is set on the paper and there are vertices\n                    // on the link, then try to find a connection point that makes the link perpendicular\n                    // even though the link won't point to the center of the targeted object.\n                    anchorDef = {\n                        name: \"perpendicular\"\n                    };\n                } else {\n                    anchorDef = paperOptions.defaultAnchor;\n                }\n            }\n        }\n        if (!anchorDef) throw new Error(\"Anchor required.\");\n        var anchorFn;\n        if (typeof anchorDef === \"function\") {\n            anchorFn = anchorDef;\n        } else {\n            var anchorName = anchorDef.name;\n            var anchorNamespace = isConnection ? \"linkAnchorNamespace\" : \"anchorNamespace\";\n            anchorFn = paperOptions[anchorNamespace][anchorName];\n            if (typeof anchorFn !== \"function\") throw new Error(\"Unknown anchor: \" + anchorName);\n        }\n        var anchor = anchorFn.call(this, cellView, magnet, ref, anchorDef.args || {}, endType, this);\n        if (!anchor) return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point();\n        return anchor.round(this.decimalsRounding);\n    },\n    getConnectionPoint: function(connectionPointDef, view, magnet, line, endType) {\n        var connectionPoint;\n        var anchor = line.end;\n        var paperOptions = this.paper.options;\n        // Backwards compatibility\n        if (typeof paperOptions.linkConnectionPoint === \"function\") {\n            var linkConnectionMagnet = magnet === view.el ? undefined : magnet;\n            connectionPoint = paperOptions.linkConnectionPoint(this, view, linkConnectionMagnet, line.start, endType);\n            if (connectionPoint) return connectionPoint;\n        }\n        if (!connectionPointDef) return anchor;\n        var connectionPointFn;\n        if (typeof connectionPointDef === \"function\") {\n            connectionPointFn = connectionPointDef;\n        } else {\n            var connectionPointName = connectionPointDef.name;\n            connectionPointFn = paperOptions.connectionPointNamespace[connectionPointName];\n            if (typeof connectionPointFn !== \"function\") throw new Error(\"Unknown connection point: \" + connectionPointName);\n        }\n        connectionPoint = connectionPointFn.call(this, line, view, magnet, connectionPointDef.args || {}, endType, this);\n        if (!connectionPoint) return anchor;\n        return connectionPoint.round(this.decimalsRounding);\n    },\n    _translateConnectionPoints: function(tx, ty) {\n        var cache = this._markerCache;\n        cache.sourcePoint.offset(tx, ty);\n        cache.targetPoint.offset(tx, ty);\n        this.sourcePoint.offset(tx, ty);\n        this.targetPoint.offset(tx, ty);\n        this.sourceAnchor.offset(tx, ty);\n        this.targetAnchor.offset(tx, ty);\n    },\n    // combine default label position with built-in default label position\n    _getDefaultLabelPositionProperty: function() {\n        var model = this.model;\n        var builtinDefaultLabel = model._builtins.defaultLabel;\n        var builtinDefaultLabelPosition = builtinDefaultLabel.position;\n        var defaultLabel = model._getDefaultLabel();\n        var defaultLabelPosition = this._normalizeLabelPosition(defaultLabel.position);\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, builtinDefaultLabelPosition, defaultLabelPosition);\n    },\n    // if label position is a number, normalize it to a position object\n    // this makes sure that label positions can be merged properly\n    _normalizeLabelPosition: function(labelPosition) {\n        if (typeof labelPosition === \"number\") return {\n            distance: labelPosition,\n            offset: null,\n            angle: 0,\n            args: null\n        };\n        return labelPosition;\n    },\n    // expects normalized position properties\n    // e.g. `this._normalizeLabelPosition(labelPosition)` and `this._getDefaultLabelPositionProperty()`\n    _mergeLabelPositionProperty: function(normalizedLabelPosition, normalizedDefaultLabelPosition) {\n        if (normalizedLabelPosition === null) return null;\n        if (normalizedLabelPosition === undefined) {\n            if (normalizedDefaultLabelPosition === null) return null;\n            return normalizedDefaultLabelPosition;\n        }\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, normalizedDefaultLabelPosition, normalizedLabelPosition);\n    },\n    updateLabelPositions: function() {\n        if (!this._V.labels) return this;\n        var path = this.path;\n        if (!path) return this;\n        // This method assumes all the label nodes are stored in the `this._labelCache` hash table\n        // by their indices in the `this.get('labels')` array. This is done in the `renderLabels()` method.\n        var model = this.model;\n        var labels = model.get(\"labels\") || [];\n        if (!labels.length) return this;\n        var defaultLabelPosition = this._getDefaultLabelPositionProperty();\n        for(var idx = 0, n = labels.length; idx < n; idx++){\n            var labelNode = this._labelCache[idx];\n            if (!labelNode) continue;\n            var label = labels[idx];\n            var labelPosition = this._normalizeLabelPosition(label.position);\n            var position = this._mergeLabelPositionProperty(labelPosition, defaultLabelPosition);\n            var transformationMatrix = this._getLabelTransformationMatrix(position);\n            labelNode.setAttribute(\"transform\", _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].matrixToTransformString(transformationMatrix));\n            this._cleanLabelMatrices(idx);\n        }\n        return this;\n    },\n    _cleanLabelMatrices: function(index) {\n        // Clean magnetMatrix for all nodes of the label.\n        // Cached BoundingRect does not need to updated when the position changes\n        // TODO: this doesn't work for labels with XML String markups.\n        const { metrics, _labelSelectors } = this;\n        const selectors = _labelSelectors[index];\n        if (!selectors) return;\n        for(let selector in selectors){\n            const { id } = selectors[selector];\n            if (id && id in metrics) delete metrics[id].magnetMatrix;\n        }\n    },\n    updateToolsPosition: function() {\n        if (!this._V.linkTools) return this;\n        // Move the tools a bit to the target position but don't cover the `sourceArrowhead` marker.\n        // Note that the offset is hardcoded here. The offset should be always\n        // more than the `this.$('.marker-arrowhead[end=\"source\"]')[0].bbox().width` but looking\n        // this up all the time would be slow.\n        var scale = \"\";\n        var offset = this.options.linkToolsOffset;\n        var connectionLength = this.getConnectionLength();\n        // Firefox returns connectionLength=NaN in odd cases (for bezier curves).\n        // In that case we won't update tools position at all.\n        if (!Number.isNaN(connectionLength)) {\n            // If the link is too short, make the tools half the size and the offset twice as low.\n            if (connectionLength < this.options.shortLinkLength) {\n                scale = \"scale(.5)\";\n                offset /= 2;\n            }\n            var toolPosition = this.getPointAtLength(offset);\n            this._toolCache.attr(\"transform\", \"translate(\" + toolPosition.x + \", \" + toolPosition.y + \") \" + scale);\n            if (this.options.doubleLinkTools && connectionLength >= this.options.longLinkLength) {\n                var doubleLinkToolsOffset = this.options.doubleLinkToolsOffset || offset;\n                toolPosition = this.getPointAtLength(connectionLength - doubleLinkToolsOffset);\n                this._tool2Cache.attr(\"transform\", \"translate(\" + toolPosition.x + \", \" + toolPosition.y + \") \" + scale);\n                this._tool2Cache.attr(\"display\", \"inline\");\n            } else if (this.options.doubleLinkTools) {\n                this._tool2Cache.attr(\"display\", \"none\");\n            }\n        }\n        return this;\n    },\n    updateArrowheadMarkers: function() {\n        if (!this._V.markerArrowheads) return this;\n        // getting bbox of an element with `display=\"none\"` in IE9 ends up with access violation\n        if (jquery__WEBPACK_IMPORTED_MODULE_0__.css(this._V.markerArrowheads.node, \"display\") === \"none\") return this;\n        var sx = this.getConnectionLength() < this.options.shortLinkLength ? .5 : 1;\n        this._V.sourceArrowhead.scale(sx);\n        this._V.targetArrowhead.scale(sx);\n        this._translateAndAutoOrientArrows(this._V.sourceArrowhead, this._V.targetArrowhead);\n        return this;\n    },\n    updateEndProperties: function(endType) {\n        const { model, paper } = this;\n        const endViewProperty = `${endType}View`;\n        const endDef = model.get(endType);\n        const endId = endDef && endDef.id;\n        if (!endId) {\n            // the link end is a point ~ rect 0x0\n            this[endViewProperty] = null;\n            this.updateEndMagnet(endType);\n            return true;\n        }\n        const endModel = paper.getModelById(endId);\n        if (!endModel) throw new Error(\"LinkView: invalid \" + endType + \" cell.\");\n        const endView = endModel.findView(paper);\n        if (!endView) {\n            // A view for a model should always exist\n            return false;\n        }\n        this[endViewProperty] = endView;\n        this.updateEndMagnet(endType);\n        return true;\n    },\n    updateEndMagnet: function(endType) {\n        const endMagnetProperty = `${endType}Magnet`;\n        const endView = this.getEndView(endType);\n        if (endView) {\n            let connectedMagnet = endView.getMagnetFromLinkEnd(this.model.get(endType));\n            if (connectedMagnet === endView.el) connectedMagnet = null;\n            this[endMagnetProperty] = connectedMagnet;\n        } else {\n            this[endMagnetProperty] = null;\n        }\n    },\n    _translateAndAutoOrientArrows: function(sourceArrow, targetArrow) {\n        // Make the markers \"point\" to their sticky points being auto-oriented towards\n        // `targetPosition`/`sourcePosition`. And do so only if there is a markup for them.\n        var route = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.toArray)(this.route);\n        if (sourceArrow) {\n            sourceArrow.translateAndAutoOrient(this.sourcePoint, route[0] || this.targetPoint, this.paper.cells);\n        }\n        if (targetArrow) {\n            targetArrow.translateAndAutoOrient(this.targetPoint, route[route.length - 1] || this.sourcePoint, this.paper.cells);\n        }\n    },\n    _getLabelPositionProperty: function(idx) {\n        return this.model.label(idx).position || {};\n    },\n    _getLabelPositionAngle: function(idx) {\n        var labelPosition = this._getLabelPositionProperty(idx);\n        return labelPosition.angle || 0;\n    },\n    _getLabelPositionArgs: function(idx) {\n        var labelPosition = this._getLabelPositionProperty(idx);\n        return labelPosition.args;\n    },\n    _getDefaultLabelPositionArgs: function() {\n        var defaultLabel = this.model._getDefaultLabel();\n        var defaultLabelPosition = defaultLabel.position || {};\n        return defaultLabelPosition.args;\n    },\n    // merge default label position args into label position args\n    // keep `undefined` or `null` because `{}` means something else\n    _mergeLabelPositionArgs: function(labelPositionArgs, defaultLabelPositionArgs) {\n        if (labelPositionArgs === null) return null;\n        if (labelPositionArgs === undefined) {\n            if (defaultLabelPositionArgs === null) return null;\n            return defaultLabelPositionArgs;\n        }\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.merge)({}, defaultLabelPositionArgs, labelPositionArgs);\n    },\n    // Add default label at given position at end of `labels` array.\n    // Four signatures:\n    // - obj, obj = point, opt\n    // - obj, num, obj = point, angle, opt\n    // - num, num, obj = x, y, opt\n    // - num, num, num, obj = x, y, angle, opt\n    // Assigns relative coordinates by default:\n    // `opt.absoluteDistance` forces absolute coordinates.\n    // `opt.reverseDistance` forces reverse absolute coordinates (if absoluteDistance = true).\n    // `opt.absoluteOffset` forces absolute coordinates for offset.\n    // Additional args:\n    // `opt.keepGradient` auto-adjusts the angle of the label to match path gradient at position.\n    // `opt.ensureLegibility` rotates labels so they are never upside-down.\n    addLabel: function(p1, p2, p3, p4) {\n        // normalize data from the four possible signatures\n        var localX;\n        var localY;\n        var localAngle = 0;\n        var localOpt;\n        if (typeof p1 !== \"number\") {\n            // {x, y} object provided as first parameter\n            localX = p1.x;\n            localY = p1.y;\n            if (typeof p2 === \"number\") {\n                // angle and opt provided as second and third parameters\n                localAngle = p2;\n                localOpt = p3;\n            } else {\n                // opt provided as second parameter\n                localOpt = p2;\n            }\n        } else {\n            // x and y provided as first and second parameters\n            localX = p1;\n            localY = p2;\n            if (typeof p3 === \"number\") {\n                // angle and opt provided as third and fourth parameters\n                localAngle = p3;\n                localOpt = p4;\n            } else {\n                // opt provided as third parameter\n                localOpt = p3;\n            }\n        }\n        // merge label position arguments\n        var defaultLabelPositionArgs = this._getDefaultLabelPositionArgs();\n        var labelPositionArgs = localOpt;\n        var positionArgs = this._mergeLabelPositionArgs(labelPositionArgs, defaultLabelPositionArgs);\n        // append label to labels array\n        var label = {\n            position: this.getLabelPosition(localX, localY, localAngle, positionArgs)\n        };\n        var idx = -1;\n        this.model.insertLabel(idx, label, localOpt);\n        return idx;\n    },\n    // Add a new vertex at calculated index to the `vertices` array.\n    addVertex: function(x, y, opt) {\n        // accept input in form `{ x, y }, opt` or `x, y, opt`\n        var isPointProvided = typeof x !== \"number\";\n        var localX = isPointProvided ? x.x : x;\n        var localY = isPointProvided ? x.y : y;\n        var localOpt = isPointProvided ? y : opt;\n        var vertex = {\n            x: localX,\n            y: localY\n        };\n        var idx = this.getVertexIndex(localX, localY);\n        this.model.insertVertex(idx, vertex, localOpt);\n        return idx;\n    },\n    // Send a token (an SVG element, usually a circle) along the connection path.\n    // Example: `link.findView(paper).sendToken(V('circle', { r: 7, fill: 'green' }).node)`\n    // `opt.duration` is optional and is a time in milliseconds that the token travels from the source to the target of the link. Default is `1000`.\n    // `opt.directon` is optional and it determines whether the token goes from source to target or other way round (`reverse`)\n    // `opt.connection` is an optional selector to the connection path.\n    // `callback` is optional and is a function to be called once the token reaches the target.\n    sendToken: function(token, opt, callback) {\n        function onAnimationEnd(vToken, callback) {\n            return function() {\n                vToken.remove();\n                if (typeof callback === \"function\") {\n                    callback();\n                }\n            };\n        }\n        var duration, isReversed, selector;\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isObject)(opt)) {\n            duration = opt.duration;\n            isReversed = opt.direction === \"reverse\";\n            selector = opt.connection;\n        } else {\n            // Backwards compatibility\n            duration = opt;\n            isReversed = false;\n            selector = null;\n        }\n        duration = duration || 1000;\n        var animationAttributes = {\n            dur: duration + \"ms\",\n            repeatCount: 1,\n            calcMode: \"linear\",\n            fill: \"freeze\"\n        };\n        if (isReversed) {\n            animationAttributes.keyPoints = \"1;0\";\n            animationAttributes.keyTimes = \"0;1\";\n        }\n        var vToken = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(token);\n        var connection;\n        if (typeof selector === \"string\") {\n            // Use custom connection path.\n            connection = this.findBySelector(selector, this.el, this.selectors)[0];\n        } else {\n            // Select connection path automatically.\n            var cache = this._V;\n            connection = cache.connection ? cache.connection.node : this.el.querySelector(\"path\");\n        }\n        if (!(connection instanceof SVGPathElement)) {\n            throw new Error(\"dia.LinkView: token animation requires a valid connection path.\");\n        }\n        vToken.appendTo(this.paper.cells).animateAlongPath(animationAttributes, connection);\n        setTimeout(onAnimationEnd(vToken, callback), duration);\n    },\n    findRoute: function(vertices) {\n        vertices || (vertices = []);\n        var namespace = this.paper.options.routerNamespace || _routers_index_mjs__WEBPACK_IMPORTED_MODULE_9__;\n        var router = this.model.router();\n        var defaultRouter = this.paper.options.defaultRouter;\n        if (!router) {\n            if (defaultRouter) router = defaultRouter;\n            else return vertices.map(_g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point); // no router specified\n        }\n        var routerFn = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isFunction)(router) ? router : namespace[router.name];\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isFunction)(routerFn)) {\n            throw new Error('dia.LinkView: unknown router: \"' + router.name + '\".');\n        }\n        var args = router.args || {};\n        var route = routerFn.call(this, vertices, args, this // linkView\n        );\n        if (!route) return vertices.map(_g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point);\n        return route;\n    },\n    // Return the `d` attribute value of the `<path>` element representing the link\n    // between `source` and `target`.\n    findPath: function(route, sourcePoint, targetPoint) {\n        var namespace = this.paper.options.connectorNamespace || _connectors_index_mjs__WEBPACK_IMPORTED_MODULE_10__;\n        var connector = this.model.connector();\n        var defaultConnector = this.paper.options.defaultConnector;\n        if (!connector) {\n            connector = defaultConnector || {};\n        }\n        var connectorFn = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isFunction)(connector) ? connector : namespace[connector.name];\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isFunction)(connectorFn)) {\n            throw new Error('dia.LinkView: unknown connector: \"' + connector.name + '\".');\n        }\n        var args = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.clone)(connector.args || {});\n        args.raw = true; // Request raw g.Path as the result.\n        var path = connectorFn.call(this, sourcePoint, targetPoint, route, args, this // linkView\n        );\n        if (typeof path === \"string\") {\n            // Backwards compatibility for connectors not supporting `raw` option.\n            path = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_11__.Path(_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].normalizePathData(path));\n        }\n        return path;\n    },\n    // Public API.\n    // -----------\n    getConnection: function() {\n        var path = this.path;\n        if (!path) return null;\n        return path.clone();\n    },\n    getSerializedConnection: function() {\n        var path = this.path;\n        if (!path) return null;\n        var metrics = this.metrics;\n        if (metrics.hasOwnProperty(\"data\")) return metrics.data;\n        var data = path.serialize();\n        metrics.data = data;\n        return data;\n    },\n    getConnectionSubdivisions: function() {\n        var path = this.path;\n        if (!path) return null;\n        var metrics = this.metrics;\n        if (metrics.hasOwnProperty(\"segmentSubdivisions\")) return metrics.segmentSubdivisions;\n        var subdivisions = path.getSegmentSubdivisions();\n        metrics.segmentSubdivisions = subdivisions;\n        return subdivisions;\n    },\n    getConnectionLength: function() {\n        var path = this.path;\n        if (!path) return 0;\n        var metrics = this.metrics;\n        if (metrics.hasOwnProperty(\"length\")) return metrics.length;\n        var length = path.length({\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n        metrics.length = length;\n        return length;\n    },\n    getPointAtLength: function(length) {\n        var path = this.path;\n        if (!path) return null;\n        return path.pointAtLength(length, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    getPointAtRatio: function(ratio) {\n        var path = this.path;\n        if (!path) return null;\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.isPercentage)(ratio)) ratio = parseFloat(ratio) / 100;\n        return path.pointAt(ratio, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    getTangentAtLength: function(length) {\n        var path = this.path;\n        if (!path) return null;\n        return path.tangentAtLength(length, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    getTangentAtRatio: function(ratio) {\n        var path = this.path;\n        if (!path) return null;\n        return path.tangentAt(ratio, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    getClosestPoint: function(point) {\n        var path = this.path;\n        if (!path) return null;\n        return path.closestPoint(point, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    getClosestPointLength: function(point) {\n        var path = this.path;\n        if (!path) return null;\n        return path.closestPointLength(point, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    getClosestPointRatio: function(point) {\n        var path = this.path;\n        if (!path) return null;\n        return path.closestPointNormalizedLength(point, {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        });\n    },\n    // Get label position object based on two provided coordinates, x and y.\n    // (Used behind the scenes when user moves labels around.)\n    // Two signatures:\n    // - num, num, obj = x, y, options\n    // - num, num, num, obj = x, y, angle, options\n    // Accepts distance/offset options = `absoluteDistance: boolean`, `reverseDistance: boolean`, `absoluteOffset: boolean`\n    // - `absoluteOffset` is necessary in order to move beyond connection endpoints\n    // Additional options = `keepGradient: boolean`, `ensureLegibility: boolean`\n    getLabelPosition: function(x, y, p3, p4) {\n        var position = {};\n        // normalize data from the two possible signatures\n        var localAngle = 0;\n        var localOpt;\n        if (typeof p3 === \"number\") {\n            // angle and opt provided as third and fourth argument\n            localAngle = p3;\n            localOpt = p4;\n        } else {\n            // opt provided as third argument\n            localOpt = p3;\n        }\n        // save localOpt as `args` of the position object that is passed along\n        if (localOpt) position.args = localOpt;\n        // identify distance/offset settings\n        var isDistanceRelative = !(localOpt && localOpt.absoluteDistance); // relative by default\n        var isDistanceAbsoluteReverse = localOpt && localOpt.absoluteDistance && localOpt.reverseDistance; // non-reverse by default\n        var isOffsetAbsolute = localOpt && localOpt.absoluteOffset; // offset is non-absolute by default\n        // find closest point t\n        var path = this.path;\n        var pathOpt = {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        };\n        var labelPoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(x, y);\n        var t = path.closestPointT(labelPoint, pathOpt);\n        // DISTANCE:\n        var labelDistance = path.lengthAtT(t, pathOpt);\n        if (isDistanceRelative) labelDistance = labelDistance / this.getConnectionLength() || 0; // fix to prevent NaN for 0 length\n        if (isDistanceAbsoluteReverse) labelDistance = -1 * (this.getConnectionLength() - labelDistance) || 1; // fix for end point (-0 => 1)\n        position.distance = labelDistance;\n        // OFFSET:\n        // use absolute offset if:\n        // - opt.absoluteOffset is true,\n        // - opt.absoluteOffset is not true but there is no tangent\n        var tangent;\n        if (!isOffsetAbsolute) tangent = path.tangentAtT(t);\n        var labelOffset;\n        if (tangent) {\n            labelOffset = tangent.pointOffset(labelPoint);\n        } else {\n            var closestPoint = path.pointAtT(t);\n            var labelOffsetDiff = labelPoint.difference(closestPoint);\n            labelOffset = {\n                x: labelOffsetDiff.x,\n                y: labelOffsetDiff.y\n            };\n        }\n        position.offset = labelOffset;\n        // ANGLE:\n        position.angle = localAngle;\n        return position;\n    },\n    _getLabelTransformationMatrix: function(labelPosition) {\n        var labelDistance;\n        var labelAngle = 0;\n        var args = {};\n        if (typeof labelPosition === \"number\") {\n            labelDistance = labelPosition;\n        } else if (typeof labelPosition.distance === \"number\") {\n            args = labelPosition.args || {};\n            labelDistance = labelPosition.distance;\n            labelAngle = labelPosition.angle || 0;\n        } else {\n            throw new Error(\"dia.LinkView: invalid label position distance.\");\n        }\n        var isDistanceRelative = labelDistance > 0 && labelDistance <= 1;\n        var labelOffset = 0;\n        var labelOffsetCoordinates = {\n            x: 0,\n            y: 0\n        };\n        if (labelPosition.offset) {\n            var positionOffset = labelPosition.offset;\n            if (typeof positionOffset === \"number\") labelOffset = positionOffset;\n            if (positionOffset.x) labelOffsetCoordinates.x = positionOffset.x;\n            if (positionOffset.y) labelOffsetCoordinates.y = positionOffset.y;\n        }\n        var isOffsetAbsolute = labelOffsetCoordinates.x !== 0 || labelOffsetCoordinates.y !== 0 || labelOffset === 0;\n        var isKeepGradient = args.keepGradient;\n        var isEnsureLegibility = args.ensureLegibility;\n        var path = this.path;\n        var pathOpt = {\n            segmentSubdivisions: this.getConnectionSubdivisions()\n        };\n        var distance = isDistanceRelative ? labelDistance * this.getConnectionLength() : labelDistance;\n        var tangent = path.tangentAtLength(distance, pathOpt);\n        var translation;\n        var angle = labelAngle;\n        if (tangent) {\n            if (isOffsetAbsolute) {\n                translation = tangent.start.clone();\n                translation.offset(labelOffsetCoordinates);\n            } else {\n                var normal = tangent.clone();\n                normal.rotate(tangent.start, -90);\n                normal.setLength(labelOffset);\n                translation = normal.end;\n            }\n            if (isKeepGradient) {\n                angle = tangent.angle() + labelAngle;\n                if (isEnsureLegibility) {\n                    angle = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_12__.normalizeAngle)((angle + 90) % 180 - 90);\n                }\n            }\n        } else {\n            // fallback - the connection has zero length\n            translation = path.start.clone();\n            if (isOffsetAbsolute) translation.offset(labelOffsetCoordinates);\n        }\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createSVGMatrix().translate(translation.x, translation.y).rotate(angle);\n    },\n    getLabelCoordinates: function(labelPosition) {\n        var transformationMatrix = this._getLabelTransformationMatrix(labelPosition);\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(transformationMatrix.e, transformationMatrix.f);\n    },\n    getVertexIndex: function(x, y) {\n        var model = this.model;\n        var vertices = model.vertices();\n        var vertexLength = this.getClosestPointLength(new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(x, y));\n        var idx = 0;\n        for(var n = vertices.length; idx < n; idx++){\n            var currentVertex = vertices[idx];\n            var currentVertexLength = this.getClosestPointLength(currentVertex);\n            if (vertexLength < currentVertexLength) break;\n        }\n        return idx;\n    },\n    // Interaction. The controller part.\n    // ---------------------------------\n    notifyPointerdown (evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.pointerdown.call(this, evt, x, y);\n        this.notify(\"link:pointerdown\", evt, x, y);\n    },\n    notifyPointermove (evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.pointermove.call(this, evt, x, y);\n        this.notify(\"link:pointermove\", evt, x, y);\n    },\n    notifyPointerup (evt, x, y) {\n        this.notify(\"link:pointerup\", evt, x, y);\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.pointerup.call(this, evt, x, y);\n    },\n    pointerdblclick: function(evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.pointerdblclick.apply(this, arguments);\n        this.notify(\"link:pointerdblclick\", evt, x, y);\n    },\n    pointerclick: function(evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.pointerclick.apply(this, arguments);\n        this.notify(\"link:pointerclick\", evt, x, y);\n    },\n    contextmenu: function(evt, x, y) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.contextmenu.apply(this, arguments);\n        this.notify(\"link:contextmenu\", evt, x, y);\n    },\n    pointerdown: function(evt, x, y) {\n        this.notifyPointerdown(evt, x, y);\n        // Backwards compatibility for the default markup\n        var className = evt.target.getAttribute(\"class\");\n        switch(className){\n            case \"marker-vertex\":\n                this.dragVertexStart(evt, x, y);\n                return;\n            case \"marker-vertex-remove\":\n            case \"marker-vertex-remove-area\":\n                this.dragVertexRemoveStart(evt, x, y);\n                return;\n            case \"marker-arrowhead\":\n                this.dragArrowheadStart(evt, x, y);\n                return;\n            case \"connection\":\n            case \"connection-wrap\":\n                this.dragConnectionStart(evt, x, y);\n                return;\n            case \"marker-source\":\n            case \"marker-target\":\n                return;\n        }\n        this.dragStart(evt, x, y);\n    },\n    pointermove: function(evt, x, y) {\n        // Backwards compatibility\n        var dragData = this._dragData;\n        if (dragData) this.eventData(evt, dragData);\n        var data = this.eventData(evt);\n        switch(data.action){\n            case \"vertex-move\":\n                this.dragVertex(evt, x, y);\n                break;\n            case \"label-move\":\n                this.dragLabel(evt, x, y);\n                break;\n            case \"arrowhead-move\":\n                this.dragArrowhead(evt, x, y);\n                break;\n            case \"move\":\n                this.drag(evt, x, y);\n                break;\n        }\n        // Backwards compatibility\n        if (dragData) (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign)(dragData, this.eventData(evt));\n        this.notifyPointermove(evt, x, y);\n    },\n    pointerup: function(evt, x, y) {\n        // Backwards compatibility\n        var dragData = this._dragData;\n        if (dragData) {\n            this.eventData(evt, dragData);\n            this._dragData = null;\n        }\n        var data = this.eventData(evt);\n        switch(data.action){\n            case \"vertex-move\":\n                this.dragVertexEnd(evt, x, y);\n                break;\n            case \"label-move\":\n                this.dragLabelEnd(evt, x, y);\n                break;\n            case \"arrowhead-move\":\n                this.dragArrowheadEnd(evt, x, y);\n                break;\n            case \"move\":\n                this.dragEnd(evt, x, y);\n        }\n        this.notifyPointerup(evt, x, y);\n        this.checkMouseleave(evt);\n    },\n    mouseover: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.mouseover.apply(this, arguments);\n        this.notify(\"link:mouseover\", evt);\n    },\n    mouseout: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.mouseout.apply(this, arguments);\n        this.notify(\"link:mouseout\", evt);\n    },\n    mouseenter: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.mouseenter.apply(this, arguments);\n        this.notify(\"link:mouseenter\", evt);\n    },\n    mouseleave: function(evt) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.mouseleave.apply(this, arguments);\n        this.notify(\"link:mouseleave\", evt);\n    },\n    mousewheel: function(evt, x, y, delta) {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.mousewheel.apply(this, arguments);\n        this.notify(\"link:mousewheel\", evt, x, y, delta);\n    },\n    onevent: function(evt, eventName, x, y) {\n        // Backwards compatibility\n        var linkTool = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(evt.target).findParentByClass(\"link-tool\", this.el);\n        if (linkTool) {\n            // No further action to be executed\n            evt.stopPropagation();\n            // Allow `interactive.useLinkTools=false`\n            if (this.can(\"useLinkTools\")) {\n                if (eventName === \"remove\") {\n                    // Built-in remove event\n                    this.model.remove({\n                        ui: true\n                    });\n                    // Do not trigger link pointerdown\n                    return;\n                } else {\n                    // link:options and other custom events inside the link tools\n                    this.notify(eventName, evt, x, y);\n                }\n            }\n            this.notifyPointerdown(evt, x, y);\n            this.paper.delegateDragEvents(this, evt.data);\n        } else {\n            _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.onevent.apply(this, arguments);\n        }\n    },\n    onlabel: function(evt, x, y) {\n        this.notifyPointerdown(evt, x, y);\n        this.dragLabelStart(evt, x, y);\n        var stopPropagation = this.eventData(evt).stopPropagation;\n        if (stopPropagation) evt.stopPropagation();\n    },\n    // Drag Start Handlers\n    dragConnectionStart: function(evt, x, y) {\n        if (!this.can(\"vertexAdd\")) return;\n        // Store the index at which the new vertex has just been placed.\n        // We'll be update the very same vertex position in `pointermove()`.\n        var vertexIdx = this.addVertex({\n            x: x,\n            y: y\n        }, {\n            ui: true\n        });\n        this.eventData(evt, {\n            action: \"vertex-move\",\n            vertexIdx: vertexIdx\n        });\n    },\n    dragLabelStart: function(evt, x, y) {\n        if (this.can(\"labelMove\")) {\n            if (this.isDefaultInteractionPrevented(evt)) return;\n            var labelNode = evt.currentTarget;\n            var labelIdx = parseInt(labelNode.getAttribute(\"label-idx\"), 10);\n            var defaultLabelPosition = this._getDefaultLabelPositionProperty();\n            var initialLabelPosition = this._normalizeLabelPosition(this._getLabelPositionProperty(labelIdx));\n            var position = this._mergeLabelPositionProperty(initialLabelPosition, defaultLabelPosition);\n            var coords = this.getLabelCoordinates(position);\n            var dx = coords.x - x; // how much needs to be added to cursor x to get to label x\n            var dy = coords.y - y; // how much needs to be added to cursor y to get to label y\n            var positionAngle = this._getLabelPositionAngle(labelIdx);\n            var labelPositionArgs = this._getLabelPositionArgs(labelIdx);\n            var defaultLabelPositionArgs = this._getDefaultLabelPositionArgs();\n            var positionArgs = this._mergeLabelPositionArgs(labelPositionArgs, defaultLabelPositionArgs);\n            this.eventData(evt, {\n                action: \"label-move\",\n                labelIdx: labelIdx,\n                dx: dx,\n                dy: dy,\n                positionAngle: positionAngle,\n                positionArgs: positionArgs,\n                stopPropagation: true\n            });\n        } else {\n            // Backwards compatibility:\n            // If labels can't be dragged no default action is triggered.\n            this.eventData(evt, {\n                stopPropagation: true\n            });\n        }\n        this.paper.delegateDragEvents(this, evt.data);\n    },\n    dragVertexStart: function(evt, x, y) {\n        if (!this.can(\"vertexMove\")) return;\n        var vertexNode = evt.target;\n        var vertexIdx = parseInt(vertexNode.getAttribute(\"idx\"), 10);\n        this.eventData(evt, {\n            action: \"vertex-move\",\n            vertexIdx: vertexIdx\n        });\n    },\n    dragVertexRemoveStart: function(evt, x, y) {\n        if (!this.can(\"vertexRemove\")) return;\n        var removeNode = evt.target;\n        var vertexIdx = parseInt(removeNode.getAttribute(\"idx\"), 10);\n        this.model.removeVertex(vertexIdx);\n    },\n    dragArrowheadStart: function(evt, x, y) {\n        if (!this.can(\"arrowheadMove\")) return;\n        var arrowheadNode = evt.target;\n        var arrowheadType = arrowheadNode.getAttribute(\"end\");\n        var data = this.startArrowheadMove(arrowheadType, {\n            ignoreBackwardsCompatibility: true\n        });\n        this.eventData(evt, data);\n    },\n    dragStart: function(evt, x, y) {\n        if (this.isDefaultInteractionPrevented(evt)) return;\n        if (!this.can(\"linkMove\")) return;\n        this.eventData(evt, {\n            action: \"move\",\n            dx: x,\n            dy: y\n        });\n    },\n    // Drag Handlers\n    dragLabel: function(evt, x, y) {\n        var data = this.eventData(evt);\n        var label = {\n            position: this.getLabelPosition(x + data.dx, y + data.dy, data.positionAngle, data.positionArgs)\n        };\n        if (this.paper.options.snapLabels) delete label.position.offset;\n        // The `touchmove' events are not fired\n        // when the original event target is removed from the DOM.\n        // The labels are currently re-rendered completely when only\n        // the position changes. This is why we need to make sure that\n        // the label is updated synchronously.\n        // TODO: replace `touchmove` with `pointermove` (breaking change).\n        const setOptions = {\n            ui: true\n        };\n        if (this.paper.isAsync() && evt.type === \"touchmove\") {\n            setOptions.async = false;\n        }\n        this.model.label(data.labelIdx, label, setOptions);\n    },\n    dragVertex: function(evt, x, y) {\n        var data = this.eventData(evt);\n        this.model.vertex(data.vertexIdx, {\n            x: x,\n            y: y\n        }, {\n            ui: true\n        });\n    },\n    dragArrowhead: function(evt, x, y) {\n        if (this.paper.options.snapLinks) {\n            const isSnapped = this._snapArrowhead(evt, x, y);\n            if (!isSnapped && this.paper.options.snapLinksSelf) {\n                this._snapArrowheadSelf(evt, x, y);\n            }\n        } else {\n            if (this.paper.options.snapLinksSelf) {\n                this._snapArrowheadSelf(evt, x, y);\n            } else {\n                this._connectArrowhead(this.getEventTarget(evt), x, y, this.eventData(evt));\n            }\n        }\n    },\n    drag: function(evt, x, y) {\n        var data = this.eventData(evt);\n        this.model.translate(x - data.dx, y - data.dy, {\n            ui: true\n        });\n        this.eventData(evt, {\n            dx: x,\n            dy: y\n        });\n    },\n    // Drag End Handlers\n    dragLabelEnd: function() {\n    // noop\n    },\n    dragVertexEnd: function() {\n    // noop\n    },\n    dragArrowheadEnd: function(evt, x, y) {\n        var data = this.eventData(evt);\n        var paper = this.paper;\n        if (paper.options.snapLinks) {\n            this._snapArrowheadEnd(data);\n        } else {\n            this._connectArrowheadEnd(data, x, y);\n        }\n        if (!paper.linkAllowed(this)) {\n            // If the changed link is not allowed, revert to its previous state.\n            this._disallow(data);\n        } else {\n            this._finishEmbedding(data);\n            this._notifyConnectEvent(data, evt);\n        }\n        this._afterArrowheadMove(data);\n    },\n    dragEnd: function() {\n    // noop\n    },\n    _disallow: function(data) {\n        switch(data.whenNotAllowed){\n            case \"remove\":\n                this.model.remove({\n                    ui: true\n                });\n                break;\n            case \"revert\":\n            default:\n                this.model.set(data.arrowhead, data.initialEnd, {\n                    ui: true\n                });\n                break;\n        }\n    },\n    _finishEmbedding: function(data) {\n        // Reparent the link if embedding is enabled\n        if (this.paper.options.embeddingMode && this.model.reparent()) {\n            // Make sure we don't reverse to the original 'z' index (see afterArrowheadMove()).\n            data.z = null;\n        }\n    },\n    _notifyConnectEvent: function(data, evt) {\n        var arrowhead = data.arrowhead;\n        var initialEnd = data.initialEnd;\n        var currentEnd = this.model.prop(arrowhead);\n        var endChanged = currentEnd && !_Link_mjs__WEBPACK_IMPORTED_MODULE_13__.Link.endsEqual(initialEnd, currentEnd);\n        if (endChanged) {\n            var paper = this.paper;\n            if (initialEnd.id) {\n                this.notify(\"link:disconnect\", evt, paper.findViewByModel(initialEnd.id), data.initialMagnet, arrowhead);\n            }\n            if (currentEnd.id) {\n                this.notify(\"link:connect\", evt, paper.findViewByModel(currentEnd.id), data.magnetUnderPointer, arrowhead);\n            }\n        }\n    },\n    _snapToPoints: function(snapPoint, points, radius) {\n        let closestPointX = null;\n        let closestDistanceX = Infinity;\n        let closestPointY = null;\n        let closestDistanceY = Infinity;\n        let x = snapPoint.x;\n        let y = snapPoint.y;\n        for(let i = 0; i < points.length; i++){\n            const distX = Math.abs(points[i].x - snapPoint.x);\n            if (distX < closestDistanceX) {\n                closestDistanceX = distX;\n                closestPointX = points[i];\n            }\n            const distY = Math.abs(points[i].y - snapPoint.y);\n            if (distY < closestDistanceY) {\n                closestDistanceY = distY;\n                closestPointY = points[i];\n            }\n        }\n        if (closestDistanceX < radius) {\n            x = closestPointX.x;\n        }\n        if (closestDistanceY < radius) {\n            y = closestPointY.y;\n        }\n        return {\n            x,\n            y\n        };\n    },\n    _snapArrowheadSelf: function(evt, x, y) {\n        const { paper, model } = this;\n        const { snapLinksSelf } = paper.options;\n        const data = this.eventData(evt);\n        const radius = snapLinksSelf.radius || 20;\n        const anchor = this.getEndAnchor(data.arrowhead === \"source\" ? \"target\" : \"source\");\n        const vertices = model.vertices();\n        const points = [\n            anchor,\n            ...vertices\n        ];\n        const snapPoint = this._snapToPoints({\n            x: x,\n            y: y\n        }, points, radius);\n        const point = paper.localToClientPoint(snapPoint);\n        this._connectArrowhead(document.elementFromPoint(point.x, point.y), snapPoint.x, snapPoint.y, this.eventData(evt));\n    },\n    _snapArrowhead: function(evt, x, y) {\n        const { paper } = this;\n        const { snapLinks, connectionStrategy } = paper.options;\n        const data = this.eventData(evt);\n        let isSnapped = false;\n        // checking view in close area of the pointer\n        var r = snapLinks.radius || 50;\n        var viewsInArea = paper.findViewsInArea({\n            x: x - r,\n            y: y - r,\n            width: 2 * r,\n            height: 2 * r\n        });\n        var prevClosestView = data.closestView || null;\n        var prevClosestMagnet = data.closestMagnet || null;\n        var prevMagnetProxy = data.magnetProxy || null;\n        data.closestView = data.closestMagnet = data.magnetProxy = null;\n        var minDistance = Number.MAX_VALUE;\n        var pointer = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Point(x, y);\n        viewsInArea.forEach(function(view) {\n            const candidates = [];\n            // skip connecting to the element in case '.': { magnet: false } attribute present\n            if (view.el.getAttribute(\"magnet\") !== \"false\") {\n                candidates.push({\n                    bbox: view.model.getBBox(),\n                    magnet: view.el\n                });\n            }\n            view.$(\"[magnet]\").toArray().forEach((magnet)=>{\n                candidates.push({\n                    bbox: view.getNodeBBox(magnet),\n                    magnet\n                });\n            });\n            candidates.forEach((candidate)=>{\n                const { magnet, bbox } = candidate;\n                // find distance from the center of the model to pointer coordinates\n                const distance = bbox.center().squaredDistance(pointer);\n                // the connection is looked up in a circle area by `distance < r`\n                if (distance < minDistance) {\n                    const isAlreadyValidated = prevClosestMagnet === magnet;\n                    if (isAlreadyValidated || paper.options.validateConnection.apply(paper, data.validateConnectionArgs(view, view.el === magnet ? null : magnet))) {\n                        minDistance = distance;\n                        data.closestView = view;\n                        data.closestMagnet = magnet;\n                    }\n                }\n            });\n        }, this);\n        var end;\n        var magnetProxy = null;\n        var closestView = data.closestView;\n        var closestMagnet = data.closestMagnet;\n        if (closestMagnet) {\n            magnetProxy = data.magnetProxy = closestView.findProxyNode(closestMagnet, \"highlighter\");\n        }\n        var endType = data.arrowhead;\n        var newClosestMagnet = prevClosestMagnet !== closestMagnet;\n        if (prevClosestView && newClosestMagnet) {\n            prevClosestView.unhighlight(prevMagnetProxy, {\n                connecting: true,\n                snapping: true\n            });\n        }\n        if (closestView) {\n            const { prevEnd, prevX, prevY } = data;\n            data.prevX = x;\n            data.prevY = y;\n            isSnapped = true;\n            if (!newClosestMagnet) {\n                if (typeof connectionStrategy !== \"function\" || prevX === x && prevY === y) {\n                    // the magnet has not changed and the link's end does not depend on the x and y\n                    return isSnapped;\n                }\n            }\n            end = closestView.getLinkEnd(closestMagnet, x, y, this.model, endType);\n            if (!newClosestMagnet && (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.isEqual)(prevEnd, end)) {\n                // the source/target json has not changed\n                return isSnapped;\n            }\n            data.prevEnd = end;\n            if (newClosestMagnet) {\n                closestView.highlight(magnetProxy, {\n                    connecting: true,\n                    snapping: true\n                });\n            }\n        } else {\n            end = {\n                x: x,\n                y: y\n            };\n        }\n        this.model.set(endType, end || {\n            x: x,\n            y: y\n        }, {\n            ui: true\n        });\n        if (prevClosestView) {\n            this.notify(\"link:snap:disconnect\", evt, prevClosestView, prevClosestMagnet, endType);\n        }\n        if (closestView) {\n            this.notify(\"link:snap:connect\", evt, closestView, closestMagnet, endType);\n        }\n        return isSnapped;\n    },\n    _snapArrowheadEnd: function(data) {\n        // Finish off link snapping.\n        // Everything except view unhighlighting was already done on pointermove.\n        var closestView = data.closestView;\n        var closestMagnet = data.closestMagnet;\n        if (closestView && closestMagnet) {\n            closestView.unhighlight(data.magnetProxy, {\n                connecting: true,\n                snapping: true\n            });\n            data.magnetUnderPointer = closestView.findMagnet(closestMagnet);\n        }\n        data.closestView = data.closestMagnet = null;\n    },\n    _connectArrowhead: function(target, x, y, data) {\n        // checking views right under the pointer\n        const { paper, model } = this;\n        if (data.eventTarget !== target) {\n            // Unhighlight the previous view under pointer if there was one.\n            if (data.magnetProxy) {\n                data.viewUnderPointer.unhighlight(data.magnetProxy, {\n                    connecting: true\n                });\n            }\n            const viewUnderPointer = data.viewUnderPointer = paper.findView(target);\n            if (viewUnderPointer) {\n                // If we found a view that is under the pointer, we need to find the closest\n                // magnet based on the real target element of the event.\n                const magnetUnderPointer = data.magnetUnderPointer = viewUnderPointer.findMagnet(target);\n                const magnetProxy = data.magnetProxy = viewUnderPointer.findProxyNode(magnetUnderPointer, \"highlighter\");\n                if (magnetUnderPointer && this.paper.options.validateConnection.apply(paper, data.validateConnectionArgs(viewUnderPointer, magnetUnderPointer))) {\n                    // If there was no magnet found, do not highlight anything and assume there\n                    // is no view under pointer we're interested in reconnecting to.\n                    // This can only happen if the overall element has the attribute `'.': { magnet: false }`.\n                    if (magnetProxy) {\n                        viewUnderPointer.highlight(magnetProxy, {\n                            connecting: true\n                        });\n                    }\n                } else {\n                    // This type of connection is not valid. Disregard this magnet.\n                    data.magnetUnderPointer = null;\n                    data.magnetProxy = null;\n                }\n            } else {\n                // Make sure we'll unset previous magnet.\n                data.magnetUnderPointer = null;\n                data.magnetProxy = null;\n            }\n        }\n        data.eventTarget = target;\n        model.set(data.arrowhead, {\n            x: x,\n            y: y\n        }, {\n            ui: true\n        });\n    },\n    _connectArrowheadEnd: function(data = {}, x, y) {\n        const { model } = this;\n        const { viewUnderPointer, magnetUnderPointer, magnetProxy, arrowhead } = data;\n        if (!magnetUnderPointer || !magnetProxy || !viewUnderPointer) return;\n        viewUnderPointer.unhighlight(magnetProxy, {\n            connecting: true\n        });\n        // The link end is taken from the magnet under the pointer, not the proxy.\n        const end = viewUnderPointer.getLinkEnd(magnetUnderPointer, x, y, model, arrowhead);\n        model.set(arrowhead, end, {\n            ui: true\n        });\n    },\n    _beforeArrowheadMove: function(data) {\n        data.z = this.model.get(\"z\");\n        this.model.toFront();\n        // Let the pointer propagate through the link view elements so that\n        // the `evt.target` is another element under the pointer, not the link itself.\n        var style = this.el.style;\n        data.pointerEvents = style.pointerEvents;\n        style.pointerEvents = \"none\";\n        if (this.paper.options.markAvailable) {\n            this._markAvailableMagnets(data);\n        }\n    },\n    _afterArrowheadMove: function(data) {\n        if (data.z !== null) {\n            this.model.set(\"z\", data.z, {\n                ui: true\n            });\n            data.z = null;\n        }\n        // Put `pointer-events` back to its original value. See `_beforeArrowheadMove()` for explanation.\n        this.el.style.pointerEvents = data.pointerEvents;\n        if (this.paper.options.markAvailable) {\n            this._unmarkAvailableMagnets(data);\n        }\n    },\n    _createValidateConnectionArgs: function(arrowhead) {\n        // It makes sure the arguments for validateConnection have the following form:\n        // (source view, source magnet, target view, target magnet and link view)\n        var args = [];\n        args[4] = arrowhead;\n        args[5] = this;\n        var oppositeArrowhead;\n        var i = 0;\n        var j = 0;\n        if (arrowhead === \"source\") {\n            i = 2;\n            oppositeArrowhead = \"target\";\n        } else {\n            j = 2;\n            oppositeArrowhead = \"source\";\n        }\n        var end = this.model.get(oppositeArrowhead);\n        if (end.id) {\n            var view = args[i] = this.paper.findViewByModel(end.id);\n            var magnet = view.getMagnetFromLinkEnd(end);\n            if (magnet === view.el) magnet = undefined;\n            args[i + 1] = magnet;\n        }\n        function validateConnectionArgs(cellView, magnet) {\n            args[j] = cellView;\n            args[j + 1] = cellView.el === magnet ? undefined : magnet;\n            return args;\n        }\n        return validateConnectionArgs;\n    },\n    _markAvailableMagnets: function(data) {\n        function isMagnetAvailable(view, magnet) {\n            var paper = view.paper;\n            var validate = paper.options.validateConnection;\n            return validate.apply(paper, this.validateConnectionArgs(view, magnet));\n        }\n        var paper = this.paper;\n        var elements = paper.model.getCells();\n        data.marked = {};\n        for(var i = 0, n = elements.length; i < n; i++){\n            var view = elements[i].findView(paper);\n            if (!view) {\n                continue;\n            }\n            var magnets = Array.prototype.slice.call(view.el.querySelectorAll(\"[magnet]\"));\n            if (view.el.getAttribute(\"magnet\") !== \"false\") {\n                // Element wrapping group is also a magnet\n                magnets.push(view.el);\n            }\n            var availableMagnets = magnets.filter(isMagnetAvailable.bind(data, view));\n            if (availableMagnets.length > 0) {\n                // highlight all available magnets\n                for(var j = 0, m = availableMagnets.length; j < m; j++){\n                    view.highlight(availableMagnets[j], {\n                        magnetAvailability: true\n                    });\n                }\n                // highlight the entire view\n                view.highlight(null, {\n                    elementAvailability: true\n                });\n                data.marked[view.model.id] = availableMagnets;\n            }\n        }\n    },\n    _unmarkAvailableMagnets: function(data) {\n        var markedKeys = Object.keys(data.marked);\n        var id;\n        var markedMagnets;\n        for(var i = 0, n = markedKeys.length; i < n; i++){\n            id = markedKeys[i];\n            markedMagnets = data.marked[id];\n            var view = this.paper.findViewByModel(id);\n            if (view) {\n                for(var j = 0, m = markedMagnets.length; j < m; j++){\n                    view.unhighlight(markedMagnets[j], {\n                        magnetAvailability: true\n                    });\n                }\n                view.unhighlight(null, {\n                    elementAvailability: true\n                });\n            }\n        }\n        data.marked = null;\n    },\n    startArrowheadMove: function(end, opt) {\n        opt || (opt = {});\n        // Allow to delegate events from an another view to this linkView in order to trigger arrowhead\n        // move without need to click on the actual arrowhead dom element.\n        var data = {\n            action: \"arrowhead-move\",\n            arrowhead: end,\n            whenNotAllowed: opt.whenNotAllowed || \"revert\",\n            initialMagnet: this[end + \"Magnet\"] || (this[end + \"View\"] ? this[end + \"View\"].el : null),\n            initialEnd: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.clone)(this.model.get(end)),\n            validateConnectionArgs: this._createValidateConnectionArgs(end)\n        };\n        this._beforeArrowheadMove(data);\n        if (opt.ignoreBackwardsCompatibility !== true) {\n            this._dragData = data;\n        }\n        return data;\n    },\n    // Lifecycle methods\n    onMount: function() {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.onMount.apply(this, arguments);\n        this.mountLabels();\n    },\n    onDetach: function() {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.onDetach.apply(this, arguments);\n        this.unmountLabels();\n    },\n    onRemove: function() {\n        _CellView_mjs__WEBPACK_IMPORTED_MODULE_1__.CellView.prototype.onRemove.apply(this, arguments);\n        this.unmountLabels();\n    }\n}, {\n    Flags: Flags\n});\nObject.defineProperty(LinkView.prototype, \"sourceBBox\", {\n    enumerable: true,\n    get: function() {\n        var sourceView = this.sourceView;\n        if (!sourceView) {\n            var sourceDef = this.model.source();\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(sourceDef.x, sourceDef.y);\n        }\n        var sourceMagnet = this.sourceMagnet;\n        if (sourceView.isNodeConnection(sourceMagnet)) {\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(this.sourceAnchor);\n        }\n        return sourceView.getNodeBBox(sourceMagnet || sourceView.el);\n    }\n});\nObject.defineProperty(LinkView.prototype, \"targetBBox\", {\n    enumerable: true,\n    get: function() {\n        var targetView = this.targetView;\n        if (!targetView) {\n            var targetDef = this.model.target();\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(targetDef.x, targetDef.y);\n        }\n        var targetMagnet = this.targetMagnet;\n        if (targetView.isNodeConnection(targetMagnet)) {\n            return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect(this.targetAnchor);\n        }\n        return targetView.getNodeBBox(targetMagnet || targetView.el);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZGlhL0xpbmtWaWV3Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEM7QUFDUjtBQUNIO0FBQzZJO0FBQ3pGO0FBQ25DO0FBQ007QUFDL0I7QUFFdkIsTUFBTXdCLFFBQVE7SUFDVkMsT0FBT3pCLG1EQUFRQSxDQUFDd0IsS0FBSyxDQUFDQyxLQUFLO0lBQzNCQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsY0FBYztJQUNkQyxRQUFRO0lBQ1JDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLFdBQVc7QUFDZjtBQUVBLGlDQUFpQztBQUNqQywyQ0FBMkM7QUFFcEMsTUFBTUMsV0FBV2xDLG1EQUFRQSxDQUFDbUMsTUFBTSxDQUFDO0lBRXBDQyxXQUFXO1FBRVAsSUFBSUMsYUFBYXJDLG1EQUFRQSxDQUFDc0MsU0FBUyxDQUFDRixTQUFTLENBQUNHLEtBQUssQ0FBQyxJQUFJLEVBQUVDLEtBQUssQ0FBQztRQUVoRUgsV0FBV0ksSUFBSSxDQUFDO1FBRWhCLE9BQU9KLFdBQVdLLElBQUksQ0FBQztJQUMzQjtJQUVBQyxTQUFTO1FBRUxDLGlCQUFpQjtRQUNqQkMsaUJBQWlCO1FBQ2pCQyxnQkFBZ0I7UUFDaEJDLGlCQUFpQjtRQUNqQkMsdUJBQXVCO1FBQ3ZCQyxnQkFBZ0I7SUFDcEI7SUFFQUMsYUFBYTtJQUNiQyxpQkFBaUI7SUFDakJDLGNBQWM7SUFDZEMsSUFBSTtJQUNKQyxXQUFXO0lBRVhDLFNBQVM7SUFDVEMsa0JBQWtCO0lBRWxCQyxZQUFZO1FBRVJ6RCxtREFBUUEsQ0FBQ3NDLFNBQVMsQ0FBQ21CLFVBQVUsQ0FBQ2xCLEtBQUssQ0FBQyxJQUFJLEVBQUVtQjtRQUUxQyx3RkFBd0Y7UUFDeEYsdUZBQXVGO1FBQ3ZGLDJFQUEyRTtRQUMzRSxJQUFJLENBQUNSLFdBQVcsR0FBRyxDQUFDO1FBRXBCLDZCQUE2QjtRQUM3QixJQUFJLENBQUNDLGVBQWUsR0FBRyxDQUFD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SSxDQUFDek4sS0FBSyxDQUFDakIsTUFBTTtZQUNqQyxPQUFPLElBQUl0RCw4Q0FBSUEsQ0FBQ2dTLFVBQVU0RCxDQUFDLEVBQUU1RCxVQUFVNkQsQ0FBQztRQUM1QztRQUNBLElBQUk5RyxlQUFlLElBQUksQ0FBQ0EsWUFBWTtRQUNwQyxJQUFJOUssV0FBV2lPLGdCQUFnQixDQUFDbkQsZUFBZTtZQUMzQyxPQUFPLElBQUkvTyw4Q0FBSUEsQ0FBQyxJQUFJLENBQUNvTixZQUFZO1FBQ3JDO1FBQ0EsT0FBT25KLFdBQVd3aEIsV0FBVyxDQUFDMVcsZ0JBQWdCOUssV0FBV3FELEVBQUU7SUFDL0Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL2RpYS9MaW5rVmlldy5tanM/NTA0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZWxsVmlldyB9IGZyb20gJy4vQ2VsbFZpZXcubWpzJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICcuL0xpbmsubWpzJztcbmltcG9ydCBWIGZyb20gJy4uL1YvaW5kZXgubWpzJztcbmltcG9ydCB7IGFkZENsYXNzTmFtZVByZWZpeCwgcmVtb3ZlQ2xhc3NOYW1lUHJlZml4LCBtZXJnZSwgdGVtcGxhdGUsIGFzc2lnbiwgdG9BcnJheSwgaXNPYmplY3QsIGlzRnVuY3Rpb24sIGNsb25lLCBpc1BlcmNlbnRhZ2UsIHJlc3VsdCwgaXNFcXVhbCB9IGZyb20gJy4uL3V0aWwvaW5kZXgubWpzJztcbmltcG9ydCB7IFBvaW50LCBMaW5lLCBQYXRoLCBub3JtYWxpemVBbmdsZSwgUmVjdCwgUG9seWxpbmUgfSBmcm9tICcuLi9nL2luZGV4Lm1qcyc7XG5pbXBvcnQgKiBhcyByb3V0ZXJzIGZyb20gJy4uL3JvdXRlcnMvaW5kZXgubWpzJztcbmltcG9ydCAqIGFzIGNvbm5lY3RvcnMgZnJvbSAnLi4vY29ubmVjdG9ycy9pbmRleC5tanMnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuY29uc3QgRmxhZ3MgPSB7XG4gICAgVE9PTFM6IENlbGxWaWV3LkZsYWdzLlRPT0xTLFxuICAgIFJFTkRFUjogJ1JFTkRFUicsXG4gICAgVVBEQVRFOiAnVVBEQVRFJyxcbiAgICBMRUdBQ1lfVE9PTFM6ICdMRUdBQ1lfVE9PTFMnLFxuICAgIExBQkVMUzogJ0xBQkVMUycsXG4gICAgVkVSVElDRVM6ICdWRVJUSUNFUycsXG4gICAgU09VUkNFOiAnU09VUkNFJyxcbiAgICBUQVJHRVQ6ICdUQVJHRVQnLFxuICAgIENPTk5FQ1RPUjogJ0NPTk5FQ1RPUidcbn07XG5cbi8vIExpbmsgYmFzZSB2aWV3IGFuZCBjb250cm9sbGVyLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY29uc3QgTGlua1ZpZXcgPSBDZWxsVmlldy5leHRlbmQoe1xuXG4gICAgY2xhc3NOYW1lOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IENlbGxWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUuYXBwbHkodGhpcykuc3BsaXQoJyAnKTtcblxuICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2xpbmsnKTtcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lcy5qb2luKCcgJyk7XG4gICAgfSxcblxuICAgIG9wdGlvbnM6IHtcblxuICAgICAgICBzaG9ydExpbmtMZW5ndGg6IDEwNSxcbiAgICAgICAgZG91YmxlTGlua1Rvb2xzOiBmYWxzZSxcbiAgICAgICAgbG9uZ0xpbmtMZW5ndGg6IDE1NSxcbiAgICAgICAgbGlua1Rvb2xzT2Zmc2V0OiA0MCxcbiAgICAgICAgZG91YmxlTGlua1Rvb2xzT2Zmc2V0OiA2NSxcbiAgICAgICAgc2FtcGxlSW50ZXJ2YWw6IDUwXG4gICAgfSxcblxuICAgIF9sYWJlbENhY2hlOiBudWxsLFxuICAgIF9sYWJlbFNlbGVjdG9yczogbnVsbCxcbiAgICBfbWFya2VyQ2FjaGU6IG51bGwsXG4gICAgX1Y6IG51bGwsXG4gICAgX2RyYWdEYXRhOiBudWxsLCAvLyBkZXByZWNhdGVkXG5cbiAgICBtZXRyaWNzOiBudWxsLFxuICAgIGRlY2ltYWxzUm91bmRpbmc6IDIsXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgICAgIC8vIGBfLmxhYmVsQ2FjaGVgIGlzIGEgbWFwcGluZyBvZiBpbmRleGVzIG9mIGxhYmVscyBpbiB0aGUgYHRoaXMuZ2V0KCdsYWJlbHMnKWAgYXJyYXkgdG9cbiAgICAgICAgLy8gYDxnIGNsYXNzPVwibGFiZWxcIj5gIG5vZGVzIHdyYXBwZWQgYnkgVmVjdG9yaXplci4gVGhpcyBhbGxvd3MgZm9yIHF1aWNrIGFjY2VzcyB0byB0aGVcbiAgICAgICAgLy8gbm9kZXMgaW4gYHVwZGF0ZUxhYmVsUG9zaXRpb24oKWAgaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSBsYWJlbCBwb3NpdGlvbnMuXG4gICAgICAgIHRoaXMuX2xhYmVsQ2FjaGUgPSB7fTtcblxuICAgICAgICAvLyBhIGNhY2hlIG9mIGxhYmVsIHNlbGVjdG9yc1xuICAgICAgICB0aGlzLl9sYWJlbFNlbGVjdG9ycyA9IHt9O1xuXG4gICAgICAgIC8vIGtlZXBzIG1hcmtlcnMgYmJveGVzIGFuZCBwb3NpdGlvbnMgYWdhaW4gZm9yIHF1aWNrZXIgYWNjZXNzXG4gICAgICAgIHRoaXMuX21hcmtlckNhY2hlID0ge307XG5cbiAgICAgICAgLy8gY2FjaGUgb2YgZGVmYXVsdCBtYXJrdXAgbm9kZXNcbiAgICAgICAgdGhpcy5fViA9IHt9O1xuXG4gICAgICAgIC8vIGNvbm5lY3Rpb24gcGF0aCBtZXRyaWNzXG4gICAgICAgIHRoaXMuY2xlYW5Ob2Rlc0NhY2hlKCk7XG4gICAgfSxcblxuICAgIHByZXNlbnRhdGlvbkF0dHJpYnV0ZXM6IHtcbiAgICAgICAgbWFya3VwOiBbRmxhZ3MuUkVOREVSXSxcbiAgICAgICAgYXR0cnM6IFtGbGFncy5VUERBVEVdLFxuICAgICAgICByb3V0ZXI6IFtGbGFncy5VUERBVEVdLFxuICAgICAgICBjb25uZWN0b3I6IFtGbGFncy5DT05ORUNUT1JdLFxuICAgICAgICBzbW9vdGg6IFtGbGFncy5VUERBVEVdLFxuICAgICAgICBtYW5oYXR0YW46IFtGbGFncy5VUERBVEVdLFxuICAgICAgICB0b29sTWFya3VwOiBbRmxhZ3MuTEVHQUNZX1RPT0xTXSxcbiAgICAgICAgbGFiZWxzOiBbRmxhZ3MuTEFCRUxTXSxcbiAgICAgICAgbGFiZWxNYXJrdXA6IFtGbGFncy5MQUJFTFNdLFxuICAgICAgICB2ZXJ0aWNlczogW0ZsYWdzLlZFUlRJQ0VTLCBGbGFncy5VUERBVEVdLFxuICAgICAgICB2ZXJ0ZXhNYXJrdXA6IFtGbGFncy5WRVJUSUNFU10sXG4gICAgICAgIHNvdXJjZTogW0ZsYWdzLlNPVVJDRSwgRmxhZ3MuVVBEQVRFXSxcbiAgICAgICAgdGFyZ2V0OiBbRmxhZ3MuVEFSR0VULCBGbGFncy5VUERBVEVdXG4gICAgfSxcblxuICAgIGluaXRGbGFnOiBbRmxhZ3MuUkVOREVSLCBGbGFncy5TT1VSQ0UsIEZsYWdzLlRBUkdFVCwgRmxhZ3MuVE9PTFNdLFxuXG4gICAgVVBEQVRFX1BSSU9SSVRZOiAxLFxuXG4gICAgY29uZmlybVVwZGF0ZTogZnVuY3Rpb24oZmxhZ3MsIG9wdCkge1xuXG4gICAgICAgIG9wdCB8fCAob3B0ID0ge30pO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0ZsYWcoZmxhZ3MsIEZsYWdzLlNPVVJDRSkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy51cGRhdGVFbmRQcm9wZXJ0aWVzKCdzb3VyY2UnKSkgcmV0dXJuIGZsYWdzO1xuICAgICAgICAgICAgZmxhZ3MgPSB0aGlzLnJlbW92ZUZsYWcoZmxhZ3MsIEZsYWdzLlNPVVJDRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oYXNGbGFnKGZsYWdzLCBGbGFncy5UQVJHRVQpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudXBkYXRlRW5kUHJvcGVydGllcygndGFyZ2V0JykpIHJldHVybiBmbGFncztcbiAgICAgICAgICAgIGZsYWdzID0gdGhpcy5yZW1vdmVGbGFnKGZsYWdzLCBGbGFncy5UQVJHRVQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBwYXBlciwgc291cmNlVmlldywgdGFyZ2V0VmlldyB9ID0gdGhpcztcbiAgICAgICAgaWYgKHBhcGVyICYmICgoc291cmNlVmlldyAmJiAhcGFwZXIuaXNWaWV3TW91bnRlZChzb3VyY2VWaWV3KSkgfHwgKHRhcmdldFZpZXcgJiYgIXBhcGVyLmlzVmlld01vdW50ZWQodGFyZ2V0VmlldykpKSkge1xuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHNvdXJjZVZpZXcgYW5kIHRhcmdldFZpZXcgdG8gYmUgcmVuZGVyZWRcbiAgICAgICAgICAgIHJldHVybiBmbGFncztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc0ZsYWcoZmxhZ3MsIEZsYWdzLlJFTkRFUikpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhpZ2hsaWdodGVycyh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG9vbHMob3B0KTtcbiAgICAgICAgICAgIGZsYWdzID0gdGhpcy5yZW1vdmVGbGFnKGZsYWdzLCBbRmxhZ3MuUkVOREVSLCBGbGFncy5VUERBVEUsIEZsYWdzLlZFUlRJQ0VTLCBGbGFncy5MQUJFTFMsIEZsYWdzLlRPT0xTLCBGbGFncy5MRUdBQ1lfVE9PTFMsIEZsYWdzLkNPTk5FQ1RPUl0pO1xuICAgICAgICAgICAgcmV0dXJuIGZsYWdzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHVwZGF0ZUhpZ2hsaWdodGVycyA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0ZsYWcoZmxhZ3MsIEZsYWdzLlZFUlRJQ0VTKSkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJWZXJ0ZXhNYXJrZXJzKCk7XG4gICAgICAgICAgICBmbGFncyA9IHRoaXMucmVtb3ZlRmxhZyhmbGFncywgRmxhZ3MuVkVSVElDRVMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBtb2RlbCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGVzIH0gPSBtb2RlbDtcbiAgICAgICAgbGV0IHVwZGF0ZUxhYmVscyA9IHRoaXMuaGFzRmxhZyhmbGFncywgRmxhZ3MuTEFCRUxTKTtcbiAgICAgICAgbGV0IHVwZGF0ZUxlZ2FjeVRvb2xzID0gdGhpcy5oYXNGbGFnKGZsYWdzLCBGbGFncy5MRUdBQ1lfVE9PTFMpO1xuXG4gICAgICAgIGlmICh1cGRhdGVMYWJlbHMpIHtcbiAgICAgICAgICAgIHRoaXMub25MYWJlbHNDaGFuZ2UobW9kZWwsIGF0dHJpYnV0ZXMubGFiZWxzLCBvcHQpO1xuICAgICAgICAgICAgZmxhZ3MgPSB0aGlzLnJlbW92ZUZsYWcoZmxhZ3MsIEZsYWdzLkxBQkVMUyk7XG4gICAgICAgICAgICB1cGRhdGVIaWdobGlnaHRlcnMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZUxlZ2FjeVRvb2xzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRvb2xzKCk7XG4gICAgICAgICAgICBmbGFncyA9IHRoaXMucmVtb3ZlRmxhZyhmbGFncywgRmxhZ3MuTEVHQUNZX1RPT0xTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUFsbCA9IHRoaXMuaGFzRmxhZyhmbGFncywgRmxhZ3MuVVBEQVRFKTtcbiAgICAgICAgY29uc3QgdXBkYXRlQ29ubmVjdG9yID0gdGhpcy5oYXNGbGFnKGZsYWdzLCBGbGFncy5DT05ORUNUT1IpO1xuICAgICAgICBpZiAodXBkYXRlQWxsIHx8IHVwZGF0ZUNvbm5lY3Rvcikge1xuICAgICAgICAgICAgaWYgKCF1cGRhdGVBbGwpIHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IHJvdXRlIGFuZCB1cGRhdGUgdGhlIGdlb21ldHJ5XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQYXRoKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVET00oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0LnRyYW5zbGF0ZUJ5ICYmIG1vZGVsLmlzUmVsYXRpb25zaGlwRW1iZWRkZWRJbihvcHQudHJhbnNsYXRlQnkpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGxpbmsgaXMgYmVpbmcgdHJhbnNsYXRlZCBieSBhbiBhbmNlc3RvciB0aGF0IHdpbGxcbiAgICAgICAgICAgICAgICAvLyBzaGlmdCBzb3VyY2UgcG9pbnQsIHRhcmdldCBwb2ludCBhbmQgYWxsIHZlcnRpY2VzXG4gICAgICAgICAgICAgICAgLy8gYnkgYW4gZXF1YWwgZGlzdGFuY2UuXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUob3B0LnR4LCBvcHQudHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVUb29scyhvcHQpO1xuICAgICAgICAgICAgZmxhZ3MgPSB0aGlzLnJlbW92ZUZsYWcoZmxhZ3MsIFtGbGFncy5VUERBVEUsIEZsYWdzLlRPT0xTLCBGbGFncy5DT05ORUNUT1JdKTtcbiAgICAgICAgICAgIHVwZGF0ZUxhYmVscyA9IGZhbHNlO1xuICAgICAgICAgICAgdXBkYXRlTGVnYWN5VG9vbHMgPSBmYWxzZTtcbiAgICAgICAgICAgIHVwZGF0ZUhpZ2hsaWdodGVycyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXBkYXRlTGFiZWxzKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxhYmVsUG9zaXRpb25zKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXBkYXRlTGVnYWN5VG9vbHMpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG9vbHNQb3NpdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZUhpZ2hsaWdodGVycykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIaWdobGlnaHRlcnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc0ZsYWcoZmxhZ3MsIEZsYWdzLlRPT0xTKSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVUb29scyhvcHQpO1xuICAgICAgICAgICAgZmxhZ3MgPSB0aGlzLnJlbW92ZUZsYWcoZmxhZ3MsIEZsYWdzLlRPT0xTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbGFncztcbiAgICB9LFxuXG4gICAgcmVxdWVzdENvbm5lY3Rpb25VcGRhdGU6IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUodGhpcy5nZXRGbGFnKEZsYWdzLlVQREFURSksIG9wdCk7XG4gICAgfSxcblxuICAgIGlzTGFiZWxzUmVuZGVyUmVxdWlyZWQ6IGZ1bmN0aW9uKG9wdCA9IHt9KSB7XG5cbiAgICAgICAgY29uc3QgcHJldmlvdXNMYWJlbHMgPSB0aGlzLm1vZGVsLnByZXZpb3VzKCdsYWJlbHMnKTtcbiAgICAgICAgaWYgKCFwcmV2aW91c0xhYmVscykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgLy8gSGVyZSBpcyBhbiBvcHRpbWl6YXRpb24gZm9yIGNhc2VzIHdoZW4gd2Uga25vdywgdGhhdCBjaGFuZ2UgZG9lc1xuICAgICAgICAvLyBub3QgcmVxdWlyZSByZS1yZW5kZXJpbmcgb2YgYWxsIGxhYmVscy5cbiAgICAgICAgaWYgKCgncHJvcGVydHlQYXRoQXJyYXknIGluIG9wdCkgJiYgKCdwcm9wZXJ0eVZhbHVlJyBpbiBvcHQpKSB7XG4gICAgICAgICAgICAvLyBUaGUgbGFiZWwgaXMgc2V0dGluZyBieSBgcHJvcCgpYCBtZXRob2RcbiAgICAgICAgICAgIHZhciBwYXRoQXJyYXkgPSBvcHQucHJvcGVydHlQYXRoQXJyYXkgfHwgW107XG4gICAgICAgICAgICB2YXIgcGF0aExlbmd0aCA9IHBhdGhBcnJheS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAocGF0aExlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgY2hhbmdpbmcgYSBzaW5nbGUgbGFiZWwgaGVyZSBlLmcuICdsYWJlbHMvMC9wb3NpdGlvbidcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWxFeGlzdHMgPSAhIXByZXZpb3VzTGFiZWxzW3BhdGhBcnJheVsxXV07XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoTGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBhcmUgY2hhbmdpbmcgdGhlIGVudGlyZSBsYWJlbC4gTmVlZCB0byBjaGVjayBpZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hcmt1cCBpcyBhbHNvIGJlaW5nIGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCdtYXJrdXAnIGluIE9iamVjdChvcHQucHJvcGVydHlWYWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhdGhBcnJheVsyXSAhPT0gJ21hcmt1cCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBjaGFuZ2luZyBhIGxhYmVsIHByb3BlcnR5IGJ1dCBub3QgdGhlIG1hcmt1cFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIG9uTGFiZWxzQ2hhbmdlOiBmdW5jdGlvbihfbGluaywgX2xhYmVscywgb3B0KSB7XG5cbiAgICAgICAgLy8gTm90ZTogdGhpcyBvcHRpbWl6YXRpb24gd29ya3MgaW4gYXN5bmM9ZmFsc2UgbW9kZSBvbmx5XG4gICAgICAgIGlmICh0aGlzLmlzTGFiZWxzUmVuZGVyUmVxdWlyZWQob3B0KSkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMYWJlbHMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFiZWxzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUmVuZGVyaW5nLlxuICAgIC8vIC0tLS0tLS0tLS1cblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdGhpcy52ZWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy51bm1vdW50TGFiZWxzKCk7XG4gICAgICAgIHRoaXMuX1YgPSB7fTtcbiAgICAgICAgdGhpcy5yZW5kZXJNYXJrdXAoKTtcbiAgICAgICAgLy8gcmVuZGVyaW5nIGxhYmVscyBoYXMgdG8gYmUgcnVuIGFmdGVyIHRoZSBsaW5rIGlzIGFwcGVuZGVkIHRvIERPTSB0cmVlLiAob3RoZXJ3aXNlIDxUZXh0PiBiYm94XG4gICAgICAgIC8vIHJldHVybnMgemVybyB2YWx1ZXMpXG4gICAgICAgIHRoaXMucmVuZGVyTGFiZWxzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHJlbmRlck1hcmt1cDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGxpbmsgPSB0aGlzLm1vZGVsO1xuICAgICAgICB2YXIgbWFya3VwID0gbGluay5nZXQoJ21hcmt1cCcpIHx8IGxpbmsubWFya3VwO1xuICAgICAgICBpZiAoIW1hcmt1cCkgdGhyb3cgbmV3IEVycm9yKCdkaWEuTGlua1ZpZXc6IG1hcmt1cCByZXF1aXJlZCcpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXJrdXApKSByZXR1cm4gdGhpcy5yZW5kZXJKU09OTWFya3VwKG1hcmt1cCk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykgcmV0dXJuIHRoaXMucmVuZGVyU3RyaW5nTWFya3VwKG1hcmt1cCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhLkxpbmtWaWV3OiBpbnZhbGlkIG1hcmt1cCcpO1xuICAgIH0sXG5cbiAgICByZW5kZXJKU09OTWFya3VwOiBmdW5jdGlvbihtYXJrdXApIHtcblxuICAgICAgICB2YXIgZG9jID0gdGhpcy5wYXJzZURPTUpTT04obWFya3VwLCB0aGlzLmVsKTtcbiAgICAgICAgLy8gU2VsZWN0b3JzXG4gICAgICAgIHRoaXMuc2VsZWN0b3JzID0gZG9jLnNlbGVjdG9ycztcbiAgICAgICAgLy8gRnJhZ21lbnRcbiAgICAgICAgdGhpcy52ZWwuYXBwZW5kKGRvYy5mcmFnbWVudCk7XG4gICAgfSxcblxuICAgIHJlbmRlclN0cmluZ01hcmt1cDogZnVuY3Rpb24obWFya3VwKSB7XG5cbiAgICAgICAgLy8gQSBzcGVjaWFsIG1hcmt1cCBjYW4gYmUgZ2l2ZW4gaW4gdGhlIGBwcm9wZXJ0aWVzLm1hcmt1cGAgcHJvcGVydHkuIFRoaXMgbWlnaHQgYmUgaGFuZHlcbiAgICAgICAgLy8gaWYgZS5nLiBhcnJvd2hlYWQgbWFya2VycyBzaG91bGQgYmUgYDxpbWFnZT5gIGVsZW1lbnRzIG9yIGFueSBvdGhlciBlbGVtZW50IHRoYW4gYDxwYXRoPmBzLlxuICAgICAgICAvLyBgLmNvbm5lY3Rpb25gLCBgLmNvbm5lY3Rpb24td3JhcGAsIGAubWFya2VyLXNvdXJjZWAgYW5kIGAubWFya2VyLXRhcmdldGAgc2VsZWN0b3JzXG4gICAgICAgIC8vIG9mIGVsZW1lbnRzIHdpdGggc3BlY2lhbCBtZWFuaW5nIHRob3VnaC4gVGhlcmVmb3JlLCB0aG9zZSBjbGFzc2VzIHNob3VsZCBiZSBwcmVzZXJ2ZWQgaW4gYW55XG4gICAgICAgIC8vIHNwZWNpYWwgbWFya3VwIHBhc3NlZCBpbiBgcHJvcGVydGllcy5tYXJrdXBgLlxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBWKG1hcmt1cCk7XG4gICAgICAgIC8vIGN1c3RvbSBtYXJrdXAgbWF5IGNvbnRhaW4gb25seSBvbmUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgICAgICAvLyBDYWNoZSBhbGwgY2hpbGRyZW4gZWxlbWVudHMgZm9yIHF1aWNrZXIgYWNjZXNzLlxuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9WOyAvLyB2ZWN0b3JpemVkIG1hcmt1cDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGNoaWxkLmF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RyaXAgdGhlIGpvaW50IGNsYXNzIG5hbWUgcHJlZml4LCBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gcmVtb3ZlQ2xhc3NOYW1lUHJlZml4KGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgICAgY2FjaGVbJC5jYW1lbENhc2UoY2xhc3NOYW1lKV0gPSBjaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBwYXJ0aWFsIHJlbmRlcmluZ1xuICAgICAgICB0aGlzLnJlbmRlclRvb2xzKCk7XG4gICAgICAgIHRoaXMucmVuZGVyVmVydGV4TWFya2VycygpO1xuICAgICAgICB0aGlzLnJlbmRlckFycm93aGVhZE1hcmtlcnMoKTtcbiAgICAgICAgdGhpcy52ZWwuYXBwZW5kKGNoaWxkcmVuKTtcbiAgICB9LFxuXG4gICAgX2dldExhYmVsTWFya3VwOiBmdW5jdGlvbihsYWJlbE1hcmt1cCkge1xuXG4gICAgICAgIGlmICghbGFiZWxNYXJrdXApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGFiZWxNYXJrdXApKSByZXR1cm4gdGhpcy5wYXJzZURPTUpTT04obGFiZWxNYXJrdXAsIG51bGwpO1xuICAgICAgICBpZiAodHlwZW9mIGxhYmVsTWFya3VwID09PSAnc3RyaW5nJykgcmV0dXJuIHRoaXMuX2dldExhYmVsU3RyaW5nTWFya3VwKGxhYmVsTWFya3VwKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWEubGlua1ZpZXc6IGludmFsaWQgbGFiZWwgbWFya3VwJyk7XG4gICAgfSxcblxuICAgIF9nZXRMYWJlbFN0cmluZ01hcmt1cDogZnVuY3Rpb24obGFiZWxNYXJrdXApIHtcblxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBWKGxhYmVsTWFya3VwKTtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGNoaWxkcmVuLm5vZGUpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2hpbGQgPSBjaGlsZHJlbltpXS5ub2RlO1xuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGN1cnJlbnRDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBmcmFnbWVudDogZnJhZ21lbnQsIHNlbGVjdG9yczoge319OyAvLyBubyBzZWxlY3RvcnNcbiAgICB9LFxuXG4gICAgLy8gTGFiZWwgbWFya3VwIGZyYWdtZW50IG1heSBjb21lIHdyYXBwZWQgaW4gPGcgY2xhc3M9XCJsYWJlbFwiIC8+LCBvciBub3QuXG4gICAgLy8gSWYgaXQgZG9lc24ndCwgYWRkIHRoZSA8ZyAvPiBjb250YWluZXIgaGVyZS5cbiAgICBfbm9ybWFsaXplTGFiZWxNYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCkge1xuXG4gICAgICAgIGlmICghbWFya3VwKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBmcmFnbWVudCA9IG1hcmt1cC5mcmFnbWVudDtcbiAgICAgICAgaWYgKCEobWFya3VwLmZyYWdtZW50IGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkgfHwgIW1hcmt1cC5mcmFnbWVudC5oYXNDaGlsZE5vZGVzKCkpIHRocm93IG5ldyBFcnJvcignZGlhLkxpbmtWaWV3OiBpbnZhbGlkIGxhYmVsIG1hcmt1cC4nKTtcblxuICAgICAgICB2YXIgdk5vZGU7XG4gICAgICAgIHZhciBjaGlsZE5vZGVzID0gZnJhZ21lbnQuY2hpbGROb2RlcztcblxuICAgICAgICBpZiAoKGNoaWxkTm9kZXMubGVuZ3RoID4gMSkgfHwgY2hpbGROb2Rlc1swXS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnRycpIHtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgbWFya3VwIGZyYWdtZW50IGlzIG5vdCB3cmFwcGVkIGluIDxnIC8+XG4gICAgICAgICAgICAvLyBhZGQgYSA8ZyAvPiBjb250YWluZXJcbiAgICAgICAgICAgIHZOb2RlID0gVignZycpLmFwcGVuZChmcmFnbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2Tm9kZSA9IFYoY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2Tm9kZS5hZGRDbGFzcygnbGFiZWwnKTtcblxuICAgICAgICByZXR1cm4geyBub2RlOiB2Tm9kZS5ub2RlLCBzZWxlY3RvcnM6IG1hcmt1cC5zZWxlY3RvcnMgfTtcbiAgICB9LFxuXG4gICAgcmVuZGVyTGFiZWxzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9WO1xuICAgICAgICB2YXIgdkxhYmVscyA9IGNhY2hlLmxhYmVscztcbiAgICAgICAgdmFyIGxhYmVsQ2FjaGUgPSB0aGlzLl9sYWJlbENhY2hlID0ge307XG4gICAgICAgIHZhciBsYWJlbFNlbGVjdG9ycyA9IHRoaXMuX2xhYmVsU2VsZWN0b3JzID0ge307XG4gICAgICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWw7XG4gICAgICAgIHZhciBsYWJlbHMgPSBtb2RlbC5hdHRyaWJ1dGVzLmxhYmVscyB8fCBbXTtcbiAgICAgICAgdmFyIGxhYmVsc0NvdW50ID0gbGFiZWxzLmxlbmd0aDtcblxuICAgICAgICBpZiAobGFiZWxzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh2TGFiZWxzKSB2TGFiZWxzLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodkxhYmVscykge1xuICAgICAgICAgICAgdkxhYmVscy5lbXB0eSgpO1xuICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGxhYmVsIGNvbnRhaW5lciBpbiB0aGUgbWFya3VwIGJ1dCBzb21lIGxhYmVscyBhcmUgZGVmaW5lZFxuICAgICAgICAgICAgLy8gYWRkIGEgPGcgY2xhc3M9XCJsYWJlbHNcIiAvPiBjb250YWluZXJcbiAgICAgICAgICAgIHZMYWJlbHMgPSBjYWNoZS5sYWJlbHMgPSBWKCdnJykuYWRkQ2xhc3MoJ2xhYmVscycpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sYWJlbHNMYXllcikge1xuICAgICAgICAgICAgICAgIHZMYWJlbHMuYWRkQ2xhc3MoYWRkQ2xhc3NOYW1lUHJlZml4KHJlc3VsdCh0aGlzLCAnY2xhc3NOYW1lJykpKTtcbiAgICAgICAgICAgICAgICB2TGFiZWxzLmF0dHIoJ21vZGVsLWlkJywgbW9kZWwuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYWJlbHNDb3VudDsgaSsrKSB7XG5cbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICAgICAgICAgIHZhciBsYWJlbE1hcmt1cCA9IHRoaXMuX25vcm1hbGl6ZUxhYmVsTWFya3VwKHRoaXMuX2dldExhYmVsTWFya3VwKGxhYmVsLm1hcmt1cCkpO1xuICAgICAgICAgICAgdmFyIGxhYmVsTm9kZTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RvcnM7XG4gICAgICAgICAgICBpZiAobGFiZWxNYXJrdXApIHtcblxuICAgICAgICAgICAgICAgIGxhYmVsTm9kZSA9IGxhYmVsTWFya3VwLm5vZGU7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzID0gbGFiZWxNYXJrdXAuc2VsZWN0b3JzO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgdmFyIGJ1aWx0aW5EZWZhdWx0TGFiZWwgPSAgbW9kZWwuX2J1aWx0aW5zLmRlZmF1bHRMYWJlbDtcbiAgICAgICAgICAgICAgICB2YXIgYnVpbHRpbkRlZmF1bHRMYWJlbE1hcmt1cCA9IHRoaXMuX25vcm1hbGl6ZUxhYmVsTWFya3VwKHRoaXMuX2dldExhYmVsTWFya3VwKGJ1aWx0aW5EZWZhdWx0TGFiZWwubWFya3VwKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRMYWJlbCA9IG1vZGVsLl9nZXREZWZhdWx0TGFiZWwoKTtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdExhYmVsTWFya3VwID0gdGhpcy5fbm9ybWFsaXplTGFiZWxNYXJrdXAodGhpcy5fZ2V0TGFiZWxNYXJrdXAoZGVmYXVsdExhYmVsLm1hcmt1cCkpO1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0TWFya3VwID0gZGVmYXVsdExhYmVsTWFya3VwIHx8IGJ1aWx0aW5EZWZhdWx0TGFiZWxNYXJrdXA7XG5cbiAgICAgICAgICAgICAgICBsYWJlbE5vZGUgPSBkZWZhdWx0TWFya3VwLm5vZGU7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzID0gZGVmYXVsdE1hcmt1cC5zZWxlY3RvcnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhYmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ2xhYmVsLWlkeCcsIGkpOyAvLyBhc3NpZ24gbGFiZWwtaWR4XG4gICAgICAgICAgICB2TGFiZWxzLmFwcGVuZChsYWJlbE5vZGUpO1xuICAgICAgICAgICAgbGFiZWxDYWNoZVtpXSA9IGxhYmVsTm9kZTsgLy8gY2FjaGUgbm9kZSBmb3IgYHVwZGF0ZUxhYmVscygpYCBzbyBpdCBjYW4ganVzdCB1cGRhdGUgbGFiZWwgbm9kZSBwb3NpdGlvbnNcblxuICAgICAgICAgICAgdmFyIHJvb3RTZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3JzW3Jvb3RTZWxlY3Rvcl0pIHRocm93IG5ldyBFcnJvcignZGlhLkxpbmtWaWV3OiBhbWJpZ3VvdXMgbGFiZWwgcm9vdCBzZWxlY3Rvci4nKTtcbiAgICAgICAgICAgIHNlbGVjdG9yc1tyb290U2VsZWN0b3JdID0gbGFiZWxOb2RlO1xuXG4gICAgICAgICAgICBsYWJlbFNlbGVjdG9yc1tpXSA9IHNlbGVjdG9yczsgLy8gY2FjaGUgbGFiZWwgc2VsZWN0b3JzIGZvciBgdXBkYXRlTGFiZWxzKClgXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2TGFiZWxzLnBhcmVudCgpKSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50TGFiZWxzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZUxhYmVscygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBtb3VudExhYmVsczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgZWwsIHBhcGVyLCBtb2RlbCwgX1YsIG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbGFiZWxzOiB2TGFiZWxzIH0gPSBfVjtcbiAgICAgICAgaWYgKCF2TGFiZWxzIHx8ICFtb2RlbC5oYXNMYWJlbHMoKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IG5vZGUgfSA9IHZMYWJlbHM7XG4gICAgICAgIGlmIChvcHRpb25zLmxhYmVsc0xheWVyKSB7XG4gICAgICAgICAgICBwYXBlci5nZXRMYXllclZpZXcob3B0aW9ucy5sYWJlbHNMYXllcikuaW5zZXJ0U29ydGVkTm9kZShub2RlLCBtb2RlbC5nZXQoJ3onKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBlbCkge1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVubW91bnRMYWJlbHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIF9WIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIV9WKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgbGFiZWxzOiB2TGFiZWxzIH0gPSBfVjtcbiAgICAgICAgaWYgKHZMYWJlbHMgJiYgb3B0aW9ucy5sYWJlbHNMYXllcikge1xuICAgICAgICAgICAgdkxhYmVscy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBmaW5kTGFiZWxOb2RlOiBmdW5jdGlvbihsYWJlbEluZGV4LCBzZWxlY3Rvcikge1xuICAgICAgICBjb25zdCBsYWJlbFJvb3QgPSB0aGlzLl9sYWJlbENhY2hlW2xhYmVsSW5kZXhdO1xuICAgICAgICBpZiAoIWxhYmVsUm9vdCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGxhYmVsU2VsZWN0b3JzID0gdGhpcy5fbGFiZWxTZWxlY3RvcnNbbGFiZWxJbmRleF07XG4gICAgICAgIGNvbnN0IFtub2RlID0gbnVsbF0gPSB0aGlzLmZpbmRCeVNlbGVjdG9yKHNlbGVjdG9yLCBsYWJlbFJvb3QsIGxhYmVsU2VsZWN0b3JzKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcblxuXG4gICAgLy8gbWVyZ2UgZGVmYXVsdCBsYWJlbCBhdHRycyBpbnRvIGxhYmVsIGF0dHJzIChvciB1c2UgYnVpbHQtaW4gZGVmYXVsdCBsYWJlbCBhdHRycyBpZiBuZWl0aGVyIGlzIHByb3ZpZGVkKVxuICAgIC8vIGtlZXAgYHVuZGVmaW5lZGAgb3IgYG51bGxgIGJlY2F1c2UgYHt9YCBtZWFucyBzb21ldGhpbmcgZWxzZVxuICAgIF9tZXJnZUxhYmVsQXR0cnM6IGZ1bmN0aW9uKGhhc0N1c3RvbU1hcmt1cCwgbGFiZWxBdHRycywgZGVmYXVsdExhYmVsQXR0cnMsIGJ1aWx0aW5EZWZhdWx0TGFiZWxBdHRycykge1xuXG4gICAgICAgIGlmIChsYWJlbEF0dHJzID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKGxhYmVsQXR0cnMgPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICBpZiAoZGVmYXVsdExhYmVsQXR0cnMgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRMYWJlbEF0dHJzID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChoYXNDdXN0b21NYXJrdXApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWx0aW5EZWZhdWx0TGFiZWxBdHRycztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0N1c3RvbU1hcmt1cCkgcmV0dXJuIGRlZmF1bHRMYWJlbEF0dHJzO1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlKHt9LCBidWlsdGluRGVmYXVsdExhYmVsQXR0cnMsIGRlZmF1bHRMYWJlbEF0dHJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNDdXN0b21NYXJrdXApIHJldHVybiBtZXJnZSh7fSwgZGVmYXVsdExhYmVsQXR0cnMsIGxhYmVsQXR0cnMpO1xuICAgICAgICByZXR1cm4gbWVyZ2Uoe30sIGJ1aWx0aW5EZWZhdWx0TGFiZWxBdHRycywgZGVmYXVsdExhYmVsQXR0cnMsIGxhYmVsQXR0cnMpO1xuICAgIH0sXG5cbiAgICAvLyBtZXJnZSBkZWZhdWx0IGxhYmVsIHNpemUgaW50byBsYWJlbCBzaXplIChubyBidWlsdC1pbiBkZWZhdWx0KVxuICAgIC8vIGtlZXAgYHVuZGVmaW5lZGAgb3IgYG51bGxgIGJlY2F1c2UgYHt9YCBtZWFucyBzb21ldGhpbmcgZWxzZVxuICAgIF9tZXJnZUxhYmVsU2l6ZTogZnVuY3Rpb24obGFiZWxTaXplLCBkZWZhdWx0TGFiZWxTaXplKSB7XG5cbiAgICAgICAgaWYgKGxhYmVsU2l6ZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChsYWJlbFNpemUgPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICBpZiAoZGVmYXVsdExhYmVsU2l6ZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdExhYmVsU2l6ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdExhYmVsU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXJnZSh7fSwgZGVmYXVsdExhYmVsU2l6ZSwgbGFiZWxTaXplKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlTGFiZWxzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAoIXRoaXMuX1YubGFiZWxzKSByZXR1cm4gdGhpcztcblxuICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsO1xuICAgICAgICB2YXIgbGFiZWxzID0gbW9kZWwuZ2V0KCdsYWJlbHMnKSB8fCBbXTtcbiAgICAgICAgdmFyIGNhbkxhYmVsTW92ZSA9IHRoaXMuY2FuKCdsYWJlbE1vdmUnKTtcblxuICAgICAgICB2YXIgYnVpbHRpbkRlZmF1bHRMYWJlbCA9IG1vZGVsLl9idWlsdGlucy5kZWZhdWx0TGFiZWw7XG4gICAgICAgIHZhciBidWlsdGluRGVmYXVsdExhYmVsQXR0cnMgPSBidWlsdGluRGVmYXVsdExhYmVsLmF0dHJzO1xuXG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWwgPSBtb2RlbC5fZ2V0RGVmYXVsdExhYmVsKCk7XG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWxNYXJrdXAgPSBkZWZhdWx0TGFiZWwubWFya3VwO1xuICAgICAgICB2YXIgZGVmYXVsdExhYmVsQXR0cnMgPSBkZWZhdWx0TGFiZWwuYXR0cnM7XG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWxTaXplID0gZGVmYXVsdExhYmVsLnNpemU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cbiAgICAgICAgICAgIHZhciBsYWJlbE5vZGUgPSB0aGlzLl9sYWJlbENhY2hlW2ldO1xuICAgICAgICAgICAgbGFiZWxOb2RlLnNldEF0dHJpYnV0ZSgnY3Vyc29yJywgKGNhbkxhYmVsTW92ZSA/ICdtb3ZlJyA6ICdkZWZhdWx0JykpO1xuXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3JzID0gdGhpcy5fbGFiZWxTZWxlY3RvcnNbaV07XG5cbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICAgICAgICAgIHZhciBsYWJlbE1hcmt1cCA9IGxhYmVsLm1hcmt1cDtcbiAgICAgICAgICAgIHZhciBsYWJlbEF0dHJzID0gbGFiZWwuYXR0cnM7XG4gICAgICAgICAgICB2YXIgbGFiZWxTaXplID0gbGFiZWwuc2l6ZTtcblxuICAgICAgICAgICAgdmFyIGF0dHJzID0gdGhpcy5fbWVyZ2VMYWJlbEF0dHJzKFxuICAgICAgICAgICAgICAgIChsYWJlbE1hcmt1cCB8fCBkZWZhdWx0TGFiZWxNYXJrdXApLFxuICAgICAgICAgICAgICAgIGxhYmVsQXR0cnMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdExhYmVsQXR0cnMsXG4gICAgICAgICAgICAgICAgYnVpbHRpbkRlZmF1bHRMYWJlbEF0dHJzXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuX21lcmdlTGFiZWxTaXplKFxuICAgICAgICAgICAgICAgIGxhYmVsU2l6ZSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxTaXplXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURPTVN1YnRyZWVBdHRyaWJ1dGVzKGxhYmVsTm9kZSwgYXR0cnMsIHtcbiAgICAgICAgICAgICAgICByb290QkJveDogbmV3IFJlY3Qoc2l6ZSksXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiBzZWxlY3RvcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHJlbmRlclRvb2xzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAoIXRoaXMuX1YubGlua1Rvb2xzKSByZXR1cm4gdGhpcztcblxuICAgICAgICAvLyBUb29scyBhcmUgYSBncm91cCBvZiBjbGlja2FibGUgZWxlbWVudHMgdGhhdCBtYW5pcHVsYXRlIHRoZSB3aG9sZSBsaW5rLlxuICAgICAgICAvLyBBIGdvb2QgZXhhbXBsZSBvZiB0aGlzIGlzIHRoZSByZW1vdmUgdG9vbCB0aGF0IHJlbW92ZXMgdGhlIHdob2xlIGxpbmsuXG4gICAgICAgIC8vIFRvb2xzIGFwcGVhciBhZnRlciBob3ZlcmluZyB0aGUgbGluayBjbG9zZSB0byB0aGUgYHNvdXJjZWAgZWxlbWVudC9wb2ludCBvZiB0aGUgbGlua1xuICAgICAgICAvLyBidXQgYXJlIG9mZnNldCBhIGJpdCBzbyB0aGF0IHRoZXkgZG9uJ3QgY292ZXIgdGhlIGBtYXJrZXItYXJyb3doZWFkYC5cblxuICAgICAgICB2YXIgJHRvb2xzID0gJCh0aGlzLl9WLmxpbmtUb29scy5ub2RlKS5lbXB0eSgpO1xuICAgICAgICB2YXIgdG9vbFRlbXBsYXRlID0gdGVtcGxhdGUodGhpcy5tb2RlbC5nZXQoJ3Rvb2xNYXJrdXAnKSB8fCB0aGlzLm1vZGVsLnRvb2xNYXJrdXApO1xuICAgICAgICB2YXIgdG9vbCA9IFYodG9vbFRlbXBsYXRlKCkpO1xuXG4gICAgICAgICR0b29scy5hcHBlbmQodG9vbC5ub2RlKTtcblxuICAgICAgICAvLyBDYWNoZSB0aGUgdG9vbCBub2RlIHNvIHRoYXQgdGhlIGB1cGRhdGVUb29sc1Bvc2l0aW9uKClgIGNhbiB1cGRhdGUgdGhlIHRvb2wgcG9zaXRpb24gcXVpY2tseS5cbiAgICAgICAgdGhpcy5fdG9vbENhY2hlID0gdG9vbDtcblxuICAgICAgICAvLyBJZiBgZG91YmxlTGlua1Rvb2xzYCBpcyBlbmFibGVkLCB3ZSByZW5kZXIgY29weSBvZiB0aGUgdG9vbHMgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlXG4gICAgICAgIC8vIGxpbmsgYXMgd2VsbCBidXQgb25seSBpZiB0aGUgbGluayBpcyBsb25nZXIgdGhhbiBgbG9uZ0xpbmtMZW5ndGhgLlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRvdWJsZUxpbmtUb29scykge1xuXG4gICAgICAgICAgICB2YXIgdG9vbDI7XG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5nZXQoJ2RvdWJsZVRvb2xNYXJrdXAnKSB8fCB0aGlzLm1vZGVsLmRvdWJsZVRvb2xNYXJrdXApIHtcbiAgICAgICAgICAgICAgICB0b29sVGVtcGxhdGUgPSB0ZW1wbGF0ZSh0aGlzLm1vZGVsLmdldCgnZG91YmxlVG9vbE1hcmt1cCcpIHx8IHRoaXMubW9kZWwuZG91YmxlVG9vbE1hcmt1cCk7XG4gICAgICAgICAgICAgICAgdG9vbDIgPSBWKHRvb2xUZW1wbGF0ZSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9vbDIgPSB0b29sLmNsb25lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICR0b29scy5hcHBlbmQodG9vbDIubm9kZSk7XG4gICAgICAgICAgICB0aGlzLl90b29sMkNhY2hlID0gdG9vbDI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgcmVuZGVyVmVydGV4TWFya2VyczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9WLm1hcmtlclZlcnRpY2VzKSByZXR1cm4gdGhpcztcblxuICAgICAgICB2YXIgJG1hcmtlclZlcnRpY2VzID0gJCh0aGlzLl9WLm1hcmtlclZlcnRpY2VzLm5vZGUpLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gQSBzcGVjaWFsIG1hcmt1cCBjYW4gYmUgZ2l2ZW4gaW4gdGhlIGBwcm9wZXJ0aWVzLnZlcnRleE1hcmt1cGAgcHJvcGVydHkuIFRoaXMgbWlnaHQgYmUgaGFuZHlcbiAgICAgICAgLy8gaWYgZGVmYXVsdCBzdHlsaW5nIChlbGVtZW50cykgYXJlIG5vdCBkZXNpcmVkLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIHVzZSBhbnlcbiAgICAgICAgLy8gU1ZHIGVsZW1lbnRzIGZvciAubWFya2VyLXZlcnRleCBhbmQgLm1hcmtlci12ZXJ0ZXgtcmVtb3ZlIHRvb2xzLlxuICAgICAgICB2YXIgbWFya3VwVGVtcGxhdGUgPSB0ZW1wbGF0ZSh0aGlzLm1vZGVsLmdldCgndmVydGV4TWFya3VwJykgfHwgdGhpcy5tb2RlbC52ZXJ0ZXhNYXJrdXApO1xuXG4gICAgICAgIHRoaXMubW9kZWwudmVydGljZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKHZlcnRleCwgaWR4KSB7XG4gICAgICAgICAgICAkbWFya2VyVmVydGljZXMuYXBwZW5kKFYobWFya3VwVGVtcGxhdGUoYXNzaWduKHsgaWR4OiBpZHggfSwgdmVydGV4KSkpLm5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgcmVuZGVyQXJyb3doZWFkTWFya2VyczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLy8gQ3VzdG9tIG1hcmt1cHMgbWlnaHQgbm90IGhhdmUgYXJyb3doZWFkIG1hcmtlcnMuIFRoZXJlZm9yZSwganVtcCBvZiB0aGlzIGZ1bmN0aW9uIGltbWVkaWF0ZWx5IGlmIHRoYXQncyB0aGUgY2FzZS5cbiAgICAgICAgaWYgKCF0aGlzLl9WLm1hcmtlckFycm93aGVhZHMpIHJldHVybiB0aGlzO1xuXG4gICAgICAgIHZhciAkbWFya2VyQXJyb3doZWFkcyA9ICQodGhpcy5fVi5tYXJrZXJBcnJvd2hlYWRzLm5vZGUpO1xuXG4gICAgICAgICRtYXJrZXJBcnJvd2hlYWRzLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gQSBzcGVjaWFsIG1hcmt1cCBjYW4gYmUgZ2l2ZW4gaW4gdGhlIGBwcm9wZXJ0aWVzLnZlcnRleE1hcmt1cGAgcHJvcGVydHkuIFRoaXMgbWlnaHQgYmUgaGFuZHlcbiAgICAgICAgLy8gaWYgZGVmYXVsdCBzdHlsaW5nIChlbGVtZW50cykgYXJlIG5vdCBkZXNpcmVkLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIHVzZSBhbnlcbiAgICAgICAgLy8gU1ZHIGVsZW1lbnRzIGZvciAubWFya2VyLXZlcnRleCBhbmQgLm1hcmtlci12ZXJ0ZXgtcmVtb3ZlIHRvb2xzLlxuICAgICAgICB2YXIgbWFya3VwVGVtcGxhdGUgPSB0ZW1wbGF0ZSh0aGlzLm1vZGVsLmdldCgnYXJyb3doZWFkTWFya3VwJykgfHwgdGhpcy5tb2RlbC5hcnJvd2hlYWRNYXJrdXApO1xuXG4gICAgICAgIHRoaXMuX1Yuc291cmNlQXJyb3doZWFkID0gVihtYXJrdXBUZW1wbGF0ZSh7IGVuZDogJ3NvdXJjZScgfSkpO1xuICAgICAgICB0aGlzLl9WLnRhcmdldEFycm93aGVhZCA9IFYobWFya3VwVGVtcGxhdGUoeyBlbmQ6ICd0YXJnZXQnIH0pKTtcblxuICAgICAgICAkbWFya2VyQXJyb3doZWFkcy5hcHBlbmQodGhpcy5fVi5zb3VyY2VBcnJvd2hlYWQubm9kZSwgdGhpcy5fVi50YXJnZXRBcnJvd2hlYWQubm9kZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIHJlbW92ZSB2ZXJ0aWNlcyB0aGF0IGxpZSBvbiAob3IgbmVhcmx5IG9uKSBzdHJhaWdodCBsaW5lcyB3aXRoaW4gdGhlIGxpbmtcbiAgICAvLyByZXR1cm4gdGhlIG51bWJlciBvZiByZW1vdmVkIHBvaW50c1xuICAgIHJlbW92ZVJlZHVuZGFudExpbmVhclZlcnRpY2VzOiBmdW5jdGlvbihvcHQpIHtcblxuICAgICAgICBjb25zdCBTSU1QTElGWV9USFJFU0hPTEQgPSAwLjAwMTtcblxuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5tb2RlbDtcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBsaW5rLnZlcnRpY2VzKCk7XG4gICAgICAgIGNvbnN0IHJvdXRlUG9pbnRzID0gW3RoaXMuc291cmNlQW5jaG9yLCAuLi52ZXJ0aWNlcywgdGhpcy50YXJnZXRBbmNob3JdO1xuICAgICAgICBjb25zdCBudW1Sb3V0ZVBvaW50cyA9IHJvdXRlUG9pbnRzLmxlbmd0aDtcblxuICAgICAgICAvLyBwdXQgcm91dGVQb2ludHMgaW50byBhIHBvbHlsaW5lIGFuZCB0cnkgdG8gc2ltcGxpZnlcbiAgICAgICAgY29uc3QgcG9seWxpbmUgPSBuZXcgUG9seWxpbmUocm91dGVQb2ludHMpO1xuICAgICAgICBwb2x5bGluZS5zaW1wbGlmeSh7IHRocmVzaG9sZDogU0lNUExJRllfVEhSRVNIT0xEIH0pO1xuICAgICAgICBjb25zdCBwb2x5bGluZVBvaW50cyA9IHBvbHlsaW5lLnBvaW50cy5tYXAoKHBvaW50KSA9PiAocG9pbnQudG9KU09OKCkpKTsgLy8gSlNPTiBvZiBwb2ludHMgYWZ0ZXIgc2ltcGxpZmljYXRpb25cbiAgICAgICAgY29uc3QgbnVtUG9seWxpbmVQb2ludHMgPSBwb2x5bGluZVBvaW50cy5sZW5ndGg7IC8vIG51bWJlciBvZiBwb2ludHMgYWZ0ZXIgc2ltcGxpZmljYXRpb25cblxuICAgICAgICAvLyBzaG9ydGN1dCBpZiBzaW1wbGlmaWNhdGlvbiBkaWQgbm90IHJlbW92ZSBhbnkgcmVkdW5kYW50IHZlcnRpY2VzOlxuICAgICAgICBpZiAobnVtUm91dGVQb2ludHMgPT09IG51bVBvbHlsaW5lUG9pbnRzKSByZXR1cm4gMDtcblxuICAgICAgICAvLyBlbHNlOiBzZXQgc2ltcGxpZmllZCBwb2x5bGluZSBwb2ludHMgYXMgbGluayB2ZXJ0aWNlc1xuICAgICAgICAvLyByZW1vdmUgZmlyc3QgYW5kIGxhc3QgcG9seWxpbmUgcG9pbnRzIGFnYWluICg9IHNvdXJjZS90YXJnZXQgYW5jaG9ycylcbiAgICAgICAgbGluay52ZXJ0aWNlcyhwb2x5bGluZVBvaW50cy5zbGljZSgxLCBudW1Qb2x5bGluZVBvaW50cyAtIDEpLCBvcHQpO1xuICAgICAgICByZXR1cm4gKG51bVJvdXRlUG9pbnRzIC0gbnVtUG9seWxpbmVQb2ludHMpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVEZWZhdWx0Q29ubmVjdGlvblBhdGg6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBjYWNoZSA9IHRoaXMuX1Y7XG5cbiAgICAgICAgaWYgKGNhY2hlLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGNhY2hlLmNvbm5lY3Rpb24uYXR0cignZCcsIHRoaXMuZ2V0U2VyaWFsaXplZENvbm5lY3Rpb24oKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FjaGUuY29ubmVjdGlvbldyYXApIHtcbiAgICAgICAgICAgIGNhY2hlLmNvbm5lY3Rpb25XcmFwLmF0dHIoJ2QnLCB0aGlzLmdldFNlcmlhbGl6ZWRDb25uZWN0aW9uKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhY2hlLm1hcmtlclNvdXJjZSAmJiBjYWNoZS5tYXJrZXJUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZUFuZEF1dG9PcmllbnRBcnJvd3MoY2FjaGUubWFya2VyU291cmNlLCBjYWNoZS5tYXJrZXJUYXJnZXQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldEVuZFZpZXc6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZVZpZXcgfHwgbnVsbDtcbiAgICAgICAgICAgIGNhc2UgJ3RhcmdldCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0VmlldyB8fCBudWxsO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpYS5MaW5rVmlldzogdHlwZSBwYXJhbWV0ZXIgcmVxdWlyZWQuJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0RW5kQW5jaG9yOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc291cmNlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMuc291cmNlQW5jaG9yKTtcbiAgICAgICAgICAgIGNhc2UgJ3RhcmdldCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhLkxpbmtWaWV3OiB0eXBlIHBhcmFtZXRlciByZXF1aXJlZC4nKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRFbmRDb25uZWN0aW9uUG9pbnQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy5zb3VyY2VQb2ludCk7XG4gICAgICAgICAgICBjYXNlICd0YXJnZXQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy50YXJnZXRQb2ludCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhLkxpbmtWaWV3OiB0eXBlIHBhcmFtZXRlciByZXF1aXJlZC4nKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRFbmRNYWduZXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VWaWV3ID0gdGhpcy5zb3VyY2VWaWV3O1xuICAgICAgICAgICAgICAgIGlmICghc291cmNlVmlldykgYnJlYWs7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlTWFnbmV0IHx8IHNvdXJjZVZpZXcuZWw7XG4gICAgICAgICAgICBjYXNlICd0YXJnZXQnOlxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRWaWV3ID0gdGhpcy50YXJnZXRWaWV3O1xuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0VmlldykgYnJlYWs7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0TWFnbmV0IHx8IHRhcmdldFZpZXcuZWw7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhLkxpbmtWaWV3OiB0eXBlIHBhcmFtZXRlciByZXF1aXJlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvLyBVcGRhdGluZy5cbiAgICAvLyAtLS0tLS0tLS1cblxuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUm91dGUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYXRoKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRE9NKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHR4ID0gMCwgdHkgPSAwKSB7XG4gICAgICAgIGNvbnN0IHsgcm91dGUsIHBhdGggfSA9IHRoaXM7XG4gICAgICAgIGlmICghcm91dGUgfHwgIXBhdGgpIHJldHVybjtcbiAgICAgICAgLy8gdHJhbnNsYXRlIHRoZSByb3V0ZVxuICAgICAgICBjb25zdCBwb2x5bGluZSA9IG5ldyBQb2x5bGluZShyb3V0ZSk7XG4gICAgICAgIHBvbHlsaW5lLnRyYW5zbGF0ZSh0eCwgdHkpO1xuICAgICAgICB0aGlzLnJvdXRlID0gcG9seWxpbmUucG9pbnRzO1xuICAgICAgICAvLyB0cmFuc2xhdGUgc291cmNlIGFuZCB0YXJnZXQgY29ubmVjdGlvbiBhbmQgbWFya2VyIHBvaW50cy5cbiAgICAgICAgdGhpcy5fdHJhbnNsYXRlQ29ubmVjdGlvblBvaW50cyh0eCwgdHkpO1xuICAgICAgICAvLyB0cmFuc2xhdGUgdGhlIGdlb21ldHJ5IHBhdGhcbiAgICAgICAgcGF0aC50cmFuc2xhdGUodHgsIHR5KTtcbiAgICAgICAgdGhpcy51cGRhdGVET00oKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlRE9NKCkge1xuICAgICAgICBjb25zdCB7IGVsLCBtb2RlbCwgc2VsZWN0b3JzIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmNsZWFuTm9kZXNDYWNoZSgpO1xuICAgICAgICAvLyB1cGRhdGUgU1ZHIGF0dHJpYnV0ZXMgZGVmaW5lZCBieSAnYXR0cnMvJy5cbiAgICAgICAgdGhpcy51cGRhdGVET01TdWJ0cmVlQXR0cmlidXRlcyhlbCwgbW9kZWwuYXR0cigpLCB7IHNlbGVjdG9ycyB9KTtcbiAgICAgICAgLy8gbGVnYWN5IGxpbmsgcGF0aCB1cGRhdGVcbiAgICAgICAgdGhpcy51cGRhdGVEZWZhdWx0Q29ubmVjdGlvblBhdGgoKTtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBsYWJlbCBwb3NpdGlvbiBldGMuXG4gICAgICAgIHRoaXMudXBkYXRlTGFiZWxQb3NpdGlvbnMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVUb29sc1Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMudXBkYXRlQXJyb3doZWFkTWFya2VycygpO1xuICAgICAgICAvLyAqRGVwcmVjYXRlZCpcbiAgICAgICAgLy8gTG9jYWwgcGVycGVuZGljdWxhciBmbGFnIChhcyBvcHBvc2VkIHRvIG9uZSBkZWZpbmVkIG9uIHBhcGVyKS5cbiAgICAgICAgLy8gQ291bGQgYmUgZW5hYmxlZCBpbnNpZGUgYSBjb25uZWN0b3Ivcm91dGVyLiBJdCdzIHZhbGlkIG9ubHlcbiAgICAgICAgLy8gZHVyaW5nIHRoZSB1cGRhdGUgZXhlY3V0aW9uLlxuICAgICAgICB0aGlzLm9wdGlvbnMucGVycGVuZGljdWxhciA9IG51bGw7XG4gICAgfSxcblxuICAgIHVwZGF0ZVJvdXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBtb2RlbCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBtb2RlbC52ZXJ0aWNlcygpO1xuICAgICAgICAvLyAxLiBGaW5kIEFuY2hvcnNcbiAgICAgICAgY29uc3QgYW5jaG9ycyA9IHRoaXMuZmluZEFuY2hvcnModmVydGljZXMpO1xuICAgICAgICBjb25zdCBzb3VyY2VBbmNob3IgPSB0aGlzLnNvdXJjZUFuY2hvciA9IGFuY2hvcnMuc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSB0aGlzLnRhcmdldEFuY2hvciA9IGFuY2hvcnMudGFyZ2V0O1xuICAgICAgICAvLyAyLiBGaW5kIFJvdXRlXG4gICAgICAgIGNvbnN0IHJvdXRlID0gdGhpcy5maW5kUm91dGUodmVydGljZXMpO1xuICAgICAgICB0aGlzLnJvdXRlID0gcm91dGU7XG4gICAgICAgIC8vIDMuIEZpbmQgQ29ubmVjdGlvbiBQb2ludHNcbiAgICAgICAgdmFyIGNvbm5lY3Rpb25Qb2ludHMgPSB0aGlzLmZpbmRDb25uZWN0aW9uUG9pbnRzKHJvdXRlLCBzb3VyY2VBbmNob3IsIHRhcmdldEFuY2hvcik7XG4gICAgICAgIHRoaXMuc291cmNlUG9pbnQgPSBjb25uZWN0aW9uUG9pbnRzLnNvdXJjZTtcbiAgICAgICAgdGhpcy50YXJnZXRQb2ludCA9IGNvbm5lY3Rpb25Qb2ludHMudGFyZ2V0O1xuICAgIH0sXG5cbiAgICB1cGRhdGVQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyByb3V0ZSwgc291cmNlUG9pbnQsIHRhcmdldFBvaW50IH0gPSB0aGlzO1xuICAgICAgICAvLyAzYi4gRmluZCBNYXJrZXIgQ29ubmVjdGlvbiBQb2ludCAtIEJhY2t3YXJkcyBDb21wYXRpYmlsaXR5XG4gICAgICAgIGNvbnN0IG1hcmtlclBvaW50cyA9IHRoaXMuZmluZE1hcmtlclBvaW50cyhyb3V0ZSwgc291cmNlUG9pbnQsIHRhcmdldFBvaW50KTtcbiAgICAgICAgLy8gNC4gRmluZCBDb25uZWN0aW9uXG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLmZpbmRQYXRoKHJvdXRlLCBtYXJrZXJQb2ludHMuc291cmNlIHx8IHNvdXJjZVBvaW50LCBtYXJrZXJQb2ludHMudGFyZ2V0IHx8IHRhcmdldFBvaW50KTtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB9LFxuXG4gICAgZmluZE1hcmtlclBvaW50czogZnVuY3Rpb24ocm91dGUsIHNvdXJjZVBvaW50LCB0YXJnZXRQb2ludCkge1xuXG4gICAgICAgIHZhciBmaXJzdFdheXBvaW50ID0gcm91dGVbMF07XG4gICAgICAgIHZhciBsYXN0V2F5cG9pbnQgPSByb3V0ZVtyb3V0ZS5sZW5ndGggLSAxXTtcblxuICAgICAgICAvLyBNb3ZlIHRoZSBzb3VyY2UgcG9pbnQgYnkgdGhlIHdpZHRoIG9mIHRoZSBtYXJrZXIgdGFraW5nIGludG8gYWNjb3VudFxuICAgICAgICAvLyBpdHMgc2NhbGUgYXJvdW5kIHgtYXhpcy4gTm90ZSB0aGF0IHNjYWxlIGlzIHRoZSBvbmx5IHRyYW5zZm9ybSB0aGF0XG4gICAgICAgIC8vIG1ha2VzIHNlbnNlIHRvIGJlIHNldCBpbiBgLm1hcmtlci1zb3VyY2VgIGF0dHJpYnV0ZXMgb2JqZWN0XG4gICAgICAgIC8vIGFzIGFsbCBvdGhlciB0cmFuc2Zvcm1zICh0cmFuc2xhdGUvcm90YXRlKSB3aWxsIGJlIHJlcGxhY2VkXG4gICAgICAgIC8vIGJ5IHRoZSBgdHJhbnNsYXRlQW5kQXV0b09yaWVudCgpYCBmdW5jdGlvbi5cbiAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5fbWFya2VyQ2FjaGU7XG4gICAgICAgIC8vIGNhY2hlIHNvdXJjZSBhbmQgdGFyZ2V0IHBvaW50c1xuICAgICAgICB2YXIgc291cmNlTWFya2VyUG9pbnQsIHRhcmdldE1hcmtlclBvaW50O1xuXG4gICAgICAgIGlmICh0aGlzLl9WLm1hcmtlclNvdXJjZSkge1xuXG4gICAgICAgICAgICBjYWNoZS5zb3VyY2VCQm94ID0gY2FjaGUuc291cmNlQkJveCB8fCB0aGlzLl9WLm1hcmtlclNvdXJjZS5nZXRCQm94KCk7XG4gICAgICAgICAgICBzb3VyY2VNYXJrZXJQb2ludCA9IFBvaW50KHNvdXJjZVBvaW50KS5tb3ZlKFxuICAgICAgICAgICAgICAgIGZpcnN0V2F5cG9pbnQgfHwgdGFyZ2V0UG9pbnQsXG4gICAgICAgICAgICAgICAgY2FjaGUuc291cmNlQkJveC53aWR0aCAqIHRoaXMuX1YubWFya2VyU291cmNlLnNjYWxlKCkuc3ggKiAtMVxuICAgICAgICAgICAgKS5yb3VuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX1YubWFya2VyVGFyZ2V0KSB7XG5cbiAgICAgICAgICAgIGNhY2hlLnRhcmdldEJCb3ggPSBjYWNoZS50YXJnZXRCQm94IHx8IHRoaXMuX1YubWFya2VyVGFyZ2V0LmdldEJCb3goKTtcbiAgICAgICAgICAgIHRhcmdldE1hcmtlclBvaW50ID0gUG9pbnQodGFyZ2V0UG9pbnQpLm1vdmUoXG4gICAgICAgICAgICAgICAgbGFzdFdheXBvaW50IHx8IHNvdXJjZVBvaW50LFxuICAgICAgICAgICAgICAgIGNhY2hlLnRhcmdldEJCb3gud2lkdGggKiB0aGlzLl9WLm1hcmtlclRhcmdldC5zY2FsZSgpLnN4ICogLTFcbiAgICAgICAgICAgICkucm91bmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlIHdhcyBubyBtYXJrdXAgZm9yIHRoZSBtYXJrZXIsIHVzZSB0aGUgY29ubmVjdGlvbiBwb2ludC5cbiAgICAgICAgY2FjaGUuc291cmNlUG9pbnQgPSBzb3VyY2VNYXJrZXJQb2ludCB8fCBzb3VyY2VQb2ludC5jbG9uZSgpO1xuICAgICAgICBjYWNoZS50YXJnZXRQb2ludCA9IHRhcmdldE1hcmtlclBvaW50IHx8IHRhcmdldFBvaW50LmNsb25lKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlTWFya2VyUG9pbnQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldE1hcmtlclBvaW50XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGZpbmRBbmNob3JzT3JkZXJlZDogZnVuY3Rpb24oZmlyc3RFbmRUeXBlLCBmaXJzdFJlZiwgc2Vjb25kRW5kVHlwZSwgc2Vjb25kUmVmKSB7XG5cbiAgICAgICAgdmFyIGZpcnN0QW5jaG9yLCBzZWNvbmRBbmNob3I7XG4gICAgICAgIHZhciBmaXJzdEFuY2hvclJlZiwgc2Vjb25kQW5jaG9yUmVmO1xuICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsO1xuICAgICAgICB2YXIgZmlyc3REZWYgPSBtb2RlbC5nZXQoZmlyc3RFbmRUeXBlKTtcbiAgICAgICAgdmFyIHNlY29uZERlZiA9IG1vZGVsLmdldChzZWNvbmRFbmRUeXBlKTtcbiAgICAgICAgdmFyIGZpcnN0VmlldyA9IHRoaXMuZ2V0RW5kVmlldyhmaXJzdEVuZFR5cGUpO1xuICAgICAgICB2YXIgc2Vjb25kVmlldyA9IHRoaXMuZ2V0RW5kVmlldyhzZWNvbmRFbmRUeXBlKTtcbiAgICAgICAgdmFyIGZpcnN0TWFnbmV0ID0gdGhpcy5nZXRFbmRNYWduZXQoZmlyc3RFbmRUeXBlKTtcbiAgICAgICAgdmFyIHNlY29uZE1hZ25ldCA9IHRoaXMuZ2V0RW5kTWFnbmV0KHNlY29uZEVuZFR5cGUpO1xuXG4gICAgICAgIC8vIEFuY2hvciBmaXJzdFxuICAgICAgICBpZiAoZmlyc3RWaWV3KSB7XG4gICAgICAgICAgICBpZiAoZmlyc3RSZWYpIHtcbiAgICAgICAgICAgICAgICBmaXJzdEFuY2hvclJlZiA9IG5ldyBQb2ludChmaXJzdFJlZik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZFZpZXcpIHtcbiAgICAgICAgICAgICAgICBmaXJzdEFuY2hvclJlZiA9IHNlY29uZE1hZ25ldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmlyc3RBbmNob3JSZWYgPSBuZXcgUG9pbnQoc2Vjb25kRGVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpcnN0QW5jaG9yID0gdGhpcy5nZXRBbmNob3IoZmlyc3REZWYuYW5jaG9yLCBmaXJzdFZpZXcsIGZpcnN0TWFnbmV0LCBmaXJzdEFuY2hvclJlZiwgZmlyc3RFbmRUeXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpcnN0QW5jaG9yID0gbmV3IFBvaW50KGZpcnN0RGVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFuY2hvciBzZWNvbmRcbiAgICAgICAgaWYgKHNlY29uZFZpZXcpIHtcbiAgICAgICAgICAgIHNlY29uZEFuY2hvclJlZiA9IG5ldyBQb2ludChzZWNvbmRSZWYgfHwgZmlyc3RBbmNob3IpO1xuICAgICAgICAgICAgc2Vjb25kQW5jaG9yID0gdGhpcy5nZXRBbmNob3Ioc2Vjb25kRGVmLmFuY2hvciwgc2Vjb25kVmlldywgc2Vjb25kTWFnbmV0LCBzZWNvbmRBbmNob3JSZWYsIHNlY29uZEVuZFR5cGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Vjb25kQW5jaG9yID0gbmV3IFBvaW50KHNlY29uZERlZik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzID0ge307XG4gICAgICAgIHJlc1tmaXJzdEVuZFR5cGVdID0gZmlyc3RBbmNob3I7XG4gICAgICAgIHJlc1tzZWNvbmRFbmRUeXBlXSA9IHNlY29uZEFuY2hvcjtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuXG4gICAgZmluZEFuY2hvcnM6IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG5cbiAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgICAgdmFyIGZpcnN0VmVydGV4ID0gdmVydGljZXNbMF07XG4gICAgICAgIHZhciBsYXN0VmVydGV4ID0gdmVydGljZXNbdmVydGljZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKG1vZGVsLnRhcmdldCgpLnByaW9yaXR5ICYmICFtb2RlbC5zb3VyY2UoKS5wcmlvcml0eSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJzZWQgb3JkZXJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmRBbmNob3JzT3JkZXJlZCgndGFyZ2V0JywgbGFzdFZlcnRleCwgJ3NvdXJjZScsIGZpcnN0VmVydGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzdWFsIG9yZGVyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRBbmNob3JzT3JkZXJlZCgnc291cmNlJywgZmlyc3RWZXJ0ZXgsICd0YXJnZXQnLCBsYXN0VmVydGV4KTtcbiAgICB9LFxuXG4gICAgZmluZENvbm5lY3Rpb25Qb2ludHM6IGZ1bmN0aW9uKHJvdXRlLCBzb3VyY2VBbmNob3IsIHRhcmdldEFuY2hvcikge1xuXG4gICAgICAgIHZhciBmaXJzdFdheXBvaW50ID0gcm91dGVbMF07XG4gICAgICAgIHZhciBsYXN0V2F5cG9pbnQgPSByb3V0ZVtyb3V0ZS5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgICAgdmFyIHNvdXJjZURlZiA9IG1vZGVsLmdldCgnc291cmNlJyk7XG4gICAgICAgIHZhciB0YXJnZXREZWYgPSBtb2RlbC5nZXQoJ3RhcmdldCcpO1xuICAgICAgICB2YXIgc291cmNlVmlldyA9IHRoaXMuc291cmNlVmlldztcbiAgICAgICAgdmFyIHRhcmdldFZpZXcgPSB0aGlzLnRhcmdldFZpZXc7XG4gICAgICAgIHZhciBwYXBlck9wdGlvbnMgPSB0aGlzLnBhcGVyLm9wdGlvbnM7XG4gICAgICAgIHZhciBzb3VyY2VNYWduZXQsIHRhcmdldE1hZ25ldDtcblxuICAgICAgICAvLyBDb25uZWN0aW9uIFBvaW50IFNvdXJjZVxuICAgICAgICB2YXIgc291cmNlUG9pbnQ7XG4gICAgICAgIGlmIChzb3VyY2VWaWV3ICYmICFzb3VyY2VWaWV3LmlzTm9kZUNvbm5lY3Rpb24odGhpcy5zb3VyY2VNYWduZXQpKSB7XG4gICAgICAgICAgICBzb3VyY2VNYWduZXQgPSAodGhpcy5zb3VyY2VNYWduZXQgfHwgc291cmNlVmlldy5lbCk7XG4gICAgICAgICAgICB2YXIgc291cmNlQ29ubmVjdGlvblBvaW50RGVmID0gc291cmNlRGVmLmNvbm5lY3Rpb25Qb2ludCB8fCBwYXBlck9wdGlvbnMuZGVmYXVsdENvbm5lY3Rpb25Qb2ludDtcbiAgICAgICAgICAgIHZhciBzb3VyY2VQb2ludFJlZiA9IGZpcnN0V2F5cG9pbnQgfHwgdGFyZ2V0QW5jaG9yO1xuICAgICAgICAgICAgdmFyIHNvdXJjZUxpbmUgPSBuZXcgTGluZShzb3VyY2VQb2ludFJlZiwgc291cmNlQW5jaG9yKTtcbiAgICAgICAgICAgIHNvdXJjZVBvaW50ID0gdGhpcy5nZXRDb25uZWN0aW9uUG9pbnQoXG4gICAgICAgICAgICAgICAgc291cmNlQ29ubmVjdGlvblBvaW50RGVmLFxuICAgICAgICAgICAgICAgIHNvdXJjZVZpZXcsXG4gICAgICAgICAgICAgICAgc291cmNlTWFnbmV0LFxuICAgICAgICAgICAgICAgIHNvdXJjZUxpbmUsXG4gICAgICAgICAgICAgICAgJ3NvdXJjZSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3VyY2VQb2ludCA9IHNvdXJjZUFuY2hvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb25uZWN0aW9uIFBvaW50IFRhcmdldFxuICAgICAgICB2YXIgdGFyZ2V0UG9pbnQ7XG4gICAgICAgIGlmICh0YXJnZXRWaWV3ICYmICF0YXJnZXRWaWV3LmlzTm9kZUNvbm5lY3Rpb24odGhpcy50YXJnZXRNYWduZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXRNYWduZXQgPSAodGhpcy50YXJnZXRNYWduZXQgfHwgdGFyZ2V0Vmlldy5lbCk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0Q29ubmVjdGlvblBvaW50RGVmID0gdGFyZ2V0RGVmLmNvbm5lY3Rpb25Qb2ludCB8fCBwYXBlck9wdGlvbnMuZGVmYXVsdENvbm5lY3Rpb25Qb2ludDtcbiAgICAgICAgICAgIHZhciB0YXJnZXRQb2ludFJlZiA9IGxhc3RXYXlwb2ludCB8fCBzb3VyY2VBbmNob3I7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TGluZSA9IG5ldyBMaW5lKHRhcmdldFBvaW50UmVmLCB0YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgdGFyZ2V0UG9pbnQgPSB0aGlzLmdldENvbm5lY3Rpb25Qb2ludChcbiAgICAgICAgICAgICAgICB0YXJnZXRDb25uZWN0aW9uUG9pbnREZWYsXG4gICAgICAgICAgICAgICAgdGFyZ2V0VmlldyxcbiAgICAgICAgICAgICAgICB0YXJnZXRNYWduZXQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGluZSxcbiAgICAgICAgICAgICAgICAndGFyZ2V0J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFBvaW50ID0gdGFyZ2V0QW5jaG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlUG9pbnQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFBvaW50XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGdldEFuY2hvcjogZnVuY3Rpb24oYW5jaG9yRGVmLCBjZWxsVmlldywgbWFnbmV0LCByZWYsIGVuZFR5cGUpIHtcblxuICAgICAgICB2YXIgaXNDb25uZWN0aW9uID0gY2VsbFZpZXcuaXNOb2RlQ29ubmVjdGlvbihtYWduZXQpO1xuICAgICAgICB2YXIgcGFwZXJPcHRpb25zID0gdGhpcy5wYXBlci5vcHRpb25zO1xuICAgICAgICBpZiAoIWFuY2hvckRlZikge1xuICAgICAgICAgICAgaWYgKGlzQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGFuY2hvckRlZiA9IHBhcGVyT3B0aW9ucy5kZWZhdWx0TGlua0FuY2hvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcGVyT3B0aW9ucy5wZXJwZW5kaWN1bGFyTGlua3MgfHwgdGhpcy5vcHRpb25zLnBlcnBlbmRpY3VsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYHBlcnBlbmRpY3VsYXJMaW5rc2AgZmxhZyBpcyBzZXQgb24gdGhlIHBhcGVyIGFuZCB0aGVyZSBhcmUgdmVydGljZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gdGhlIGxpbmssIHRoZW4gdHJ5IHRvIGZpbmQgYSBjb25uZWN0aW9uIHBvaW50IHRoYXQgbWFrZXMgdGhlIGxpbmsgcGVycGVuZGljdWxhclxuICAgICAgICAgICAgICAgICAgICAvLyBldmVuIHRob3VnaCB0aGUgbGluayB3b24ndCBwb2ludCB0byB0aGUgY2VudGVyIG9mIHRoZSB0YXJnZXRlZCBvYmplY3QuXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvckRlZiA9IHsgbmFtZTogJ3BlcnBlbmRpY3VsYXInIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yRGVmID0gcGFwZXJPcHRpb25zLmRlZmF1bHRBbmNob3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhbmNob3JEZWYpIHRocm93IG5ldyBFcnJvcignQW5jaG9yIHJlcXVpcmVkLicpO1xuICAgICAgICB2YXIgYW5jaG9yRm47XG4gICAgICAgIGlmICh0eXBlb2YgYW5jaG9yRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhbmNob3JGbiA9IGFuY2hvckRlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhbmNob3JOYW1lID0gYW5jaG9yRGVmLm5hbWU7XG4gICAgICAgICAgICB2YXIgYW5jaG9yTmFtZXNwYWNlID0gaXNDb25uZWN0aW9uID8gJ2xpbmtBbmNob3JOYW1lc3BhY2UnIDogJ2FuY2hvck5hbWVzcGFjZSc7XG4gICAgICAgICAgICBhbmNob3JGbiA9IHBhcGVyT3B0aW9uc1thbmNob3JOYW1lc3BhY2VdW2FuY2hvck5hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbmNob3JGbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGFuY2hvcjogJyArIGFuY2hvck5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmNob3IgPSBhbmNob3JGbi5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGNlbGxWaWV3LFxuICAgICAgICAgICAgbWFnbmV0LFxuICAgICAgICAgICAgcmVmLFxuICAgICAgICAgICAgYW5jaG9yRGVmLmFyZ3MgfHwge30sXG4gICAgICAgICAgICBlbmRUeXBlLFxuICAgICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgICBpZiAoIWFuY2hvcikgcmV0dXJuIG5ldyBQb2ludCgpO1xuICAgICAgICByZXR1cm4gYW5jaG9yLnJvdW5kKHRoaXMuZGVjaW1hbHNSb3VuZGluZyk7XG4gICAgfSxcblxuXG4gICAgZ2V0Q29ubmVjdGlvblBvaW50OiBmdW5jdGlvbihjb25uZWN0aW9uUG9pbnREZWYsIHZpZXcsIG1hZ25ldCwgbGluZSwgZW5kVHlwZSkge1xuXG4gICAgICAgIHZhciBjb25uZWN0aW9uUG9pbnQ7XG4gICAgICAgIHZhciBhbmNob3IgPSBsaW5lLmVuZDtcbiAgICAgICAgdmFyIHBhcGVyT3B0aW9ucyA9IHRoaXMucGFwZXIub3B0aW9ucztcblxuICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICBpZiAodHlwZW9mIHBhcGVyT3B0aW9ucy5saW5rQ29ubmVjdGlvblBvaW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgbGlua0Nvbm5lY3Rpb25NYWduZXQgPSAobWFnbmV0ID09PSB2aWV3LmVsKSA/IHVuZGVmaW5lZCA6IG1hZ25ldDtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25Qb2ludCA9IHBhcGVyT3B0aW9ucy5saW5rQ29ubmVjdGlvblBvaW50KHRoaXMsIHZpZXcsIGxpbmtDb25uZWN0aW9uTWFnbmV0LCBsaW5lLnN0YXJ0LCBlbmRUeXBlKTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uUG9pbnQpIHJldHVybiBjb25uZWN0aW9uUG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbm5lY3Rpb25Qb2ludERlZikgcmV0dXJuIGFuY2hvcjtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb25Qb2ludEZuO1xuICAgICAgICBpZiAodHlwZW9mIGNvbm5lY3Rpb25Qb2ludERlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29ubmVjdGlvblBvaW50Rm4gPSBjb25uZWN0aW9uUG9pbnREZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvblBvaW50TmFtZSA9IGNvbm5lY3Rpb25Qb2ludERlZi5uYW1lO1xuICAgICAgICAgICAgY29ubmVjdGlvblBvaW50Rm4gPSBwYXBlck9wdGlvbnMuY29ubmVjdGlvblBvaW50TmFtZXNwYWNlW2Nvbm5lY3Rpb25Qb2ludE5hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0aW9uUG9pbnRGbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGNvbm5lY3Rpb24gcG9pbnQ6ICcgKyBjb25uZWN0aW9uUG9pbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0aW9uUG9pbnQgPSBjb25uZWN0aW9uUG9pbnRGbi5jYWxsKHRoaXMsIGxpbmUsIHZpZXcsIG1hZ25ldCwgY29ubmVjdGlvblBvaW50RGVmLmFyZ3MgfHwge30sIGVuZFR5cGUsIHRoaXMpO1xuICAgICAgICBpZiAoIWNvbm5lY3Rpb25Qb2ludCkgcmV0dXJuIGFuY2hvcjtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25Qb2ludC5yb3VuZCh0aGlzLmRlY2ltYWxzUm91bmRpbmcpO1xuICAgIH0sXG5cbiAgICBfdHJhbnNsYXRlQ29ubmVjdGlvblBvaW50czogZnVuY3Rpb24odHgsIHR5KSB7XG5cbiAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5fbWFya2VyQ2FjaGU7XG5cbiAgICAgICAgY2FjaGUuc291cmNlUG9pbnQub2Zmc2V0KHR4LCB0eSk7XG4gICAgICAgIGNhY2hlLnRhcmdldFBvaW50Lm9mZnNldCh0eCwgdHkpO1xuICAgICAgICB0aGlzLnNvdXJjZVBvaW50Lm9mZnNldCh0eCwgdHkpO1xuICAgICAgICB0aGlzLnRhcmdldFBvaW50Lm9mZnNldCh0eCwgdHkpO1xuICAgICAgICB0aGlzLnNvdXJjZUFuY2hvci5vZmZzZXQodHgsIHR5KTtcbiAgICAgICAgdGhpcy50YXJnZXRBbmNob3Iub2Zmc2V0KHR4LCB0eSk7XG4gICAgfSxcblxuICAgIC8vIGNvbWJpbmUgZGVmYXVsdCBsYWJlbCBwb3NpdGlvbiB3aXRoIGJ1aWx0LWluIGRlZmF1bHQgbGFiZWwgcG9zaXRpb25cbiAgICBfZ2V0RGVmYXVsdExhYmVsUG9zaXRpb25Qcm9wZXJ0eTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbDtcblxuICAgICAgICB2YXIgYnVpbHRpbkRlZmF1bHRMYWJlbCA9IG1vZGVsLl9idWlsdGlucy5kZWZhdWx0TGFiZWw7XG4gICAgICAgIHZhciBidWlsdGluRGVmYXVsdExhYmVsUG9zaXRpb24gPSBidWlsdGluRGVmYXVsdExhYmVsLnBvc2l0aW9uO1xuXG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWwgPSBtb2RlbC5fZ2V0RGVmYXVsdExhYmVsKCk7XG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWxQb3NpdGlvbiA9IHRoaXMuX25vcm1hbGl6ZUxhYmVsUG9zaXRpb24oZGVmYXVsdExhYmVsLnBvc2l0aW9uKTtcblxuICAgICAgICByZXR1cm4gbWVyZ2Uoe30sIGJ1aWx0aW5EZWZhdWx0TGFiZWxQb3NpdGlvbiwgZGVmYXVsdExhYmVsUG9zaXRpb24pO1xuICAgIH0sXG5cbiAgICAvLyBpZiBsYWJlbCBwb3NpdGlvbiBpcyBhIG51bWJlciwgbm9ybWFsaXplIGl0IHRvIGEgcG9zaXRpb24gb2JqZWN0XG4gICAgLy8gdGhpcyBtYWtlcyBzdXJlIHRoYXQgbGFiZWwgcG9zaXRpb25zIGNhbiBiZSBtZXJnZWQgcHJvcGVybHlcbiAgICBfbm9ybWFsaXplTGFiZWxQb3NpdGlvbjogZnVuY3Rpb24obGFiZWxQb3NpdGlvbikge1xuXG4gICAgICAgIGlmICh0eXBlb2YgbGFiZWxQb3NpdGlvbiA9PT0gJ251bWJlcicpIHJldHVybiB7IGRpc3RhbmNlOiBsYWJlbFBvc2l0aW9uLCBvZmZzZXQ6IG51bGwsIGFuZ2xlOiAwLCBhcmdzOiBudWxsIH07XG4gICAgICAgIHJldHVybiBsYWJlbFBvc2l0aW9uO1xuICAgIH0sXG5cbiAgICAvLyBleHBlY3RzIG5vcm1hbGl6ZWQgcG9zaXRpb24gcHJvcGVydGllc1xuICAgIC8vIGUuZy4gYHRoaXMuX25vcm1hbGl6ZUxhYmVsUG9zaXRpb24obGFiZWxQb3NpdGlvbilgIGFuZCBgdGhpcy5fZ2V0RGVmYXVsdExhYmVsUG9zaXRpb25Qcm9wZXJ0eSgpYFxuICAgIF9tZXJnZUxhYmVsUG9zaXRpb25Qcm9wZXJ0eTogZnVuY3Rpb24obm9ybWFsaXplZExhYmVsUG9zaXRpb24sIG5vcm1hbGl6ZWREZWZhdWx0TGFiZWxQb3NpdGlvbikge1xuXG4gICAgICAgIGlmIChub3JtYWxpemVkTGFiZWxQb3NpdGlvbiA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChub3JtYWxpemVkTGFiZWxQb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkRGVmYXVsdExhYmVsUG9zaXRpb24gPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWREZWZhdWx0TGFiZWxQb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXJnZSh7fSwgbm9ybWFsaXplZERlZmF1bHRMYWJlbFBvc2l0aW9uLCBub3JtYWxpemVkTGFiZWxQb3NpdGlvbik7XG4gICAgfSxcblxuICAgIHVwZGF0ZUxhYmVsUG9zaXRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAoIXRoaXMuX1YubGFiZWxzKSByZXR1cm4gdGhpcztcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKCFwYXRoKSByZXR1cm4gdGhpcztcblxuICAgICAgICAvLyBUaGlzIG1ldGhvZCBhc3N1bWVzIGFsbCB0aGUgbGFiZWwgbm9kZXMgYXJlIHN0b3JlZCBpbiB0aGUgYHRoaXMuX2xhYmVsQ2FjaGVgIGhhc2ggdGFibGVcbiAgICAgICAgLy8gYnkgdGhlaXIgaW5kaWNlcyBpbiB0aGUgYHRoaXMuZ2V0KCdsYWJlbHMnKWAgYXJyYXkuIFRoaXMgaXMgZG9uZSBpbiB0aGUgYHJlbmRlckxhYmVscygpYCBtZXRob2QuXG5cbiAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgICAgdmFyIGxhYmVscyA9IG1vZGVsLmdldCgnbGFiZWxzJykgfHwgW107XG4gICAgICAgIGlmICghbGFiZWxzLmxlbmd0aCkgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgdmFyIGRlZmF1bHRMYWJlbFBvc2l0aW9uID0gdGhpcy5fZ2V0RGVmYXVsdExhYmVsUG9zaXRpb25Qcm9wZXJ0eSgpO1xuXG4gICAgICAgIGZvciAodmFyIGlkeCA9IDAsIG4gPSBsYWJlbHMubGVuZ3RoOyBpZHggPCBuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGxhYmVsTm9kZSA9IHRoaXMuX2xhYmVsQ2FjaGVbaWR4XTtcbiAgICAgICAgICAgIGlmICghbGFiZWxOb2RlKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpZHhdO1xuICAgICAgICAgICAgdmFyIGxhYmVsUG9zaXRpb24gPSB0aGlzLl9ub3JtYWxpemVMYWJlbFBvc2l0aW9uKGxhYmVsLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX21lcmdlTGFiZWxQb3NpdGlvblByb3BlcnR5KGxhYmVsUG9zaXRpb24sIGRlZmF1bHRMYWJlbFBvc2l0aW9uKTtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1hdGlvbk1hdHJpeCA9IHRoaXMuX2dldExhYmVsVHJhbnNmb3JtYXRpb25NYXRyaXgocG9zaXRpb24pO1xuICAgICAgICAgICAgbGFiZWxOb2RlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgVi5tYXRyaXhUb1RyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1hdGlvbk1hdHJpeCkpO1xuICAgICAgICAgICAgdGhpcy5fY2xlYW5MYWJlbE1hdHJpY2VzKGlkeCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2NsZWFuTGFiZWxNYXRyaWNlczogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgLy8gQ2xlYW4gbWFnbmV0TWF0cml4IGZvciBhbGwgbm9kZXMgb2YgdGhlIGxhYmVsLlxuICAgICAgICAvLyBDYWNoZWQgQm91bmRpbmdSZWN0IGRvZXMgbm90IG5lZWQgdG8gdXBkYXRlZCB3aGVuIHRoZSBwb3NpdGlvbiBjaGFuZ2VzXG4gICAgICAgIC8vIFRPRE86IHRoaXMgZG9lc24ndCB3b3JrIGZvciBsYWJlbHMgd2l0aCBYTUwgU3RyaW5nIG1hcmt1cHMuXG4gICAgICAgIGNvbnN0IHsgbWV0cmljcywgX2xhYmVsU2VsZWN0b3JzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBzZWxlY3RvcnMgPSBfbGFiZWxTZWxlY3RvcnNbaW5kZXhdO1xuICAgICAgICBpZiAoIXNlbGVjdG9ycykgcmV0dXJuO1xuICAgICAgICBmb3IgKGxldCBzZWxlY3RvciBpbiBzZWxlY3RvcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWQgfSA9IHNlbGVjdG9yc1tzZWxlY3Rvcl07XG4gICAgICAgICAgICBpZiAoaWQgJiYgKGlkIGluIG1ldHJpY3MpKSBkZWxldGUgbWV0cmljc1tpZF0ubWFnbmV0TWF0cml4O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZVRvb2xzUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmICghdGhpcy5fVi5saW5rVG9vbHMpIHJldHVybiB0aGlzO1xuXG4gICAgICAgIC8vIE1vdmUgdGhlIHRvb2xzIGEgYml0IHRvIHRoZSB0YXJnZXQgcG9zaXRpb24gYnV0IGRvbid0IGNvdmVyIHRoZSBgc291cmNlQXJyb3doZWFkYCBtYXJrZXIuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgb2Zmc2V0IGlzIGhhcmRjb2RlZCBoZXJlLiBUaGUgb2Zmc2V0IHNob3VsZCBiZSBhbHdheXNcbiAgICAgICAgLy8gbW9yZSB0aGFuIHRoZSBgdGhpcy4kKCcubWFya2VyLWFycm93aGVhZFtlbmQ9XCJzb3VyY2VcIl0nKVswXS5iYm94KCkud2lkdGhgIGJ1dCBsb29raW5nXG4gICAgICAgIC8vIHRoaXMgdXAgYWxsIHRoZSB0aW1lIHdvdWxkIGJlIHNsb3cuXG5cbiAgICAgICAgdmFyIHNjYWxlID0gJyc7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9wdGlvbnMubGlua1Rvb2xzT2Zmc2V0O1xuICAgICAgICB2YXIgY29ubmVjdGlvbkxlbmd0aCA9IHRoaXMuZ2V0Q29ubmVjdGlvbkxlbmd0aCgpO1xuXG4gICAgICAgIC8vIEZpcmVmb3ggcmV0dXJucyBjb25uZWN0aW9uTGVuZ3RoPU5hTiBpbiBvZGQgY2FzZXMgKGZvciBiZXppZXIgY3VydmVzKS5cbiAgICAgICAgLy8gSW4gdGhhdCBjYXNlIHdlIHdvbid0IHVwZGF0ZSB0b29scyBwb3NpdGlvbiBhdCBhbGwuXG4gICAgICAgIGlmICghTnVtYmVyLmlzTmFOKGNvbm5lY3Rpb25MZW5ndGgpKSB7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBsaW5rIGlzIHRvbyBzaG9ydCwgbWFrZSB0aGUgdG9vbHMgaGFsZiB0aGUgc2l6ZSBhbmQgdGhlIG9mZnNldCB0d2ljZSBhcyBsb3cuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbkxlbmd0aCA8IHRoaXMub3B0aW9ucy5zaG9ydExpbmtMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzY2FsZSA9ICdzY2FsZSguNSknO1xuICAgICAgICAgICAgICAgIG9mZnNldCAvPSAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdG9vbFBvc2l0aW9uID0gdGhpcy5nZXRQb2ludEF0TGVuZ3RoKG9mZnNldCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3Rvb2xDYWNoZS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB0b29sUG9zaXRpb24ueCArICcsICcgKyB0b29sUG9zaXRpb24ueSArICcpICcgKyBzY2FsZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG91YmxlTGlua1Rvb2xzICYmIGNvbm5lY3Rpb25MZW5ndGggPj0gdGhpcy5vcHRpb25zLmxvbmdMaW5rTGVuZ3RoKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZG91YmxlTGlua1Rvb2xzT2Zmc2V0ID0gdGhpcy5vcHRpb25zLmRvdWJsZUxpbmtUb29sc09mZnNldCB8fCBvZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICB0b29sUG9zaXRpb24gPSB0aGlzLmdldFBvaW50QXRMZW5ndGgoY29ubmVjdGlvbkxlbmd0aCAtIGRvdWJsZUxpbmtUb29sc09mZnNldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9vbDJDYWNoZS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB0b29sUG9zaXRpb24ueCArICcsICcgKyB0b29sUG9zaXRpb24ueSArICcpICcgKyBzY2FsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9vbDJDYWNoZS5hdHRyKCdkaXNwbGF5JywgJ2lubGluZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5kb3VibGVMaW5rVG9vbHMpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2wyQ2FjaGUuYXR0cignZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgdXBkYXRlQXJyb3doZWFkTWFya2VyczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9WLm1hcmtlckFycm93aGVhZHMpIHJldHVybiB0aGlzO1xuXG4gICAgICAgIC8vIGdldHRpbmcgYmJveCBvZiBhbiBlbGVtZW50IHdpdGggYGRpc3BsYXk9XCJub25lXCJgIGluIElFOSBlbmRzIHVwIHdpdGggYWNjZXNzIHZpb2xhdGlvblxuICAgICAgICBpZiAoJC5jc3ModGhpcy5fVi5tYXJrZXJBcnJvd2hlYWRzLm5vZGUsICdkaXNwbGF5JykgPT09ICdub25lJykgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgdmFyIHN4ID0gdGhpcy5nZXRDb25uZWN0aW9uTGVuZ3RoKCkgPCB0aGlzLm9wdGlvbnMuc2hvcnRMaW5rTGVuZ3RoID8gLjUgOiAxO1xuICAgICAgICB0aGlzLl9WLnNvdXJjZUFycm93aGVhZC5zY2FsZShzeCk7XG4gICAgICAgIHRoaXMuX1YudGFyZ2V0QXJyb3doZWFkLnNjYWxlKHN4KTtcblxuICAgICAgICB0aGlzLl90cmFuc2xhdGVBbmRBdXRvT3JpZW50QXJyb3dzKHRoaXMuX1Yuc291cmNlQXJyb3doZWFkLCB0aGlzLl9WLnRhcmdldEFycm93aGVhZCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHVwZGF0ZUVuZFByb3BlcnRpZXM6IGZ1bmN0aW9uKGVuZFR5cGUpIHtcblxuICAgICAgICBjb25zdCB7IG1vZGVsLCBwYXBlciB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZW5kVmlld1Byb3BlcnR5ID0gYCR7ZW5kVHlwZX1WaWV3YDtcbiAgICAgICAgY29uc3QgZW5kRGVmID0gbW9kZWwuZ2V0KGVuZFR5cGUpO1xuICAgICAgICBjb25zdCBlbmRJZCA9IGVuZERlZiAmJiBlbmREZWYuaWQ7XG5cbiAgICAgICAgaWYgKCFlbmRJZCkge1xuICAgICAgICAgICAgLy8gdGhlIGxpbmsgZW5kIGlzIGEgcG9pbnQgfiByZWN0IDB4MFxuICAgICAgICAgICAgdGhpc1tlbmRWaWV3UHJvcGVydHldID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRW5kTWFnbmV0KGVuZFR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbmRNb2RlbCA9IHBhcGVyLmdldE1vZGVsQnlJZChlbmRJZCk7XG4gICAgICAgIGlmICghZW5kTW9kZWwpIHRocm93IG5ldyBFcnJvcignTGlua1ZpZXc6IGludmFsaWQgJyArIGVuZFR5cGUgKyAnIGNlbGwuJyk7XG5cbiAgICAgICAgY29uc3QgZW5kVmlldyA9IGVuZE1vZGVsLmZpbmRWaWV3KHBhcGVyKTtcbiAgICAgICAgaWYgKCFlbmRWaWV3KSB7XG4gICAgICAgICAgICAvLyBBIHZpZXcgZm9yIGEgbW9kZWwgc2hvdWxkIGFsd2F5cyBleGlzdFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1tlbmRWaWV3UHJvcGVydHldID0gZW5kVmlldztcbiAgICAgICAgdGhpcy51cGRhdGVFbmRNYWduZXQoZW5kVHlwZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICB1cGRhdGVFbmRNYWduZXQ6IGZ1bmN0aW9uKGVuZFR5cGUpIHtcblxuICAgICAgICBjb25zdCBlbmRNYWduZXRQcm9wZXJ0eSA9IGAke2VuZFR5cGV9TWFnbmV0YDtcbiAgICAgICAgY29uc3QgZW5kVmlldyA9IHRoaXMuZ2V0RW5kVmlldyhlbmRUeXBlKTtcbiAgICAgICAgaWYgKGVuZFZpZXcpIHtcbiAgICAgICAgICAgIGxldCBjb25uZWN0ZWRNYWduZXQgPSBlbmRWaWV3LmdldE1hZ25ldEZyb21MaW5rRW5kKHRoaXMubW9kZWwuZ2V0KGVuZFR5cGUpKTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0ZWRNYWduZXQgPT09IGVuZFZpZXcuZWwpIGNvbm5lY3RlZE1hZ25ldCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzW2VuZE1hZ25ldFByb3BlcnR5XSA9IGNvbm5lY3RlZE1hZ25ldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbZW5kTWFnbmV0UHJvcGVydHldID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfdHJhbnNsYXRlQW5kQXV0b09yaWVudEFycm93czogZnVuY3Rpb24oc291cmNlQXJyb3csIHRhcmdldEFycm93KSB7XG5cbiAgICAgICAgLy8gTWFrZSB0aGUgbWFya2VycyBcInBvaW50XCIgdG8gdGhlaXIgc3RpY2t5IHBvaW50cyBiZWluZyBhdXRvLW9yaWVudGVkIHRvd2FyZHNcbiAgICAgICAgLy8gYHRhcmdldFBvc2l0aW9uYC9gc291cmNlUG9zaXRpb25gLiBBbmQgZG8gc28gb25seSBpZiB0aGVyZSBpcyBhIG1hcmt1cCBmb3IgdGhlbS5cbiAgICAgICAgdmFyIHJvdXRlID0gdG9BcnJheSh0aGlzLnJvdXRlKTtcbiAgICAgICAgaWYgKHNvdXJjZUFycm93KSB7XG4gICAgICAgICAgICBzb3VyY2VBcnJvdy50cmFuc2xhdGVBbmRBdXRvT3JpZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlUG9pbnQsXG4gICAgICAgICAgICAgICAgcm91dGVbMF0gfHwgdGhpcy50YXJnZXRQb2ludCxcbiAgICAgICAgICAgICAgICB0aGlzLnBhcGVyLmNlbGxzXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldEFycm93KSB7XG4gICAgICAgICAgICB0YXJnZXRBcnJvdy50cmFuc2xhdGVBbmRBdXRvT3JpZW50KFxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9pbnQsXG4gICAgICAgICAgICAgICAgcm91dGVbcm91dGUubGVuZ3RoIC0gMV0gfHwgdGhpcy5zb3VyY2VQb2ludCxcbiAgICAgICAgICAgICAgICB0aGlzLnBhcGVyLmNlbGxzXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9nZXRMYWJlbFBvc2l0aW9uUHJvcGVydHk6IGZ1bmN0aW9uKGlkeCkge1xuXG4gICAgICAgIHJldHVybiAodGhpcy5tb2RlbC5sYWJlbChpZHgpLnBvc2l0aW9uIHx8IHt9KTtcbiAgICB9LFxuXG4gICAgX2dldExhYmVsUG9zaXRpb25BbmdsZTogZnVuY3Rpb24oaWR4KSB7XG5cbiAgICAgICAgdmFyIGxhYmVsUG9zaXRpb24gPSB0aGlzLl9nZXRMYWJlbFBvc2l0aW9uUHJvcGVydHkoaWR4KTtcbiAgICAgICAgcmV0dXJuIChsYWJlbFBvc2l0aW9uLmFuZ2xlIHx8IDApO1xuICAgIH0sXG5cbiAgICBfZ2V0TGFiZWxQb3NpdGlvbkFyZ3M6IGZ1bmN0aW9uKGlkeCkge1xuXG4gICAgICAgIHZhciBsYWJlbFBvc2l0aW9uID0gdGhpcy5fZ2V0TGFiZWxQb3NpdGlvblByb3BlcnR5KGlkeCk7XG4gICAgICAgIHJldHVybiBsYWJlbFBvc2l0aW9uLmFyZ3M7XG4gICAgfSxcblxuICAgIF9nZXREZWZhdWx0TGFiZWxQb3NpdGlvbkFyZ3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWwgPSB0aGlzLm1vZGVsLl9nZXREZWZhdWx0TGFiZWwoKTtcbiAgICAgICAgdmFyIGRlZmF1bHRMYWJlbFBvc2l0aW9uID0gZGVmYXVsdExhYmVsLnBvc2l0aW9uIHx8IHt9O1xuICAgICAgICByZXR1cm4gZGVmYXVsdExhYmVsUG9zaXRpb24uYXJncztcbiAgICB9LFxuXG4gICAgLy8gbWVyZ2UgZGVmYXVsdCBsYWJlbCBwb3NpdGlvbiBhcmdzIGludG8gbGFiZWwgcG9zaXRpb24gYXJnc1xuICAgIC8vIGtlZXAgYHVuZGVmaW5lZGAgb3IgYG51bGxgIGJlY2F1c2UgYHt9YCBtZWFucyBzb21ldGhpbmcgZWxzZVxuICAgIF9tZXJnZUxhYmVsUG9zaXRpb25BcmdzOiBmdW5jdGlvbihsYWJlbFBvc2l0aW9uQXJncywgZGVmYXVsdExhYmVsUG9zaXRpb25BcmdzKSB7XG5cbiAgICAgICAgaWYgKGxhYmVsUG9zaXRpb25BcmdzID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKGxhYmVsUG9zaXRpb25BcmdzID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgaWYgKGRlZmF1bHRMYWJlbFBvc2l0aW9uQXJncyA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdExhYmVsUG9zaXRpb25BcmdzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lcmdlKHt9LCBkZWZhdWx0TGFiZWxQb3NpdGlvbkFyZ3MsIGxhYmVsUG9zaXRpb25BcmdzKTtcbiAgICB9LFxuXG4gICAgLy8gQWRkIGRlZmF1bHQgbGFiZWwgYXQgZ2l2ZW4gcG9zaXRpb24gYXQgZW5kIG9mIGBsYWJlbHNgIGFycmF5LlxuICAgIC8vIEZvdXIgc2lnbmF0dXJlczpcbiAgICAvLyAtIG9iaiwgb2JqID0gcG9pbnQsIG9wdFxuICAgIC8vIC0gb2JqLCBudW0sIG9iaiA9IHBvaW50LCBhbmdsZSwgb3B0XG4gICAgLy8gLSBudW0sIG51bSwgb2JqID0geCwgeSwgb3B0XG4gICAgLy8gLSBudW0sIG51bSwgbnVtLCBvYmogPSB4LCB5LCBhbmdsZSwgb3B0XG4gICAgLy8gQXNzaWducyByZWxhdGl2ZSBjb29yZGluYXRlcyBieSBkZWZhdWx0OlxuICAgIC8vIGBvcHQuYWJzb2x1dGVEaXN0YW5jZWAgZm9yY2VzIGFic29sdXRlIGNvb3JkaW5hdGVzLlxuICAgIC8vIGBvcHQucmV2ZXJzZURpc3RhbmNlYCBmb3JjZXMgcmV2ZXJzZSBhYnNvbHV0ZSBjb29yZGluYXRlcyAoaWYgYWJzb2x1dGVEaXN0YW5jZSA9IHRydWUpLlxuICAgIC8vIGBvcHQuYWJzb2x1dGVPZmZzZXRgIGZvcmNlcyBhYnNvbHV0ZSBjb29yZGluYXRlcyBmb3Igb2Zmc2V0LlxuICAgIC8vIEFkZGl0aW9uYWwgYXJnczpcbiAgICAvLyBgb3B0LmtlZXBHcmFkaWVudGAgYXV0by1hZGp1c3RzIHRoZSBhbmdsZSBvZiB0aGUgbGFiZWwgdG8gbWF0Y2ggcGF0aCBncmFkaWVudCBhdCBwb3NpdGlvbi5cbiAgICAvLyBgb3B0LmVuc3VyZUxlZ2liaWxpdHlgIHJvdGF0ZXMgbGFiZWxzIHNvIHRoZXkgYXJlIG5ldmVyIHVwc2lkZS1kb3duLlxuICAgIGFkZExhYmVsOiBmdW5jdGlvbihwMSwgcDIsIHAzLCBwNCkge1xuXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBkYXRhIGZyb20gdGhlIGZvdXIgcG9zc2libGUgc2lnbmF0dXJlc1xuICAgICAgICB2YXIgbG9jYWxYO1xuICAgICAgICB2YXIgbG9jYWxZO1xuICAgICAgICB2YXIgbG9jYWxBbmdsZSA9IDA7XG4gICAgICAgIHZhciBsb2NhbE9wdDtcbiAgICAgICAgaWYgKHR5cGVvZiBwMSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIC8vIHt4LCB5fSBvYmplY3QgcHJvdmlkZWQgYXMgZmlyc3QgcGFyYW1ldGVyXG4gICAgICAgICAgICBsb2NhbFggPSBwMS54O1xuICAgICAgICAgICAgbG9jYWxZID0gcDEueTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgLy8gYW5nbGUgYW5kIG9wdCBwcm92aWRlZCBhcyBzZWNvbmQgYW5kIHRoaXJkIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICBsb2NhbEFuZ2xlID0gcDI7XG4gICAgICAgICAgICAgICAgbG9jYWxPcHQgPSBwMztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gb3B0IHByb3ZpZGVkIGFzIHNlY29uZCBwYXJhbWV0ZXJcbiAgICAgICAgICAgICAgICBsb2NhbE9wdCA9IHAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8geCBhbmQgeSBwcm92aWRlZCBhcyBmaXJzdCBhbmQgc2Vjb25kIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIGxvY2FsWCA9IHAxO1xuICAgICAgICAgICAgbG9jYWxZID0gcDI7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHAzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIC8vIGFuZ2xlIGFuZCBvcHQgcHJvdmlkZWQgYXMgdGhpcmQgYW5kIGZvdXJ0aCBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgbG9jYWxBbmdsZSA9IHAzO1xuICAgICAgICAgICAgICAgIGxvY2FsT3B0ID0gcDQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG9wdCBwcm92aWRlZCBhcyB0aGlyZCBwYXJhbWV0ZXJcbiAgICAgICAgICAgICAgICBsb2NhbE9wdCA9IHAzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWVyZ2UgbGFiZWwgcG9zaXRpb24gYXJndW1lbnRzXG4gICAgICAgIHZhciBkZWZhdWx0TGFiZWxQb3NpdGlvbkFyZ3MgPSB0aGlzLl9nZXREZWZhdWx0TGFiZWxQb3NpdGlvbkFyZ3MoKTtcbiAgICAgICAgdmFyIGxhYmVsUG9zaXRpb25BcmdzID0gbG9jYWxPcHQ7XG4gICAgICAgIHZhciBwb3NpdGlvbkFyZ3MgPSB0aGlzLl9tZXJnZUxhYmVsUG9zaXRpb25BcmdzKGxhYmVsUG9zaXRpb25BcmdzLCBkZWZhdWx0TGFiZWxQb3NpdGlvbkFyZ3MpO1xuXG4gICAgICAgIC8vIGFwcGVuZCBsYWJlbCB0byBsYWJlbHMgYXJyYXlcbiAgICAgICAgdmFyIGxhYmVsID0geyBwb3NpdGlvbjogdGhpcy5nZXRMYWJlbFBvc2l0aW9uKGxvY2FsWCwgbG9jYWxZLCBsb2NhbEFuZ2xlLCBwb3NpdGlvbkFyZ3MpIH07XG4gICAgICAgIHZhciBpZHggPSAtMTtcbiAgICAgICAgdGhpcy5tb2RlbC5pbnNlcnRMYWJlbChpZHgsIGxhYmVsLCBsb2NhbE9wdCk7XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfSxcblxuICAgIC8vIEFkZCBhIG5ldyB2ZXJ0ZXggYXQgY2FsY3VsYXRlZCBpbmRleCB0byB0aGUgYHZlcnRpY2VzYCBhcnJheS5cbiAgICBhZGRWZXJ0ZXg6IGZ1bmN0aW9uKHgsIHksIG9wdCkge1xuXG4gICAgICAgIC8vIGFjY2VwdCBpbnB1dCBpbiBmb3JtIGB7IHgsIHkgfSwgb3B0YCBvciBgeCwgeSwgb3B0YFxuICAgICAgICB2YXIgaXNQb2ludFByb3ZpZGVkID0gKHR5cGVvZiB4ICE9PSAnbnVtYmVyJyk7XG4gICAgICAgIHZhciBsb2NhbFggPSBpc1BvaW50UHJvdmlkZWQgPyB4LnggOiB4O1xuICAgICAgICB2YXIgbG9jYWxZID0gaXNQb2ludFByb3ZpZGVkID8geC55IDogeTtcbiAgICAgICAgdmFyIGxvY2FsT3B0ID0gaXNQb2ludFByb3ZpZGVkID8geSA6IG9wdDtcblxuICAgICAgICB2YXIgdmVydGV4ID0geyB4OiBsb2NhbFgsIHk6IGxvY2FsWSB9O1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy5nZXRWZXJ0ZXhJbmRleChsb2NhbFgsIGxvY2FsWSk7XG4gICAgICAgIHRoaXMubW9kZWwuaW5zZXJ0VmVydGV4KGlkeCwgdmVydGV4LCBsb2NhbE9wdCk7XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfSxcblxuICAgIC8vIFNlbmQgYSB0b2tlbiAoYW4gU1ZHIGVsZW1lbnQsIHVzdWFsbHkgYSBjaXJjbGUpIGFsb25nIHRoZSBjb25uZWN0aW9uIHBhdGguXG4gICAgLy8gRXhhbXBsZTogYGxpbmsuZmluZFZpZXcocGFwZXIpLnNlbmRUb2tlbihWKCdjaXJjbGUnLCB7IHI6IDcsIGZpbGw6ICdncmVlbicgfSkubm9kZSlgXG4gICAgLy8gYG9wdC5kdXJhdGlvbmAgaXMgb3B0aW9uYWwgYW5kIGlzIGEgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCB0aGUgdG9rZW4gdHJhdmVscyBmcm9tIHRoZSBzb3VyY2UgdG8gdGhlIHRhcmdldCBvZiB0aGUgbGluay4gRGVmYXVsdCBpcyBgMTAwMGAuXG4gICAgLy8gYG9wdC5kaXJlY3RvbmAgaXMgb3B0aW9uYWwgYW5kIGl0IGRldGVybWluZXMgd2hldGhlciB0aGUgdG9rZW4gZ29lcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgb3Igb3RoZXIgd2F5IHJvdW5kIChgcmV2ZXJzZWApXG4gICAgLy8gYG9wdC5jb25uZWN0aW9uYCBpcyBhbiBvcHRpb25hbCBzZWxlY3RvciB0byB0aGUgY29ubmVjdGlvbiBwYXRoLlxuICAgIC8vIGBjYWxsYmFja2AgaXMgb3B0aW9uYWwgYW5kIGlzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uY2UgdGhlIHRva2VuIHJlYWNoZXMgdGhlIHRhcmdldC5cbiAgICBzZW5kVG9rZW46IGZ1bmN0aW9uKHRva2VuLCBvcHQsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25FbmQodlRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZUb2tlbi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkdXJhdGlvbiwgaXNSZXZlcnNlZCwgc2VsZWN0b3I7XG4gICAgICAgIGlmIChpc09iamVjdChvcHQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IG9wdC5kdXJhdGlvbjtcbiAgICAgICAgICAgIGlzUmV2ZXJzZWQgPSAob3B0LmRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnKTtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gb3B0LmNvbm5lY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgZHVyYXRpb24gPSBvcHQ7XG4gICAgICAgICAgICBpc1JldmVyc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxlY3RvciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDEwMDA7XG5cbiAgICAgICAgdmFyIGFuaW1hdGlvbkF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICAgICBkdXI6IGR1cmF0aW9uICsgJ21zJyxcbiAgICAgICAgICAgIHJlcGVhdENvdW50OiAxLFxuICAgICAgICAgICAgY2FsY01vZGU6ICdsaW5lYXInLFxuICAgICAgICAgICAgZmlsbDogJ2ZyZWV6ZSdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaXNSZXZlcnNlZCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uQXR0cmlidXRlcy5rZXlQb2ludHMgPSAnMTswJztcbiAgICAgICAgICAgIGFuaW1hdGlvbkF0dHJpYnV0ZXMua2V5VGltZXMgPSAnMDsxJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2VG9rZW4gPSBWKHRva2VuKTtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb247XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBVc2UgY3VzdG9tIGNvbm5lY3Rpb24gcGF0aC5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSB0aGlzLmZpbmRCeVNlbGVjdG9yKHNlbGVjdG9yLCB0aGlzLmVsLCB0aGlzLnNlbGVjdG9ycylbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTZWxlY3QgY29ubmVjdGlvbiBwYXRoIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9WO1xuICAgICAgICAgICAgY29ubmVjdGlvbiA9IChjYWNoZS5jb25uZWN0aW9uKSA/IGNhY2hlLmNvbm5lY3Rpb24ubm9kZSA6IHRoaXMuZWwucXVlcnlTZWxlY3RvcigncGF0aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEoY29ubmVjdGlvbiBpbnN0YW5jZW9mIFNWR1BhdGhFbGVtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWEuTGlua1ZpZXc6IHRva2VuIGFuaW1hdGlvbiByZXF1aXJlcyBhIHZhbGlkIGNvbm5lY3Rpb24gcGF0aC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZUb2tlblxuICAgICAgICAgICAgLmFwcGVuZFRvKHRoaXMucGFwZXIuY2VsbHMpXG4gICAgICAgICAgICAuYW5pbWF0ZUFsb25nUGF0aChhbmltYXRpb25BdHRyaWJ1dGVzLCBjb25uZWN0aW9uKTtcblxuICAgICAgICBzZXRUaW1lb3V0KG9uQW5pbWF0aW9uRW5kKHZUb2tlbiwgY2FsbGJhY2spLCBkdXJhdGlvbik7XG4gICAgfSxcblxuICAgIGZpbmRSb3V0ZTogZnVuY3Rpb24odmVydGljZXMpIHtcblxuICAgICAgICB2ZXJ0aWNlcyB8fCAodmVydGljZXMgPSBbXSk7XG5cbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMucGFwZXIub3B0aW9ucy5yb3V0ZXJOYW1lc3BhY2UgfHwgcm91dGVycztcbiAgICAgICAgdmFyIHJvdXRlciA9IHRoaXMubW9kZWwucm91dGVyKCk7XG4gICAgICAgIHZhciBkZWZhdWx0Um91dGVyID0gdGhpcy5wYXBlci5vcHRpb25zLmRlZmF1bHRSb3V0ZXI7XG5cbiAgICAgICAgaWYgKCFyb3V0ZXIpIHtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0Um91dGVyKSByb3V0ZXIgPSBkZWZhdWx0Um91dGVyO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gdmVydGljZXMubWFwKFBvaW50KTsgLy8gbm8gcm91dGVyIHNwZWNpZmllZFxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvdXRlckZuID0gaXNGdW5jdGlvbihyb3V0ZXIpID8gcm91dGVyIDogbmFtZXNwYWNlW3JvdXRlci5uYW1lXTtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKHJvdXRlckZuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWEuTGlua1ZpZXc6IHVua25vd24gcm91dGVyOiBcIicgKyByb3V0ZXIubmFtZSArICdcIi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcmdzID0gcm91dGVyLmFyZ3MgfHwge307XG5cbiAgICAgICAgdmFyIHJvdXRlID0gcm91dGVyRm4uY2FsbChcbiAgICAgICAgICAgIHRoaXMsIC8vIGNvbnRleHRcbiAgICAgICAgICAgIHZlcnRpY2VzLCAvLyB2ZXJ0aWNlc1xuICAgICAgICAgICAgYXJncywgLy8gb3B0aW9uc1xuICAgICAgICAgICAgdGhpcyAvLyBsaW5rVmlld1xuICAgICAgICApO1xuXG4gICAgICAgIGlmICghcm91dGUpIHJldHVybiB2ZXJ0aWNlcy5tYXAoUG9pbnQpO1xuICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiB0aGUgYGRgIGF0dHJpYnV0ZSB2YWx1ZSBvZiB0aGUgYDxwYXRoPmAgZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGxpbmtcbiAgICAvLyBiZXR3ZWVuIGBzb3VyY2VgIGFuZCBgdGFyZ2V0YC5cbiAgICBmaW5kUGF0aDogZnVuY3Rpb24ocm91dGUsIHNvdXJjZVBvaW50LCB0YXJnZXRQb2ludCkge1xuXG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLnBhcGVyLm9wdGlvbnMuY29ubmVjdG9yTmFtZXNwYWNlIHx8IGNvbm5lY3RvcnM7XG4gICAgICAgIHZhciBjb25uZWN0b3IgPSB0aGlzLm1vZGVsLmNvbm5lY3RvcigpO1xuICAgICAgICB2YXIgZGVmYXVsdENvbm5lY3RvciA9IHRoaXMucGFwZXIub3B0aW9ucy5kZWZhdWx0Q29ubmVjdG9yO1xuXG4gICAgICAgIGlmICghY29ubmVjdG9yKSB7XG4gICAgICAgICAgICBjb25uZWN0b3IgPSBkZWZhdWx0Q29ubmVjdG9yIHx8IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbm5lY3RvckZuID0gaXNGdW5jdGlvbihjb25uZWN0b3IpID8gY29ubmVjdG9yIDogbmFtZXNwYWNlW2Nvbm5lY3Rvci5uYW1lXTtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGNvbm5lY3RvckZuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWEuTGlua1ZpZXc6IHVua25vd24gY29ubmVjdG9yOiBcIicgKyBjb25uZWN0b3IubmFtZSArICdcIi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcmdzID0gY2xvbmUoY29ubmVjdG9yLmFyZ3MgfHwge30pO1xuICAgICAgICBhcmdzLnJhdyA9IHRydWU7IC8vIFJlcXVlc3QgcmF3IGcuUGF0aCBhcyB0aGUgcmVzdWx0LlxuXG4gICAgICAgIHZhciBwYXRoID0gY29ubmVjdG9yRm4uY2FsbChcbiAgICAgICAgICAgIHRoaXMsIC8vIGNvbnRleHRcbiAgICAgICAgICAgIHNvdXJjZVBvaW50LCAvLyBzdGFydCBwb2ludFxuICAgICAgICAgICAgdGFyZ2V0UG9pbnQsIC8vIGVuZCBwb2ludFxuICAgICAgICAgICAgcm91dGUsIC8vIHZlcnRpY2VzXG4gICAgICAgICAgICBhcmdzLCAvLyBvcHRpb25zXG4gICAgICAgICAgICB0aGlzIC8vIGxpbmtWaWV3XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIGNvbm5lY3RvcnMgbm90IHN1cHBvcnRpbmcgYHJhd2Agb3B0aW9uLlxuICAgICAgICAgICAgcGF0aCA9IG5ldyBQYXRoKFYubm9ybWFsaXplUGF0aERhdGEocGF0aCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfSxcblxuICAgIC8vIFB1YmxpYyBBUEkuXG4gICAgLy8gLS0tLS0tLS0tLS1cblxuICAgIGdldENvbm5lY3Rpb246IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgICAgICBpZiAoIXBhdGgpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHJldHVybiBwYXRoLmNsb25lKCk7XG4gICAgfSxcblxuICAgIGdldFNlcmlhbGl6ZWRDb25uZWN0aW9uOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgbWV0cmljcyA9IHRoaXMubWV0cmljcztcbiAgICAgICAgaWYgKG1ldHJpY3MuaGFzT3duUHJvcGVydHkoJ2RhdGEnKSkgcmV0dXJuIG1ldHJpY3MuZGF0YTtcbiAgICAgICAgdmFyIGRhdGEgPSBwYXRoLnNlcmlhbGl6ZSgpO1xuICAgICAgICBtZXRyaWNzLmRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG4gICAgZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9uczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIG1ldHJpY3MgPSB0aGlzLm1ldHJpY3M7XG4gICAgICAgIGlmIChtZXRyaWNzLmhhc093blByb3BlcnR5KCdzZWdtZW50U3ViZGl2aXNpb25zJykpIHJldHVybiBtZXRyaWNzLnNlZ21lbnRTdWJkaXZpc2lvbnM7XG4gICAgICAgIHZhciBzdWJkaXZpc2lvbnMgPSBwYXRoLmdldFNlZ21lbnRTdWJkaXZpc2lvbnMoKTtcbiAgICAgICAgbWV0cmljcy5zZWdtZW50U3ViZGl2aXNpb25zID0gc3ViZGl2aXNpb25zO1xuICAgICAgICByZXR1cm4gc3ViZGl2aXNpb25zO1xuICAgIH0sXG5cbiAgICBnZXRDb25uZWN0aW9uTGVuZ3RoOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKCFwYXRoKSByZXR1cm4gMDtcblxuICAgICAgICB2YXIgbWV0cmljcyA9IHRoaXMubWV0cmljcztcbiAgICAgICAgaWYgKG1ldHJpY3MuaGFzT3duUHJvcGVydHkoJ2xlbmd0aCcpKSByZXR1cm4gbWV0cmljcy5sZW5ndGg7XG4gICAgICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aCh7IHNlZ21lbnRTdWJkaXZpc2lvbnM6IHRoaXMuZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucygpIH0pO1xuICAgICAgICBtZXRyaWNzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9LFxuXG4gICAgZ2V0UG9pbnRBdExlbmd0aDogZnVuY3Rpb24obGVuZ3RoKSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHBhdGgucG9pbnRBdExlbmd0aChsZW5ndGgsIHsgc2VnbWVudFN1YmRpdmlzaW9uczogdGhpcy5nZXRDb25uZWN0aW9uU3ViZGl2aXNpb25zKCkgfSk7XG4gICAgfSxcblxuICAgIGdldFBvaW50QXRSYXRpbzogZnVuY3Rpb24ocmF0aW8pIHtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKGlzUGVyY2VudGFnZShyYXRpbykpIHJhdGlvID0gcGFyc2VGbG9hdChyYXRpbykgLyAxMDA7XG4gICAgICAgIHJldHVybiBwYXRoLnBvaW50QXQocmF0aW8sIHsgc2VnbWVudFN1YmRpdmlzaW9uczogdGhpcy5nZXRDb25uZWN0aW9uU3ViZGl2aXNpb25zKCkgfSk7XG4gICAgfSxcblxuICAgIGdldFRhbmdlbnRBdExlbmd0aDogZnVuY3Rpb24obGVuZ3RoKSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHBhdGgudGFuZ2VudEF0TGVuZ3RoKGxlbmd0aCwgeyBzZWdtZW50U3ViZGl2aXNpb25zOiB0aGlzLmdldENvbm5lY3Rpb25TdWJkaXZpc2lvbnMoKSB9KTtcbiAgICB9LFxuXG4gICAgZ2V0VGFuZ2VudEF0UmF0aW86IGZ1bmN0aW9uKHJhdGlvKSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHBhdGgudGFuZ2VudEF0KHJhdGlvLCB7IHNlZ21lbnRTdWJkaXZpc2lvbnM6IHRoaXMuZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucygpIH0pO1xuICAgIH0sXG5cbiAgICBnZXRDbG9zZXN0UG9pbnQ6IGZ1bmN0aW9uKHBvaW50KSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHBhdGguY2xvc2VzdFBvaW50KHBvaW50LCB7IHNlZ21lbnRTdWJkaXZpc2lvbnM6IHRoaXMuZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucygpIH0pO1xuICAgIH0sXG5cbiAgICBnZXRDbG9zZXN0UG9pbnRMZW5ndGg6IGZ1bmN0aW9uKHBvaW50KSB7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHBhdGguY2xvc2VzdFBvaW50TGVuZ3RoKHBvaW50LCB7IHNlZ21lbnRTdWJkaXZpc2lvbnM6IHRoaXMuZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucygpIH0pO1xuICAgIH0sXG5cbiAgICBnZXRDbG9zZXN0UG9pbnRSYXRpbzogZnVuY3Rpb24ocG9pbnQpIHtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcblxuICAgICAgICByZXR1cm4gcGF0aC5jbG9zZXN0UG9pbnROb3JtYWxpemVkTGVuZ3RoKHBvaW50LCB7IHNlZ21lbnRTdWJkaXZpc2lvbnM6IHRoaXMuZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucygpIH0pO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgbGFiZWwgcG9zaXRpb24gb2JqZWN0IGJhc2VkIG9uIHR3byBwcm92aWRlZCBjb29yZGluYXRlcywgeCBhbmQgeS5cbiAgICAvLyAoVXNlZCBiZWhpbmQgdGhlIHNjZW5lcyB3aGVuIHVzZXIgbW92ZXMgbGFiZWxzIGFyb3VuZC4pXG4gICAgLy8gVHdvIHNpZ25hdHVyZXM6XG4gICAgLy8gLSBudW0sIG51bSwgb2JqID0geCwgeSwgb3B0aW9uc1xuICAgIC8vIC0gbnVtLCBudW0sIG51bSwgb2JqID0geCwgeSwgYW5nbGUsIG9wdGlvbnNcbiAgICAvLyBBY2NlcHRzIGRpc3RhbmNlL29mZnNldCBvcHRpb25zID0gYGFic29sdXRlRGlzdGFuY2U6IGJvb2xlYW5gLCBgcmV2ZXJzZURpc3RhbmNlOiBib29sZWFuYCwgYGFic29sdXRlT2Zmc2V0OiBib29sZWFuYFxuICAgIC8vIC0gYGFic29sdXRlT2Zmc2V0YCBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gbW92ZSBiZXlvbmQgY29ubmVjdGlvbiBlbmRwb2ludHNcbiAgICAvLyBBZGRpdGlvbmFsIG9wdGlvbnMgPSBga2VlcEdyYWRpZW50OiBib29sZWFuYCwgYGVuc3VyZUxlZ2liaWxpdHk6IGJvb2xlYW5gXG4gICAgZ2V0TGFiZWxQb3NpdGlvbjogZnVuY3Rpb24oeCwgeSwgcDMsIHA0KSB7XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0ge307XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIGRhdGEgZnJvbSB0aGUgdHdvIHBvc3NpYmxlIHNpZ25hdHVyZXNcbiAgICAgICAgdmFyIGxvY2FsQW5nbGUgPSAwO1xuICAgICAgICB2YXIgbG9jYWxPcHQ7XG4gICAgICAgIGlmICh0eXBlb2YgcDMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBhbmdsZSBhbmQgb3B0IHByb3ZpZGVkIGFzIHRoaXJkIGFuZCBmb3VydGggYXJndW1lbnRcbiAgICAgICAgICAgIGxvY2FsQW5nbGUgPSBwMztcbiAgICAgICAgICAgIGxvY2FsT3B0ID0gcDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBvcHQgcHJvdmlkZWQgYXMgdGhpcmQgYXJndW1lbnRcbiAgICAgICAgICAgIGxvY2FsT3B0ID0gcDM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzYXZlIGxvY2FsT3B0IGFzIGBhcmdzYCBvZiB0aGUgcG9zaXRpb24gb2JqZWN0IHRoYXQgaXMgcGFzc2VkIGFsb25nXG4gICAgICAgIGlmIChsb2NhbE9wdCkgcG9zaXRpb24uYXJncyA9IGxvY2FsT3B0O1xuXG4gICAgICAgIC8vIGlkZW50aWZ5IGRpc3RhbmNlL29mZnNldCBzZXR0aW5nc1xuICAgICAgICB2YXIgaXNEaXN0YW5jZVJlbGF0aXZlID0gIShsb2NhbE9wdCAmJiBsb2NhbE9wdC5hYnNvbHV0ZURpc3RhbmNlKTsgLy8gcmVsYXRpdmUgYnkgZGVmYXVsdFxuICAgICAgICB2YXIgaXNEaXN0YW5jZUFic29sdXRlUmV2ZXJzZSA9IChsb2NhbE9wdCAmJiBsb2NhbE9wdC5hYnNvbHV0ZURpc3RhbmNlICYmIGxvY2FsT3B0LnJldmVyc2VEaXN0YW5jZSk7IC8vIG5vbi1yZXZlcnNlIGJ5IGRlZmF1bHRcbiAgICAgICAgdmFyIGlzT2Zmc2V0QWJzb2x1dGUgPSBsb2NhbE9wdCAmJiBsb2NhbE9wdC5hYnNvbHV0ZU9mZnNldDsgLy8gb2Zmc2V0IGlzIG5vbi1hYnNvbHV0ZSBieSBkZWZhdWx0XG5cbiAgICAgICAgLy8gZmluZCBjbG9zZXN0IHBvaW50IHRcbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIHZhciBwYXRoT3B0ID0geyBzZWdtZW50U3ViZGl2aXNpb25zOiB0aGlzLmdldENvbm5lY3Rpb25TdWJkaXZpc2lvbnMoKSB9O1xuICAgICAgICB2YXIgbGFiZWxQb2ludCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICAgICAgdmFyIHQgPSBwYXRoLmNsb3Nlc3RQb2ludFQobGFiZWxQb2ludCwgcGF0aE9wdCk7XG5cbiAgICAgICAgLy8gRElTVEFOQ0U6XG4gICAgICAgIHZhciBsYWJlbERpc3RhbmNlID0gcGF0aC5sZW5ndGhBdFQodCwgcGF0aE9wdCk7XG4gICAgICAgIGlmIChpc0Rpc3RhbmNlUmVsYXRpdmUpIGxhYmVsRGlzdGFuY2UgPSAobGFiZWxEaXN0YW5jZSAvIHRoaXMuZ2V0Q29ubmVjdGlvbkxlbmd0aCgpKSB8fCAwOyAvLyBmaXggdG8gcHJldmVudCBOYU4gZm9yIDAgbGVuZ3RoXG4gICAgICAgIGlmIChpc0Rpc3RhbmNlQWJzb2x1dGVSZXZlcnNlKSBsYWJlbERpc3RhbmNlID0gKC0xICogKHRoaXMuZ2V0Q29ubmVjdGlvbkxlbmd0aCgpIC0gbGFiZWxEaXN0YW5jZSkpIHx8IDE7IC8vIGZpeCBmb3IgZW5kIHBvaW50ICgtMCA9PiAxKVxuICAgICAgICBwb3NpdGlvbi5kaXN0YW5jZSA9IGxhYmVsRGlzdGFuY2U7XG5cbiAgICAgICAgLy8gT0ZGU0VUOlxuICAgICAgICAvLyB1c2UgYWJzb2x1dGUgb2Zmc2V0IGlmOlxuICAgICAgICAvLyAtIG9wdC5hYnNvbHV0ZU9mZnNldCBpcyB0cnVlLFxuICAgICAgICAvLyAtIG9wdC5hYnNvbHV0ZU9mZnNldCBpcyBub3QgdHJ1ZSBidXQgdGhlcmUgaXMgbm8gdGFuZ2VudFxuICAgICAgICB2YXIgdGFuZ2VudDtcbiAgICAgICAgaWYgKCFpc09mZnNldEFic29sdXRlKSB0YW5nZW50ID0gcGF0aC50YW5nZW50QXRUKHQpO1xuICAgICAgICB2YXIgbGFiZWxPZmZzZXQ7XG4gICAgICAgIGlmICh0YW5nZW50KSB7XG4gICAgICAgICAgICBsYWJlbE9mZnNldCA9IHRhbmdlbnQucG9pbnRPZmZzZXQobGFiZWxQb2ludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VzdFBvaW50ID0gcGF0aC5wb2ludEF0VCh0KTtcbiAgICAgICAgICAgIHZhciBsYWJlbE9mZnNldERpZmYgPSBsYWJlbFBvaW50LmRpZmZlcmVuY2UoY2xvc2VzdFBvaW50KTtcbiAgICAgICAgICAgIGxhYmVsT2Zmc2V0ID0geyB4OiBsYWJlbE9mZnNldERpZmYueCwgeTogbGFiZWxPZmZzZXREaWZmLnkgfTtcbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbi5vZmZzZXQgPSBsYWJlbE9mZnNldDtcblxuICAgICAgICAvLyBBTkdMRTpcbiAgICAgICAgcG9zaXRpb24uYW5nbGUgPSBsb2NhbEFuZ2xlO1xuXG4gICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9LFxuXG4gICAgX2dldExhYmVsVHJhbnNmb3JtYXRpb25NYXRyaXg6IGZ1bmN0aW9uKGxhYmVsUG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgbGFiZWxEaXN0YW5jZTtcbiAgICAgICAgdmFyIGxhYmVsQW5nbGUgPSAwO1xuICAgICAgICB2YXIgYXJncyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIGxhYmVsUG9zaXRpb24gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBsYWJlbERpc3RhbmNlID0gbGFiZWxQb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGFiZWxQb3NpdGlvbi5kaXN0YW5jZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBsYWJlbFBvc2l0aW9uLmFyZ3MgfHwge307XG4gICAgICAgICAgICBsYWJlbERpc3RhbmNlID0gbGFiZWxQb3NpdGlvbi5kaXN0YW5jZTtcbiAgICAgICAgICAgIGxhYmVsQW5nbGUgPSBsYWJlbFBvc2l0aW9uLmFuZ2xlIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpYS5MaW5rVmlldzogaW52YWxpZCBsYWJlbCBwb3NpdGlvbiBkaXN0YW5jZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc0Rpc3RhbmNlUmVsYXRpdmUgPSAoKGxhYmVsRGlzdGFuY2UgPiAwKSAmJiAobGFiZWxEaXN0YW5jZSA8PSAxKSk7XG5cbiAgICAgICAgdmFyIGxhYmVsT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGxhYmVsT2Zmc2V0Q29vcmRpbmF0ZXMgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgaWYgKGxhYmVsUG9zaXRpb24ub2Zmc2V0KSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb25PZmZzZXQgPSBsYWJlbFBvc2l0aW9uLm9mZnNldDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcG9zaXRpb25PZmZzZXQgPT09ICdudW1iZXInKSBsYWJlbE9mZnNldCA9IHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uT2Zmc2V0LngpIGxhYmVsT2Zmc2V0Q29vcmRpbmF0ZXMueCA9IHBvc2l0aW9uT2Zmc2V0Lng7XG4gICAgICAgICAgICBpZiAocG9zaXRpb25PZmZzZXQueSkgbGFiZWxPZmZzZXRDb29yZGluYXRlcy55ID0gcG9zaXRpb25PZmZzZXQueTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc09mZnNldEFic29sdXRlID0gKChsYWJlbE9mZnNldENvb3JkaW5hdGVzLnggIT09IDApIHx8IChsYWJlbE9mZnNldENvb3JkaW5hdGVzLnkgIT09IDApIHx8IGxhYmVsT2Zmc2V0ID09PSAwKTtcblxuICAgICAgICB2YXIgaXNLZWVwR3JhZGllbnQgPSBhcmdzLmtlZXBHcmFkaWVudDtcbiAgICAgICAgdmFyIGlzRW5zdXJlTGVnaWJpbGl0eSA9IGFyZ3MuZW5zdXJlTGVnaWJpbGl0eTtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgdmFyIHBhdGhPcHQgPSB7IHNlZ21lbnRTdWJkaXZpc2lvbnM6IHRoaXMuZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucygpIH07XG5cbiAgICAgICAgdmFyIGRpc3RhbmNlID0gaXNEaXN0YW5jZVJlbGF0aXZlID8gKGxhYmVsRGlzdGFuY2UgKiB0aGlzLmdldENvbm5lY3Rpb25MZW5ndGgoKSkgOiBsYWJlbERpc3RhbmNlO1xuICAgICAgICB2YXIgdGFuZ2VudCA9IHBhdGgudGFuZ2VudEF0TGVuZ3RoKGRpc3RhbmNlLCBwYXRoT3B0KTtcblxuICAgICAgICB2YXIgdHJhbnNsYXRpb247XG4gICAgICAgIHZhciBhbmdsZSA9IGxhYmVsQW5nbGU7XG4gICAgICAgIGlmICh0YW5nZW50KSB7XG4gICAgICAgICAgICBpZiAoaXNPZmZzZXRBYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gdGFuZ2VudC5zdGFydC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLm9mZnNldChsYWJlbE9mZnNldENvb3JkaW5hdGVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbCA9IHRhbmdlbnQuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICBub3JtYWwucm90YXRlKHRhbmdlbnQuc3RhcnQsIC05MCk7XG4gICAgICAgICAgICAgICAgbm9ybWFsLnNldExlbmd0aChsYWJlbE9mZnNldCk7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBub3JtYWwuZW5kO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNLZWVwR3JhZGllbnQpIHtcbiAgICAgICAgICAgICAgICBhbmdsZSA9ICh0YW5nZW50LmFuZ2xlKCkgKyBsYWJlbEFuZ2xlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFbnN1cmVMZWdpYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlID0gbm9ybWFsaXplQW5nbGUoKChhbmdsZSArIDkwKSAlIDE4MCkgLSA5MCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmYWxsYmFjayAtIHRoZSBjb25uZWN0aW9uIGhhcyB6ZXJvIGxlbmd0aFxuICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBwYXRoLnN0YXJ0LmNsb25lKCk7XG4gICAgICAgICAgICBpZiAoaXNPZmZzZXRBYnNvbHV0ZSkgdHJhbnNsYXRpb24ub2Zmc2V0KGxhYmVsT2Zmc2V0Q29vcmRpbmF0ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFYuY3JlYXRlU1ZHTWF0cml4KClcbiAgICAgICAgICAgIC50cmFuc2xhdGUodHJhbnNsYXRpb24ueCwgdHJhbnNsYXRpb24ueSlcbiAgICAgICAgICAgIC5yb3RhdGUoYW5nbGUpO1xuICAgIH0sXG5cbiAgICBnZXRMYWJlbENvb3JkaW5hdGVzOiBmdW5jdGlvbihsYWJlbFBvc2l0aW9uKSB7XG5cbiAgICAgICAgdmFyIHRyYW5zZm9ybWF0aW9uTWF0cml4ID0gdGhpcy5fZ2V0TGFiZWxUcmFuc2Zvcm1hdGlvbk1hdHJpeChsYWJlbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0cmFuc2Zvcm1hdGlvbk1hdHJpeC5lLCB0cmFuc2Zvcm1hdGlvbk1hdHJpeC5mKTtcbiAgICB9LFxuXG4gICAgZ2V0VmVydGV4SW5kZXg6IGZ1bmN0aW9uKHgsIHkpIHtcblxuICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsO1xuICAgICAgICB2YXIgdmVydGljZXMgPSBtb2RlbC52ZXJ0aWNlcygpO1xuXG4gICAgICAgIHZhciB2ZXJ0ZXhMZW5ndGggPSB0aGlzLmdldENsb3Nlc3RQb2ludExlbmd0aChuZXcgUG9pbnQoeCwgeSkpO1xuXG4gICAgICAgIHZhciBpZHggPSAwO1xuICAgICAgICBmb3IgKHZhciBuID0gdmVydGljZXMubGVuZ3RoOyBpZHggPCBuOyBpZHgrKykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWZXJ0ZXggPSB2ZXJ0aWNlc1tpZHhdO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWZXJ0ZXhMZW5ndGggPSB0aGlzLmdldENsb3Nlc3RQb2ludExlbmd0aChjdXJyZW50VmVydGV4KTtcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXhMZW5ndGggPCBjdXJyZW50VmVydGV4TGVuZ3RoKSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfSxcblxuICAgIC8vIEludGVyYWN0aW9uLiBUaGUgY29udHJvbGxlciBwYXJ0LlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbm90aWZ5UG9pbnRlcmRvd24oZXZ0LCB4LCB5KSB7XG4gICAgICAgIENlbGxWaWV3LnByb3RvdHlwZS5wb2ludGVyZG93bi5jYWxsKHRoaXMsIGV2dCwgeCwgeSk7XG4gICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOnBvaW50ZXJkb3duJywgZXZ0LCB4LCB5KTtcbiAgICB9LFxuXG4gICAgbm90aWZ5UG9pbnRlcm1vdmUoZXZ0LCB4LCB5KSB7XG4gICAgICAgIENlbGxWaWV3LnByb3RvdHlwZS5wb2ludGVybW92ZS5jYWxsKHRoaXMsIGV2dCwgeCwgeSk7XG4gICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOnBvaW50ZXJtb3ZlJywgZXZ0LCB4LCB5KTtcbiAgICB9LFxuXG4gICAgbm90aWZ5UG9pbnRlcnVwKGV2dCwgeCwgeSkge1xuICAgICAgICB0aGlzLm5vdGlmeSgnbGluazpwb2ludGVydXAnLCBldnQsIHgsIHkpO1xuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUucG9pbnRlcnVwLmNhbGwodGhpcywgZXZ0LCB4LCB5KTtcbiAgICB9LFxuXG4gICAgcG9pbnRlcmRibGNsaWNrOiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUucG9pbnRlcmRibGNsaWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOnBvaW50ZXJkYmxjbGljaycsIGV2dCwgeCwgeSk7XG4gICAgfSxcblxuICAgIHBvaW50ZXJjbGljazogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgQ2VsbFZpZXcucHJvdG90eXBlLnBvaW50ZXJjbGljay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5vdGlmeSgnbGluazpwb2ludGVyY2xpY2snLCBldnQsIHgsIHkpO1xuICAgIH0sXG5cbiAgICBjb250ZXh0bWVudTogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgQ2VsbFZpZXcucHJvdG90eXBlLmNvbnRleHRtZW51LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOmNvbnRleHRtZW51JywgZXZ0LCB4LCB5KTtcbiAgICB9LFxuXG4gICAgcG9pbnRlcmRvd246IGZ1bmN0aW9uKGV2dCwgeCwgeSkge1xuXG4gICAgICAgIHRoaXMubm90aWZ5UG9pbnRlcmRvd24oZXZ0LCB4LCB5KTtcblxuICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgdGhlIGRlZmF1bHQgbWFya3VwXG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgc3dpdGNoIChjbGFzc05hbWUpIHtcblxuICAgICAgICAgICAgY2FzZSAnbWFya2VyLXZlcnRleCc6XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnVmVydGV4U3RhcnQoZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGNhc2UgJ21hcmtlci12ZXJ0ZXgtcmVtb3ZlJzpcbiAgICAgICAgICAgIGNhc2UgJ21hcmtlci12ZXJ0ZXgtcmVtb3ZlLWFyZWEnOlxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1ZlcnRleFJlbW92ZVN0YXJ0KGV2dCwgeCwgeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICBjYXNlICdtYXJrZXItYXJyb3doZWFkJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdBcnJvd2hlYWRTdGFydChldnQsIHgsIHkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY2FzZSAnY29ubmVjdGlvbic6XG4gICAgICAgICAgICBjYXNlICdjb25uZWN0aW9uLXdyYXAnOlxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0Nvbm5lY3Rpb25TdGFydChldnQsIHgsIHkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY2FzZSAnbWFya2VyLXNvdXJjZSc6XG4gICAgICAgICAgICBjYXNlICdtYXJrZXItdGFyZ2V0JzpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRyYWdTdGFydChldnQsIHgsIHkpO1xuICAgIH0sXG5cbiAgICBwb2ludGVybW92ZTogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgdmFyIGRyYWdEYXRhID0gdGhpcy5fZHJhZ0RhdGE7XG4gICAgICAgIGlmIChkcmFnRGF0YSkgdGhpcy5ldmVudERhdGEoZXZ0LCBkcmFnRGF0YSk7XG5cbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmV2ZW50RGF0YShldnQpO1xuICAgICAgICBzd2l0Y2ggKGRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ZlcnRleC1tb3ZlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdWZXJ0ZXgoZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbGFiZWwtbW92ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnTGFiZWwoZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYXJyb3doZWFkLW1vdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0Fycm93aGVhZChldnQsIHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWcoZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICAgIGlmIChkcmFnRGF0YSkgYXNzaWduKGRyYWdEYXRhLCB0aGlzLmV2ZW50RGF0YShldnQpKTtcblxuICAgICAgICB0aGlzLm5vdGlmeVBvaW50ZXJtb3ZlKGV2dCwgeCwgeSk7XG4gICAgfSxcblxuICAgIHBvaW50ZXJ1cDogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgdmFyIGRyYWdEYXRhID0gdGhpcy5fZHJhZ0RhdGE7XG4gICAgICAgIGlmIChkcmFnRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudERhdGEoZXZ0LCBkcmFnRGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9kcmFnRGF0YSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZXZlbnREYXRhKGV2dCk7XG4gICAgICAgIHN3aXRjaCAoZGF0YS5hY3Rpb24pIHtcblxuICAgICAgICAgICAgY2FzZSAndmVydGV4LW1vdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1ZlcnRleEVuZChldnQsIHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdsYWJlbC1tb3ZlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdMYWJlbEVuZChldnQsIHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdhcnJvd2hlYWQtbW92ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnQXJyb3doZWFkRW5kKGV2dCwgeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0VuZChldnQsIHgsIHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ub3RpZnlQb2ludGVydXAoZXZ0LCB4LCB5KTtcbiAgICAgICAgdGhpcy5jaGVja01vdXNlbGVhdmUoZXZ0KTtcbiAgICB9LFxuXG4gICAgbW91c2VvdmVyOiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUubW91c2VvdmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOm1vdXNlb3ZlcicsIGV2dCk7XG4gICAgfSxcblxuICAgIG1vdXNlb3V0OiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUubW91c2VvdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoJ2xpbms6bW91c2VvdXQnLCBldnQpO1xuICAgIH0sXG5cbiAgICBtb3VzZWVudGVyOiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUubW91c2VlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5vdGlmeSgnbGluazptb3VzZWVudGVyJywgZXZ0KTtcbiAgICB9LFxuXG4gICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oZXZ0KSB7XG5cbiAgICAgICAgQ2VsbFZpZXcucHJvdG90eXBlLm1vdXNlbGVhdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoJ2xpbms6bW91c2VsZWF2ZScsIGV2dCk7XG4gICAgfSxcblxuICAgIG1vdXNld2hlZWw6IGZ1bmN0aW9uKGV2dCwgeCwgeSwgZGVsdGEpIHtcblxuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUubW91c2V3aGVlbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5vdGlmeSgnbGluazptb3VzZXdoZWVsJywgZXZ0LCB4LCB5LCBkZWx0YSk7XG4gICAgfSxcblxuICAgIG9uZXZlbnQ6IGZ1bmN0aW9uKGV2dCwgZXZlbnROYW1lLCB4LCB5KSB7XG5cbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgdmFyIGxpbmtUb29sID0gVihldnQudGFyZ2V0KS5maW5kUGFyZW50QnlDbGFzcygnbGluay10b29sJywgdGhpcy5lbCk7XG4gICAgICAgIGlmIChsaW5rVG9vbCkge1xuICAgICAgICAgICAgLy8gTm8gZnVydGhlciBhY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gQWxsb3cgYGludGVyYWN0aXZlLnVzZUxpbmtUb29scz1mYWxzZWBcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbigndXNlTGlua1Rvb2xzJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAncmVtb3ZlJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBCdWlsdC1pbiByZW1vdmUgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5yZW1vdmUoeyB1aTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHRyaWdnZXIgbGluayBwb2ludGVyZG93blxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBsaW5rOm9wdGlvbnMgYW5kIG90aGVyIGN1c3RvbSBldmVudHMgaW5zaWRlIHRoZSBsaW5rIHRvb2xzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KGV2ZW50TmFtZSwgZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubm90aWZ5UG9pbnRlcmRvd24oZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgIHRoaXMucGFwZXIuZGVsZWdhdGVEcmFnRXZlbnRzKHRoaXMsIGV2dC5kYXRhKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQ2VsbFZpZXcucHJvdG90eXBlLm9uZXZlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbmxhYmVsOiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICB0aGlzLm5vdGlmeVBvaW50ZXJkb3duKGV2dCwgeCwgeSk7XG5cbiAgICAgICAgdGhpcy5kcmFnTGFiZWxTdGFydChldnQsIHgsIHkpO1xuXG4gICAgICAgIHZhciBzdG9wUHJvcGFnYXRpb24gPSB0aGlzLmV2ZW50RGF0YShldnQpLnN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbikgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0sXG5cbiAgICAvLyBEcmFnIFN0YXJ0IEhhbmRsZXJzXG5cbiAgICBkcmFnQ29ubmVjdGlvblN0YXJ0OiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICBpZiAoIXRoaXMuY2FuKCd2ZXJ0ZXhBZGQnKSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgbmV3IHZlcnRleCBoYXMganVzdCBiZWVuIHBsYWNlZC5cbiAgICAgICAgLy8gV2UnbGwgYmUgdXBkYXRlIHRoZSB2ZXJ5IHNhbWUgdmVydGV4IHBvc2l0aW9uIGluIGBwb2ludGVybW92ZSgpYC5cbiAgICAgICAgdmFyIHZlcnRleElkeCA9IHRoaXMuYWRkVmVydGV4KHsgeDogeCwgeTogeSB9LCB7IHVpOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmV2ZW50RGF0YShldnQsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3ZlcnRleC1tb3ZlJyxcbiAgICAgICAgICAgIHZlcnRleElkeDogdmVydGV4SWR4XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBkcmFnTGFiZWxTdGFydDogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FuKCdsYWJlbE1vdmUnKSkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0RlZmF1bHRJbnRlcmFjdGlvblByZXZlbnRlZChldnQpKSByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBsYWJlbE5vZGUgPSBldnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIHZhciBsYWJlbElkeCA9IHBhcnNlSW50KGxhYmVsTm9kZS5nZXRBdHRyaWJ1dGUoJ2xhYmVsLWlkeCcpLCAxMCk7XG5cbiAgICAgICAgICAgIHZhciBkZWZhdWx0TGFiZWxQb3NpdGlvbiA9IHRoaXMuX2dldERlZmF1bHRMYWJlbFBvc2l0aW9uUHJvcGVydHkoKTtcbiAgICAgICAgICAgIHZhciBpbml0aWFsTGFiZWxQb3NpdGlvbiA9IHRoaXMuX25vcm1hbGl6ZUxhYmVsUG9zaXRpb24odGhpcy5fZ2V0TGFiZWxQb3NpdGlvblByb3BlcnR5KGxhYmVsSWR4KSk7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9tZXJnZUxhYmVsUG9zaXRpb25Qcm9wZXJ0eShpbml0aWFsTGFiZWxQb3NpdGlvbiwgZGVmYXVsdExhYmVsUG9zaXRpb24pO1xuXG4gICAgICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5nZXRMYWJlbENvb3JkaW5hdGVzKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIHZhciBkeCA9IGNvb3Jkcy54IC0geDsgLy8gaG93IG11Y2ggbmVlZHMgdG8gYmUgYWRkZWQgdG8gY3Vyc29yIHggdG8gZ2V0IHRvIGxhYmVsIHhcbiAgICAgICAgICAgIHZhciBkeSA9IGNvb3Jkcy55IC0geTsgLy8gaG93IG11Y2ggbmVlZHMgdG8gYmUgYWRkZWQgdG8gY3Vyc29yIHkgdG8gZ2V0IHRvIGxhYmVsIHlcblxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQW5nbGUgPSB0aGlzLl9nZXRMYWJlbFBvc2l0aW9uQW5nbGUobGFiZWxJZHgpO1xuICAgICAgICAgICAgdmFyIGxhYmVsUG9zaXRpb25BcmdzID0gdGhpcy5fZ2V0TGFiZWxQb3NpdGlvbkFyZ3MobGFiZWxJZHgpO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRMYWJlbFBvc2l0aW9uQXJncyA9IHRoaXMuX2dldERlZmF1bHRMYWJlbFBvc2l0aW9uQXJncygpO1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQXJncyA9IHRoaXMuX21lcmdlTGFiZWxQb3NpdGlvbkFyZ3MobGFiZWxQb3NpdGlvbkFyZ3MsIGRlZmF1bHRMYWJlbFBvc2l0aW9uQXJncyk7XG5cbiAgICAgICAgICAgIHRoaXMuZXZlbnREYXRhKGV2dCwge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ2xhYmVsLW1vdmUnLFxuICAgICAgICAgICAgICAgIGxhYmVsSWR4OiBsYWJlbElkeCxcbiAgICAgICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICAgICAgZHk6IGR5LFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQW5nbGU6IHBvc2l0aW9uQW5nbGUsXG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcmdzOiBwb3NpdGlvbkFyZ3MsXG4gICAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eTpcbiAgICAgICAgICAgIC8vIElmIGxhYmVscyBjYW4ndCBiZSBkcmFnZ2VkIG5vIGRlZmF1bHQgYWN0aW9uIGlzIHRyaWdnZXJlZC5cbiAgICAgICAgICAgIHRoaXMuZXZlbnREYXRhKGV2dCwgeyBzdG9wUHJvcGFnYXRpb246IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhcGVyLmRlbGVnYXRlRHJhZ0V2ZW50cyh0aGlzLCBldnQuZGF0YSk7XG4gICAgfSxcblxuICAgIGRyYWdWZXJ0ZXhTdGFydDogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNhbigndmVydGV4TW92ZScpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHZlcnRleE5vZGUgPSBldnQudGFyZ2V0O1xuICAgICAgICB2YXIgdmVydGV4SWR4ID0gcGFyc2VJbnQodmVydGV4Tm9kZS5nZXRBdHRyaWJ1dGUoJ2lkeCcpLCAxMCk7XG4gICAgICAgIHRoaXMuZXZlbnREYXRhKGV2dCwge1xuICAgICAgICAgICAgYWN0aW9uOiAndmVydGV4LW1vdmUnLFxuICAgICAgICAgICAgdmVydGV4SWR4OiB2ZXJ0ZXhJZHhcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGRyYWdWZXJ0ZXhSZW1vdmVTdGFydDogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNhbigndmVydGV4UmVtb3ZlJykpIHJldHVybjtcblxuICAgICAgICB2YXIgcmVtb3ZlTm9kZSA9IGV2dC50YXJnZXQ7XG4gICAgICAgIHZhciB2ZXJ0ZXhJZHggPSBwYXJzZUludChyZW1vdmVOb2RlLmdldEF0dHJpYnV0ZSgnaWR4JyksIDEwKTtcbiAgICAgICAgdGhpcy5tb2RlbC5yZW1vdmVWZXJ0ZXgodmVydGV4SWR4KTtcbiAgICB9LFxuXG4gICAgZHJhZ0Fycm93aGVhZFN0YXJ0OiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICBpZiAoIXRoaXMuY2FuKCdhcnJvd2hlYWRNb3ZlJykpIHJldHVybjtcblxuICAgICAgICB2YXIgYXJyb3doZWFkTm9kZSA9IGV2dC50YXJnZXQ7XG4gICAgICAgIHZhciBhcnJvd2hlYWRUeXBlID0gYXJyb3doZWFkTm9kZS5nZXRBdHRyaWJ1dGUoJ2VuZCcpO1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuc3RhcnRBcnJvd2hlYWRNb3ZlKGFycm93aGVhZFR5cGUsIHsgaWdub3JlQmFja3dhcmRzQ29tcGF0aWJpbGl0eTogdHJ1ZSB9KTtcblxuICAgICAgICB0aGlzLmV2ZW50RGF0YShldnQsIGRhdGEpO1xuICAgIH0sXG5cbiAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uKGV2dCwgeCwgeSkge1xuXG4gICAgICAgIGlmICh0aGlzLmlzRGVmYXVsdEludGVyYWN0aW9uUHJldmVudGVkKGV2dCkpIHJldHVybjtcblxuICAgICAgICBpZiAoIXRoaXMuY2FuKCdsaW5rTW92ZScpKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5ldmVudERhdGEoZXZ0LCB7XG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJyxcbiAgICAgICAgICAgIGR4OiB4LFxuICAgICAgICAgICAgZHk6IHlcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIERyYWcgSGFuZGxlcnNcbiAgICBkcmFnTGFiZWw6IGZ1bmN0aW9uKGV2dCwgeCwgeSkge1xuXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5ldmVudERhdGEoZXZ0KTtcbiAgICAgICAgdmFyIGxhYmVsID0geyBwb3NpdGlvbjogdGhpcy5nZXRMYWJlbFBvc2l0aW9uKCh4ICsgZGF0YS5keCksICh5ICsgZGF0YS5keSksIGRhdGEucG9zaXRpb25BbmdsZSwgZGF0YS5wb3NpdGlvbkFyZ3MpIH07XG4gICAgICAgIGlmICh0aGlzLnBhcGVyLm9wdGlvbnMuc25hcExhYmVscykgZGVsZXRlIGxhYmVsLnBvc2l0aW9uLm9mZnNldDtcbiAgICAgICAgLy8gVGhlIGB0b3VjaG1vdmUnIGV2ZW50cyBhcmUgbm90IGZpcmVkXG4gICAgICAgIC8vIHdoZW4gdGhlIG9yaWdpbmFsIGV2ZW50IHRhcmdldCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAgLy8gVGhlIGxhYmVscyBhcmUgY3VycmVudGx5IHJlLXJlbmRlcmVkIGNvbXBsZXRlbHkgd2hlbiBvbmx5XG4gICAgICAgIC8vIHRoZSBwb3NpdGlvbiBjaGFuZ2VzLiBUaGlzIGlzIHdoeSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0XG4gICAgICAgIC8vIHRoZSBsYWJlbCBpcyB1cGRhdGVkIHN5bmNocm9ub3VzbHkuXG4gICAgICAgIC8vIFRPRE86IHJlcGxhY2UgYHRvdWNobW92ZWAgd2l0aCBgcG9pbnRlcm1vdmVgIChicmVha2luZyBjaGFuZ2UpLlxuICAgICAgICBjb25zdCBzZXRPcHRpb25zID0geyB1aTogdHJ1ZSB9O1xuICAgICAgICBpZiAodGhpcy5wYXBlci5pc0FzeW5jKCkgJiYgZXZ0LnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgICAgICBzZXRPcHRpb25zLmFzeW5jID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlbC5sYWJlbChkYXRhLmxhYmVsSWR4LCBsYWJlbCwgc2V0T3B0aW9ucyk7XG4gICAgfSxcblxuICAgIGRyYWdWZXJ0ZXg6IGZ1bmN0aW9uKGV2dCwgeCwgeSkge1xuXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5ldmVudERhdGEoZXZ0KTtcbiAgICAgICAgdGhpcy5tb2RlbC52ZXJ0ZXgoZGF0YS52ZXJ0ZXhJZHgsIHsgeDogeCwgeTogeSB9LCB7IHVpOiB0cnVlIH0pO1xuICAgIH0sXG5cbiAgICBkcmFnQXJyb3doZWFkOiBmdW5jdGlvbihldnQsIHgsIHkpIHtcbiAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy5zbmFwTGlua3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU25hcHBlZCA9IHRoaXMuX3NuYXBBcnJvd2hlYWQoZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgIGlmICghaXNTbmFwcGVkICYmIHRoaXMucGFwZXIub3B0aW9ucy5zbmFwTGlua3NTZWxmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc25hcEFycm93aGVhZFNlbGYoZXZ0LCB4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcGVyLm9wdGlvbnMuc25hcExpbmtzU2VsZikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NuYXBBcnJvd2hlYWRTZWxmKGV2dCwgeCwgeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RBcnJvd2hlYWQodGhpcy5nZXRFdmVudFRhcmdldChldnQpLCB4LCB5LCB0aGlzLmV2ZW50RGF0YShldnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkcmFnOiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZXZlbnREYXRhKGV2dCk7XG4gICAgICAgIHRoaXMubW9kZWwudHJhbnNsYXRlKHggLSBkYXRhLmR4LCB5IC0gZGF0YS5keSwgeyB1aTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5ldmVudERhdGEoZXZ0LCB7XG4gICAgICAgICAgICBkeDogeCxcbiAgICAgICAgICAgIGR5OiB5XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBEcmFnIEVuZCBIYW5kbGVyc1xuXG4gICAgZHJhZ0xhYmVsRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH0sXG5cbiAgICBkcmFnVmVydGV4RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH0sXG5cbiAgICBkcmFnQXJyb3doZWFkRW5kOiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZXZlbnREYXRhKGV2dCk7XG4gICAgICAgIHZhciBwYXBlciA9IHRoaXMucGFwZXI7XG5cbiAgICAgICAgaWYgKHBhcGVyLm9wdGlvbnMuc25hcExpbmtzKSB7XG4gICAgICAgICAgICB0aGlzLl9zbmFwQXJyb3doZWFkRW5kKGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdEFycm93aGVhZEVuZChkYXRhLCB4LCB5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGFwZXIubGlua0FsbG93ZWQodGhpcykpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFuZ2VkIGxpbmsgaXMgbm90IGFsbG93ZWQsIHJldmVydCB0byBpdHMgcHJldmlvdXMgc3RhdGUuXG4gICAgICAgICAgICB0aGlzLl9kaXNhbGxvdyhkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaEVtYmVkZGluZyhkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeUNvbm5lY3RFdmVudChkYXRhLCBldnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWZ0ZXJBcnJvd2hlYWRNb3ZlKGRhdGEpO1xuICAgIH0sXG5cbiAgICBkcmFnRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH0sXG5cbiAgICBfZGlzYWxsb3c6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEud2hlbk5vdEFsbG93ZWQpIHtcblxuICAgICAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnJlbW92ZSh7IHVpOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyZXZlcnQnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldChkYXRhLmFycm93aGVhZCwgZGF0YS5pbml0aWFsRW5kLCB7IHVpOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9maW5pc2hFbWJlZGRpbmc6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAvLyBSZXBhcmVudCB0aGUgbGluayBpZiBlbWJlZGRpbmcgaXMgZW5hYmxlZFxuICAgICAgICBpZiAodGhpcy5wYXBlci5vcHRpb25zLmVtYmVkZGluZ01vZGUgJiYgdGhpcy5tb2RlbC5yZXBhcmVudCgpKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgcmV2ZXJzZSB0byB0aGUgb3JpZ2luYWwgJ3onIGluZGV4IChzZWUgYWZ0ZXJBcnJvd2hlYWRNb3ZlKCkpLlxuICAgICAgICAgICAgZGF0YS56ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfbm90aWZ5Q29ubmVjdEV2ZW50OiBmdW5jdGlvbihkYXRhLCBldnQpIHtcblxuICAgICAgICB2YXIgYXJyb3doZWFkID0gZGF0YS5hcnJvd2hlYWQ7XG4gICAgICAgIHZhciBpbml0aWFsRW5kID0gZGF0YS5pbml0aWFsRW5kO1xuICAgICAgICB2YXIgY3VycmVudEVuZCA9IHRoaXMubW9kZWwucHJvcChhcnJvd2hlYWQpO1xuICAgICAgICB2YXIgZW5kQ2hhbmdlZCA9IGN1cnJlbnRFbmQgJiYgIUxpbmsuZW5kc0VxdWFsKGluaXRpYWxFbmQsIGN1cnJlbnRFbmQpO1xuICAgICAgICBpZiAoZW5kQ2hhbmdlZCkge1xuICAgICAgICAgICAgdmFyIHBhcGVyID0gdGhpcy5wYXBlcjtcbiAgICAgICAgICAgIGlmIChpbml0aWFsRW5kLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ2xpbms6ZGlzY29ubmVjdCcsIGV2dCwgcGFwZXIuZmluZFZpZXdCeU1vZGVsKGluaXRpYWxFbmQuaWQpLCBkYXRhLmluaXRpYWxNYWduZXQsIGFycm93aGVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudEVuZC5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOmNvbm5lY3QnLCBldnQsIHBhcGVyLmZpbmRWaWV3QnlNb2RlbChjdXJyZW50RW5kLmlkKSwgZGF0YS5tYWduZXRVbmRlclBvaW50ZXIsIGFycm93aGVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3NuYXBUb1BvaW50czogZnVuY3Rpb24oc25hcFBvaW50LCBwb2ludHMsIHJhZGl1cykge1xuICAgICAgICBsZXQgY2xvc2VzdFBvaW50WCA9IG51bGw7XG4gICAgICAgIGxldCBjbG9zZXN0RGlzdGFuY2VYID0gSW5maW5pdHk7XG5cbiAgICAgICAgbGV0IGNsb3Nlc3RQb2ludFkgPSBudWxsO1xuICAgICAgICBsZXQgY2xvc2VzdERpc3RhbmNlWSA9IEluZmluaXR5O1xuXG4gICAgICAgIGxldCB4ID0gc25hcFBvaW50Lng7XG4gICAgICAgIGxldCB5ID0gc25hcFBvaW50Lnk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RYID0gTWF0aC5hYnMocG9pbnRzW2ldLnggLSBzbmFwUG9pbnQueCk7XG4gICAgICAgICAgICBpZiAoZGlzdFggPCBjbG9zZXN0RGlzdGFuY2VYKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VzdERpc3RhbmNlWCA9IGRpc3RYO1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RQb2ludFggPSBwb2ludHNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3RZID0gTWF0aC5hYnMocG9pbnRzW2ldLnkgLSBzbmFwUG9pbnQueSk7XG4gICAgICAgICAgICBpZiAoZGlzdFkgPCBjbG9zZXN0RGlzdGFuY2VZKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VzdERpc3RhbmNlWSA9IGRpc3RZO1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RQb2ludFkgPSBwb2ludHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xvc2VzdERpc3RhbmNlWCA8IHJhZGl1cykge1xuICAgICAgICAgICAgeCA9IGNsb3Nlc3RQb2ludFgueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xvc2VzdERpc3RhbmNlWSA8IHJhZGl1cykge1xuICAgICAgICAgICAgeSA9IGNsb3Nlc3RQb2ludFkueTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICB9LFxuXG4gICAgX3NuYXBBcnJvd2hlYWRTZWxmOiBmdW5jdGlvbihldnQsIHgsIHkpIHtcblxuICAgICAgICBjb25zdCB7IHBhcGVyLCBtb2RlbCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzbmFwTGlua3NTZWxmIH0gPSBwYXBlci5vcHRpb25zO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5ldmVudERhdGEoZXZ0KTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gc25hcExpbmtzU2VsZi5yYWRpdXMgfHwgMjA7XG5cbiAgICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5nZXRFbmRBbmNob3IoZGF0YS5hcnJvd2hlYWQgPT09ICdzb3VyY2UnID8gJ3RhcmdldCcgOiAnc291cmNlJyk7XG4gICAgICAgIGNvbnN0IHZlcnRpY2VzID0gbW9kZWwudmVydGljZXMoKTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gW2FuY2hvciwgLi4udmVydGljZXNdO1xuXG4gICAgICAgIGNvbnN0IHNuYXBQb2ludCA9IHRoaXMuX3NuYXBUb1BvaW50cyh7IHg6IHgsIHk6IHkgfSwgcG9pbnRzLCByYWRpdXMpO1xuXG4gICAgICAgIGNvbnN0IHBvaW50ID0gcGFwZXIubG9jYWxUb0NsaWVudFBvaW50KHNuYXBQb2ludCk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RBcnJvd2hlYWQoZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChwb2ludC54LCBwb2ludC55KSwgc25hcFBvaW50LngsIHNuYXBQb2ludC55LCB0aGlzLmV2ZW50RGF0YShldnQpKTtcbiAgICB9LFxuXG4gICAgX3NuYXBBcnJvd2hlYWQ6IGZ1bmN0aW9uKGV2dCwgeCwgeSkge1xuXG4gICAgICAgIGNvbnN0IHsgcGFwZXIgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgc25hcExpbmtzLCBjb25uZWN0aW9uU3RyYXRlZ3kgfSA9IHBhcGVyLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmV2ZW50RGF0YShldnQpO1xuICAgICAgICBsZXQgaXNTbmFwcGVkID0gZmFsc2U7XG4gICAgICAgIC8vIGNoZWNraW5nIHZpZXcgaW4gY2xvc2UgYXJlYSBvZiB0aGUgcG9pbnRlclxuXG4gICAgICAgIHZhciByID0gc25hcExpbmtzLnJhZGl1cyB8fCA1MDtcbiAgICAgICAgdmFyIHZpZXdzSW5BcmVhID0gcGFwZXIuZmluZFZpZXdzSW5BcmVhKHsgeDogeCAtIHIsIHk6IHkgLSByLCB3aWR0aDogMiAqIHIsIGhlaWdodDogMiAqIHIgfSk7XG5cbiAgICAgICAgdmFyIHByZXZDbG9zZXN0VmlldyA9IGRhdGEuY2xvc2VzdFZpZXcgfHwgbnVsbDtcbiAgICAgICAgdmFyIHByZXZDbG9zZXN0TWFnbmV0ID0gZGF0YS5jbG9zZXN0TWFnbmV0IHx8IG51bGw7XG4gICAgICAgIHZhciBwcmV2TWFnbmV0UHJveHkgPSBkYXRhLm1hZ25ldFByb3h5IHx8IG51bGw7XG5cbiAgICAgICAgZGF0YS5jbG9zZXN0VmlldyA9IGRhdGEuY2xvc2VzdE1hZ25ldCA9IGRhdGEubWFnbmV0UHJveHkgPSBudWxsO1xuXG4gICAgICAgIHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIHZhciBwb2ludGVyID0gbmV3IFBvaW50KHgsIHkpO1xuXG4gICAgICAgIHZpZXdzSW5BcmVhLmZvckVhY2goZnVuY3Rpb24odmlldykge1xuICAgICAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IFtdO1xuICAgICAgICAgICAgLy8gc2tpcCBjb25uZWN0aW5nIHRvIHRoZSBlbGVtZW50IGluIGNhc2UgJy4nOiB7IG1hZ25ldDogZmFsc2UgfSBhdHRyaWJ1dGUgcHJlc2VudFxuICAgICAgICAgICAgaWYgKHZpZXcuZWwuZ2V0QXR0cmlidXRlKCdtYWduZXQnKSAhPT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGJib3g6IHZpZXcubW9kZWwuZ2V0QkJveCgpLFxuICAgICAgICAgICAgICAgICAgICBtYWduZXQ6IHZpZXcuZWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmlldy4kKCdbbWFnbmV0XScpLnRvQXJyYXkoKS5mb3JFYWNoKG1hZ25ldCA9PiB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgYmJveDogdmlldy5nZXROb2RlQkJveChtYWduZXQpLFxuICAgICAgICAgICAgICAgICAgICBtYWduZXRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYW5kaWRhdGVzLmZvckVhY2goY2FuZGlkYXRlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG1hZ25ldCwgYmJveCB9ID0gY2FuZGlkYXRlO1xuICAgICAgICAgICAgICAgIC8vIGZpbmQgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBtb2RlbCB0byBwb2ludGVyIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBiYm94LmNlbnRlcigpLnNxdWFyZWREaXN0YW5jZShwb2ludGVyKTtcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29ubmVjdGlvbiBpcyBsb29rZWQgdXAgaW4gYSBjaXJjbGUgYXJlYSBieSBgZGlzdGFuY2UgPCByYFxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQWxyZWFkeVZhbGlkYXRlZCA9IHByZXZDbG9zZXN0TWFnbmV0ID09PSBtYWduZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FscmVhZHlWYWxpZGF0ZWQgfHwgcGFwZXIub3B0aW9ucy52YWxpZGF0ZUNvbm5lY3Rpb24uYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXBlciwgZGF0YS52YWxpZGF0ZUNvbm5lY3Rpb25BcmdzKHZpZXcsICh2aWV3LmVsID09PSBtYWduZXQpID8gbnVsbCA6IG1hZ25ldClcbiAgICAgICAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY2xvc2VzdFZpZXcgPSB2aWV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jbG9zZXN0TWFnbmV0ID0gbWFnbmV0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgdmFyIGVuZDtcbiAgICAgICAgdmFyIG1hZ25ldFByb3h5ID0gbnVsbDtcbiAgICAgICAgdmFyIGNsb3Nlc3RWaWV3ID0gZGF0YS5jbG9zZXN0VmlldztcbiAgICAgICAgdmFyIGNsb3Nlc3RNYWduZXQgPSBkYXRhLmNsb3Nlc3RNYWduZXQ7XG4gICAgICAgIGlmIChjbG9zZXN0TWFnbmV0KSB7XG4gICAgICAgICAgICBtYWduZXRQcm94eSA9IGRhdGEubWFnbmV0UHJveHkgPSBjbG9zZXN0Vmlldy5maW5kUHJveHlOb2RlKGNsb3Nlc3RNYWduZXQsICdoaWdobGlnaHRlcicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbmRUeXBlID0gZGF0YS5hcnJvd2hlYWQ7XG4gICAgICAgIHZhciBuZXdDbG9zZXN0TWFnbmV0ID0gKHByZXZDbG9zZXN0TWFnbmV0ICE9PSBjbG9zZXN0TWFnbmV0KTtcbiAgICAgICAgaWYgKHByZXZDbG9zZXN0VmlldyAmJiBuZXdDbG9zZXN0TWFnbmV0KSB7XG4gICAgICAgICAgICBwcmV2Q2xvc2VzdFZpZXcudW5oaWdobGlnaHQocHJldk1hZ25ldFByb3h5LCB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzbmFwcGluZzogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xvc2VzdFZpZXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJldkVuZCwgcHJldlgsIHByZXZZIH0gPSBkYXRhO1xuICAgICAgICAgICAgZGF0YS5wcmV2WCA9IHg7XG4gICAgICAgICAgICBkYXRhLnByZXZZID0geTtcbiAgICAgICAgICAgIGlzU25hcHBlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICghbmV3Q2xvc2VzdE1hZ25ldCkgIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbm5lY3Rpb25TdHJhdGVneSAhPT0gJ2Z1bmN0aW9uJyB8fCAocHJldlggPT09IHggJiYgcHJldlkgPT09IHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBtYWduZXQgaGFzIG5vdCBjaGFuZ2VkIGFuZCB0aGUgbGluaydzIGVuZCBkb2VzIG5vdCBkZXBlbmQgb24gdGhlIHggYW5kIHlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzU25hcHBlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVuZCA9IGNsb3Nlc3RWaWV3LmdldExpbmtFbmQoY2xvc2VzdE1hZ25ldCwgeCwgeSwgdGhpcy5tb2RlbCwgZW5kVHlwZSk7XG4gICAgICAgICAgICBpZiAoIW5ld0Nsb3Nlc3RNYWduZXQgJiYgaXNFcXVhbChwcmV2RW5kLCBlbmQpKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIHNvdXJjZS90YXJnZXQganNvbiBoYXMgbm90IGNoYW5nZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTbmFwcGVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLnByZXZFbmQgPSBlbmQ7XG5cbiAgICAgICAgICAgIGlmIChuZXdDbG9zZXN0TWFnbmV0KSB7XG4gICAgICAgICAgICAgICAgY2xvc2VzdFZpZXcuaGlnaGxpZ2h0KG1hZ25ldFByb3h5LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNuYXBwaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgZW5kID0geyB4OiB4LCB5OiB5IH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vZGVsLnNldChlbmRUeXBlLCBlbmQgfHwgeyB4OiB4LCB5OiB5IH0sIHsgdWk6IHRydWUgfSk7XG5cbiAgICAgICAgaWYgKHByZXZDbG9zZXN0Vmlldykge1xuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ2xpbms6c25hcDpkaXNjb25uZWN0JywgZXZ0LCBwcmV2Q2xvc2VzdFZpZXcsIHByZXZDbG9zZXN0TWFnbmV0LCBlbmRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xvc2VzdFZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KCdsaW5rOnNuYXA6Y29ubmVjdCcsIGV2dCwgY2xvc2VzdFZpZXcsIGNsb3Nlc3RNYWduZXQsIGVuZFR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzU25hcHBlZDtcbiAgICB9LFxuXG4gICAgX3NuYXBBcnJvd2hlYWRFbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAvLyBGaW5pc2ggb2ZmIGxpbmsgc25hcHBpbmcuXG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgZXhjZXB0IHZpZXcgdW5oaWdobGlnaHRpbmcgd2FzIGFscmVhZHkgZG9uZSBvbiBwb2ludGVybW92ZS5cbiAgICAgICAgdmFyIGNsb3Nlc3RWaWV3ID0gZGF0YS5jbG9zZXN0VmlldztcbiAgICAgICAgdmFyIGNsb3Nlc3RNYWduZXQgPSBkYXRhLmNsb3Nlc3RNYWduZXQ7XG4gICAgICAgIGlmIChjbG9zZXN0VmlldyAmJiBjbG9zZXN0TWFnbmV0KSB7XG5cbiAgICAgICAgICAgIGNsb3Nlc3RWaWV3LnVuaGlnaGxpZ2h0KGRhdGEubWFnbmV0UHJveHksIHsgY29ubmVjdGluZzogdHJ1ZSwgc25hcHBpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICBkYXRhLm1hZ25ldFVuZGVyUG9pbnRlciA9IGNsb3Nlc3RWaWV3LmZpbmRNYWduZXQoY2xvc2VzdE1hZ25ldCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLmNsb3Nlc3RWaWV3ID0gZGF0YS5jbG9zZXN0TWFnbmV0ID0gbnVsbDtcbiAgICB9LFxuXG4gICAgX2Nvbm5lY3RBcnJvd2hlYWQ6IGZ1bmN0aW9uKHRhcmdldCwgeCwgeSwgZGF0YSkge1xuXG4gICAgICAgIC8vIGNoZWNraW5nIHZpZXdzIHJpZ2h0IHVuZGVyIHRoZSBwb2ludGVyXG4gICAgICAgIGNvbnN0IHsgcGFwZXIsIG1vZGVsIH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChkYXRhLmV2ZW50VGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vIFVuaGlnaGxpZ2h0IHRoZSBwcmV2aW91cyB2aWV3IHVuZGVyIHBvaW50ZXIgaWYgdGhlcmUgd2FzIG9uZS5cbiAgICAgICAgICAgIGlmIChkYXRhLm1hZ25ldFByb3h5KSB7XG4gICAgICAgICAgICAgICAgZGF0YS52aWV3VW5kZXJQb2ludGVyLnVuaGlnaGxpZ2h0KGRhdGEubWFnbmV0UHJveHksIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGluZzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB2aWV3VW5kZXJQb2ludGVyID0gZGF0YS52aWV3VW5kZXJQb2ludGVyID0gcGFwZXIuZmluZFZpZXcodGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICh2aWV3VW5kZXJQb2ludGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgYSB2aWV3IHRoYXQgaXMgdW5kZXIgdGhlIHBvaW50ZXIsIHdlIG5lZWQgdG8gZmluZCB0aGUgY2xvc2VzdFxuICAgICAgICAgICAgICAgIC8vIG1hZ25ldCBiYXNlZCBvbiB0aGUgcmVhbCB0YXJnZXQgZWxlbWVudCBvZiB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgY29uc3QgbWFnbmV0VW5kZXJQb2ludGVyID0gZGF0YS5tYWduZXRVbmRlclBvaW50ZXIgPSB2aWV3VW5kZXJQb2ludGVyLmZpbmRNYWduZXQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYWduZXRQcm94eSA9IGRhdGEubWFnbmV0UHJveHkgPSB2aWV3VW5kZXJQb2ludGVyLmZpbmRQcm94eU5vZGUobWFnbmV0VW5kZXJQb2ludGVyLCAnaGlnaGxpZ2h0ZXInKTtcblxuICAgICAgICAgICAgICAgIGlmIChtYWduZXRVbmRlclBvaW50ZXIgJiYgdGhpcy5wYXBlci5vcHRpb25zLnZhbGlkYXRlQ29ubmVjdGlvbi5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgcGFwZXIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudmFsaWRhdGVDb25uZWN0aW9uQXJncyh2aWV3VW5kZXJQb2ludGVyLCBtYWduZXRVbmRlclBvaW50ZXIpXG4gICAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSB3YXMgbm8gbWFnbmV0IGZvdW5kLCBkbyBub3QgaGlnaGxpZ2h0IGFueXRoaW5nIGFuZCBhc3N1bWUgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm8gdmlldyB1bmRlciBwb2ludGVyIHdlJ3JlIGludGVyZXN0ZWQgaW4gcmVjb25uZWN0aW5nIHRvLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgb3ZlcmFsbCBlbGVtZW50IGhhcyB0aGUgYXR0cmlidXRlIGAnLic6IHsgbWFnbmV0OiBmYWxzZSB9YC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hZ25ldFByb3h5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3VW5kZXJQb2ludGVyLmhpZ2hsaWdodChtYWduZXRQcm94eSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpbmc6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB0eXBlIG9mIGNvbm5lY3Rpb24gaXMgbm90IHZhbGlkLiBEaXNyZWdhcmQgdGhpcyBtYWduZXQuXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWFnbmV0VW5kZXJQb2ludGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tYWduZXRQcm94eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UnbGwgdW5zZXQgcHJldmlvdXMgbWFnbmV0LlxuICAgICAgICAgICAgICAgIGRhdGEubWFnbmV0VW5kZXJQb2ludGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBkYXRhLm1hZ25ldFByb3h5ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuZXZlbnRUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgICAgbW9kZWwuc2V0KGRhdGEuYXJyb3doZWFkLCB7IHg6IHgsIHk6IHkgfSwgeyB1aTogdHJ1ZSB9KTtcbiAgICB9LFxuXG4gICAgX2Nvbm5lY3RBcnJvd2hlYWRFbmQ6IGZ1bmN0aW9uKGRhdGEgPSB7fSwgeCwgeSkge1xuXG4gICAgICAgIGNvbnN0IHsgbW9kZWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgdmlld1VuZGVyUG9pbnRlciwgbWFnbmV0VW5kZXJQb2ludGVyLCBtYWduZXRQcm94eSwgYXJyb3doZWFkIH0gPSBkYXRhO1xuXG4gICAgICAgIGlmICghbWFnbmV0VW5kZXJQb2ludGVyIHx8ICFtYWduZXRQcm94eSB8fCAhdmlld1VuZGVyUG9pbnRlcikgcmV0dXJuO1xuXG4gICAgICAgIHZpZXdVbmRlclBvaW50ZXIudW5oaWdobGlnaHQobWFnbmV0UHJveHksIHsgY29ubmVjdGluZzogdHJ1ZSB9KTtcblxuICAgICAgICAvLyBUaGUgbGluayBlbmQgaXMgdGFrZW4gZnJvbSB0aGUgbWFnbmV0IHVuZGVyIHRoZSBwb2ludGVyLCBub3QgdGhlIHByb3h5LlxuICAgICAgICBjb25zdCBlbmQgPSB2aWV3VW5kZXJQb2ludGVyLmdldExpbmtFbmQobWFnbmV0VW5kZXJQb2ludGVyLCB4LCB5LCBtb2RlbCwgYXJyb3doZWFkKTtcbiAgICAgICAgbW9kZWwuc2V0KGFycm93aGVhZCwgZW5kLCB7IHVpOiB0cnVlIH0pO1xuICAgIH0sXG5cbiAgICBfYmVmb3JlQXJyb3doZWFkTW92ZTogZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgIGRhdGEueiA9IHRoaXMubW9kZWwuZ2V0KCd6Jyk7XG4gICAgICAgIHRoaXMubW9kZWwudG9Gcm9udCgpO1xuXG4gICAgICAgIC8vIExldCB0aGUgcG9pbnRlciBwcm9wYWdhdGUgdGhyb3VnaCB0aGUgbGluayB2aWV3IGVsZW1lbnRzIHNvIHRoYXRcbiAgICAgICAgLy8gdGhlIGBldnQudGFyZ2V0YCBpcyBhbm90aGVyIGVsZW1lbnQgdW5kZXIgdGhlIHBvaW50ZXIsIG5vdCB0aGUgbGluayBpdHNlbGYuXG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZWwuc3R5bGU7XG4gICAgICAgIGRhdGEucG9pbnRlckV2ZW50cyA9IHN0eWxlLnBvaW50ZXJFdmVudHM7XG4gICAgICAgIHN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG5cbiAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy5tYXJrQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXJrQXZhaWxhYmxlTWFnbmV0cyhkYXRhKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfYWZ0ZXJBcnJvd2hlYWRNb3ZlOiBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgaWYgKGRhdGEueiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXQoJ3onLCBkYXRhLnosIHsgdWk6IHRydWUgfSk7XG4gICAgICAgICAgICBkYXRhLnogPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHV0IGBwb2ludGVyLWV2ZW50c2AgYmFjayB0byBpdHMgb3JpZ2luYWwgdmFsdWUuIFNlZSBgX2JlZm9yZUFycm93aGVhZE1vdmUoKWAgZm9yIGV4cGxhbmF0aW9uLlxuICAgICAgICB0aGlzLmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBkYXRhLnBvaW50ZXJFdmVudHM7XG5cbiAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy5tYXJrQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl91bm1hcmtBdmFpbGFibGVNYWduZXRzKGRhdGEpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9jcmVhdGVWYWxpZGF0ZUNvbm5lY3Rpb25BcmdzOiBmdW5jdGlvbihhcnJvd2hlYWQpIHtcbiAgICAgICAgLy8gSXQgbWFrZXMgc3VyZSB0aGUgYXJndW1lbnRzIGZvciB2YWxpZGF0ZUNvbm5lY3Rpb24gaGF2ZSB0aGUgZm9sbG93aW5nIGZvcm06XG4gICAgICAgIC8vIChzb3VyY2Ugdmlldywgc291cmNlIG1hZ25ldCwgdGFyZ2V0IHZpZXcsIHRhcmdldCBtYWduZXQgYW5kIGxpbmsgdmlldylcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcblxuICAgICAgICBhcmdzWzRdID0gYXJyb3doZWFkO1xuICAgICAgICBhcmdzWzVdID0gdGhpcztcblxuICAgICAgICB2YXIgb3Bwb3NpdGVBcnJvd2hlYWQ7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGogPSAwO1xuXG4gICAgICAgIGlmIChhcnJvd2hlYWQgPT09ICdzb3VyY2UnKSB7XG4gICAgICAgICAgICBpID0gMjtcbiAgICAgICAgICAgIG9wcG9zaXRlQXJyb3doZWFkID0gJ3RhcmdldCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqID0gMjtcbiAgICAgICAgICAgIG9wcG9zaXRlQXJyb3doZWFkID0gJ3NvdXJjZSc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZW5kID0gdGhpcy5tb2RlbC5nZXQob3Bwb3NpdGVBcnJvd2hlYWQpO1xuXG4gICAgICAgIGlmIChlbmQuaWQpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gYXJnc1tpXSA9IHRoaXMucGFwZXIuZmluZFZpZXdCeU1vZGVsKGVuZC5pZCk7XG4gICAgICAgICAgICB2YXIgbWFnbmV0ID0gdmlldy5nZXRNYWduZXRGcm9tTGlua0VuZChlbmQpO1xuICAgICAgICAgICAgaWYgKG1hZ25ldCA9PT0gdmlldy5lbCkgbWFnbmV0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgYXJnc1tpICsgMV0gPSBtYWduZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUNvbm5lY3Rpb25BcmdzKGNlbGxWaWV3LCBtYWduZXQpIHtcbiAgICAgICAgICAgIGFyZ3Nbal0gPSBjZWxsVmlldztcbiAgICAgICAgICAgIGFyZ3NbaiArIDFdID0gY2VsbFZpZXcuZWwgPT09IG1hZ25ldCA/IHVuZGVmaW5lZCA6IG1hZ25ldDtcbiAgICAgICAgICAgIHJldHVybiBhcmdzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlQ29ubmVjdGlvbkFyZ3M7XG4gICAgfSxcblxuICAgIF9tYXJrQXZhaWxhYmxlTWFnbmV0czogZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzTWFnbmV0QXZhaWxhYmxlKHZpZXcsIG1hZ25ldCkge1xuICAgICAgICAgICAgdmFyIHBhcGVyID0gdmlldy5wYXBlcjtcbiAgICAgICAgICAgIHZhciB2YWxpZGF0ZSA9IHBhcGVyLm9wdGlvbnMudmFsaWRhdGVDb25uZWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlLmFwcGx5KHBhcGVyLCB0aGlzLnZhbGlkYXRlQ29ubmVjdGlvbkFyZ3ModmlldywgbWFnbmV0KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFwZXIgPSB0aGlzLnBhcGVyO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBwYXBlci5tb2RlbC5nZXRDZWxscygpO1xuICAgICAgICBkYXRhLm1hcmtlZCA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IGVsZW1lbnRzW2ldLmZpbmRWaWV3KHBhcGVyKTtcblxuICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtYWduZXRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodmlldy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbWFnbmV0XScpKTtcbiAgICAgICAgICAgIGlmICh2aWV3LmVsLmdldEF0dHJpYnV0ZSgnbWFnbmV0JykgIT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgICAgICAvLyBFbGVtZW50IHdyYXBwaW5nIGdyb3VwIGlzIGFsc28gYSBtYWduZXRcbiAgICAgICAgICAgICAgICBtYWduZXRzLnB1c2godmlldy5lbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhdmFpbGFibGVNYWduZXRzID0gbWFnbmV0cy5maWx0ZXIoaXNNYWduZXRBdmFpbGFibGUuYmluZChkYXRhLCB2aWV3KSk7XG5cbiAgICAgICAgICAgIGlmIChhdmFpbGFibGVNYWduZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBoaWdobGlnaHQgYWxsIGF2YWlsYWJsZSBtYWduZXRzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIG0gPSBhdmFpbGFibGVNYWduZXRzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmhpZ2hsaWdodChhdmFpbGFibGVNYWduZXRzW2pdLCB7IG1hZ25ldEF2YWlsYWJpbGl0eTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBlbnRpcmUgdmlld1xuICAgICAgICAgICAgICAgIHZpZXcuaGlnaGxpZ2h0KG51bGwsIHsgZWxlbWVudEF2YWlsYWJpbGl0eTogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgICAgIGRhdGEubWFya2VkW3ZpZXcubW9kZWwuaWRdID0gYXZhaWxhYmxlTWFnbmV0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfdW5tYXJrQXZhaWxhYmxlTWFnbmV0czogZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgIHZhciBtYXJrZWRLZXlzID0gT2JqZWN0LmtleXMoZGF0YS5tYXJrZWQpO1xuICAgICAgICB2YXIgaWQ7XG4gICAgICAgIHZhciBtYXJrZWRNYWduZXRzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbWFya2VkS2V5cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlkID0gbWFya2VkS2V5c1tpXTtcbiAgICAgICAgICAgIG1hcmtlZE1hZ25ldHMgPSBkYXRhLm1hcmtlZFtpZF07XG5cbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy5wYXBlci5maW5kVmlld0J5TW9kZWwoaWQpO1xuICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbSA9IG1hcmtlZE1hZ25ldHMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcudW5oaWdobGlnaHQobWFya2VkTWFnbmV0c1tqXSwgeyBtYWduZXRBdmFpbGFiaWxpdHk6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXcudW5oaWdobGlnaHQobnVsbCwgeyBlbGVtZW50QXZhaWxhYmlsaXR5OiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS5tYXJrZWQgPSBudWxsO1xuICAgIH0sXG5cbiAgICBzdGFydEFycm93aGVhZE1vdmU6IGZ1bmN0aW9uKGVuZCwgb3B0KSB7XG5cbiAgICAgICAgb3B0IHx8IChvcHQgPSB7fSk7XG5cbiAgICAgICAgLy8gQWxsb3cgdG8gZGVsZWdhdGUgZXZlbnRzIGZyb20gYW4gYW5vdGhlciB2aWV3IHRvIHRoaXMgbGlua1ZpZXcgaW4gb3JkZXIgdG8gdHJpZ2dlciBhcnJvd2hlYWRcbiAgICAgICAgLy8gbW92ZSB3aXRob3V0IG5lZWQgdG8gY2xpY2sgb24gdGhlIGFjdHVhbCBhcnJvd2hlYWQgZG9tIGVsZW1lbnQuXG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgYWN0aW9uOiAnYXJyb3doZWFkLW1vdmUnLFxuICAgICAgICAgICAgYXJyb3doZWFkOiBlbmQsXG4gICAgICAgICAgICB3aGVuTm90QWxsb3dlZDogb3B0LndoZW5Ob3RBbGxvd2VkIHx8ICdyZXZlcnQnLFxuICAgICAgICAgICAgaW5pdGlhbE1hZ25ldDogdGhpc1tlbmQgKyAnTWFnbmV0J10gfHwgKHRoaXNbZW5kICsgJ1ZpZXcnXSA/IHRoaXNbZW5kICsgJ1ZpZXcnXS5lbCA6IG51bGwpLFxuICAgICAgICAgICAgaW5pdGlhbEVuZDogY2xvbmUodGhpcy5tb2RlbC5nZXQoZW5kKSksXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbm5lY3Rpb25BcmdzOiB0aGlzLl9jcmVhdGVWYWxpZGF0ZUNvbm5lY3Rpb25BcmdzKGVuZClcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9iZWZvcmVBcnJvd2hlYWRNb3ZlKGRhdGEpO1xuXG4gICAgICAgIGlmIChvcHQuaWdub3JlQmFja3dhcmRzQ29tcGF0aWJpbGl0eSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0RhdGEgPSBkYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcblxuICAgIC8vIExpZmVjeWNsZSBtZXRob2RzXG5cbiAgICBvbk1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgQ2VsbFZpZXcucHJvdG90eXBlLm9uTW91bnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5tb3VudExhYmVscygpO1xuICAgIH0sXG5cbiAgICBvbkRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgIENlbGxWaWV3LnByb3RvdHlwZS5vbkRldGFjaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnVubW91bnRMYWJlbHMoKTtcbiAgICB9LFxuXG4gICAgb25SZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBDZWxsVmlldy5wcm90b3R5cGUub25SZW1vdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy51bm1vdW50TGFiZWxzKCk7XG4gICAgfVxuXG59LCB7XG5cbiAgICBGbGFnczogRmxhZ3MsXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExpbmtWaWV3LnByb3RvdHlwZSwgJ3NvdXJjZUJCb3gnLCB7XG5cbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNvdXJjZVZpZXcgPSB0aGlzLnNvdXJjZVZpZXc7XG4gICAgICAgIGlmICghc291cmNlVmlldykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZURlZiA9IHRoaXMubW9kZWwuc291cmNlKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlY3Qoc291cmNlRGVmLngsIHNvdXJjZURlZi55KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc291cmNlTWFnbmV0ID0gdGhpcy5zb3VyY2VNYWduZXQ7XG4gICAgICAgIGlmIChzb3VyY2VWaWV3LmlzTm9kZUNvbm5lY3Rpb24oc291cmNlTWFnbmV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWN0KHRoaXMuc291cmNlQW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlVmlldy5nZXROb2RlQkJveChzb3VyY2VNYWduZXQgfHwgc291cmNlVmlldy5lbCk7XG4gICAgfVxuXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExpbmtWaWV3LnByb3RvdHlwZSwgJ3RhcmdldEJCb3gnLCB7XG5cbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRhcmdldFZpZXcgPSB0aGlzLnRhcmdldFZpZXc7XG4gICAgICAgIGlmICghdGFyZ2V0Vmlldykge1xuICAgICAgICAgICAgdmFyIHRhcmdldERlZiA9IHRoaXMubW9kZWwudGFyZ2V0KCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlY3QodGFyZ2V0RGVmLngsIHRhcmdldERlZi55KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0TWFnbmV0ID0gdGhpcy50YXJnZXRNYWduZXQ7XG4gICAgICAgIGlmICh0YXJnZXRWaWV3LmlzTm9kZUNvbm5lY3Rpb24odGFyZ2V0TWFnbmV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWN0KHRoaXMudGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0Vmlldy5nZXROb2RlQkJveCh0YXJnZXRNYWduZXQgfHwgdGFyZ2V0Vmlldy5lbCk7XG4gICAgfVxufSk7XG5cbiJdLCJuYW1lcyI6WyJDZWxsVmlldyIsIkxpbmsiLCJWIiwiYWRkQ2xhc3NOYW1lUHJlZml4IiwicmVtb3ZlQ2xhc3NOYW1lUHJlZml4IiwibWVyZ2UiLCJ0ZW1wbGF0ZSIsImFzc2lnbiIsInRvQXJyYXkiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJjbG9uZSIsImlzUGVyY2VudGFnZSIsInJlc3VsdCIsImlzRXF1YWwiLCJQb2ludCIsIkxpbmUiLCJQYXRoIiwibm9ybWFsaXplQW5nbGUiLCJSZWN0IiwiUG9seWxpbmUiLCJyb3V0ZXJzIiwiY29ubmVjdG9ycyIsIiQiLCJGbGFncyIsIlRPT0xTIiwiUkVOREVSIiwiVVBEQVRFIiwiTEVHQUNZX1RPT0xTIiwiTEFCRUxTIiwiVkVSVElDRVMiLCJTT1VSQ0UiLCJUQVJHRVQiLCJDT05ORUNUT1IiLCJMaW5rVmlldyIsImV4dGVuZCIsImNsYXNzTmFtZSIsImNsYXNzTmFtZXMiLCJwcm90b3R5cGUiLCJhcHBseSIsInNwbGl0IiwicHVzaCIsImpvaW4iLCJvcHRpb25zIiwic2hvcnRMaW5rTGVuZ3RoIiwiZG91YmxlTGlua1Rvb2xzIiwibG9uZ0xpbmtMZW5ndGgiLCJsaW5rVG9vbHNPZmZzZXQiLCJkb3VibGVMaW5rVG9vbHNPZmZzZXQiLCJzYW1wbGVJbnRlcnZhbCIsIl9sYWJlbENhY2hlIiwiX2xhYmVsU2VsZWN0b3JzIiwiX21hcmtlckNhY2hlIiwiX1YiLCJfZHJhZ0RhdGEiLCJtZXRyaWNzIiwiZGVjaW1hbHNSb3VuZGluZyIsImluaXRpYWxpemUiLCJhcmd1bWVudHMiLCJjbGVhbk5vZGVzQ2FjaGUiLCJwcmVzZW50YXRpb25BdHRyaWJ1dGVzIiwibWFya3VwIiwiYXR0cnMiLCJyb3V0ZXIiLCJjb25uZWN0b3IiLCJzbW9vdGgiLCJtYW5oYXR0YW4iLCJ0b29sTWFya3VwIiwibGFiZWxzIiwibGFiZWxNYXJrdXAiLCJ2ZXJ0aWNlcyIsInZlcnRleE1hcmt1cCIsInNvdXJjZSIsInRhcmdldCIsImluaXRGbGFnIiwiVVBEQVRFX1BSSU9SSVRZIiwiY29uZmlybVVwZGF0ZSIsImZsYWdzIiwib3B0IiwiaGFzRmxhZyIsInVwZGF0ZUVuZFByb3BlcnRpZXMiLCJyZW1vdmVGbGFnIiwicGFwZXIiLCJzb3VyY2VWaWV3IiwidGFyZ2V0VmlldyIsImlzVmlld01vdW50ZWQiLCJyZW5kZXIiLCJ1cGRhdGVIaWdobGlnaHRlcnMiLCJ1cGRhdGVUb29scyIsInJlbmRlclZlcnRleE1hcmtlcnMiLCJtb2RlbCIsImF0dHJpYnV0ZXMiLCJ1cGRhdGVMYWJlbHMiLCJ1cGRhdGVMZWdhY3lUb29scyIsIm9uTGFiZWxzQ2hhbmdlIiwicmVuZGVyVG9vbHMiLCJ1cGRhdGVBbGwiLCJ1cGRhdGVDb25uZWN0b3IiLCJ1cGRhdGVQYXRoIiwidXBkYXRlRE9NIiwidHJhbnNsYXRlQnkiLCJpc1JlbGF0aW9uc2hpcEVtYmVkZGVkSW4iLCJ0cmFuc2xhdGUiLCJ0eCIsInR5IiwidXBkYXRlIiwidXBkYXRlTGFiZWxQb3NpdGlvbnMiLCJ1cGRhdGVUb29sc1Bvc2l0aW9uIiwicmVxdWVzdENvbm5lY3Rpb25VcGRhdGUiLCJyZXF1ZXN0VXBkYXRlIiwiZ2V0RmxhZyIsImlzTGFiZWxzUmVuZGVyUmVxdWlyZWQiLCJwcmV2aW91c0xhYmVscyIsInByZXZpb3VzIiwicGF0aEFycmF5IiwicHJvcGVydHlQYXRoQXJyYXkiLCJwYXRoTGVuZ3RoIiwibGVuZ3RoIiwibGFiZWxFeGlzdHMiLCJPYmplY3QiLCJwcm9wZXJ0eVZhbHVlIiwiX2xpbmsiLCJfbGFiZWxzIiwicmVuZGVyTGFiZWxzIiwidmVsIiwiZW1wdHkiLCJ1bm1vdW50TGFiZWxzIiwicmVuZGVyTWFya3VwIiwibGluayIsImdldCIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwicmVuZGVySlNPTk1hcmt1cCIsInJlbmRlclN0cmluZ01hcmt1cCIsImRvYyIsInBhcnNlRE9NSlNPTiIsImVsIiwic2VsZWN0b3JzIiwiYXBwZW5kIiwiZnJhZ21lbnQiLCJjaGlsZHJlbiIsImNhY2hlIiwiaSIsIm4iLCJjaGlsZCIsImF0dHIiLCJjYW1lbENhc2UiLCJyZW5kZXJBcnJvd2hlYWRNYXJrZXJzIiwiX2dldExhYmVsTWFya3VwIiwidW5kZWZpbmVkIiwiX2dldExhYmVsU3RyaW5nTWFya3VwIiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYXBwZW5kQ2hpbGQiLCJub2RlIiwiY3VycmVudENoaWxkIiwiX25vcm1hbGl6ZUxhYmVsTWFya3VwIiwiRG9jdW1lbnRGcmFnbWVudCIsImhhc0NoaWxkTm9kZXMiLCJ2Tm9kZSIsImNoaWxkTm9kZXMiLCJub2RlTmFtZSIsInRvVXBwZXJDYXNlIiwiYWRkQ2xhc3MiLCJ2TGFiZWxzIiwibGFiZWxDYWNoZSIsImxhYmVsU2VsZWN0b3JzIiwibGFiZWxzQ291bnQiLCJyZW1vdmUiLCJsYWJlbHNMYXllciIsImlkIiwibGFiZWwiLCJsYWJlbE5vZGUiLCJidWlsdGluRGVmYXVsdExhYmVsIiwiX2J1aWx0aW5zIiwiZGVmYXVsdExhYmVsIiwiYnVpbHRpbkRlZmF1bHRMYWJlbE1hcmt1cCIsIl9nZXREZWZhdWx0TGFiZWwiLCJkZWZhdWx0TGFiZWxNYXJrdXAiLCJkZWZhdWx0TWFya3VwIiwic2V0QXR0cmlidXRlIiwicm9vdFNlbGVjdG9yIiwic2VsZWN0b3IiLCJwYXJlbnQiLCJtb3VudExhYmVscyIsImhhc0xhYmVscyIsImdldExheWVyVmlldyIsImluc2VydFNvcnRlZE5vZGUiLCJwYXJlbnROb2RlIiwiZmluZExhYmVsTm9kZSIsImxhYmVsSW5kZXgiLCJsYWJlbFJvb3QiLCJmaW5kQnlTZWxlY3RvciIsIl9tZXJnZUxhYmVsQXR0cnMiLCJoYXNDdXN0b21NYXJrdXAiLCJsYWJlbEF0dHJzIiwiZGVmYXVsdExhYmVsQXR0cnMiLCJidWlsdGluRGVmYXVsdExhYmVsQXR0cnMiLCJfbWVyZ2VMYWJlbFNpemUiLCJsYWJlbFNpemUiLCJkZWZhdWx0TGFiZWxTaXplIiwiY2FuTGFiZWxNb3ZlIiwiY2FuIiwic2l6ZSIsInVwZGF0ZURPTVN1YnRyZWVBdHRyaWJ1dGVzIiwicm9vdEJCb3giLCJsaW5rVG9vbHMiLCIkdG9vbHMiLCJ0b29sVGVtcGxhdGUiLCJ0b29sIiwiX3Rvb2xDYWNoZSIsInRvb2wyIiwiZG91YmxlVG9vbE1hcmt1cCIsIl90b29sMkNhY2hlIiwibWFya2VyVmVydGljZXMiLCIkbWFya2VyVmVydGljZXMiLCJtYXJrdXBUZW1wbGF0ZSIsImZvckVhY2giLCJ2ZXJ0ZXgiLCJpZHgiLCJtYXJrZXJBcnJvd2hlYWRzIiwiJG1hcmtlckFycm93aGVhZHMiLCJhcnJvd2hlYWRNYXJrdXAiLCJzb3VyY2VBcnJvd2hlYWQiLCJlbmQiLCJ0YXJnZXRBcnJvd2hlYWQiLCJyZW1vdmVSZWR1bmRhbnRMaW5lYXJWZXJ0aWNlcyIsIlNJTVBMSUZZX1RIUkVTSE9MRCIsInJvdXRlUG9pbnRzIiwic291cmNlQW5jaG9yIiwidGFyZ2V0QW5jaG9yIiwibnVtUm91dGVQb2ludHMiLCJwb2x5bGluZSIsInNpbXBsaWZ5IiwidGhyZXNob2xkIiwicG9seWxpbmVQb2ludHMiLCJwb2ludHMiLCJtYXAiLCJwb2ludCIsInRvSlNPTiIsIm51bVBvbHlsaW5lUG9pbnRzIiwic2xpY2UiLCJ1cGRhdGVEZWZhdWx0Q29ubmVjdGlvblBhdGgiLCJjb25uZWN0aW9uIiwiZ2V0U2VyaWFsaXplZENvbm5lY3Rpb24iLCJjb25uZWN0aW9uV3JhcCIsIm1hcmtlclNvdXJjZSIsIm1hcmtlclRhcmdldCIsIl90cmFuc2xhdGVBbmRBdXRvT3JpZW50QXJyb3dzIiwiZ2V0RW5kVmlldyIsInR5cGUiLCJnZXRFbmRBbmNob3IiLCJnZXRFbmRDb25uZWN0aW9uUG9pbnQiLCJzb3VyY2VQb2ludCIsInRhcmdldFBvaW50IiwiZ2V0RW5kTWFnbmV0Iiwic291cmNlTWFnbmV0IiwidGFyZ2V0TWFnbmV0IiwidXBkYXRlUm91dGUiLCJyb3V0ZSIsInBhdGgiLCJfdHJhbnNsYXRlQ29ubmVjdGlvblBvaW50cyIsInVwZGF0ZUFycm93aGVhZE1hcmtlcnMiLCJwZXJwZW5kaWN1bGFyIiwiYW5jaG9ycyIsImZpbmRBbmNob3JzIiwiZmluZFJvdXRlIiwiY29ubmVjdGlvblBvaW50cyIsImZpbmRDb25uZWN0aW9uUG9pbnRzIiwibWFya2VyUG9pbnRzIiwiZmluZE1hcmtlclBvaW50cyIsImZpbmRQYXRoIiwiZmlyc3RXYXlwb2ludCIsImxhc3RXYXlwb2ludCIsInNvdXJjZU1hcmtlclBvaW50IiwidGFyZ2V0TWFya2VyUG9pbnQiLCJzb3VyY2VCQm94IiwiZ2V0QkJveCIsIm1vdmUiLCJ3aWR0aCIsInNjYWxlIiwic3giLCJyb3VuZCIsInRhcmdldEJCb3giLCJmaW5kQW5jaG9yc09yZGVyZWQiLCJmaXJzdEVuZFR5cGUiLCJmaXJzdFJlZiIsInNlY29uZEVuZFR5cGUiLCJzZWNvbmRSZWYiLCJmaXJzdEFuY2hvciIsInNlY29uZEFuY2hvciIsImZpcnN0QW5jaG9yUmVmIiwic2Vjb25kQW5jaG9yUmVmIiwiZmlyc3REZWYiLCJzZWNvbmREZWYiLCJmaXJzdFZpZXciLCJzZWNvbmRWaWV3IiwiZmlyc3RNYWduZXQiLCJzZWNvbmRNYWduZXQiLCJnZXRBbmNob3IiLCJhbmNob3IiLCJyZXMiLCJmaXJzdFZlcnRleCIsImxhc3RWZXJ0ZXgiLCJwcmlvcml0eSIsInNvdXJjZURlZiIsInRhcmdldERlZiIsInBhcGVyT3B0aW9ucyIsImlzTm9kZUNvbm5lY3Rpb24iLCJzb3VyY2VDb25uZWN0aW9uUG9pbnREZWYiLCJjb25uZWN0aW9uUG9pbnQiLCJkZWZhdWx0Q29ubmVjdGlvblBvaW50Iiwic291cmNlUG9pbnRSZWYiLCJzb3VyY2VMaW5lIiwiZ2V0Q29ubmVjdGlvblBvaW50IiwidGFyZ2V0Q29ubmVjdGlvblBvaW50RGVmIiwidGFyZ2V0UG9pbnRSZWYiLCJ0YXJnZXRMaW5lIiwiYW5jaG9yRGVmIiwiY2VsbFZpZXciLCJtYWduZXQiLCJyZWYiLCJlbmRUeXBlIiwiaXNDb25uZWN0aW9uIiwiZGVmYXVsdExpbmtBbmNob3IiLCJwZXJwZW5kaWN1bGFyTGlua3MiLCJuYW1lIiwiZGVmYXVsdEFuY2hvciIsImFuY2hvckZuIiwiYW5jaG9yTmFtZSIsImFuY2hvck5hbWVzcGFjZSIsImNhbGwiLCJhcmdzIiwiY29ubmVjdGlvblBvaW50RGVmIiwidmlldyIsImxpbmUiLCJsaW5rQ29ubmVjdGlvblBvaW50IiwibGlua0Nvbm5lY3Rpb25NYWduZXQiLCJzdGFydCIsImNvbm5lY3Rpb25Qb2ludEZuIiwiY29ubmVjdGlvblBvaW50TmFtZSIsImNvbm5lY3Rpb25Qb2ludE5hbWVzcGFjZSIsIm9mZnNldCIsIl9nZXREZWZhdWx0TGFiZWxQb3NpdGlvblByb3BlcnR5IiwiYnVpbHRpbkRlZmF1bHRMYWJlbFBvc2l0aW9uIiwicG9zaXRpb24iLCJkZWZhdWx0TGFiZWxQb3NpdGlvbiIsIl9ub3JtYWxpemVMYWJlbFBvc2l0aW9uIiwibGFiZWxQb3NpdGlvbiIsImRpc3RhbmNlIiwiYW5nbGUiLCJfbWVyZ2VMYWJlbFBvc2l0aW9uUHJvcGVydHkiLCJub3JtYWxpemVkTGFiZWxQb3NpdGlvbiIsIm5vcm1hbGl6ZWREZWZhdWx0TGFiZWxQb3NpdGlvbiIsInRyYW5zZm9ybWF0aW9uTWF0cml4IiwiX2dldExhYmVsVHJhbnNmb3JtYXRpb25NYXRyaXgiLCJtYXRyaXhUb1RyYW5zZm9ybVN0cmluZyIsIl9jbGVhbkxhYmVsTWF0cmljZXMiLCJpbmRleCIsIm1hZ25ldE1hdHJpeCIsImNvbm5lY3Rpb25MZW5ndGgiLCJnZXRDb25uZWN0aW9uTGVuZ3RoIiwiTnVtYmVyIiwiaXNOYU4iLCJ0b29sUG9zaXRpb24iLCJnZXRQb2ludEF0TGVuZ3RoIiwieCIsInkiLCJjc3MiLCJlbmRWaWV3UHJvcGVydHkiLCJlbmREZWYiLCJlbmRJZCIsInVwZGF0ZUVuZE1hZ25ldCIsImVuZE1vZGVsIiwiZ2V0TW9kZWxCeUlkIiwiZW5kVmlldyIsImZpbmRWaWV3IiwiZW5kTWFnbmV0UHJvcGVydHkiLCJjb25uZWN0ZWRNYWduZXQiLCJnZXRNYWduZXRGcm9tTGlua0VuZCIsInNvdXJjZUFycm93IiwidGFyZ2V0QXJyb3ciLCJ0cmFuc2xhdGVBbmRBdXRvT3JpZW50IiwiY2VsbHMiLCJfZ2V0TGFiZWxQb3NpdGlvblByb3BlcnR5IiwiX2dldExhYmVsUG9zaXRpb25BbmdsZSIsIl9nZXRMYWJlbFBvc2l0aW9uQXJncyIsIl9nZXREZWZhdWx0TGFiZWxQb3NpdGlvbkFyZ3MiLCJfbWVyZ2VMYWJlbFBvc2l0aW9uQXJncyIsImxhYmVsUG9zaXRpb25BcmdzIiwiZGVmYXVsdExhYmVsUG9zaXRpb25BcmdzIiwiYWRkTGFiZWwiLCJwMSIsInAyIiwicDMiLCJwNCIsImxvY2FsWCIsImxvY2FsWSIsImxvY2FsQW5nbGUiLCJsb2NhbE9wdCIsInBvc2l0aW9uQXJncyIsImdldExhYmVsUG9zaXRpb24iLCJpbnNlcnRMYWJlbCIsImFkZFZlcnRleCIsImlzUG9pbnRQcm92aWRlZCIsImdldFZlcnRleEluZGV4IiwiaW5zZXJ0VmVydGV4Iiwic2VuZFRva2VuIiwidG9rZW4iLCJjYWxsYmFjayIsIm9uQW5pbWF0aW9uRW5kIiwidlRva2VuIiwiZHVyYXRpb24iLCJpc1JldmVyc2VkIiwiZGlyZWN0aW9uIiwiYW5pbWF0aW9uQXR0cmlidXRlcyIsImR1ciIsInJlcGVhdENvdW50IiwiY2FsY01vZGUiLCJmaWxsIiwia2V5UG9pbnRzIiwia2V5VGltZXMiLCJxdWVyeVNlbGVjdG9yIiwiU1ZHUGF0aEVsZW1lbnQiLCJhcHBlbmRUbyIsImFuaW1hdGVBbG9uZ1BhdGgiLCJzZXRUaW1lb3V0IiwibmFtZXNwYWNlIiwicm91dGVyTmFtZXNwYWNlIiwiZGVmYXVsdFJvdXRlciIsInJvdXRlckZuIiwiY29ubmVjdG9yTmFtZXNwYWNlIiwiZGVmYXVsdENvbm5lY3RvciIsImNvbm5lY3RvckZuIiwicmF3Iiwibm9ybWFsaXplUGF0aERhdGEiLCJnZXRDb25uZWN0aW9uIiwiaGFzT3duUHJvcGVydHkiLCJkYXRhIiwic2VyaWFsaXplIiwiZ2V0Q29ubmVjdGlvblN1YmRpdmlzaW9ucyIsInNlZ21lbnRTdWJkaXZpc2lvbnMiLCJzdWJkaXZpc2lvbnMiLCJnZXRTZWdtZW50U3ViZGl2aXNpb25zIiwicG9pbnRBdExlbmd0aCIsImdldFBvaW50QXRSYXRpbyIsInJhdGlvIiwicGFyc2VGbG9hdCIsInBvaW50QXQiLCJnZXRUYW5nZW50QXRMZW5ndGgiLCJ0YW5nZW50QXRMZW5ndGgiLCJnZXRUYW5nZW50QXRSYXRpbyIsInRhbmdlbnRBdCIsImdldENsb3Nlc3RQb2ludCIsImNsb3Nlc3RQb2ludCIsImdldENsb3Nlc3RQb2ludExlbmd0aCIsImNsb3Nlc3RQb2ludExlbmd0aCIsImdldENsb3Nlc3RQb2ludFJhdGlvIiwiY2xvc2VzdFBvaW50Tm9ybWFsaXplZExlbmd0aCIsImlzRGlzdGFuY2VSZWxhdGl2ZSIsImFic29sdXRlRGlzdGFuY2UiLCJpc0Rpc3RhbmNlQWJzb2x1dGVSZXZlcnNlIiwicmV2ZXJzZURpc3RhbmNlIiwiaXNPZmZzZXRBYnNvbHV0ZSIsImFic29sdXRlT2Zmc2V0IiwicGF0aE9wdCIsImxhYmVsUG9pbnQiLCJ0IiwiY2xvc2VzdFBvaW50VCIsImxhYmVsRGlzdGFuY2UiLCJsZW5ndGhBdFQiLCJ0YW5nZW50IiwidGFuZ2VudEF0VCIsImxhYmVsT2Zmc2V0IiwicG9pbnRPZmZzZXQiLCJwb2ludEF0VCIsImxhYmVsT2Zmc2V0RGlmZiIsImRpZmZlcmVuY2UiLCJsYWJlbEFuZ2xlIiwibGFiZWxPZmZzZXRDb29yZGluYXRlcyIsInBvc2l0aW9uT2Zmc2V0IiwiaXNLZWVwR3JhZGllbnQiLCJrZWVwR3JhZGllbnQiLCJpc0Vuc3VyZUxlZ2liaWxpdHkiLCJlbnN1cmVMZWdpYmlsaXR5IiwidHJhbnNsYXRpb24iLCJub3JtYWwiLCJyb3RhdGUiLCJzZXRMZW5ndGgiLCJjcmVhdGVTVkdNYXRyaXgiLCJnZXRMYWJlbENvb3JkaW5hdGVzIiwiZSIsImYiLCJ2ZXJ0ZXhMZW5ndGgiLCJjdXJyZW50VmVydGV4IiwiY3VycmVudFZlcnRleExlbmd0aCIsIm5vdGlmeVBvaW50ZXJkb3duIiwiZXZ0IiwicG9pbnRlcmRvd24iLCJub3RpZnkiLCJub3RpZnlQb2ludGVybW92ZSIsInBvaW50ZXJtb3ZlIiwibm90aWZ5UG9pbnRlcnVwIiwicG9pbnRlcnVwIiwicG9pbnRlcmRibGNsaWNrIiwicG9pbnRlcmNsaWNrIiwiY29udGV4dG1lbnUiLCJnZXRBdHRyaWJ1dGUiLCJkcmFnVmVydGV4U3RhcnQiLCJkcmFnVmVydGV4UmVtb3ZlU3RhcnQiLCJkcmFnQXJyb3doZWFkU3RhcnQiLCJkcmFnQ29ubmVjdGlvblN0YXJ0IiwiZHJhZ1N0YXJ0IiwiZHJhZ0RhdGEiLCJldmVudERhdGEiLCJhY3Rpb24iLCJkcmFnVmVydGV4IiwiZHJhZ0xhYmVsIiwiZHJhZ0Fycm93aGVhZCIsImRyYWciLCJkcmFnVmVydGV4RW5kIiwiZHJhZ0xhYmVsRW5kIiwiZHJhZ0Fycm93aGVhZEVuZCIsImRyYWdFbmQiLCJjaGVja01vdXNlbGVhdmUiLCJtb3VzZW92ZXIiLCJtb3VzZW91dCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwibW91c2V3aGVlbCIsImRlbHRhIiwib25ldmVudCIsImV2ZW50TmFtZSIsImxpbmtUb29sIiwiZmluZFBhcmVudEJ5Q2xhc3MiLCJzdG9wUHJvcGFnYXRpb24iLCJ1aSIsImRlbGVnYXRlRHJhZ0V2ZW50cyIsIm9ubGFiZWwiLCJkcmFnTGFiZWxTdGFydCIsInZlcnRleElkeCIsImlzRGVmYXVsdEludGVyYWN0aW9uUHJldmVudGVkIiwiY3VycmVudFRhcmdldCIsImxhYmVsSWR4IiwicGFyc2VJbnQiLCJpbml0aWFsTGFiZWxQb3NpdGlvbiIsImNvb3JkcyIsImR4IiwiZHkiLCJwb3NpdGlvbkFuZ2xlIiwidmVydGV4Tm9kZSIsInJlbW92ZU5vZGUiLCJyZW1vdmVWZXJ0ZXgiLCJhcnJvd2hlYWROb2RlIiwiYXJyb3doZWFkVHlwZSIsInN0YXJ0QXJyb3doZWFkTW92ZSIsImlnbm9yZUJhY2t3YXJkc0NvbXBhdGliaWxpdHkiLCJzbmFwTGFiZWxzIiwic2V0T3B0aW9ucyIsImlzQXN5bmMiLCJhc3luYyIsInNuYXBMaW5rcyIsImlzU25hcHBlZCIsIl9zbmFwQXJyb3doZWFkIiwic25hcExpbmtzU2VsZiIsIl9zbmFwQXJyb3doZWFkU2VsZiIsIl9jb25uZWN0QXJyb3doZWFkIiwiZ2V0RXZlbnRUYXJnZXQiLCJfc25hcEFycm93aGVhZEVuZCIsIl9jb25uZWN0QXJyb3doZWFkRW5kIiwibGlua0FsbG93ZWQiLCJfZGlzYWxsb3ciLCJfZmluaXNoRW1iZWRkaW5nIiwiX25vdGlmeUNvbm5lY3RFdmVudCIsIl9hZnRlckFycm93aGVhZE1vdmUiLCJ3aGVuTm90QWxsb3dlZCIsInNldCIsImFycm93aGVhZCIsImluaXRpYWxFbmQiLCJlbWJlZGRpbmdNb2RlIiwicmVwYXJlbnQiLCJ6IiwiY3VycmVudEVuZCIsInByb3AiLCJlbmRDaGFuZ2VkIiwiZW5kc0VxdWFsIiwiZmluZFZpZXdCeU1vZGVsIiwiaW5pdGlhbE1hZ25ldCIsIm1hZ25ldFVuZGVyUG9pbnRlciIsIl9zbmFwVG9Qb2ludHMiLCJzbmFwUG9pbnQiLCJyYWRpdXMiLCJjbG9zZXN0UG9pbnRYIiwiY2xvc2VzdERpc3RhbmNlWCIsIkluZmluaXR5IiwiY2xvc2VzdFBvaW50WSIsImNsb3Nlc3REaXN0YW5jZVkiLCJkaXN0WCIsIk1hdGgiLCJhYnMiLCJkaXN0WSIsImxvY2FsVG9DbGllbnRQb2ludCIsImVsZW1lbnRGcm9tUG9pbnQiLCJjb25uZWN0aW9uU3RyYXRlZ3kiLCJyIiwidmlld3NJbkFyZWEiLCJmaW5kVmlld3NJbkFyZWEiLCJoZWlnaHQiLCJwcmV2Q2xvc2VzdFZpZXciLCJjbG9zZXN0VmlldyIsInByZXZDbG9zZXN0TWFnbmV0IiwiY2xvc2VzdE1hZ25ldCIsInByZXZNYWduZXRQcm94eSIsIm1hZ25ldFByb3h5IiwibWluRGlzdGFuY2UiLCJNQVhfVkFMVUUiLCJwb2ludGVyIiwiY2FuZGlkYXRlcyIsImJib3giLCJnZXROb2RlQkJveCIsImNhbmRpZGF0ZSIsImNlbnRlciIsInNxdWFyZWREaXN0YW5jZSIsImlzQWxyZWFkeVZhbGlkYXRlZCIsInZhbGlkYXRlQ29ubmVjdGlvbiIsInZhbGlkYXRlQ29ubmVjdGlvbkFyZ3MiLCJmaW5kUHJveHlOb2RlIiwibmV3Q2xvc2VzdE1hZ25ldCIsInVuaGlnaGxpZ2h0IiwiY29ubmVjdGluZyIsInNuYXBwaW5nIiwicHJldkVuZCIsInByZXZYIiwicHJldlkiLCJnZXRMaW5rRW5kIiwiaGlnaGxpZ2h0IiwiZmluZE1hZ25ldCIsImV2ZW50VGFyZ2V0Iiwidmlld1VuZGVyUG9pbnRlciIsIl9iZWZvcmVBcnJvd2hlYWRNb3ZlIiwidG9Gcm9udCIsInN0eWxlIiwicG9pbnRlckV2ZW50cyIsIm1hcmtBdmFpbGFibGUiLCJfbWFya0F2YWlsYWJsZU1hZ25ldHMiLCJfdW5tYXJrQXZhaWxhYmxlTWFnbmV0cyIsIl9jcmVhdGVWYWxpZGF0ZUNvbm5lY3Rpb25BcmdzIiwib3Bwb3NpdGVBcnJvd2hlYWQiLCJqIiwiaXNNYWduZXRBdmFpbGFibGUiLCJ2YWxpZGF0ZSIsImVsZW1lbnRzIiwiZ2V0Q2VsbHMiLCJtYXJrZWQiLCJtYWduZXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImF2YWlsYWJsZU1hZ25ldHMiLCJmaWx0ZXIiLCJiaW5kIiwibSIsIm1hZ25ldEF2YWlsYWJpbGl0eSIsImVsZW1lbnRBdmFpbGFiaWxpdHkiLCJtYXJrZWRLZXlzIiwia2V5cyIsIm1hcmtlZE1hZ25ldHMiLCJvbk1vdW50Iiwib25EZXRhY2giLCJvblJlbW92ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/LinkView.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/Paper.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/dia/Paper.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Paper: () => (/* binding */ Paper)\n/* harmony export */ });\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mvc/index.mjs */ \"(ssr)/./node_modules/jointjs/src/mvc/View.mjs\");\n/* harmony import */ var _CellView_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CellView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/CellView.mjs\");\n/* harmony import */ var _ElementView_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ElementView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/ElementView.mjs\");\n/* harmony import */ var _LinkView_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LinkView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/LinkView.mjs\");\n/* harmony import */ var _Link_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Link.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Link.mjs\");\n/* harmony import */ var _Cell_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Cell.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Cell.mjs\");\n/* harmony import */ var _Graph_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Graph.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Graph.mjs\");\n/* harmony import */ var _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PaperLayer.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/PaperLayer.mjs\");\n/* harmony import */ var _highlighters_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../highlighters/index.mjs */ \"(ssr)/./node_modules/jointjs/src/highlighters/index.mjs\");\n/* harmony import */ var _linkAnchors_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../linkAnchors/index.mjs */ \"(ssr)/./node_modules/jointjs/src/linkAnchors/index.mjs\");\n/* harmony import */ var _connectionPoints_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../connectionPoints/index.mjs */ \"(ssr)/./node_modules/jointjs/src/connectionPoints/index.mjs\");\n/* harmony import */ var _anchors_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../anchors/index.mjs */ \"(ssr)/./node_modules/jointjs/src/anchors/index.mjs\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone */ \"(ssr)/./node_modules/backbone/backbone.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst sortingTypes = {\n    NONE: \"sorting-none\",\n    APPROX: \"sorting-approximate\",\n    EXACT: \"sorting-exact\"\n};\nconst WHEEL_CAP = 50;\nconst WHEEL_WAIT_MS = 20;\nconst MOUNT_BATCH_SIZE = 1000;\nconst UPDATE_BATCH_SIZE = Infinity;\nconst MIN_PRIORITY = 9007199254740991; // Number.MAX_SAFE_INTEGER\nconst HighlightingTypes = _CellView_mjs__WEBPACK_IMPORTED_MODULE_2__.CellView.Highlighting;\nconst defaultHighlighting = {\n    [HighlightingTypes.DEFAULT]: {\n        name: \"stroke\",\n        options: {\n            padding: 3\n        }\n    },\n    [HighlightingTypes.MAGNET_AVAILABILITY]: {\n        name: \"addClass\",\n        options: {\n            className: \"available-magnet\"\n        }\n    },\n    [HighlightingTypes.ELEMENT_AVAILABILITY]: {\n        name: \"addClass\",\n        options: {\n            className: \"available-cell\"\n        }\n    }\n};\nconst defaultLayers = [\n    {\n        name: _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.BACK\n    },\n    {\n        name: _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.CELLS\n    },\n    {\n        name: _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.LABELS\n    },\n    {\n        name: _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.FRONT\n    },\n    {\n        name: _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.TOOLS\n    }\n];\nconst Paper = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__.View.extend({\n    className: \"paper\",\n    options: {\n        width: 800,\n        height: 600,\n        origin: {\n            x: 0,\n            y: 0\n        },\n        gridSize: 1,\n        // Whether or not to draw the grid lines on the paper's DOM element.\n        // e.g drawGrid: true, drawGrid: { color: 'red', thickness: 2 }\n        drawGrid: false,\n        // If not set, the size of the visual grid is the same as the `gridSize`.\n        drawGridSize: null,\n        // Whether or not to draw the background on the paper's DOM element.\n        // e.g. background: { color: 'lightblue', image: '/paper-background.png', repeat: 'flip-xy' }\n        background: false,\n        perpendicularLinks: false,\n        elementView: _ElementView_mjs__WEBPACK_IMPORTED_MODULE_5__.ElementView,\n        linkView: _LinkView_mjs__WEBPACK_IMPORTED_MODULE_6__.LinkView,\n        snapLabels: false,\n        snapLinks: false,\n        snapLinksSelf: false,\n        // Should the link labels be rendered into its own layer?\n        // `false` - the labels are part of the links\n        // `true` - the labels are appended to LayersName.LABELS\n        // [LayersName] - the labels are appended to the layer specified\n        labelsLayer: false,\n        // When set to FALSE, an element may not have more than 1 link with the same source and target element.\n        multiLinks: true,\n        // For adding custom guard logic.\n        guard: function(evt, view) {\n            // FALSE means the event isn't guarded.\n            return false;\n        },\n        highlighting: defaultHighlighting,\n        // Prevent the default context menu from being displayed.\n        preventContextMenu: true,\n        // Prevent the default action for blank:pointer<action>.\n        preventDefaultBlankAction: true,\n        // Prevent the default action for cell:pointer<action>.\n        preventDefaultViewAction: true,\n        // Restrict the translation of elements by given bounding box.\n        // Option accepts a boolean:\n        //  true - the translation is restricted to the paper area\n        //  false - no restrictions\n        // A method:\n        // restrictTranslate: function(elementView) {\n        //     var parentId = elementView.model.get('parent');\n        //     return parentId && this.model.getCell(parentId).getBBox();\n        // },\n        // Or a bounding box:\n        // restrictTranslate: { x: 10, y: 10, width: 790, height: 590 }\n        restrictTranslate: false,\n        // Marks all available magnets with 'available-magnet' class name and all available cells with\n        // 'available-cell' class name. Marks them when dragging a link is started and unmark\n        // when the dragging is stopped.\n        markAvailable: false,\n        // Defines what link model is added to the graph after an user clicks on an active magnet.\n        // Value could be the Backbone.model or a function returning the Backbone.model\n        // defaultLink: function(elementView, magnet) { return condition ? new customLink1() : new customLink2() }\n        defaultLink: new _Link_mjs__WEBPACK_IMPORTED_MODULE_7__.Link,\n        // A connector that is used by links with no connector defined on the model.\n        // e.g. { name: 'rounded', args: { radius: 5 }} or a function\n        defaultConnector: {\n            name: \"normal\"\n        },\n        // A router that is used by links with no router defined on the model.\n        // e.g. { name: 'oneSide', args: { padding: 10 }} or a function\n        defaultRouter: {\n            name: \"normal\"\n        },\n        defaultAnchor: {\n            name: \"center\"\n        },\n        defaultLinkAnchor: {\n            name: \"connectionRatio\"\n        },\n        defaultConnectionPoint: {\n            name: \"bbox\"\n        },\n        /* CONNECTING */ connectionStrategy: null,\n        // Check whether to add a new link to the graph when user clicks on an a magnet.\n        validateMagnet: function(_cellView, magnet, _evt) {\n            return magnet.getAttribute(\"magnet\") !== \"passive\";\n        },\n        // Check whether to allow or disallow the link connection while an arrowhead end (source/target)\n        // being changed.\n        validateConnection: function(cellViewS, _magnetS, cellViewT, _magnetT, end, _linkView) {\n            return (end === \"target\" ? cellViewT : cellViewS) instanceof _ElementView_mjs__WEBPACK_IMPORTED_MODULE_5__.ElementView;\n        },\n        /* EMBEDDING */ // Enables embedding. Re-parent the dragged element with elements under it and makes sure that\n        // all links and elements are visible taken the level of embedding into account.\n        embeddingMode: false,\n        // Check whether to allow or disallow the element embedding while an element being translated.\n        validateEmbedding: function(childView, parentView) {\n            // by default all elements can be in relation child-parent\n            return true;\n        },\n        // Check whether to allow or disallow an embedded element to be unembedded / to become a root.\n        validateUnembedding: function(childView) {\n            // by default all elements can become roots\n            return true;\n        },\n        // Determines the way how a cell finds a suitable parent when it's dragged over the paper.\n        // The cell with the highest z-index (visually on the top) will be chosen.\n        findParentBy: \"bbox\",\n        // If enabled only the element on the very front is taken into account for the embedding.\n        // If disabled the elements under the dragged view are tested one by one\n        // (from front to back) until a valid parent found.\n        frontParentOnly: true,\n        // Interactive flags. See online docs for the complete list of interactive flags.\n        interactive: {\n            labelMove: false\n        },\n        // When set to true the links can be pinned to the paper.\n        // i.e. link source/target can be a point e.g. link.get('source') ==> { x: 100, y: 100 };\n        linkPinning: true,\n        // Custom validation after an interaction with a link ends.\n        // Recognizes a function. If `false` is returned, the link is disallowed (removed or reverted)\n        // (linkView, paper) => boolean\n        allowLink: null,\n        // Allowed number of mousemove events after which the pointerclick event will be still triggered.\n        clickThreshold: 0,\n        // Number of required mousemove events before the first pointermove event will be triggered.\n        moveThreshold: 0,\n        // Number of required mousemove events before a link is created out of the magnet.\n        // Or string `onleave` so the link is created when the pointer leaves the magnet\n        magnetThreshold: 0,\n        // Rendering Options\n        sorting: sortingTypes.EXACT,\n        frozen: false,\n        autoFreeze: false,\n        // no docs yet\n        onViewUpdate: function(view, flag, priority, opt, paper) {\n            // Do not update connected links when:\n            // 1. the view was just inserted (added to the graph and rendered)\n            // 2. the view was just mounted (added back to the paper by viewport function)\n            // 3. the change was marked as `isolate`.\n            // 4. the view model was just removed from the graph\n            if (flag & (view.FLAG_INSERT | view.FLAG_REMOVE) || opt.mounting || opt.isolate) return;\n            paper.requestConnectedLinksUpdate(view, priority, opt);\n        },\n        // no docs yet\n        onViewPostponed: function(view, flag, paper) {\n            return paper.forcePostponedViewUpdate(view, flag);\n        },\n        beforeRender: null,\n        afterRender: null,\n        viewport: null,\n        // Default namespaces\n        cellViewNamespace: null,\n        routerNamespace: null,\n        connectorNamespace: null,\n        highlighterNamespace: _highlighters_index_mjs__WEBPACK_IMPORTED_MODULE_8__,\n        anchorNamespace: _anchors_index_mjs__WEBPACK_IMPORTED_MODULE_9__,\n        linkAnchorNamespace: _linkAnchors_index_mjs__WEBPACK_IMPORTED_MODULE_10__,\n        connectionPointNamespace: _connectionPoints_index_mjs__WEBPACK_IMPORTED_MODULE_11__,\n        overflow: false\n    },\n    events: {\n        \"dblclick\": \"pointerdblclick\",\n        \"dbltap\": \"pointerdblclick\",\n        \"contextmenu\": \"contextmenu\",\n        \"mousedown\": \"pointerdown\",\n        \"touchstart\": \"pointerdown\",\n        \"mouseover\": \"mouseover\",\n        \"mouseout\": \"mouseout\",\n        \"mouseenter\": \"mouseenter\",\n        \"mouseleave\": \"mouseleave\",\n        \"wheel\": \"mousewheel\",\n        \"mouseenter .joint-cell\": \"mouseenter\",\n        \"mouseleave .joint-cell\": \"mouseleave\",\n        \"mouseenter .joint-tools\": \"mouseenter\",\n        \"mouseleave .joint-tools\": \"mouseleave\",\n        \"dblclick .joint-cell [magnet]\": \"magnetpointerdblclick\",\n        \"contextmenu .joint-cell [magnet]\": \"magnetcontextmenu\",\n        \"mousedown .joint-link .label\": \"onlabel\",\n        \"touchstart .joint-link .label\": \"onlabel\",\n        \"dragstart .joint-cell image\": \"onImageDragStart\" // firefox fix\n    },\n    documentEvents: {\n        \"mousemove\": \"pointermove\",\n        \"touchmove\": \"pointermove\",\n        \"mouseup\": \"pointerup\",\n        \"touchend\": \"pointerup\",\n        \"touchcancel\": \"pointerup\"\n    },\n    svg: null,\n    viewport: null,\n    defs: null,\n    tools: null,\n    $background: null,\n    layers: null,\n    $grid: null,\n    $document: null,\n    // For storing the current transformation matrix (CTM) of the paper's viewport.\n    _viewportMatrix: null,\n    // For verifying whether the CTM is up-to-date. The viewport transform attribute\n    // could have been manipulated directly.\n    _viewportTransformString: null,\n    // Updates data (priorities, unmounted views etc.)\n    _updates: null,\n    // Paper Layers\n    _layers: null,\n    SORT_DELAYING_BATCHES: [\n        \"add\",\n        \"to-front\",\n        \"to-back\"\n    ],\n    UPDATE_DELAYING_BATCHES: [\n        \"translate\"\n    ],\n    // If you interact with these elements,\n    // the default interaction such as `element move` is prevented.\n    FORM_CONTROL_TAG_NAMES: [\n        \"TEXTAREA\",\n        \"INPUT\",\n        \"BUTTON\",\n        \"SELECT\",\n        \"OPTION\"\n    ],\n    // If you interact with these elements, the events are not propagated to the paper\n    // i.e. paper events such as `element:pointerdown` are not triggered.\n    GUARDED_TAG_NAMES: [\n        // Guard <select> for consistency. When you click on it:\n        // Chrome: triggers `pointerdown`, `pointerup`, `pointerclick` to open\n        // Firefox: triggers `pointerdown` on open, `pointerup` (and `pointerclick` only if you haven't moved).\n        //          on close. However, if you open and then close by clicking elsewhere on the page,\n        //           no other event is triggered.\n        // Safari: when you open it, it triggers `pointerdown`. That's it.\n        \"SELECT\"\n    ],\n    MIN_SCALE: 1e-6,\n    init: function() {\n        const { options, el } = this;\n        if (!options.cellViewNamespace) {\n            /* eslint-disable no-undef */ options.cellViewNamespace = typeof joint !== \"undefined\" && (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.has)(joint, \"shapes\") ? joint.shapes : null;\n        /* eslint-enable no-undef */ }\n        const model = this.model = options.model || new _Graph_mjs__WEBPACK_IMPORTED_MODULE_13__.Graph;\n        // Layers (SVGGroups)\n        this._layers = {};\n        this.setGrid(options.drawGrid);\n        this.cloneOptions();\n        this.render();\n        this._setDimensions();\n        this.startListening();\n        // Hash of all cell views.\n        this._views = {};\n        // Mouse wheel events buffer\n        this._mw_evt_buffer = {\n            event: null,\n            deltas: []\n        };\n        // Reference to the paper owner document\n        this.$document = jquery__WEBPACK_IMPORTED_MODULE_0__(el.ownerDocument);\n        // Render existing cells in the graph\n        this.resetViews(model.attributes.cells.models);\n        // Start the Rendering Loop\n        if (!this.isFrozen() && this.isAsync()) this.updateViewsAsync();\n    },\n    _resetUpdates: function() {\n        return this._updates = {\n            id: null,\n            priorities: [\n                {},\n                {},\n                {}\n            ],\n            unmountedCids: [],\n            mountedCids: [],\n            unmounted: {},\n            mounted: {},\n            count: 0,\n            keyFrozen: false,\n            freezeKey: null,\n            sort: false,\n            disabled: false,\n            idle: false\n        };\n    },\n    startListening: function() {\n        var model = this.model;\n        this.listenTo(model, \"add\", this.onCellAdded).listenTo(model, \"remove\", this.onCellRemoved).listenTo(model, \"change\", this.onCellChange).listenTo(model, \"reset\", this.onGraphReset).listenTo(model, \"sort\", this.onGraphSort).listenTo(model, \"batch:stop\", this.onGraphBatchStop);\n        this.on(\"cell:highlight\", this.onCellHighlight).on(\"cell:unhighlight\", this.onCellUnhighlight).on(\"scale translate\", this.update);\n    },\n    onCellAdded: function(cell, _, opt) {\n        var position = opt.position;\n        if (this.isAsync() || !(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(position)) {\n            this.renderView(cell, opt);\n        } else {\n            if (opt.maxPosition === position) this.freeze({\n                key: \"addCells\"\n            });\n            this.renderView(cell, opt);\n            if (position === 0) this.unfreeze({\n                key: \"addCells\"\n            });\n        }\n    },\n    onCellRemoved: function(cell, _, opt) {\n        const view = this.findViewByModel(cell);\n        if (view) this.requestViewUpdate(view, view.FLAG_REMOVE, view.UPDATE_PRIORITY, opt);\n    },\n    onCellChange: function(cell, opt) {\n        if (cell === this.model.attributes.cells) return;\n        if (cell.hasChanged(\"z\") && this.options.sorting === sortingTypes.APPROX) {\n            const view = this.findViewByModel(cell);\n            if (view) this.requestViewUpdate(view, view.FLAG_INSERT, view.UPDATE_PRIORITY, opt);\n        }\n    },\n    onGraphReset: function(collection, opt) {\n        this.resetLayers();\n        this.resetViews(collection.models, opt);\n    },\n    onGraphSort: function() {\n        if (this.model.hasActiveBatch(this.SORT_DELAYING_BATCHES)) return;\n        this.sortViews();\n    },\n    onGraphBatchStop: function(data) {\n        if (this.isFrozen()) return;\n        var name = data && data.batchName;\n        var graph = this.model;\n        if (!this.isAsync()) {\n            var updateDelayingBatches = this.UPDATE_DELAYING_BATCHES;\n            if (updateDelayingBatches.includes(name) && !graph.hasActiveBatch(updateDelayingBatches)) {\n                this.updateViews(data);\n            }\n        }\n        var sortDelayingBatches = this.SORT_DELAYING_BATCHES;\n        if (sortDelayingBatches.includes(name) && !graph.hasActiveBatch(sortDelayingBatches)) {\n            this.sortViews();\n        }\n    },\n    cloneOptions: function() {\n        const { options } = this;\n        const { defaultConnector, defaultRouter, defaultConnectionPoint, defaultAnchor, defaultLinkAnchor, origin, highlighting, cellViewNamespace, interactive } = options;\n        // Default cellView namespace for ES5\n        /* eslint-disable no-undef */ if (!cellViewNamespace && typeof joint !== \"undefined\" && (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.has)(joint, \"shapes\")) {\n            options.cellViewNamespace = joint.shapes;\n        }\n        /* eslint-enable no-undef */ // Here if a function was provided, we can not clone it, as this would result in loosing the function.\n        // If the default is used, the cloning is necessary in order to prevent modifying the options on prototype.\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(defaultConnector)) {\n            options.defaultConnector = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.cloneDeep)(defaultConnector);\n        }\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(defaultRouter)) {\n            options.defaultRouter = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.cloneDeep)(defaultRouter);\n        }\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(defaultConnectionPoint)) {\n            options.defaultConnectionPoint = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.cloneDeep)(defaultConnectionPoint);\n        }\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(defaultAnchor)) {\n            options.defaultAnchor = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.cloneDeep)(defaultAnchor);\n        }\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(defaultLinkAnchor)) {\n            options.defaultLinkAnchor = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.cloneDeep)(defaultLinkAnchor);\n        }\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isPlainObject)(interactive)) {\n            options.interactive = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)({}, interactive);\n        }\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isPlainObject)(highlighting)) {\n            // Return the default highlighting options into the user specified options.\n            options.highlighting = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaultsDeep)({}, highlighting, defaultHighlighting);\n        }\n        options.origin = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)({}, origin);\n    },\n    children: function() {\n        var ns = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].namespace;\n        return [\n            {\n                namespaceURI: ns.xhtml,\n                tagName: \"div\",\n                className: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.addClassNamePrefix)(\"paper-background\"),\n                selector: \"background\"\n            },\n            {\n                namespaceURI: ns.xhtml,\n                tagName: \"div\",\n                className: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.addClassNamePrefix)(\"paper-grid\"),\n                selector: \"grid\"\n            },\n            {\n                namespaceURI: ns.svg,\n                tagName: \"svg\",\n                attributes: {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"xmlns:xlink\": ns.xlink\n                },\n                selector: \"svg\",\n                children: [\n                    {\n                        // Append `<defs>` element to the SVG document. This is useful for filters and gradients.\n                        // It's desired to have the defs defined before the viewport (e.g. to make a PDF document pick up defs properly).\n                        tagName: \"defs\",\n                        selector: \"defs\"\n                    },\n                    {\n                        tagName: \"g\",\n                        className: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.addClassNamePrefix)(\"layers\"),\n                        selector: \"layers\"\n                    }\n                ]\n            }\n        ];\n    },\n    hasLayerView (layerName) {\n        return layerName in this._layers;\n    },\n    getLayerView (layerName) {\n        const { _layers } = this;\n        if (layerName in _layers) return _layers[layerName];\n        throw new Error(`dia.Paper: Unknown layer \"${layerName}\"`);\n    },\n    getLayerNode (layerName) {\n        return this.getLayerView(layerName).el;\n    },\n    render: function() {\n        this.renderChildren();\n        const { childNodes, options } = this;\n        const { svg, defs, layers, background, grid } = childNodes;\n        svg.style.overflow = options.overflow ? \"visible\" : \"hidden\";\n        this.svg = svg;\n        this.defs = defs;\n        this.layers = layers;\n        this.$background = jquery__WEBPACK_IMPORTED_MODULE_0__(background);\n        this.$grid = jquery__WEBPACK_IMPORTED_MODULE_0__(grid);\n        this.renderLayers();\n        _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].ensureId(svg);\n        if (options.background) {\n            this.drawBackground(options.background);\n        }\n        if (options.drawGrid) {\n            this.drawGrid();\n        }\n        return this;\n    },\n    renderLayers: function(layers = defaultLayers) {\n        this.removeLayers();\n        // TODO: Layers to be read from the graph `layers` attribute\n        layers.forEach(({ name, sorted })=>{\n            const layerView = new _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.PaperLayer({\n                name\n            });\n            this.layers.appendChild(layerView.el);\n            this._layers[name] = layerView;\n        });\n        // Throws an exception if doesn't exist\n        const cellsLayerView = this.getLayerView(_PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.CELLS);\n        const toolsLayerView = this.getLayerView(_PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.TOOLS);\n        const labelsLayerView = this.getLayerView(_PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.LABELS);\n        // backwards compatibility\n        this.tools = toolsLayerView.el;\n        this.cells = this.viewport = cellsLayerView.el;\n        // user-select: none;\n        cellsLayerView.vel.addClass((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.addClassNamePrefix)(\"viewport\"));\n        labelsLayerView.vel.addClass((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.addClassNamePrefix)(\"viewport\"));\n    },\n    removeLayers: function() {\n        const { _layers } = this;\n        Object.keys(_layers).forEach((name)=>{\n            _layers[name].remove();\n            delete _layers[name];\n        });\n    },\n    resetLayers: function() {\n        const { _layers } = this;\n        Object.keys(_layers).forEach((name)=>{\n            _layers[name].removePivots();\n        });\n    },\n    update: function() {\n        if (this.options.drawGrid) {\n            this.drawGrid();\n        }\n        if (this._background) {\n            this.updateBackgroundImage(this._background);\n        }\n        return this;\n    },\n    matrix: function(ctm) {\n        var viewport = this.layers;\n        // Getter:\n        if (ctm === undefined) {\n            var transformString = viewport.getAttribute(\"transform\");\n            if ((this._viewportTransformString || null) === transformString) {\n                // It's ok to return the cached matrix. The transform attribute has not changed since\n                // the matrix was stored.\n                ctm = this._viewportMatrix;\n            } else {\n                // The viewport transform attribute has changed. Measure the matrix and cache again.\n                ctm = viewport.getCTM();\n                this._viewportMatrix = ctm;\n                this._viewportTransformString = transformString;\n            }\n            // Clone the cached current transformation matrix.\n            // If no matrix previously stored the identity matrix is returned.\n            return _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].createSVGMatrix(ctm);\n        }\n        // Setter:\n        ctm = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].createSVGMatrix(ctm);\n        var ctmString = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].matrixToTransformString(ctm);\n        viewport.setAttribute(\"transform\", ctmString);\n        this._viewportMatrix = ctm;\n        this._viewportTransformString = viewport.getAttribute(\"transform\");\n        return this;\n    },\n    clientMatrix: function() {\n        return _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].createSVGMatrix(this.cells.getScreenCTM());\n    },\n    requestConnectedLinksUpdate: function(view, priority, opt) {\n        if (view instanceof _CellView_mjs__WEBPACK_IMPORTED_MODULE_2__.CellView) {\n            var model = view.model;\n            var links = this.model.getConnectedLinks(model);\n            for(var j = 0, n = links.length; j < n; j++){\n                var link = links[j];\n                var linkView = this.findViewByModel(link);\n                if (!linkView) continue;\n                var flagLabels = [\n                    \"UPDATE\"\n                ];\n                if (link.getTargetCell() === model) flagLabels.push(\"TARGET\");\n                if (link.getSourceCell() === model) flagLabels.push(\"SOURCE\");\n                var nextPriority = Math.max(priority + 1, linkView.UPDATE_PRIORITY);\n                this.scheduleViewUpdate(linkView, linkView.getFlag(flagLabels), nextPriority, opt);\n            }\n        }\n    },\n    forcePostponedViewUpdate: function(view, flag) {\n        if (!view || !(view instanceof _CellView_mjs__WEBPACK_IMPORTED_MODULE_2__.CellView)) return false;\n        var model = view.model;\n        if (model.isElement()) return false;\n        if ((flag & view.getFlag([\n            \"SOURCE\",\n            \"TARGET\"\n        ])) === 0) {\n            var dumpOptions = {\n                silent: true\n            };\n            // LinkView is waiting for the target or the source cellView to be rendered\n            // This can happen when the cells are not in the viewport.\n            var sourceFlag = 0;\n            var sourceView = this.findViewByModel(model.getSourceCell());\n            if (sourceView && !this.isViewMounted(sourceView)) {\n                sourceFlag = this.dumpView(sourceView, dumpOptions);\n                view.updateEndMagnet(\"source\");\n            }\n            var targetFlag = 0;\n            var targetView = this.findViewByModel(model.getTargetCell());\n            if (targetView && !this.isViewMounted(targetView)) {\n                targetFlag = this.dumpView(targetView, dumpOptions);\n                view.updateEndMagnet(\"target\");\n            }\n            if (sourceFlag === 0 && targetFlag === 0) {\n                // If leftover flag is 0, all view updates were done.\n                return !this.dumpView(view, dumpOptions);\n            }\n        }\n        return false;\n    },\n    requestViewUpdate: function(view, flag, priority, opt) {\n        opt || (opt = {});\n        this.scheduleViewUpdate(view, flag, priority, opt);\n        var isAsync = this.isAsync();\n        if (this.isFrozen() || isAsync && opt.async !== false) return;\n        if (this.model.hasActiveBatch(this.UPDATE_DELAYING_BATCHES)) return;\n        var stats = this.updateViews(opt);\n        if (isAsync) this.notifyAfterRender(stats, opt);\n    },\n    scheduleViewUpdate: function(view, type, priority, opt) {\n        const { _updates: updates, options } = this;\n        if (updates.idle) {\n            if (options.autoFreeze) {\n                updates.idle = false;\n                this.unfreeze();\n            }\n        }\n        const { FLAG_REMOVE, FLAG_INSERT, UPDATE_PRIORITY, cid } = view;\n        let priorityUpdates = updates.priorities[priority];\n        if (!priorityUpdates) priorityUpdates = updates.priorities[priority] = {};\n        // Move higher priority updates to this priority\n        if (priority > UPDATE_PRIORITY) {\n            // Not the default priority for this view. It's most likely a link view\n            // connected to another link view, which triggered the update.\n            // TODO: If there is an update scheduled with a lower priority already, we should\n            // change the requested priority to the lowest one. Does not seem to be critical\n            // right now, as it \"only\" results in multiple updates on the same view.\n            for(let i = priority - 1; i >= UPDATE_PRIORITY; i--){\n                const prevPriorityUpdates = updates.priorities[i];\n                if (!prevPriorityUpdates || !(cid in prevPriorityUpdates)) continue;\n                priorityUpdates[cid] |= prevPriorityUpdates[cid];\n                delete prevPriorityUpdates[cid];\n            }\n        }\n        let currentType = priorityUpdates[cid] || 0;\n        // Prevent cycling\n        if ((currentType & type) === type) return;\n        if (!currentType) updates.count++;\n        if (type & FLAG_REMOVE && currentType & FLAG_INSERT) {\n            // When a view is removed we need to remove the insert flag as this is a reinsert\n            priorityUpdates[cid] ^= FLAG_INSERT;\n        } else if (type & FLAG_INSERT && currentType & FLAG_REMOVE) {\n            // When a view is added we need to remove the remove flag as this is view was previously removed\n            priorityUpdates[cid] ^= FLAG_REMOVE;\n        }\n        priorityUpdates[cid] |= type;\n        const viewUpdateFn = options.onViewUpdate;\n        if (typeof viewUpdateFn === \"function\") viewUpdateFn.call(this, view, type, priority, opt || {}, this);\n    },\n    dumpViewUpdate: function(view) {\n        if (!view) return 0;\n        var updates = this._updates;\n        var cid = view.cid;\n        var priorityUpdates = updates.priorities[view.UPDATE_PRIORITY];\n        var flag = this.registerMountedView(view) | priorityUpdates[cid];\n        delete priorityUpdates[cid];\n        return flag;\n    },\n    dumpView: function(view, opt = {}) {\n        const flag = this.dumpViewUpdate(view);\n        if (!flag) return 0;\n        const shouldNotify = !opt.silent;\n        if (shouldNotify) this.notifyBeforeRender(opt);\n        const leftover = this.updateView(view, flag, opt);\n        if (shouldNotify) {\n            const stats = {\n                updated: 1,\n                priority: view.UPDATE_PRIORITY\n            };\n            this.notifyAfterRender(stats, opt);\n        }\n        return leftover;\n    },\n    updateView: function(view, flag, opt) {\n        if (!view) return 0;\n        const { FLAG_REMOVE, FLAG_INSERT, FLAG_INIT, model } = view;\n        if (view instanceof _CellView_mjs__WEBPACK_IMPORTED_MODULE_2__.CellView) {\n            if (flag & FLAG_REMOVE) {\n                this.removeView(model);\n                return 0;\n            }\n            if (flag & FLAG_INSERT) {\n                const isInitialInsert = !!(flag & FLAG_INIT);\n                if (isInitialInsert) {\n                    flag ^= FLAG_INIT;\n                }\n                this.insertView(view, isInitialInsert);\n                flag ^= FLAG_INSERT;\n            }\n        }\n        if (!flag) return 0;\n        return view.confirmUpdate(flag, opt || {});\n    },\n    requireView: function(model, opt) {\n        var view = this.findViewByModel(model);\n        if (!view) return null;\n        this.dumpView(view, opt);\n        return view;\n    },\n    registerUnmountedView: function(view) {\n        var cid = view.cid;\n        var updates = this._updates;\n        if (cid in updates.unmounted) return 0;\n        var flag = updates.unmounted[cid] |= view.FLAG_INSERT;\n        updates.unmountedCids.push(cid);\n        delete updates.mounted[cid];\n        return flag;\n    },\n    registerMountedView: function(view) {\n        var cid = view.cid;\n        var updates = this._updates;\n        if (cid in updates.mounted) return 0;\n        updates.mounted[cid] = true;\n        updates.mountedCids.push(cid);\n        var flag = updates.unmounted[cid] || 0;\n        delete updates.unmounted[cid];\n        return flag;\n    },\n    isViewMounted: function(view) {\n        if (!view) return false;\n        var cid = view.cid;\n        var updates = this._updates;\n        return cid in updates.mounted;\n    },\n    dumpViews: function(opt) {\n        var passingOpt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaults)({}, opt, {\n            viewport: null\n        });\n        this.checkViewport(passingOpt);\n        this.updateViews(passingOpt);\n    },\n    // Synchronous views update\n    updateViews: function(opt) {\n        this.notifyBeforeRender(opt);\n        let batchStats;\n        let updateCount = 0;\n        let batchCount = 0;\n        let priority = MIN_PRIORITY;\n        do {\n            batchCount++;\n            batchStats = this.updateViewsBatch(opt);\n            updateCount += batchStats.updated;\n            priority = Math.min(batchStats.priority, priority);\n        }while (!batchStats.empty);\n        const stats = {\n            updated: updateCount,\n            batches: batchCount,\n            priority\n        };\n        this.notifyAfterRender(stats, opt);\n        return stats;\n    },\n    hasScheduledUpdates: function() {\n        const priorities = this._updates.priorities;\n        const priorityIndexes = Object.keys(priorities); // convert priorities to a dense array\n        let i = priorityIndexes.length;\n        while(i > 0 && i--){\n            // a faster way how to check if an object is empty\n            for(let _key in priorities[priorityIndexes[i]])return true;\n        }\n        return false;\n    },\n    updateViewsAsync: function(opt, data) {\n        opt || (opt = {});\n        data || (data = {\n            processed: 0,\n            priority: MIN_PRIORITY\n        });\n        const { _updates: updates, options } = this;\n        const id = updates.id;\n        if (id) {\n            (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.cancelFrame)(id);\n            if (data.processed === 0 && this.hasScheduledUpdates()) {\n                this.notifyBeforeRender(opt);\n            }\n            const stats = this.updateViewsBatch(opt);\n            const passingOpt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaults)({}, opt, {\n                mountBatchSize: MOUNT_BATCH_SIZE - stats.mounted,\n                unmountBatchSize: MOUNT_BATCH_SIZE - stats.unmounted\n            });\n            const checkStats = this.checkViewport(passingOpt);\n            const unmountCount = checkStats.unmounted;\n            const mountCount = checkStats.mounted;\n            let processed = data.processed;\n            const total = updates.count;\n            if (stats.updated > 0) {\n                // Some updates have been just processed\n                processed += stats.updated + stats.unmounted;\n                stats.processed = processed;\n                data.priority = Math.min(stats.priority, data.priority);\n                if (stats.empty && mountCount === 0) {\n                    stats.unmounted += unmountCount;\n                    stats.mounted += mountCount;\n                    stats.priority = data.priority;\n                    this.notifyAfterRender(stats, opt);\n                    data.processed = 0;\n                    data.priority = MIN_PRIORITY;\n                    updates.count = 0;\n                } else {\n                    data.processed = processed;\n                }\n            } else {\n                if (!updates.idle) {\n                    if (options.autoFreeze) {\n                        this.freeze();\n                        updates.idle = true;\n                        this.trigger(\"render:idle\", opt);\n                    }\n                }\n            }\n            // Progress callback\n            const progressFn = opt.progress;\n            if (total && typeof progressFn === \"function\") {\n                progressFn.call(this, stats.empty, processed, total, stats, this);\n            }\n            // The current frame could have been canceled in a callback\n            if (updates.id !== id) return;\n        }\n        if (updates.disabled) {\n            throw new Error(\"dia.Paper: can not unfreeze the paper after it was removed\");\n        }\n        updates.id = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.nextFrame)(this.updateViewsAsync, this, opt, data);\n    },\n    notifyBeforeRender: function(opt = {}) {\n        let beforeFn = opt.beforeRender;\n        if (typeof beforeFn !== \"function\") {\n            beforeFn = this.options.beforeRender;\n            if (typeof beforeFn !== \"function\") return;\n        }\n        beforeFn.call(this, opt, this);\n    },\n    notifyAfterRender: function(stats, opt = {}) {\n        let afterFn = opt.afterRender;\n        if (typeof afterFn !== \"function\") {\n            afterFn = this.options.afterRender;\n        }\n        if (typeof afterFn === \"function\") {\n            afterFn.call(this, stats, opt, this);\n        }\n        this.trigger(\"render:done\", stats, opt);\n    },\n    updateViewsBatch: function(opt) {\n        opt || (opt = {});\n        var batchSize = opt.batchSize || UPDATE_BATCH_SIZE;\n        var updates = this._updates;\n        var updateCount = 0;\n        var postponeCount = 0;\n        var unmountCount = 0;\n        var mountCount = 0;\n        var maxPriority = MIN_PRIORITY;\n        var empty = true;\n        var options = this.options;\n        var priorities = updates.priorities;\n        var viewportFn = \"viewport\" in opt ? opt.viewport : options.viewport;\n        if (typeof viewportFn !== \"function\") viewportFn = null;\n        var postponeViewFn = options.onViewPostponed;\n        if (typeof postponeViewFn !== \"function\") postponeViewFn = null;\n        var priorityIndexes = Object.keys(priorities); // convert priorities to a dense array\n        main: for(var i = 0, n = priorityIndexes.length; i < n; i++){\n            var priority = +priorityIndexes[i];\n            var priorityUpdates = priorities[priority];\n            for(var cid in priorityUpdates){\n                if (updateCount >= batchSize) {\n                    empty = false;\n                    break main;\n                }\n                var view = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__.views[cid];\n                if (!view) {\n                    // This should not occur\n                    delete priorityUpdates[cid];\n                    continue;\n                }\n                var currentFlag = priorityUpdates[cid];\n                if ((currentFlag & view.FLAG_REMOVE) === 0) {\n                    // We should never check a view for viewport if we are about to remove the view\n                    var isDetached = cid in updates.unmounted;\n                    if (view.DETACHABLE && viewportFn && !viewportFn.call(this, view, !isDetached, this)) {\n                        // Unmount View\n                        if (!isDetached) {\n                            this.registerUnmountedView(view);\n                            this.detachView(view);\n                        }\n                        updates.unmounted[cid] |= currentFlag;\n                        delete priorityUpdates[cid];\n                        unmountCount++;\n                        continue;\n                    }\n                    // Mount View\n                    if (isDetached) {\n                        currentFlag |= view.FLAG_INSERT;\n                        mountCount++;\n                    }\n                    currentFlag |= this.registerMountedView(view);\n                }\n                var leftoverFlag = this.updateView(view, currentFlag, opt);\n                if (leftoverFlag > 0) {\n                    // View update has not finished completely\n                    priorityUpdates[cid] = leftoverFlag;\n                    if (!postponeViewFn || !postponeViewFn.call(this, view, leftoverFlag, this) || priorityUpdates[cid]) {\n                        postponeCount++;\n                        empty = false;\n                        continue;\n                    }\n                }\n                if (maxPriority > priority) maxPriority = priority;\n                updateCount++;\n                delete priorityUpdates[cid];\n            }\n        }\n        return {\n            priority: maxPriority,\n            updated: updateCount,\n            postponed: postponeCount,\n            unmounted: unmountCount,\n            mounted: mountCount,\n            empty: empty\n        };\n    },\n    getUnmountedViews: function() {\n        const updates = this._updates;\n        const unmountedCids = Object.keys(updates.unmounted);\n        const n = unmountedCids.length;\n        const unmountedViews = new Array(n);\n        for(var i = 0; i < n; i++){\n            unmountedViews[i] = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__.views[unmountedCids[i]];\n        }\n        return unmountedViews;\n    },\n    getMountedViews: function() {\n        const updates = this._updates;\n        const mountedCids = Object.keys(updates.mounted);\n        const n = mountedCids.length;\n        const mountedViews = new Array(n);\n        for(var i = 0; i < n; i++){\n            mountedViews[i] = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__.views[mountedCids[i]];\n        }\n        return mountedViews;\n    },\n    checkUnmountedViews: function(viewportFn, opt) {\n        opt || (opt = {});\n        var mountCount = 0;\n        if (typeof viewportFn !== \"function\") viewportFn = null;\n        var batchSize = \"mountBatchSize\" in opt ? opt.mountBatchSize : Infinity;\n        var updates = this._updates;\n        var unmountedCids = updates.unmountedCids;\n        var unmounted = updates.unmounted;\n        for(var i = 0, n = Math.min(unmountedCids.length, batchSize); i < n; i++){\n            var cid = unmountedCids[i];\n            if (!(cid in unmounted)) continue;\n            var view = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__.views[cid];\n            if (!view) continue;\n            if (view.DETACHABLE && viewportFn && !viewportFn.call(this, view, false, this)) {\n                // Push at the end of all unmounted ids, so this can be check later again\n                unmountedCids.push(cid);\n                continue;\n            }\n            mountCount++;\n            var flag = this.registerMountedView(view);\n            if (flag) this.scheduleViewUpdate(view, flag, view.UPDATE_PRIORITY, {\n                mounting: true\n            });\n        }\n        // Get rid of views, that have been mounted\n        unmountedCids.splice(0, i);\n        return mountCount;\n    },\n    checkMountedViews: function(viewportFn, opt) {\n        opt || (opt = {});\n        var unmountCount = 0;\n        if (typeof viewportFn !== \"function\") return unmountCount;\n        var batchSize = \"unmountBatchSize\" in opt ? opt.unmountBatchSize : Infinity;\n        var updates = this._updates;\n        var mountedCids = updates.mountedCids;\n        var mounted = updates.mounted;\n        for(var i = 0, n = Math.min(mountedCids.length, batchSize); i < n; i++){\n            var cid = mountedCids[i];\n            if (!(cid in mounted)) continue;\n            var view = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_4__.views[cid];\n            if (!view) continue;\n            if (!view.DETACHABLE || viewportFn.call(this, view, true, this)) {\n                // Push at the end of all mounted ids, so this can be check later again\n                mountedCids.push(cid);\n                continue;\n            }\n            unmountCount++;\n            var flag = this.registerUnmountedView(view);\n            if (flag) this.detachView(view);\n        }\n        // Get rid of views, that have been unmounted\n        mountedCids.splice(0, i);\n        return unmountCount;\n    },\n    checkViewVisibility: function(cellView, opt = {}) {\n        let viewportFn = \"viewport\" in opt ? opt.viewport : this.options.viewport;\n        if (typeof viewportFn !== \"function\") viewportFn = null;\n        const updates = this._updates;\n        const { mounted, unmounted } = updates;\n        const visible = !cellView.DETACHABLE || !viewportFn || viewportFn.call(this, cellView, false, this);\n        let isUnmounted = false;\n        let isMounted = false;\n        if (cellView.cid in mounted && !visible) {\n            const flag = this.registerUnmountedView(cellView);\n            if (flag) this.detachView(cellView);\n            const i = updates.mountedCids.indexOf(cellView.cid);\n            updates.mountedCids.splice(i, 1);\n            isUnmounted = true;\n        }\n        if (!isUnmounted && cellView.cid in unmounted && visible) {\n            const i = updates.unmountedCids.indexOf(cellView.cid);\n            updates.unmountedCids.splice(i, 1);\n            var flag = this.registerMountedView(cellView);\n            if (flag) this.scheduleViewUpdate(cellView, flag, cellView.UPDATE_PRIORITY, {\n                mounting: true\n            });\n            isMounted = true;\n        }\n        return {\n            mounted: isMounted ? 1 : 0,\n            unmounted: isUnmounted ? 1 : 0\n        };\n    },\n    checkViewport: function(opt) {\n        var passingOpt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaults)({}, opt, {\n            mountBatchSize: Infinity,\n            unmountBatchSize: Infinity\n        });\n        var viewportFn = \"viewport\" in passingOpt ? passingOpt.viewport : this.options.viewport;\n        var unmountedCount = this.checkMountedViews(viewportFn, passingOpt);\n        if (unmountedCount > 0) {\n            // Do not check views, that have been just unmounted and pushed at the end of the cids array\n            var unmountedCids = this._updates.unmountedCids;\n            passingOpt.mountBatchSize = Math.min(unmountedCids.length - unmountedCount, passingOpt.mountBatchSize);\n        }\n        var mountedCount = this.checkUnmountedViews(viewportFn, passingOpt);\n        return {\n            mounted: mountedCount,\n            unmounted: unmountedCount\n        };\n    },\n    freeze: function(opt) {\n        opt || (opt = {});\n        var updates = this._updates;\n        var key = opt.key;\n        var isFrozen = this.options.frozen;\n        var freezeKey = updates.freezeKey;\n        if (key && key !== freezeKey) {\n            // key passed, but the paper is already freezed with another key\n            if (isFrozen && freezeKey) return;\n            updates.freezeKey = key;\n            updates.keyFrozen = isFrozen;\n        }\n        this.options.frozen = true;\n        var id = updates.id;\n        updates.id = null;\n        if (this.isAsync() && id) (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.cancelFrame)(id);\n    },\n    unfreeze: function(opt) {\n        opt || (opt = {});\n        var updates = this._updates;\n        var key = opt.key;\n        var freezeKey = updates.freezeKey;\n        // key passed, but the paper is already freezed with another key\n        if (key && freezeKey && key !== freezeKey) return;\n        updates.freezeKey = null;\n        // key passed, but the paper is already freezed\n        if (key && key === freezeKey && updates.keyFrozen) return;\n        if (this.isAsync()) {\n            this.freeze();\n            this.updateViewsAsync(opt);\n        } else {\n            this.updateViews(opt);\n        }\n        this.options.frozen = updates.keyFrozen = false;\n        if (updates.sort) {\n            this.sortViews();\n            updates.sort = false;\n        }\n    },\n    isAsync: function() {\n        return !!this.options.async;\n    },\n    isFrozen: function() {\n        return !!this.options.frozen;\n    },\n    isExactSorting: function() {\n        return this.options.sorting === sortingTypes.EXACT;\n    },\n    onRemove: function() {\n        this.freeze();\n        this._updates.disabled = true;\n        //clean up all DOM elements/views to prevent memory leaks\n        this.removeLayers();\n        this.removeViews();\n    },\n    getComputedSize: function() {\n        var options = this.options;\n        var w = options.width;\n        var h = options.height;\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(w)) w = this.el.clientWidth;\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(h)) h = this.el.clientHeight;\n        return {\n            width: w,\n            height: h\n        };\n    },\n    setDimensions: function(width, height) {\n        const { options } = this;\n        const { width: currentWidth, height: currentHeight } = options;\n        let w = width === undefined ? currentWidth : width;\n        let h = height === undefined ? currentHeight : height;\n        if (currentWidth === w && currentHeight === h) return;\n        options.width = w;\n        options.height = h;\n        this._setDimensions();\n        const computedSize = this.getComputedSize();\n        this.trigger(\"resize\", computedSize.width, computedSize.height);\n    },\n    _setDimensions: function() {\n        const { options } = this;\n        let w = options.width;\n        let h = options.height;\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(w)) w = Math.round(w);\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(h)) h = Math.round(h);\n        this.$el.css({\n            width: w === null ? \"\" : w,\n            height: h === null ? \"\" : h\n        });\n    },\n    setOrigin: function(ox, oy) {\n        return this.translate(ox || 0, oy || 0);\n    },\n    // Expand/shrink the paper to fit the content.\n    // Alternatively signature function(opt)\n    fitToContent: function(gridWidth, gridHeight, padding, opt) {\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(gridWidth)) {\n            // first parameter is an option object\n            opt = gridWidth;\n        } else {\n            // Support for a deprecated signature\n            opt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)({\n                gridWidth,\n                gridHeight,\n                padding\n            }, opt);\n        }\n        const { x, y, width, height } = this.getFitToContentArea(opt);\n        const { sx, sy } = this.scale();\n        this.setOrigin(-x * sx, -y * sy);\n        this.setDimensions(width * sx, height * sy);\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(x, y, width, height);\n    },\n    getFitToContentArea: function(opt = {}) {\n        // Calculate the paper size to accommodate all the graph's elements.\n        const gridWidth = opt.gridWidth || 1;\n        const gridHeight = opt.gridHeight || 1;\n        const padding = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeSides)(opt.padding || 0);\n        const minWidth = Math.max(opt.minWidth || 0, gridWidth);\n        const minHeight = Math.max(opt.minHeight || 0, gridHeight);\n        const maxWidth = opt.maxWidth || Number.MAX_VALUE;\n        const maxHeight = opt.maxHeight || Number.MAX_VALUE;\n        const newOrigin = opt.allowNewOrigin;\n        const area = \"contentArea\" in opt ? new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(opt.contentArea) : this.getContentArea(opt);\n        const { sx, sy } = this.scale();\n        area.x *= sx;\n        area.y *= sy;\n        area.width *= sx;\n        area.height *= sy;\n        let calcWidth = Math.ceil((area.width + area.x) / gridWidth);\n        let calcHeight = Math.ceil((area.height + area.y) / gridHeight);\n        if (!opt.allowNegativeBottomRight) {\n            calcWidth = Math.max(calcWidth, 1);\n            calcHeight = Math.max(calcHeight, 1);\n        }\n        calcWidth *= gridWidth;\n        calcHeight *= gridHeight;\n        let tx = 0;\n        if (newOrigin === \"negative\" && area.x < 0 || newOrigin === \"positive\" && area.x >= 0 || newOrigin === \"any\") {\n            tx = Math.ceil(-area.x / gridWidth) * gridWidth;\n            tx += padding.left;\n            calcWidth += tx;\n        }\n        let ty = 0;\n        if (newOrigin === \"negative\" && area.y < 0 || newOrigin === \"positive\" && area.y >= 0 || newOrigin === \"any\") {\n            ty = Math.ceil(-area.y / gridHeight) * gridHeight;\n            ty += padding.top;\n            calcHeight += ty;\n        }\n        calcWidth += padding.right;\n        calcHeight += padding.bottom;\n        // Make sure the resulting width and height are greater than minimum.\n        calcWidth = Math.max(calcWidth, minWidth);\n        calcHeight = Math.max(calcHeight, minHeight);\n        // Make sure the resulting width and height are lesser than maximum.\n        calcWidth = Math.min(calcWidth, maxWidth);\n        calcHeight = Math.min(calcHeight, maxHeight);\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(-tx / sx, -ty / sy, calcWidth / sx, calcHeight / sy);\n    },\n    transformToFitContent: function(opt) {\n        opt || (opt = {});\n        let contentBBox, contentLocalOrigin;\n        if (\"contentArea\" in opt) {\n            const contentArea = opt.contentArea;\n            contentBBox = this.localToPaperRect(contentArea);\n            contentLocalOrigin = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(contentArea);\n        } else {\n            contentBBox = this.getContentBBox(opt);\n            contentLocalOrigin = this.paperToLocalPoint(contentBBox);\n        }\n        if (!contentBBox.width || !contentBBox.height) return;\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaults)(opt, {\n            padding: 0,\n            preserveAspectRatio: true,\n            scaleGrid: null,\n            minScale: 0,\n            maxScale: Number.MAX_VALUE,\n            verticalAlign: \"top\",\n            horizontalAlign: \"left\"\n        });\n        const padding = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeSides)(opt.padding);\n        const minScaleX = opt.minScaleX || opt.minScale;\n        const maxScaleX = opt.maxScaleX || opt.maxScale;\n        const minScaleY = opt.minScaleY || opt.minScale;\n        const maxScaleY = opt.maxScaleY || opt.maxScale;\n        let fittingBBox;\n        if (opt.fittingBBox) {\n            fittingBBox = opt.fittingBBox;\n        } else {\n            const currentTranslate = this.translate();\n            const computedSize = this.getComputedSize();\n            fittingBBox = {\n                x: currentTranslate.tx,\n                y: currentTranslate.ty,\n                width: computedSize.width,\n                height: computedSize.height\n            };\n        }\n        fittingBBox = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(fittingBBox).moveAndExpand({\n            x: padding.left,\n            y: padding.top,\n            width: -padding.left - padding.right,\n            height: -padding.top - padding.bottom\n        });\n        const currentScale = this.scale();\n        let newSx = fittingBBox.width / contentBBox.width * currentScale.sx;\n        let newSy = fittingBBox.height / contentBBox.height * currentScale.sy;\n        if (opt.preserveAspectRatio) {\n            newSx = newSy = Math.min(newSx, newSy);\n        }\n        // snap scale to a grid\n        if (opt.scaleGrid) {\n            const gridSize = opt.scaleGrid;\n            newSx = gridSize * Math.floor(newSx / gridSize);\n            newSy = gridSize * Math.floor(newSy / gridSize);\n        }\n        // scale min/max boundaries\n        newSx = Math.min(maxScaleX, Math.max(minScaleX, newSx));\n        newSy = Math.min(maxScaleY, Math.max(minScaleY, newSy));\n        const scaleDiff = {\n            x: newSx / currentScale.sx,\n            y: newSy / currentScale.sy\n        };\n        const origin = this.options.origin;\n        let newOx = fittingBBox.x - contentLocalOrigin.x * newSx - origin.x;\n        let newOy = fittingBBox.y - contentLocalOrigin.y * newSy - origin.y;\n        switch(opt.verticalAlign){\n            case \"middle\":\n                newOy = newOy + (fittingBBox.height - contentBBox.height * scaleDiff.y) / 2;\n                break;\n            case \"bottom\":\n                newOy = newOy + (fittingBBox.height - contentBBox.height * scaleDiff.y);\n                break;\n            case \"top\":\n            default:\n                break;\n        }\n        switch(opt.horizontalAlign){\n            case \"middle\":\n                newOx = newOx + (fittingBBox.width - contentBBox.width * scaleDiff.x) / 2;\n                break;\n            case \"right\":\n                newOx = newOx + (fittingBBox.width - contentBBox.width * scaleDiff.x);\n                break;\n            case \"left\":\n            default:\n                break;\n        }\n        this.scale(newSx, newSy);\n        this.translate(newOx, newOy);\n    },\n    scaleContentToFit: function(opt) {\n        this.transformToFitContent(opt);\n    },\n    // Return the dimensions of the content area in local units (without transformations).\n    getContentArea: function(opt) {\n        if (opt && opt.useModelGeometry) {\n            return this.model.getBBox() || new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect();\n        }\n        return (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(this.cells).getBBox();\n    },\n    // Return the dimensions of the content bbox in the paper units (as it appears on screen).\n    getContentBBox: function(opt) {\n        return this.localToPaperRect(this.getContentArea(opt));\n    },\n    // Returns a geometry rectangle representing the entire\n    // paper area (coordinates from the left paper border to the right one\n    // and the top border to the bottom one).\n    getArea: function() {\n        return this.paperToLocalRect(this.getComputedSize());\n    },\n    getRestrictedArea: function(...args) {\n        const { restrictTranslate } = this.options;\n        let restrictedArea;\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(restrictTranslate)) {\n            // A method returning a bounding box\n            restrictedArea = restrictTranslate.apply(this, args);\n        } else if (restrictTranslate === true) {\n            // The paper area\n            restrictedArea = this.getArea();\n        } else if (!restrictTranslate) {\n            // falsy value\n            restrictedArea = null;\n        } else {\n            // any other value\n            restrictedArea = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(restrictTranslate);\n        }\n        return restrictedArea;\n    },\n    createViewForModel: function(cell) {\n        const { options } = this;\n        // A class taken from the paper options.\n        var optionalViewClass;\n        // A default basic class (either dia.ElementView or dia.LinkView)\n        var defaultViewClass;\n        // A special class defined for this model in the corresponding namespace.\n        // e.g. joint.shapes.basic.Rect searches for joint.shapes.basic.RectView\n        var namespace = options.cellViewNamespace;\n        var type = cell.get(\"type\") + \"View\";\n        var namespaceViewClass = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.getByPath)(namespace, type, \".\");\n        if (cell.isLink()) {\n            optionalViewClass = options.linkView;\n            defaultViewClass = _LinkView_mjs__WEBPACK_IMPORTED_MODULE_6__.LinkView;\n        } else {\n            optionalViewClass = options.elementView;\n            defaultViewClass = _ElementView_mjs__WEBPACK_IMPORTED_MODULE_5__.ElementView;\n        }\n        // a) the paper options view is a class (deprecated)\n        //  1. search the namespace for a view\n        //  2. if no view was found, use view from the paper options\n        // b) the paper options view is a function\n        //  1. call the function from the paper options\n        //  2. if no view was return, search the namespace for a view\n        //  3. if no view was found, use the default\n        var ViewClass = optionalViewClass.prototype instanceof backbone__WEBPACK_IMPORTED_MODULE_1__.View ? namespaceViewClass || optionalViewClass : optionalViewClass.call(this, cell) || namespaceViewClass || defaultViewClass;\n        return new ViewClass({\n            model: cell,\n            interactive: options.interactive,\n            labelsLayer: options.labelsLayer === true ? _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.LABELS : options.labelsLayer\n        });\n    },\n    removeView: function(cell) {\n        const { id } = cell;\n        const { _views, _updates } = this;\n        const view = _views[id];\n        if (view) {\n            var { cid } = view;\n            const { mounted, unmounted } = _updates;\n            view.remove();\n            delete _views[id];\n            delete mounted[cid];\n            delete unmounted[cid];\n        }\n        return view;\n    },\n    renderView: function(cell, opt) {\n        const { id } = cell;\n        const views = this._views;\n        let view, flag;\n        let create = true;\n        if (id in views) {\n            view = views[id];\n            if (view.model === cell) {\n                flag = view.FLAG_INSERT;\n                create = false;\n            } else {\n                // The view for this `id` already exist.\n                // The cell is a new instance of the model with identical id\n                // We simply remove the existing view and create a new one\n                this.removeView(cell);\n            }\n        }\n        if (create) {\n            view = views[id] = this.createViewForModel(cell);\n            view.paper = this;\n            flag = this.registerUnmountedView(view) | this.FLAG_INIT | view.getFlag((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.result)(view, \"initFlag\"));\n        }\n        this.requestViewUpdate(view, flag, view.UPDATE_PRIORITY, opt);\n        return view;\n    },\n    onImageDragStart: function() {\n        // This is the only way to prevent image dragging in Firefox that works.\n        // Setting -moz-user-select: none, draggable=\"false\" attribute or user-drag: none didn't help.\n        return false;\n    },\n    resetViews: function(cells, opt) {\n        opt || (opt = {});\n        cells || (cells = []);\n        this._resetUpdates();\n        // clearing views removes any event listeners\n        this.removeViews();\n        // Allows to unfreeze normally while in the idle state using autoFreeze option\n        const key = this.options.autoFreeze ? null : \"reset\";\n        this.freeze({\n            key\n        });\n        for(var i = 0, n = cells.length; i < n; i++){\n            this.renderView(cells[i], opt);\n        }\n        this.unfreeze({\n            key\n        });\n        this.sortViews();\n    },\n    removeViews: function() {\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.invoke)(this._views, \"remove\");\n        this._views = {};\n    },\n    sortViews: function() {\n        if (!this.isExactSorting()) {\n            // noop\n            return;\n        }\n        if (this.isFrozen()) {\n            // sort views once unfrozen\n            this._updates.sort = true;\n            return;\n        }\n        this.sortViewsExact();\n    },\n    sortViewsExact: function() {\n        // Run insertion sort algorithm in order to efficiently sort DOM elements according to their\n        // associated model `z` attribute.\n        var $cells = jquery__WEBPACK_IMPORTED_MODULE_0__(this.cells).children(\"[model-id]\");\n        var cells = this.model.get(\"cells\");\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.sortElements)($cells, function(a, b) {\n            var cellA = cells.get(a.getAttribute(\"model-id\"));\n            var cellB = cells.get(b.getAttribute(\"model-id\"));\n            var zA = cellA.attributes.z || 0;\n            var zB = cellB.attributes.z || 0;\n            return zA === zB ? 0 : zA < zB ? -1 : 1;\n        });\n    },\n    insertView: function(view, isInitialInsert) {\n        const layerView = this.getLayerView(_PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames.CELLS);\n        const { el, model } = view;\n        switch(this.options.sorting){\n            case sortingTypes.APPROX:\n                layerView.insertSortedNode(el, model.get(\"z\"));\n                break;\n            case sortingTypes.EXACT:\n            default:\n                layerView.insertNode(el);\n                break;\n        }\n        view.onMount(isInitialInsert);\n    },\n    detachView (view) {\n        view.unmount();\n        view.onDetach();\n    },\n    scale: function(sx, sy, ox, oy) {\n        // getter\n        if (sx === undefined) {\n            return _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].matrixToScale(this.matrix());\n        }\n        // setter\n        if (sy === undefined) {\n            sy = sx;\n        }\n        if (ox === undefined) {\n            ox = 0;\n            oy = 0;\n        }\n        var translate = this.translate();\n        if (ox || oy || translate.tx || translate.ty) {\n            var newTx = translate.tx - ox * (sx - 1);\n            var newTy = translate.ty - oy * (sy - 1);\n            this.translate(newTx, newTy);\n        }\n        sx = Math.max(sx || 0, this.MIN_SCALE);\n        sy = Math.max(sy || 0, this.MIN_SCALE);\n        var ctm = this.matrix();\n        ctm.a = sx;\n        ctm.d = sy;\n        this.matrix(ctm);\n        this.trigger(\"scale\", sx, sy, ox, oy);\n        return this;\n    },\n    // Experimental - do not use in production.\n    rotate: function(angle, cx, cy) {\n        // getter\n        if (angle === undefined) {\n            return _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].matrixToRotate(this.matrix());\n        }\n        // setter\n        // If the origin is not set explicitely, rotate around the center. Note that\n        // we must use the plain bounding box (`this.el.getBBox()` instead of the one that gives us\n        // the real bounding box (`bbox()`) including transformations).\n        if (cx === undefined) {\n            var bbox = this.cells.getBBox();\n            cx = bbox.width / 2;\n            cy = bbox.height / 2;\n        }\n        var ctm = this.matrix().translate(cx, cy).rotate(angle).translate(-cx, -cy);\n        this.matrix(ctm);\n        return this;\n    },\n    translate: function(tx, ty) {\n        // getter\n        if (tx === undefined) {\n            return _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].matrixToTranslate(this.matrix());\n        }\n        const { options } = this;\n        const { origin, drawGrid } = options;\n        // setter\n        tx || (tx = 0);\n        ty || (ty = 0);\n        const ctm = this.matrix();\n        if (ctm.e === tx && ctm.f === ty) return this;\n        ctm.e = tx;\n        ctm.f = ty;\n        this.matrix(ctm);\n        const { tx: ox, ty: oy } = this.translate();\n        origin.x = ox;\n        origin.y = oy;\n        this.trigger(\"translate\", ox, oy);\n        if (drawGrid) {\n            this.drawGrid();\n        }\n        return this;\n    },\n    // Find the first view climbing up the DOM tree starting at element `el`. Note that `el` can also\n    // be a selector or a jQuery object.\n    findView: function($el) {\n        var el = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isString)($el) ? this.cells.querySelector($el) : $el instanceof jquery__WEBPACK_IMPORTED_MODULE_0__ ? $el[0] : $el;\n        var id = this.findAttribute(\"model-id\", el);\n        if (id) return this._views[id];\n        return undefined;\n    },\n    // Find a view for a model `cell`. `cell` can also be a string or number representing a model `id`.\n    findViewByModel: function(cell) {\n        var id = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isString)(cell) || (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(cell) ? cell : cell && cell.id;\n        return this._views[id];\n    },\n    // Find all views at given point\n    findViewsFromPoint: function(p) {\n        p = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(p);\n        var views = this.model.getElements().map(this.findViewByModel, this);\n        return views.filter(function(view) {\n            return view && view.vel.getBBox({\n                target: this.cells\n            }).containsPoint(p);\n        }, this);\n    },\n    // Find all views in given area\n    findViewsInArea: function(rect, opt) {\n        opt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaults)(opt || {}, {\n            strict: false\n        });\n        rect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(rect);\n        var views = this.model.getElements().map(this.findViewByModel, this);\n        var method = opt.strict ? \"containsRect\" : \"intersect\";\n        return views.filter(function(view) {\n            return view && rect[method](view.vel.getBBox({\n                target: this.cells\n            }));\n        }, this);\n    },\n    removeTools: function() {\n        this.dispatchToolsEvent(\"remove\");\n        return this;\n    },\n    hideTools: function() {\n        this.dispatchToolsEvent(\"hide\");\n        return this;\n    },\n    showTools: function() {\n        this.dispatchToolsEvent(\"show\");\n        return this;\n    },\n    dispatchToolsEvent: function(event, ...args) {\n        if (typeof event !== \"string\") return;\n        this.trigger(\"tools:event\", event, ...args);\n    },\n    getModelById: function(id) {\n        return this.model.getCell(id);\n    },\n    snapToGrid: function(x, y) {\n        // Convert global coordinates to the local ones of the `viewport`. Otherwise,\n        // improper transformation would be applied when the viewport gets transformed (scaled/rotated).\n        return this.clientToLocalPoint(x, y).snapToGrid(this.options.gridSize);\n    },\n    localToPaperPoint: function(x, y) {\n        // allow `x` to be a point and `y` undefined\n        var localPoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(x, y);\n        var paperPoint = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformPoint(localPoint, this.matrix());\n        return paperPoint;\n    },\n    localToPaperRect: function(x, y, width, height) {\n        // allow `x` to be a rectangle and rest arguments undefined\n        var localRect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(x, y, width, height);\n        var paperRect = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformRect(localRect, this.matrix());\n        return paperRect;\n    },\n    paperToLocalPoint: function(x, y) {\n        // allow `x` to be a point and `y` undefined\n        var paperPoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(x, y);\n        var localPoint = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformPoint(paperPoint, this.matrix().inverse());\n        return localPoint;\n    },\n    paperToLocalRect: function(x, y, width, height) {\n        // allow `x` to be a rectangle and rest arguments undefined\n        var paperRect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(x, y, width, height);\n        var localRect = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformRect(paperRect, this.matrix().inverse());\n        return localRect;\n    },\n    localToClientPoint: function(x, y) {\n        // allow `x` to be a point and `y` undefined\n        var localPoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(x, y);\n        var clientPoint = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformPoint(localPoint, this.clientMatrix());\n        return clientPoint;\n    },\n    localToClientRect: function(x, y, width, height) {\n        // allow `x` to be a point and `y` undefined\n        var localRect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(x, y, width, height);\n        var clientRect = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformRect(localRect, this.clientMatrix());\n        return clientRect;\n    },\n    // Transform client coordinates to the paper local coordinates.\n    // Useful when you have a mouse event object and you'd like to get coordinates\n    // inside the paper that correspond to `evt.clientX` and `evt.clientY` point.\n    // Example: var localPoint = paper.clientToLocalPoint({ x: evt.clientX, y: evt.clientY });\n    clientToLocalPoint: function(x, y) {\n        // allow `x` to be a point and `y` undefined\n        var clientPoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(x, y);\n        var localPoint = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformPoint(clientPoint, this.clientMatrix().inverse());\n        return localPoint;\n    },\n    clientToLocalRect: function(x, y, width, height) {\n        // allow `x` to be a point and `y` undefined\n        var clientRect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(x, y, width, height);\n        var localRect = _V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].transformRect(clientRect, this.clientMatrix().inverse());\n        return localRect;\n    },\n    localToPagePoint: function(x, y) {\n        return this.localToPaperPoint(x, y).offset(this.pageOffset());\n    },\n    localToPageRect: function(x, y, width, height) {\n        return this.localToPaperRect(x, y, width, height).offset(this.pageOffset());\n    },\n    pageToLocalPoint: function(x, y) {\n        var pagePoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(x, y);\n        var paperPoint = pagePoint.difference(this.pageOffset());\n        return this.paperToLocalPoint(paperPoint);\n    },\n    pageToLocalRect: function(x, y, width, height) {\n        var pageOffset = this.pageOffset();\n        var paperRect = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(x, y, width, height);\n        paperRect.x -= pageOffset.x;\n        paperRect.y -= pageOffset.y;\n        return this.paperToLocalRect(paperRect);\n    },\n    clientOffset: function() {\n        var clientRect = this.svg.getBoundingClientRect();\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_17__.Point(clientRect.left, clientRect.top);\n    },\n    pageOffset: function() {\n        return this.clientOffset().offset(window.scrollX, window.scrollY);\n    },\n    linkAllowed: function(linkView) {\n        if (!(linkView instanceof _LinkView_mjs__WEBPACK_IMPORTED_MODULE_6__.LinkView)) {\n            throw new Error(\"Must provide a linkView.\");\n        }\n        var link = linkView.model;\n        var paperOptions = this.options;\n        var graph = this.model;\n        var ns = graph.constructor.validations;\n        if (!paperOptions.multiLinks) {\n            if (!ns.multiLinks.call(this, graph, link)) return false;\n        }\n        if (!paperOptions.linkPinning) {\n            // Link pinning is not allowed and the link is not connected to the target.\n            if (!ns.linkPinning.call(this, graph, link)) return false;\n        }\n        if (typeof paperOptions.allowLink === \"function\") {\n            if (!paperOptions.allowLink.call(this, linkView, this)) return false;\n        }\n        return true;\n    },\n    getDefaultLink: function(cellView, magnet) {\n        return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(this.options.defaultLink) ? this.options.defaultLink.call(this, cellView, magnet) : this.options.defaultLink.clone();\n    },\n    // Cell highlighting.\n    // ------------------\n    resolveHighlighter: function(opt = {}) {\n        let { highlighter: highlighterDef, type } = opt;\n        const { highlighting, highlighterNamespace } = this.options;\n        /*\n            Expecting opt.highlighter to have the following structure:\n            {\n                name: 'highlighter-name',\n                options: {\n                    some: 'value'\n                }\n            }\n        */ if (highlighterDef === undefined) {\n            // Is highlighting disabled?\n            if (!highlighting) return false;\n            // check for built-in types\n            if (type) {\n                highlighterDef = highlighting[type];\n                // Is a specific type highlight disabled?\n                if (highlighterDef === false) return false;\n            }\n            if (!highlighterDef) {\n                // Type not defined use default highlight\n                highlighterDef = highlighting[\"default\"];\n            }\n        }\n        // Do nothing if opt.highlighter is falsy.\n        // This allows the case to not highlight cell(s) in certain cases.\n        // For example, if you want to NOT highlight when embedding elements\n        // or use a custom highlighter.\n        if (!highlighterDef) return false;\n        // Allow specifying a highlighter by name.\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isString)(highlighterDef)) {\n            highlighterDef = {\n                name: highlighterDef\n            };\n        }\n        const name = highlighterDef.name;\n        const highlighter = highlighterNamespace[name];\n        // Highlighter validation\n        if (!highlighter) {\n            throw new Error('Unknown highlighter (\"' + name + '\")');\n        }\n        if (typeof highlighter.highlight !== \"function\") {\n            throw new Error('Highlighter (\"' + name + '\") is missing required highlight() method');\n        }\n        if (typeof highlighter.unhighlight !== \"function\") {\n            throw new Error('Highlighter (\"' + name + '\") is missing required unhighlight() method');\n        }\n        return {\n            highlighter,\n            options: highlighterDef.options || {},\n            name\n        };\n    },\n    onCellHighlight: function(cellView, magnetEl, opt) {\n        const highlighterDescriptor = this.resolveHighlighter(opt);\n        if (!highlighterDescriptor) return;\n        const { highlighter, options } = highlighterDescriptor;\n        highlighter.highlight(cellView, magnetEl, options);\n    },\n    onCellUnhighlight: function(cellView, magnetEl, opt) {\n        const highlighterDescriptor = this.resolveHighlighter(opt);\n        if (!highlighterDescriptor) return;\n        const { highlighter, options } = highlighterDescriptor;\n        highlighter.unhighlight(cellView, magnetEl, options);\n    },\n    // Interaction.\n    // ------------\n    pointerdblclick: function(evt) {\n        evt.preventDefault();\n        // magnetpointerdblclick can stop propagation\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        var view = this.findView(evt.target);\n        if (this.guard(evt, view)) return;\n        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n        if (view) {\n            view.pointerdblclick(evt, localPoint.x, localPoint.y);\n        } else {\n            this.trigger(\"blank:pointerdblclick\", evt, localPoint.x, localPoint.y);\n        }\n    },\n    pointerclick: function(evt) {\n        // magnetpointerclick can stop propagation\n        var data = this.eventData(evt);\n        // Trigger event only if mouse has not moved.\n        if (data.mousemoved <= this.options.clickThreshold) {\n            evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n            var view = this.findView(evt.target);\n            if (this.guard(evt, view)) return;\n            var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n            if (view) {\n                view.pointerclick(evt, localPoint.x, localPoint.y);\n            } else {\n                this.trigger(\"blank:pointerclick\", evt, localPoint.x, localPoint.y);\n            }\n        }\n    },\n    contextmenu: function(evt) {\n        if (this.options.preventContextMenu) evt.preventDefault();\n        if (this.contextMenuFired) {\n            this.contextMenuFired = false;\n            return;\n        }\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        this.contextMenuTrigger(evt);\n    },\n    contextMenuTrigger: function(evt) {\n        var view = this.findView(evt.target);\n        if (this.guard(evt, view)) return;\n        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n        if (view) {\n            view.contextmenu(evt, localPoint.x, localPoint.y);\n        } else {\n            this.trigger(\"blank:contextmenu\", evt, localPoint.x, localPoint.y);\n        }\n    },\n    pointerdown: function(evt) {\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        const { target, button } = evt;\n        const view = this.findView(target);\n        const isContextMenu = button === 2;\n        if (view) {\n            if (!isContextMenu && this.guard(evt, view)) return;\n            const isTargetFormNode = this.FORM_CONTROL_TAG_NAMES.includes(target.tagName);\n            if (this.options.preventDefaultViewAction && !isTargetFormNode) {\n                // If the target is a form element, we do not want to prevent the default action.\n                // For example, we want to be able to select text in a text input or\n                // to be able to click on a checkbox.\n                evt.preventDefault();\n            }\n            if (isTargetFormNode) {\n                // If the target is a form element, we do not want to start dragging the element.\n                // For example, we want to be able to select text by dragging the mouse.\n                view.preventDefaultInteraction(evt);\n            }\n            // Custom event\n            const eventEvt = this.customEventTrigger(evt, view);\n            if (eventEvt) {\n                // `onevent` could have stopped propagation\n                if (eventEvt.isPropagationStopped()) return;\n                evt.data = eventEvt.data;\n            }\n            // Element magnet\n            const magnetNode = target.closest(\"[magnet]\");\n            if (magnetNode && view.el !== magnetNode && view.el.contains(magnetNode)) {\n                const magnetEvt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(jquery__WEBPACK_IMPORTED_MODULE_0__.Event(evt.originalEvent, {\n                    data: evt.data,\n                    // Originally the event listener was attached to the magnet element.\n                    currentTarget: magnetNode\n                }));\n                this.onmagnet(magnetEvt);\n                if (magnetEvt.isDefaultPrevented()) {\n                    evt.preventDefault();\n                }\n                // `onmagnet` stops propagation when `addLinkFromMagnet` is allowed\n                if (magnetEvt.isPropagationStopped()) {\n                    // `magnet:pointermove` and `magnet:pointerup` events must be fired\n                    if (isContextMenu) return;\n                    this.delegateDragEvents(view, magnetEvt.data);\n                    return;\n                }\n                evt.data = magnetEvt.data;\n            }\n        }\n        if (isContextMenu) {\n            this.contextMenuFired = true;\n            const contextmenuEvt = jquery__WEBPACK_IMPORTED_MODULE_0__.Event(evt.originalEvent, {\n                type: \"contextmenu\",\n                data: evt.data\n            });\n            this.contextMenuTrigger(contextmenuEvt);\n        } else {\n            const localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n            if (view) {\n                view.pointerdown(evt, localPoint.x, localPoint.y);\n            } else {\n                if (this.options.preventDefaultBlankAction) {\n                    evt.preventDefault();\n                }\n                this.trigger(\"blank:pointerdown\", evt, localPoint.x, localPoint.y);\n            }\n            this.delegateDragEvents(view, evt.data);\n        }\n    },\n    pointermove: function(evt) {\n        // mouse moved counter\n        var data = this.eventData(evt);\n        if (!data.mousemoved) {\n            data.mousemoved = 0;\n            // Make sure that events like `mouseenter` and `mouseleave` are\n            // not triggered while the user is dragging a cellView.\n            this.undelegateEvents();\n        // Note: the events are undelegated after the first `pointermove` event.\n        // Not on `pointerdown` to make sure that `dbltap` is recognized.\n        }\n        var mousemoved = ++data.mousemoved;\n        if (mousemoved <= this.options.moveThreshold) return;\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n        var view = data.sourceView;\n        if (view) {\n            view.pointermove(evt, localPoint.x, localPoint.y);\n        } else {\n            this.trigger(\"blank:pointermove\", evt, localPoint.x, localPoint.y);\n        }\n        this.eventData(evt, data);\n    },\n    pointerup: function(evt) {\n        this.undelegateDocumentEvents();\n        var normalizedEvt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        var localPoint = this.snapToGrid(normalizedEvt.clientX, normalizedEvt.clientY);\n        var view = this.eventData(evt).sourceView;\n        if (view) {\n            view.pointerup(normalizedEvt, localPoint.x, localPoint.y);\n        } else {\n            this.trigger(\"blank:pointerup\", normalizedEvt, localPoint.x, localPoint.y);\n        }\n        if (!normalizedEvt.isPropagationStopped()) {\n            this.pointerclick(jquery__WEBPACK_IMPORTED_MODULE_0__.Event(evt.originalEvent, {\n                type: \"click\",\n                data: evt.data\n            }));\n        }\n        this.delegateEvents();\n    },\n    mouseover: function(evt) {\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        var view = this.findView(evt.target);\n        if (this.guard(evt, view)) return;\n        if (view) {\n            view.mouseover(evt);\n        } else {\n            if (this.el === evt.target) return; // prevent border of paper from triggering this\n            this.trigger(\"blank:mouseover\", evt);\n        }\n    },\n    mouseout: function(evt) {\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        var view = this.findView(evt.target);\n        if (this.guard(evt, view)) return;\n        if (view) {\n            view.mouseout(evt);\n        } else {\n            if (this.el === evt.target) return; // prevent border of paper from triggering this\n            this.trigger(\"blank:mouseout\", evt);\n        }\n    },\n    mouseenter: function(evt) {\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        const { target, relatedTarget, currentTarget// The EventTarget on which the event listener was registered\n         } = evt;\n        const view = this.findView(target);\n        if (this.guard(evt, view)) return;\n        const relatedView = this.findView(relatedTarget);\n        if (view) {\n            if (relatedView === view) {\n                // Mouse left a cell tool\n                return;\n            }\n            view.mouseenter(evt);\n            if (this.el.contains(relatedTarget)) {\n                // The pointer remains inside the paper.\n                return;\n            }\n        }\n        if (relatedView) {\n            return;\n        }\n        // prevent double `mouseenter` event if the `relatedTarget` is outside the paper\n        // (mouseenter method would be fired twice)\n        if (currentTarget === this.el) {\n            // `paper` (more descriptive), not `blank`\n            this.trigger(\"paper:mouseenter\", evt);\n        }\n    },\n    mouseleave: function(evt) {\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        const { target, relatedTarget, currentTarget// The EventTarget on which the event listener was registered\n         } = evt;\n        const view = this.findView(target);\n        if (this.guard(evt, view)) return;\n        const relatedView = this.findView(relatedTarget);\n        if (view) {\n            if (relatedView === view) {\n                // Mouse entered a cell tool\n                return;\n            }\n            view.mouseleave(evt);\n            if (this.el.contains(relatedTarget)) {\n                // The pointer has exited a cellView. The pointer is still inside of the paper.\n                return;\n            }\n        }\n        if (relatedView) {\n            // The pointer has entered a new cellView\n            return;\n        }\n        // prevent double `mouseleave` event if the `relatedTarget` is outside the paper\n        // (mouseleave method would be fired twice)\n        if (currentTarget === this.el) {\n            // There is no cellView under the pointer, nor the blank area of the paper\n            this.trigger(\"paper:mouseleave\", evt);\n        }\n    },\n    _processMouseWheelEvtBuf: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.debounce)(function() {\n        const { event, deltas } = this._mw_evt_buffer;\n        const deltaY = deltas.reduce((acc, deltaY)=>acc + (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.cap)(deltaY, WHEEL_CAP), 0);\n        const scale = Math.pow(0.995, deltaY); // 1.005 for inverted pinch/zoom\n        const { x, y } = this.clientToLocalPoint(event.clientX, event.clientY);\n        this.trigger(\"paper:pinch\", event, x, y, scale);\n        this._mw_evt_buffer = {\n            event: null,\n            deltas: []\n        };\n    }, WHEEL_WAIT_MS, {\n        maxWait: WHEEL_WAIT_MS\n    }),\n    mousewheel: function(evt) {\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        const view = this.findView(evt.target);\n        if (this.guard(evt, view)) return;\n        const originalEvent = evt.originalEvent;\n        const localPoint = this.snapToGrid(originalEvent.clientX, originalEvent.clientY);\n        const { deltaX, deltaY } = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeWheel)(originalEvent);\n        const pinchHandlers = this._events[\"paper:pinch\"];\n        // Touchpad devices will send a fake CTRL press when a pinch is performed\n        //\n        // We also check if there are any subscribers to paper:pinch event. If there are none,\n        // just skip the entire block of code (we don't want to blindly call\n        // .preventDefault() if we really don't have to).\n        if (evt.ctrlKey && pinchHandlers && pinchHandlers.length > 0) {\n            // This is a pinch gesture, it's safe to assume that we must call .preventDefault()\n            originalEvent.preventDefault();\n            this._mw_evt_buffer.event = originalEvent;\n            this._mw_evt_buffer.deltas.push(deltaY);\n            this._processMouseWheelEvtBuf();\n        } else {\n            const delta = Math.max(-1, Math.min(1, originalEvent.wheelDelta));\n            if (view) {\n                view.mousewheel(evt, localPoint.x, localPoint.y, delta);\n            } else {\n                this.trigger(\"blank:mousewheel\", evt, localPoint.x, localPoint.y, delta);\n            }\n            this.trigger(\"paper:pan\", evt, deltaX, deltaY);\n        }\n    },\n    onevent: function(evt) {\n        var eventNode = evt.currentTarget;\n        var eventName = eventNode.getAttribute(\"event\");\n        if (eventName) {\n            var view = this.findView(eventNode);\n            if (view) {\n                evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n                if (this.guard(evt, view)) return;\n                var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n                view.onevent(evt, eventName, localPoint.x, localPoint.y);\n            }\n        }\n    },\n    magnetEvent: function(evt, handler) {\n        var magnetNode = evt.currentTarget;\n        var magnetValue = magnetNode.getAttribute(\"magnet\");\n        if (magnetValue) {\n            var view = this.findView(magnetNode);\n            if (view) {\n                evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n                if (this.guard(evt, view)) return;\n                var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n                handler.call(this, view, evt, magnetNode, localPoint.x, localPoint.y);\n            }\n        }\n    },\n    onmagnet: function(evt) {\n        if (evt.button === 2) {\n            this.contextMenuFired = true;\n            this.magnetContextMenuFired = true;\n            const contextmenuEvt = jquery__WEBPACK_IMPORTED_MODULE_0__.Event(evt.originalEvent, {\n                type: \"contextmenu\",\n                data: evt.data,\n                currentTarget: evt.currentTarget\n            });\n            this.magnetContextMenuTrigger(contextmenuEvt);\n            if (contextmenuEvt.isPropagationStopped()) {\n                evt.stopPropagation();\n            }\n        } else {\n            this.magnetEvent(evt, function(view, evt, _, x, y) {\n                view.onmagnet(evt, x, y);\n            });\n        }\n    },\n    magnetpointerdblclick: function(evt) {\n        this.magnetEvent(evt, function(view, evt, magnet, x, y) {\n            view.magnetpointerdblclick(evt, magnet, x, y);\n        });\n    },\n    magnetcontextmenu: function(evt) {\n        if (this.options.preventContextMenu) evt.preventDefault();\n        if (this.magnetContextMenuFired) {\n            this.magnetContextMenuFired = false;\n            return;\n        }\n        this.magnetContextMenuTrigger(evt);\n    },\n    magnetContextMenuTrigger: function(evt) {\n        this.magnetEvent(evt, function(view, evt, magnet, x, y) {\n            view.magnetcontextmenu(evt, magnet, x, y);\n        });\n    },\n    onlabel: function(evt) {\n        var labelNode = evt.currentTarget;\n        var view = this.findView(labelNode);\n        if (!view) return;\n        evt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        if (this.guard(evt, view)) return;\n        // Custom event\n        const eventEvt = this.customEventTrigger(evt, view, labelNode);\n        if (eventEvt) {\n            // `onevent` could have stopped propagation\n            if (eventEvt.isPropagationStopped()) return;\n            evt.data = eventEvt.data;\n        }\n        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);\n        view.onlabel(evt, localPoint.x, localPoint.y);\n    },\n    getPointerArgs (evt) {\n        const normalizedEvt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(evt);\n        const { x, y } = this.snapToGrid(normalizedEvt.clientX, normalizedEvt.clientY);\n        return [\n            normalizedEvt,\n            x,\n            y\n        ];\n    },\n    delegateDragEvents: function(view, data) {\n        data || (data = {});\n        this.eventData({\n            data: data\n        }, {\n            sourceView: view || null,\n            mousemoved: 0\n        });\n        this.delegateDocumentEvents(null, data);\n    },\n    // Guard the specified event. If the event should be ignored, guard returns `true`.\n    // Otherwise, it returns `false`.\n    guard: function(evt, view) {\n        if (evt.type === \"mousedown\" && evt.button === 2) {\n            // handled as `contextmenu` type\n            return true;\n        }\n        if (this.options.guard && this.options.guard(evt, view)) {\n            return true;\n        }\n        if (evt.data && evt.data.guarded !== undefined) {\n            return evt.data.guarded;\n        }\n        const { target } = evt;\n        if (this.GUARDED_TAG_NAMES.includes(target.tagName)) {\n            return true;\n        }\n        if (view && view.model && view.model instanceof _Cell_mjs__WEBPACK_IMPORTED_MODULE_18__.Cell) {\n            return false;\n        }\n        if (this.svg === target || this.el === target || jquery__WEBPACK_IMPORTED_MODULE_0__.contains(this.svg, target)) {\n            return false;\n        }\n        return true; // Event guarded. Paper should not react on it in any way.\n    },\n    setGridSize: function(gridSize) {\n        const { options } = this;\n        options.gridSize = gridSize;\n        if (options.drawGrid && !options.drawGridSize) {\n            // Do not redraw the grid if the `drawGridSize` is set.\n            this.drawGrid();\n        }\n        return this;\n    },\n    clearGrid: function() {\n        if (this.$grid) {\n            this.$grid.css(\"backgroundImage\", \"none\");\n        }\n        return this;\n    },\n    _getGridRefs: function() {\n        if (!this._gridCache) {\n            this._gridCache = {\n                root: (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"svg\", {\n                    width: \"100%\",\n                    height: \"100%\"\n                }, (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"defs\")),\n                patterns: {},\n                add: function(id, vel) {\n                    (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(this.root.node.childNodes[0]).append(vel);\n                    this.patterns[id] = vel;\n                    this.root.append((0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"rect\", {\n                        width: \"100%\",\n                        height: \"100%\",\n                        fill: \"url(#\" + id + \")\"\n                    }));\n                },\n                get: function(id) {\n                    return this.patterns[id];\n                },\n                exist: function(id) {\n                    return this.patterns[id] !== undefined;\n                }\n            };\n        }\n        return this._gridCache;\n    },\n    setGrid: function(drawGrid) {\n        this.clearGrid();\n        this._gridCache = null;\n        this._gridSettings = [];\n        var optionsList = Array.isArray(drawGrid) ? drawGrid : [\n            drawGrid || {}\n        ];\n        optionsList.forEach(function(item) {\n            this._gridSettings.push.apply(this._gridSettings, this._resolveDrawGridOption(item));\n        }, this);\n        return this;\n    },\n    _resolveDrawGridOption: function(opt) {\n        var namespace = this.constructor.gridPatterns;\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isString)(opt) && Array.isArray(namespace[opt])) {\n            return namespace[opt].map(function(item) {\n                return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)({}, item);\n            });\n        }\n        var options = opt || {\n            args: [\n                {}\n            ]\n        };\n        var isArray = Array.isArray(options);\n        var name = options.name;\n        if (!isArray && !name && !options.markup) {\n            name = \"dot\";\n        }\n        if (name && Array.isArray(namespace[name])) {\n            var pattern = namespace[name].map(function(item) {\n                return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)({}, item);\n            });\n            var args = Array.isArray(options.args) ? options.args : [\n                options.args || {}\n            ];\n            (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.defaults)(args[0], (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.omit)(opt, \"args\"));\n            for(var i = 0; i < args.length; i++){\n                if (pattern[i]) {\n                    (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)(pattern[i], args[i]);\n                }\n            }\n            return pattern;\n        }\n        return isArray ? options : [\n            options\n        ];\n    },\n    drawGrid: function(opt) {\n        const gridSize = this.options.drawGridSize || this.options.gridSize;\n        if (gridSize <= 1) {\n            return this.clearGrid();\n        }\n        var localOptions = Array.isArray(opt) ? opt : [\n            opt\n        ];\n        var ctm = this.matrix();\n        var refs = this._getGridRefs();\n        this._gridSettings.forEach(function(gridLayerSetting, index) {\n            var id = \"pattern_\" + index;\n            var options = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.merge)(gridLayerSetting, localOptions[index], {\n                sx: ctm.a || 1,\n                sy: ctm.d || 1,\n                ox: ctm.e || 0,\n                oy: ctm.f || 0\n            });\n            options.width = gridSize * (ctm.a || 1) * (options.scaleFactor || 1);\n            options.height = gridSize * (ctm.d || 1) * (options.scaleFactor || 1);\n            if (!refs.exist(id)) {\n                refs.add(id, (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"pattern\", {\n                    id: id,\n                    patternUnits: \"userSpaceOnUse\"\n                }, (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(options.markup)));\n            }\n            var patternDefVel = refs.get(id);\n            if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(options.update)) {\n                options.update(patternDefVel.node.childNodes[0], options);\n            }\n            var x = options.ox % options.width;\n            if (x < 0) x += options.width;\n            var y = options.oy % options.height;\n            if (y < 0) y += options.height;\n            patternDefVel.attr({\n                x: x,\n                y: y,\n                width: options.width,\n                height: options.height\n            });\n        });\n        var patternUri = new XMLSerializer().serializeToString(refs.root.node);\n        patternUri = \"url(data:image/svg+xml;base64,\" + btoa(patternUri) + \")\";\n        this.$grid.css(\"backgroundImage\", patternUri);\n        return this;\n    },\n    updateBackgroundImage: function(opt) {\n        opt = opt || {};\n        var backgroundPosition = opt.position || \"center\";\n        var backgroundSize = opt.size || \"auto auto\";\n        var currentScale = this.scale();\n        var currentTranslate = this.translate();\n        // backgroundPosition\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(backgroundPosition)) {\n            var x = currentTranslate.tx + currentScale.sx * (backgroundPosition.x || 0);\n            var y = currentTranslate.ty + currentScale.sy * (backgroundPosition.y || 0);\n            backgroundPosition = x + \"px \" + y + \"px\";\n        }\n        // backgroundSize\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(backgroundSize)) {\n            backgroundSize = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Rect(backgroundSize).scale(currentScale.sx, currentScale.sy);\n            backgroundSize = backgroundSize.width + \"px \" + backgroundSize.height + \"px\";\n        }\n        this.$background.css({\n            backgroundSize: backgroundSize,\n            backgroundPosition: backgroundPosition\n        });\n    },\n    drawBackgroundImage: function(img, opt) {\n        // Clear the background image if no image provided\n        if (!(img instanceof HTMLImageElement)) {\n            this.$background.css(\"backgroundImage\", \"\");\n            return;\n        }\n        if (!this._background || this._background.id !== opt.id) {\n            // Draw only the last image requested (see drawBackground())\n            return;\n        }\n        opt = opt || {};\n        var backgroundImage;\n        var backgroundSize = opt.size;\n        var backgroundRepeat = opt.repeat || \"no-repeat\";\n        var backgroundOpacity = opt.opacity || 1;\n        var backgroundQuality = Math.abs(opt.quality) || 1;\n        var backgroundPattern = this.constructor.backgroundPatterns[(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.camelCase)(backgroundRepeat)];\n        if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isFunction)(backgroundPattern)) {\n            // 'flip-x', 'flip-y', 'flip-xy', 'watermark' and custom\n            img.width *= backgroundQuality;\n            img.height *= backgroundQuality;\n            var canvas = backgroundPattern(img, opt);\n            if (!(canvas instanceof HTMLCanvasElement)) {\n                throw new Error(\"dia.Paper: background pattern must return an HTML Canvas instance\");\n            }\n            backgroundImage = canvas.toDataURL(\"image/png\");\n            backgroundRepeat = \"repeat\";\n            if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(backgroundSize)) {\n                // recalculate the tile size if an object passed in\n                backgroundSize.width *= canvas.width / img.width;\n                backgroundSize.height *= canvas.height / img.height;\n            } else if (backgroundSize === undefined) {\n                // calculate the tile size if no provided\n                opt.size = {\n                    width: canvas.width / backgroundQuality,\n                    height: canvas.height / backgroundQuality\n                };\n            }\n        } else {\n            // backgroundRepeat:\n            // no-repeat', 'round', 'space', 'repeat', 'repeat-x', 'repeat-y'\n            backgroundImage = img.src;\n            if (backgroundSize === undefined) {\n                // pass the image size for  the backgroundSize if no size provided\n                opt.size = {\n                    width: img.width,\n                    height: img.height\n                };\n            }\n        }\n        this.$background.css({\n            opacity: backgroundOpacity,\n            backgroundRepeat: backgroundRepeat,\n            backgroundImage: \"url(\" + backgroundImage + \")\"\n        });\n        this.updateBackgroundImage(opt);\n    },\n    updateBackgroundColor: function(color) {\n        this.$el.css(\"backgroundColor\", color || \"\");\n    },\n    drawBackground: function(opt) {\n        opt = opt || {};\n        this.updateBackgroundColor(opt.color);\n        if (opt.image) {\n            opt = this._background = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.cloneDeep)(opt);\n            (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.guid)(opt);\n            var img = document.createElement(\"img\");\n            img.onload = this.drawBackgroundImage.bind(this, img, opt);\n            img.src = opt.image;\n        } else {\n            this.drawBackgroundImage(null);\n            this._background = null;\n        }\n        return this;\n    },\n    setInteractivity: function(value) {\n        this.options.interactive = value;\n        (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.invoke)(this._views, \"setInteractivity\", value);\n    },\n    // Paper definitions.\n    // ------------------\n    isDefined: function(defId) {\n        return !!this.svg.getElementById(defId);\n    },\n    defineFilter: function(filter) {\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(filter)) {\n            throw new TypeError(\"dia.Paper: defineFilter() requires 1. argument to be an object.\");\n        }\n        var filterId = filter.id;\n        var name = filter.name;\n        // Generate a hash code from the stringified filter definition. This gives us\n        // a unique filter ID for different definitions.\n        if (!filterId) {\n            filterId = name + this.svg.id + (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.hashCode)(JSON.stringify(filter));\n        }\n        // If the filter already exists in the document,\n        // we're done and we can just use it (reference it using `url()`).\n        // If not, create one.\n        if (!this.isDefined(filterId)) {\n            var namespace = _util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.filter;\n            var filterSVGString = namespace[name] && namespace[name](filter.args || {});\n            if (!filterSVGString) {\n                throw new Error(\"Non-existing filter \" + name);\n            }\n            // Set the filter area to be 3x the bounding box of the cell\n            // and center the filter around the cell.\n            var filterAttrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.assign)({\n                filterUnits: \"objectBoundingBox\",\n                x: -1,\n                y: -1,\n                width: 3,\n                height: 3\n            }, filter.attrs, {\n                id: filterId\n            });\n            (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(filterSVGString, filterAttrs).appendTo(this.defs);\n        }\n        return filterId;\n    },\n    defineGradient: function(gradient) {\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(gradient)) {\n            throw new TypeError(\"dia.Paper: defineGradient() requires 1. argument to be an object.\");\n        }\n        const { svg, defs } = this;\n        const { type, // Generate a hash code from the stringified filter definition. This gives us\n        // a unique filter ID for different definitions.\n        id = type + svg.id + (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.hashCode)(JSON.stringify(gradient)), stops, attrs = {} } = gradient;\n        // If the gradient already exists in the document,\n        // we're done and we can just use it (reference it using `url()`).\n        if (this.isDefined(id)) return id;\n        // If not, create one.\n        const stopVEls = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.toArray)(stops).map(({ offset, color, opacity })=>{\n            return (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"stop\").attr({\n                \"offset\": offset,\n                \"stop-color\": color,\n                \"stop-opacity\": Number.isFinite(opacity) ? opacity : 1\n            });\n        });\n        const gradientVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(type, attrs, stopVEls);\n        gradientVEl.id = id;\n        gradientVEl.appendTo(defs);\n        return id;\n    },\n    definePattern: function(pattern) {\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(pattern)) {\n            throw new TypeError(\"dia.Paper: definePattern() requires 1. argument to be an object.\");\n        }\n        const { svg, defs } = this;\n        const { // Generate a hash code from the stringified filter definition. This gives us\n        // a unique filter ID for different definitions.\n        id = svg.id + (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.hashCode)(JSON.stringify(pattern)), markup, attrs = {} } = pattern;\n        if (!markup) {\n            throw new TypeError(\"dia.Paper: definePattern() requires markup.\");\n        }\n        // If the gradient already exists in the document,\n        // we're done and we can just use it (reference it using `url()`).\n        if (this.isDefined(id)) return id;\n        // If not, create one.\n        const patternVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"pattern\", {\n            patternUnits: \"userSpaceOnUse\"\n        });\n        patternVEl.id = id;\n        patternVEl.attr(attrs);\n        if (typeof markup === \"string\") {\n            patternVEl.append((0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(markup));\n        } else {\n            const { fragment } = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.parseDOMJSON)(markup);\n            patternVEl.append(fragment);\n        }\n        patternVEl.appendTo(defs);\n        return id;\n    },\n    defineMarker: function(marker) {\n        if (!(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isObject)(marker)) {\n            throw new TypeError(\"dia.Paper: defineMarker() requires the first argument to be an object.\");\n        }\n        const { svg, defs } = this;\n        const { // Generate a hash code from the stringified filter definition. This gives us\n        // a unique filter ID for different definitions.\n        id = svg.id + (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.hashCode)(JSON.stringify(marker)), // user-provided markup\n        // (e.g. defined when creating link via `attrs/line/sourceMarker/markup`)\n        markup, // user-provided attributes\n        // (e.g. defined when creating link via `attrs/line/sourceMarker/attrs`)\n        // note: `transform` attrs are ignored by browsers\n        attrs = {}, // deprecated - use `attrs/markerUnits` instead (which has higher priority)\n        markerUnits = \"userSpaceOnUse\" } = marker;\n        // If the marker already exists in the document,\n        // we're done and we can just use it (reference it using `url()`).\n        if (this.isDefined(id)) return id;\n        // If not, create one.\n        const markerVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"marker\", {\n            orient: \"auto\",\n            overflow: \"visible\",\n            markerUnits: markerUnits\n        });\n        markerVEl.id = id;\n        markerVEl.attr(attrs);\n        let markerContentVEl;\n        if (markup) {\n            let markupVEl;\n            if (typeof markup === \"string\") {\n                // Marker object has a `markup` property of type string.\n                // - Construct V from the provided string.\n                markupVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(markup);\n                // `markupVEl` is now either a single VEl, or an array of VEls.\n                // - Coerce it to an array.\n                markupVEl = Array.isArray(markupVEl) ? markupVEl : [\n                    markupVEl\n                ];\n            } else {\n                // Marker object has a `markup` property of type object.\n                // - Construct V from the object by parsing it as DOM JSON.\n                const { fragment } = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.parseDOMJSON)(markup);\n                markupVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(fragment).children();\n            }\n            // `markupVEl` is an array with one or more VEls inside.\n            // - If there are multiple VEls, wrap them in a newly-constructed <g> element\n            if (markupVEl.length > 1) {\n                markerContentVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(\"g\").append(markupVEl);\n            } else {\n                markerContentVEl = markupVEl[0];\n            }\n        } else {\n            // Marker object is a flat structure.\n            // - Construct a new V of type `marker.type`.\n            const { type = \"path\" } = marker;\n            markerContentVEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(type);\n        }\n        // `markerContentVEl` is a single VEl.\n        // Assign additional attributes to it (= context attributes + marker attributes):\n        // - Attribute values are taken from non-special properties of `marker`.\n        const markerAttrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.omit)(marker, \"type\", \"id\", \"markup\", \"attrs\", \"markerUnits\");\n        const markerAttrsKeys = Object.keys(markerAttrs);\n        markerAttrsKeys.forEach((key)=>{\n            const value = markerAttrs[key];\n            const markupValue = markerContentVEl.attr(key); // value coming from markupVEl (if any) = higher priority\n            if (markupValue == null) {\n                // Default logic:\n                markerContentVEl.attr(key, value);\n            } else {\n                // Properties with special logic should be added as cases to this switch block:\n                switch(key){\n                    case \"transform\":\n                        // - Prepend `transform` to existing value.\n                        markerContentVEl.attr(key, value + \" \" + markupValue);\n                        break;\n                }\n            }\n        });\n        markerContentVEl.appendTo(markerVEl);\n        markerVEl.appendTo(defs);\n        return id;\n    },\n    customEventTrigger: function(evt, view, rootNode = view.el) {\n        const eventNode = evt.target.closest(\"[event]\");\n        if (eventNode && rootNode !== eventNode && view.el.contains(eventNode)) {\n            const eventEvt = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_15__.normalizeEvent)(jquery__WEBPACK_IMPORTED_MODULE_0__.Event(evt.originalEvent, {\n                data: evt.data,\n                // Originally the event listener was attached to the event element.\n                currentTarget: eventNode\n            }));\n            this.onevent(eventEvt);\n            if (eventEvt.isDefaultPrevented()) {\n                evt.preventDefault();\n            }\n            return eventEvt;\n        }\n        return null;\n    }\n}, {\n    sorting: sortingTypes,\n    Layers: _PaperLayer_mjs__WEBPACK_IMPORTED_MODULE_3__.LayersNames,\n    backgroundPatterns: {\n        flipXy: function(img) {\n            // d b\n            // q p\n            var canvas = document.createElement(\"canvas\");\n            var imgWidth = img.width;\n            var imgHeight = img.height;\n            canvas.width = 2 * imgWidth;\n            canvas.height = 2 * imgHeight;\n            var ctx = canvas.getContext(\"2d\");\n            // top-left image\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            // xy-flipped bottom-right image\n            ctx.setTransform(-1, 0, 0, -1, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            // x-flipped top-right image\n            ctx.setTransform(-1, 0, 0, 1, canvas.width, 0);\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            // y-flipped bottom-left image\n            ctx.setTransform(1, 0, 0, -1, 0, canvas.height);\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            return canvas;\n        },\n        flipX: function(img) {\n            // d b\n            // d b\n            var canvas = document.createElement(\"canvas\");\n            var imgWidth = img.width;\n            var imgHeight = img.height;\n            canvas.width = imgWidth * 2;\n            canvas.height = imgHeight;\n            var ctx = canvas.getContext(\"2d\");\n            // left image\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            // flipped right image\n            ctx.translate(2 * imgWidth, 0);\n            ctx.scale(-1, 1);\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            return canvas;\n        },\n        flipY: function(img) {\n            // d d\n            // q q\n            var canvas = document.createElement(\"canvas\");\n            var imgWidth = img.width;\n            var imgHeight = img.height;\n            canvas.width = imgWidth;\n            canvas.height = imgHeight * 2;\n            var ctx = canvas.getContext(\"2d\");\n            // top image\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            // flipped bottom image\n            ctx.translate(0, 2 * imgHeight);\n            ctx.scale(1, -1);\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n            return canvas;\n        },\n        watermark: function(img, opt) {\n            //   d\n            // d\n            opt = opt || {};\n            var imgWidth = img.width;\n            var imgHeight = img.height;\n            var canvas = document.createElement(\"canvas\");\n            canvas.width = imgWidth * 3;\n            canvas.height = imgHeight * 3;\n            var ctx = canvas.getContext(\"2d\");\n            var angle = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_12__.isNumber)(opt.watermarkAngle) ? -opt.watermarkAngle : -20;\n            var radians = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_19__.toRad)(angle);\n            var stepX = canvas.width / 4;\n            var stepY = canvas.height / 4;\n            for(var i = 0; i < 4; i++){\n                for(var j = 0; j < 4; j++){\n                    if ((i + j) % 2 > 0) {\n                        // reset the current transformations\n                        ctx.setTransform(1, 0, 0, 1, (2 * i - 1) * stepX, (2 * j - 1) * stepY);\n                        ctx.rotate(radians);\n                        ctx.drawImage(img, -imgWidth / 2, -imgHeight / 2, imgWidth, imgHeight);\n                    }\n                }\n            }\n            return canvas;\n        }\n    },\n    gridPatterns: {\n        dot: [\n            {\n                color: \"#AAAAAA\",\n                thickness: 1,\n                markup: \"rect\",\n                update: function(el, opt) {\n                    (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(el).attr({\n                        width: opt.thickness * opt.sx,\n                        height: opt.thickness * opt.sy,\n                        fill: opt.color\n                    });\n                }\n            }\n        ],\n        fixedDot: [\n            {\n                color: \"#AAAAAA\",\n                thickness: 1,\n                markup: \"rect\",\n                update: function(el, opt) {\n                    var size = opt.sx <= 1 ? opt.thickness * opt.sx : opt.thickness;\n                    (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(el).attr({\n                        width: size,\n                        height: size,\n                        fill: opt.color\n                    });\n                }\n            }\n        ],\n        mesh: [\n            {\n                color: \"#AAAAAA\",\n                thickness: 1,\n                markup: \"path\",\n                update: function(el, opt) {\n                    var d;\n                    var width = opt.width;\n                    var height = opt.height;\n                    var thickness = opt.thickness;\n                    if (width - thickness >= 0 && height - thickness >= 0) {\n                        d = [\n                            \"M\",\n                            width,\n                            0,\n                            \"H0 M0 0 V0\",\n                            height\n                        ].join(\" \");\n                    } else {\n                        d = \"M 0 0 0 0\";\n                    }\n                    (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(el).attr({\n                        \"d\": d,\n                        stroke: opt.color,\n                        \"stroke-width\": opt.thickness\n                    });\n                }\n            }\n        ],\n        doubleMesh: [\n            {\n                color: \"#AAAAAA\",\n                thickness: 1,\n                markup: \"path\",\n                update: function(el, opt) {\n                    var d;\n                    var width = opt.width;\n                    var height = opt.height;\n                    var thickness = opt.thickness;\n                    if (width - thickness >= 0 && height - thickness >= 0) {\n                        d = [\n                            \"M\",\n                            width,\n                            0,\n                            \"H0 M0 0 V0\",\n                            height\n                        ].join(\" \");\n                    } else {\n                        d = \"M 0 0 0 0\";\n                    }\n                    (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(el).attr({\n                        \"d\": d,\n                        stroke: opt.color,\n                        \"stroke-width\": opt.thickness\n                    });\n                }\n            },\n            {\n                color: \"#000000\",\n                thickness: 3,\n                scaleFactor: 4,\n                markup: \"path\",\n                update: function(el, opt) {\n                    var d;\n                    var width = opt.width;\n                    var height = opt.height;\n                    var thickness = opt.thickness;\n                    if (width - thickness >= 0 && height - thickness >= 0) {\n                        d = [\n                            \"M\",\n                            width,\n                            0,\n                            \"H0 M0 0 V0\",\n                            height\n                        ].join(\" \");\n                    } else {\n                        d = \"M 0 0 0 0\";\n                    }\n                    (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(el).attr({\n                        \"d\": d,\n                        stroke: opt.color,\n                        \"stroke-width\": opt.thickness\n                    });\n                }\n            }\n        ]\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZGlhL1BhcGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFnQ0o7QUFDeUI7QUFDTDtBQUNMO0FBQ007QUFDTjtBQUNSO0FBQ0E7QUFDRTtBQUN1QjtBQUNEO0FBQ0Y7QUFDVTtBQUNsQjtBQUV6QjtBQUNTO0FBRWhDLE1BQU1tRCxlQUFlO0lBQ2pCQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsT0FBTztBQUNYO0FBRUEsTUFBTUMsWUFBWTtBQUNsQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsbUJBQW1CO0FBQ3pCLE1BQU1DLG9CQUFvQkM7QUFDMUIsTUFBTUMsZUFBZSxrQkFBa0IsMEJBQTBCO0FBRWpFLE1BQU1DLG9CQUFvQnhCLG1EQUFRQSxDQUFDeUIsWUFBWTtBQUUvQyxNQUFNQyxzQkFBc0I7SUFDeEIsQ0FBQ0Ysa0JBQWtCRyxPQUFPLENBQUMsRUFBRTtRQUN6QkMsTUFBTTtRQUNOQyxTQUFTO1lBQ0xDLFNBQVM7UUFDYjtJQUNKO0lBQ0EsQ0FBQ04sa0JBQWtCTyxtQkFBbUIsQ0FBQyxFQUFFO1FBQ3JDSCxNQUFNO1FBQ05DLFNBQVM7WUFDTEcsV0FBVztRQUNmO0lBQ0o7SUFDQSxDQUFDUixrQkFBa0JTLG9CQUFvQixDQUFDLEVBQUU7UUFDdENMLE1BQU07UUFDTkMsU0FBUztZQUNMRyxXQUFXO1FBQ2Y7SUFDSjtBQUNKO0FBRUEsTUFBTUUsZ0JBQWdCO0lBQUM7UUFDbkJOLE1BQU10Qix3REFBV0EsQ0FBQzZCLElBQUk7SUFDMUI7SUFBRztRQUNDUCxNQUFNdEIsd0RBQVdBLENBQUM4QixLQUFLO0lBQzNCO0lBQUc7UUFDQ1IsTUFBTXRCLHdEQUFXQSxDQUFDK0IsTUFBTTtJQUM1QjtJQUFHO1FBQ0NULE1BQU10Qix3REFBV0EsQ0FBQ2dDLEtBQUs7SUFDM0I7SUFBRztRQUNDVixNQUFNdEIsd0RBQVdBLENBQUNpQyxLQUFLO0lBQzNCO0NBQUU7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RHpQLElBQUk7NEJBQUM7NEJBQUtoYjs0QkFBTzs0QkFBRzs0QkFBY0M7eUJBQU8sQ0FBQzJxQixJQUFJLENBQUM7b0JBQ25ELE9BQU87d0JBQ0g1UCxJQUFJO29CQUNSO29CQUVBL2YseURBQUNBLENBQUN1TCxJQUFJOGUsSUFBSSxDQUFDO3dCQUFFLEtBQUt0Szt3QkFBRzZQLFFBQVE1bUIsSUFBSStpQixLQUFLO3dCQUFFLGdCQUFnQi9pQixJQUFJd21CLFNBQVM7b0JBQUM7Z0JBQzFFO1lBQ0o7WUFBRztnQkFDQ3pELE9BQU87Z0JBQ1B5RCxXQUFXO2dCQUNYdEYsYUFBYTtnQkFDYk4sUUFBUTtnQkFDUnpiLFFBQVEsU0FBUzVDLEVBQUUsRUFBRXZDLEdBQUc7b0JBRXBCLElBQUkrVztvQkFDSixJQUFJaGIsUUFBUWlFLElBQUlqRSxLQUFLO29CQUNyQixJQUFJQyxTQUFTZ0UsSUFBSWhFLE1BQU07b0JBQ3ZCLElBQUl3cUIsWUFBWXhtQixJQUFJd21CLFNBQVM7b0JBRTdCLElBQUl6cUIsUUFBUXlxQixhQUFhLEtBQUt4cUIsU0FBU3dxQixhQUFhLEdBQUc7d0JBQ25EelAsSUFBSTs0QkFBQzs0QkFBS2hiOzRCQUFPOzRCQUFHOzRCQUFjQzt5QkFBTyxDQUFDMnFCLElBQUksQ0FBQztvQkFDbkQsT0FBTzt3QkFDSDVQLElBQUk7b0JBQ1I7b0JBRUEvZix5REFBQ0EsQ0FBQ3VMLElBQUk4ZSxJQUFJLENBQUM7d0JBQUUsS0FBS3RLO3dCQUFHNlAsUUFBUTVtQixJQUFJK2lCLEtBQUs7d0JBQUUsZ0JBQWdCL2lCLElBQUl3bUIsU0FBUztvQkFBQztnQkFDMUU7WUFDSjtTQUFFO0lBQ047QUFDSixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZGlhL1BhcGVyLm1qcz9jYzljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWIGZyb20gJy4uL1YvaW5kZXgubWpzJztcbmltcG9ydCB7XG4gICAgaXNOdW1iZXIsXG4gICAgYXNzaWduLFxuICAgIG5leHRGcmFtZSxcbiAgICBpc09iamVjdCxcbiAgICBjYW5jZWxGcmFtZSxcbiAgICBkZWZhdWx0cyxcbiAgICBkZWZhdWx0c0RlZXAsXG4gICAgYWRkQ2xhc3NOYW1lUHJlZml4LFxuICAgIG5vcm1hbGl6ZVNpZGVzLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBnZXRCeVBhdGgsXG4gICAgc29ydEVsZW1lbnRzLFxuICAgIGlzU3RyaW5nLFxuICAgIGd1aWQsXG4gICAgbm9ybWFsaXplRXZlbnQsXG4gICAgbm9ybWFsaXplV2hlZWwsXG4gICAgY2FwLFxuICAgIGRlYm91bmNlLFxuICAgIG9taXQsXG4gICAgcmVzdWx0LFxuICAgIG1lcmdlLFxuICAgIGNhbWVsQ2FzZSxcbiAgICBjbG9uZURlZXAsXG4gICAgaW52b2tlLFxuICAgIGhhc2hDb2RlLFxuICAgIGZpbHRlciBhcyBfZmlsdGVyLFxuICAgIHBhcnNlRE9NSlNPTixcbiAgICB0b0FycmF5LFxuICAgIGhhc1xufSBmcm9tICcuLi91dGlsL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBSZWN0LCBQb2ludCwgdG9SYWQgfSBmcm9tICcuLi9nL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBWaWV3LCB2aWV3cyB9IGZyb20gJy4uL212Yy9pbmRleC5tanMnO1xuaW1wb3J0IHsgQ2VsbFZpZXcgfSBmcm9tICcuL0NlbGxWaWV3Lm1qcyc7XG5pbXBvcnQgeyBFbGVtZW50VmlldyB9IGZyb20gJy4vRWxlbWVudFZpZXcubWpzJztcbmltcG9ydCB7IExpbmtWaWV3IH0gZnJvbSAnLi9MaW5rVmlldy5tanMnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJy4vTGluay5tanMnO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gJy4vQ2VsbC5tanMnO1xuaW1wb3J0IHsgR3JhcGggfSBmcm9tICcuL0dyYXBoLm1qcyc7XG5pbXBvcnQgeyBMYXllcnNOYW1lcywgUGFwZXJMYXllciB9IGZyb20gJy4vUGFwZXJMYXllci5tanMnO1xuaW1wb3J0ICogYXMgaGlnaGxpZ2h0ZXJzIGZyb20gJy4uL2hpZ2hsaWdodGVycy9pbmRleC5tanMnO1xuaW1wb3J0ICogYXMgbGlua0FuY2hvcnMgZnJvbSAnLi4vbGlua0FuY2hvcnMvaW5kZXgubWpzJztcbmltcG9ydCAqIGFzIGNvbm5lY3Rpb25Qb2ludHMgZnJvbSAnLi4vY29ubmVjdGlvblBvaW50cy9pbmRleC5tanMnO1xuaW1wb3J0ICogYXMgYW5jaG9ycyBmcm9tICcuLi9hbmNob3JzL2luZGV4Lm1qcyc7XG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgQmFja2JvbmUgZnJvbSAnYmFja2JvbmUnO1xuXG5jb25zdCBzb3J0aW5nVHlwZXMgPSB7XG4gICAgTk9ORTogJ3NvcnRpbmctbm9uZScsXG4gICAgQVBQUk9YOiAnc29ydGluZy1hcHByb3hpbWF0ZScsXG4gICAgRVhBQ1Q6ICdzb3J0aW5nLWV4YWN0J1xufTtcblxuY29uc3QgV0hFRUxfQ0FQID0gNTA7XG5jb25zdCBXSEVFTF9XQUlUX01TID0gMjA7XG5jb25zdCBNT1VOVF9CQVRDSF9TSVpFID0gMTAwMDtcbmNvbnN0IFVQREFURV9CQVRDSF9TSVpFID0gSW5maW5pdHk7XG5jb25zdCBNSU5fUFJJT1JJVFkgPSA5MDA3MTk5MjU0NzQwOTkxOyAvLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG5jb25zdCBIaWdobGlnaHRpbmdUeXBlcyA9IENlbGxWaWV3LkhpZ2hsaWdodGluZztcblxuY29uc3QgZGVmYXVsdEhpZ2hsaWdodGluZyA9IHtcbiAgICBbSGlnaGxpZ2h0aW5nVHlwZXMuREVGQVVMVF06IHtcbiAgICAgICAgbmFtZTogJ3N0cm9rZScsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDNcbiAgICAgICAgfVxuICAgIH0sXG4gICAgW0hpZ2hsaWdodGluZ1R5cGVzLk1BR05FVF9BVkFJTEFCSUxJVFldOiB7XG4gICAgICAgIG5hbWU6ICdhZGRDbGFzcycsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F2YWlsYWJsZS1tYWduZXQnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFtIaWdobGlnaHRpbmdUeXBlcy5FTEVNRU5UX0FWQUlMQUJJTElUWV06IHtcbiAgICAgICAgbmFtZTogJ2FkZENsYXNzJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXZhaWxhYmxlLWNlbGwnXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBkZWZhdWx0TGF5ZXJzID0gW3tcbiAgICBuYW1lOiBMYXllcnNOYW1lcy5CQUNLLFxufSwge1xuICAgIG5hbWU6IExheWVyc05hbWVzLkNFTExTLFxufSwge1xuICAgIG5hbWU6IExheWVyc05hbWVzLkxBQkVMUyxcbn0sIHtcbiAgICBuYW1lOiBMYXllcnNOYW1lcy5GUk9OVFxufSwge1xuICAgIG5hbWU6IExheWVyc05hbWVzLlRPT0xTXG59XTtcblxuZXhwb3J0IGNvbnN0IFBhcGVyID0gVmlldy5leHRlbmQoe1xuXG4gICAgY2xhc3NOYW1lOiAncGFwZXInLFxuXG4gICAgb3B0aW9uczoge1xuXG4gICAgICAgIHdpZHRoOiA4MDAsXG4gICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICBvcmlnaW46IHsgeDogMCwgeTogMCB9LCAvLyB4LHkgY29vcmRpbmF0ZXMgaW4gdG9wLWxlZnQgY29ybmVyXG4gICAgICAgIGdyaWRTaXplOiAxLFxuICAgICAgICAvLyBXaGV0aGVyIG9yIG5vdCB0byBkcmF3IHRoZSBncmlkIGxpbmVzIG9uIHRoZSBwYXBlcidzIERPTSBlbGVtZW50LlxuICAgICAgICAvLyBlLmcgZHJhd0dyaWQ6IHRydWUsIGRyYXdHcmlkOiB7IGNvbG9yOiAncmVkJywgdGhpY2tuZXNzOiAyIH1cbiAgICAgICAgZHJhd0dyaWQ6IGZhbHNlLFxuICAgICAgICAvLyBJZiBub3Qgc2V0LCB0aGUgc2l6ZSBvZiB0aGUgdmlzdWFsIGdyaWQgaXMgdGhlIHNhbWUgYXMgdGhlIGBncmlkU2l6ZWAuXG4gICAgICAgIGRyYXdHcmlkU2l6ZTogbnVsbCxcblxuICAgICAgICAvLyBXaGV0aGVyIG9yIG5vdCB0byBkcmF3IHRoZSBiYWNrZ3JvdW5kIG9uIHRoZSBwYXBlcidzIERPTSBlbGVtZW50LlxuICAgICAgICAvLyBlLmcuIGJhY2tncm91bmQ6IHsgY29sb3I6ICdsaWdodGJsdWUnLCBpbWFnZTogJy9wYXBlci1iYWNrZ3JvdW5kLnBuZycsIHJlcGVhdDogJ2ZsaXAteHknIH1cbiAgICAgICAgYmFja2dyb3VuZDogZmFsc2UsXG5cbiAgICAgICAgcGVycGVuZGljdWxhckxpbmtzOiBmYWxzZSxcbiAgICAgICAgZWxlbWVudFZpZXc6IEVsZW1lbnRWaWV3LFxuICAgICAgICBsaW5rVmlldzogTGlua1ZpZXcsXG4gICAgICAgIHNuYXBMYWJlbHM6IGZhbHNlLCAvLyBmYWxzZSwgdHJ1ZVxuICAgICAgICBzbmFwTGlua3M6IGZhbHNlLCAvLyBmYWxzZSwgdHJ1ZSwgeyByYWRpdXM6IHZhbHVlIH1cbiAgICAgICAgc25hcExpbmtzU2VsZjogZmFsc2UsIC8vIGZhbHNlLCB0cnVlLCB7IHJhZGl1czogdmFsdWUgfVxuXG4gICAgICAgIC8vIFNob3VsZCB0aGUgbGluayBsYWJlbHMgYmUgcmVuZGVyZWQgaW50byBpdHMgb3duIGxheWVyP1xuICAgICAgICAvLyBgZmFsc2VgIC0gdGhlIGxhYmVscyBhcmUgcGFydCBvZiB0aGUgbGlua3NcbiAgICAgICAgLy8gYHRydWVgIC0gdGhlIGxhYmVscyBhcmUgYXBwZW5kZWQgdG8gTGF5ZXJzTmFtZS5MQUJFTFNcbiAgICAgICAgLy8gW0xheWVyc05hbWVdIC0gdGhlIGxhYmVscyBhcmUgYXBwZW5kZWQgdG8gdGhlIGxheWVyIHNwZWNpZmllZFxuICAgICAgICBsYWJlbHNMYXllcjogZmFsc2UsXG5cbiAgICAgICAgLy8gV2hlbiBzZXQgdG8gRkFMU0UsIGFuIGVsZW1lbnQgbWF5IG5vdCBoYXZlIG1vcmUgdGhhbiAxIGxpbmsgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kIHRhcmdldCBlbGVtZW50LlxuICAgICAgICBtdWx0aUxpbmtzOiB0cnVlLFxuXG4gICAgICAgIC8vIEZvciBhZGRpbmcgY3VzdG9tIGd1YXJkIGxvZ2ljLlxuICAgICAgICBndWFyZDogZnVuY3Rpb24oZXZ0LCB2aWV3KSB7XG5cbiAgICAgICAgICAgIC8vIEZBTFNFIG1lYW5zIHRoZSBldmVudCBpc24ndCBndWFyZGVkLlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhpZ2hsaWdodGluZzogZGVmYXVsdEhpZ2hsaWdodGluZyxcblxuICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvbnRleHQgbWVudSBmcm9tIGJlaW5nIGRpc3BsYXllZC5cbiAgICAgICAgcHJldmVudENvbnRleHRNZW51OiB0cnVlLFxuXG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBibGFuazpwb2ludGVyPGFjdGlvbj4uXG4gICAgICAgIHByZXZlbnREZWZhdWx0QmxhbmtBY3Rpb246IHRydWUsXG5cbiAgICAgICAgLy8gUHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gZm9yIGNlbGw6cG9pbnRlcjxhY3Rpb24+LlxuICAgICAgICBwcmV2ZW50RGVmYXVsdFZpZXdBY3Rpb246IHRydWUsXG5cbiAgICAgICAgLy8gUmVzdHJpY3QgdGhlIHRyYW5zbGF0aW9uIG9mIGVsZW1lbnRzIGJ5IGdpdmVuIGJvdW5kaW5nIGJveC5cbiAgICAgICAgLy8gT3B0aW9uIGFjY2VwdHMgYSBib29sZWFuOlxuICAgICAgICAvLyAgdHJ1ZSAtIHRoZSB0cmFuc2xhdGlvbiBpcyByZXN0cmljdGVkIHRvIHRoZSBwYXBlciBhcmVhXG4gICAgICAgIC8vICBmYWxzZSAtIG5vIHJlc3RyaWN0aW9uc1xuICAgICAgICAvLyBBIG1ldGhvZDpcbiAgICAgICAgLy8gcmVzdHJpY3RUcmFuc2xhdGU6IGZ1bmN0aW9uKGVsZW1lbnRWaWV3KSB7XG4gICAgICAgIC8vICAgICB2YXIgcGFyZW50SWQgPSBlbGVtZW50Vmlldy5tb2RlbC5nZXQoJ3BhcmVudCcpO1xuICAgICAgICAvLyAgICAgcmV0dXJuIHBhcmVudElkICYmIHRoaXMubW9kZWwuZ2V0Q2VsbChwYXJlbnRJZCkuZ2V0QkJveCgpO1xuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBPciBhIGJvdW5kaW5nIGJveDpcbiAgICAgICAgLy8gcmVzdHJpY3RUcmFuc2xhdGU6IHsgeDogMTAsIHk6IDEwLCB3aWR0aDogNzkwLCBoZWlnaHQ6IDU5MCB9XG4gICAgICAgIHJlc3RyaWN0VHJhbnNsYXRlOiBmYWxzZSxcblxuICAgICAgICAvLyBNYXJrcyBhbGwgYXZhaWxhYmxlIG1hZ25ldHMgd2l0aCAnYXZhaWxhYmxlLW1hZ25ldCcgY2xhc3MgbmFtZSBhbmQgYWxsIGF2YWlsYWJsZSBjZWxscyB3aXRoXG4gICAgICAgIC8vICdhdmFpbGFibGUtY2VsbCcgY2xhc3MgbmFtZS4gTWFya3MgdGhlbSB3aGVuIGRyYWdnaW5nIGEgbGluayBpcyBzdGFydGVkIGFuZCB1bm1hcmtcbiAgICAgICAgLy8gd2hlbiB0aGUgZHJhZ2dpbmcgaXMgc3RvcHBlZC5cbiAgICAgICAgbWFya0F2YWlsYWJsZTogZmFsc2UsXG5cbiAgICAgICAgLy8gRGVmaW5lcyB3aGF0IGxpbmsgbW9kZWwgaXMgYWRkZWQgdG8gdGhlIGdyYXBoIGFmdGVyIGFuIHVzZXIgY2xpY2tzIG9uIGFuIGFjdGl2ZSBtYWduZXQuXG4gICAgICAgIC8vIFZhbHVlIGNvdWxkIGJlIHRoZSBCYWNrYm9uZS5tb2RlbCBvciBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgQmFja2JvbmUubW9kZWxcbiAgICAgICAgLy8gZGVmYXVsdExpbms6IGZ1bmN0aW9uKGVsZW1lbnRWaWV3LCBtYWduZXQpIHsgcmV0dXJuIGNvbmRpdGlvbiA/IG5ldyBjdXN0b21MaW5rMSgpIDogbmV3IGN1c3RvbUxpbmsyKCkgfVxuICAgICAgICBkZWZhdWx0TGluazogbmV3IExpbmssXG5cbiAgICAgICAgLy8gQSBjb25uZWN0b3IgdGhhdCBpcyB1c2VkIGJ5IGxpbmtzIHdpdGggbm8gY29ubmVjdG9yIGRlZmluZWQgb24gdGhlIG1vZGVsLlxuICAgICAgICAvLyBlLmcuIHsgbmFtZTogJ3JvdW5kZWQnLCBhcmdzOiB7IHJhZGl1czogNSB9fSBvciBhIGZ1bmN0aW9uXG4gICAgICAgIGRlZmF1bHRDb25uZWN0b3I6IHsgbmFtZTogJ25vcm1hbCcgfSxcblxuICAgICAgICAvLyBBIHJvdXRlciB0aGF0IGlzIHVzZWQgYnkgbGlua3Mgd2l0aCBubyByb3V0ZXIgZGVmaW5lZCBvbiB0aGUgbW9kZWwuXG4gICAgICAgIC8vIGUuZy4geyBuYW1lOiAnb25lU2lkZScsIGFyZ3M6IHsgcGFkZGluZzogMTAgfX0gb3IgYSBmdW5jdGlvblxuICAgICAgICBkZWZhdWx0Um91dGVyOiB7IG5hbWU6ICdub3JtYWwnIH0sXG5cbiAgICAgICAgZGVmYXVsdEFuY2hvcjogeyBuYW1lOiAnY2VudGVyJyB9LFxuXG4gICAgICAgIGRlZmF1bHRMaW5rQW5jaG9yOiB7IG5hbWU6ICdjb25uZWN0aW9uUmF0aW8nIH0sXG5cbiAgICAgICAgZGVmYXVsdENvbm5lY3Rpb25Qb2ludDogeyBuYW1lOiAnYmJveCcgfSxcblxuICAgICAgICAvKiBDT05ORUNUSU5HICovXG5cbiAgICAgICAgY29ubmVjdGlvblN0cmF0ZWd5OiBudWxsLFxuXG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdG8gYWRkIGEgbmV3IGxpbmsgdG8gdGhlIGdyYXBoIHdoZW4gdXNlciBjbGlja3Mgb24gYW4gYSBtYWduZXQuXG4gICAgICAgIHZhbGlkYXRlTWFnbmV0OiBmdW5jdGlvbihfY2VsbFZpZXcsIG1hZ25ldCwgX2V2dCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hZ25ldC5nZXRBdHRyaWJ1dGUoJ21hZ25ldCcpICE9PSAncGFzc2l2ZSc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0byBhbGxvdyBvciBkaXNhbGxvdyB0aGUgbGluayBjb25uZWN0aW9uIHdoaWxlIGFuIGFycm93aGVhZCBlbmQgKHNvdXJjZS90YXJnZXQpXG4gICAgICAgIC8vIGJlaW5nIGNoYW5nZWQuXG4gICAgICAgIHZhbGlkYXRlQ29ubmVjdGlvbjogZnVuY3Rpb24oY2VsbFZpZXdTLCBfbWFnbmV0UywgY2VsbFZpZXdULCBfbWFnbmV0VCwgZW5kLCBfbGlua1ZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybiAoZW5kID09PSAndGFyZ2V0JyA/IGNlbGxWaWV3VCA6IGNlbGxWaWV3UykgaW5zdGFuY2VvZiBFbGVtZW50VmlldztcbiAgICAgICAgfSxcblxuICAgICAgICAvKiBFTUJFRERJTkcgKi9cblxuICAgICAgICAvLyBFbmFibGVzIGVtYmVkZGluZy4gUmUtcGFyZW50IHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aCBlbGVtZW50cyB1bmRlciBpdCBhbmQgbWFrZXMgc3VyZSB0aGF0XG4gICAgICAgIC8vIGFsbCBsaW5rcyBhbmQgZWxlbWVudHMgYXJlIHZpc2libGUgdGFrZW4gdGhlIGxldmVsIG9mIGVtYmVkZGluZyBpbnRvIGFjY291bnQuXG4gICAgICAgIGVtYmVkZGluZ01vZGU6IGZhbHNlLFxuXG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdG8gYWxsb3cgb3IgZGlzYWxsb3cgdGhlIGVsZW1lbnQgZW1iZWRkaW5nIHdoaWxlIGFuIGVsZW1lbnQgYmVpbmcgdHJhbnNsYXRlZC5cbiAgICAgICAgdmFsaWRhdGVFbWJlZGRpbmc6IGZ1bmN0aW9uKGNoaWxkVmlldywgcGFyZW50Vmlldykge1xuICAgICAgICAgICAgLy8gYnkgZGVmYXVsdCBhbGwgZWxlbWVudHMgY2FuIGJlIGluIHJlbGF0aW9uIGNoaWxkLXBhcmVudFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0byBhbGxvdyBvciBkaXNhbGxvdyBhbiBlbWJlZGRlZCBlbGVtZW50IHRvIGJlIHVuZW1iZWRkZWQgLyB0byBiZWNvbWUgYSByb290LlxuICAgICAgICB2YWxpZGF0ZVVuZW1iZWRkaW5nOiBmdW5jdGlvbihjaGlsZFZpZXcpIHtcbiAgICAgICAgICAgIC8vIGJ5IGRlZmF1bHQgYWxsIGVsZW1lbnRzIGNhbiBiZWNvbWUgcm9vdHNcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIERldGVybWluZXMgdGhlIHdheSBob3cgYSBjZWxsIGZpbmRzIGEgc3VpdGFibGUgcGFyZW50IHdoZW4gaXQncyBkcmFnZ2VkIG92ZXIgdGhlIHBhcGVyLlxuICAgICAgICAvLyBUaGUgY2VsbCB3aXRoIHRoZSBoaWdoZXN0IHotaW5kZXggKHZpc3VhbGx5IG9uIHRoZSB0b3ApIHdpbGwgYmUgY2hvc2VuLlxuICAgICAgICBmaW5kUGFyZW50Qnk6ICdiYm94JywgLy8gJ2Jib3gnfCdjZW50ZXInfCdvcmlnaW4nfCdjb3JuZXInfCd0b3BSaWdodCd8J2JvdHRvbUxlZnQnXG5cbiAgICAgICAgLy8gSWYgZW5hYmxlZCBvbmx5IHRoZSBlbGVtZW50IG9uIHRoZSB2ZXJ5IGZyb250IGlzIHRha2VuIGludG8gYWNjb3VudCBmb3IgdGhlIGVtYmVkZGluZy5cbiAgICAgICAgLy8gSWYgZGlzYWJsZWQgdGhlIGVsZW1lbnRzIHVuZGVyIHRoZSBkcmFnZ2VkIHZpZXcgYXJlIHRlc3RlZCBvbmUgYnkgb25lXG4gICAgICAgIC8vIChmcm9tIGZyb250IHRvIGJhY2spIHVudGlsIGEgdmFsaWQgcGFyZW50IGZvdW5kLlxuICAgICAgICBmcm9udFBhcmVudE9ubHk6IHRydWUsXG5cbiAgICAgICAgLy8gSW50ZXJhY3RpdmUgZmxhZ3MuIFNlZSBvbmxpbmUgZG9jcyBmb3IgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgaW50ZXJhY3RpdmUgZmxhZ3MuXG4gICAgICAgIGludGVyYWN0aXZlOiB7XG4gICAgICAgICAgICBsYWJlbE1vdmU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgbGlua3MgY2FuIGJlIHBpbm5lZCB0byB0aGUgcGFwZXIuXG4gICAgICAgIC8vIGkuZS4gbGluayBzb3VyY2UvdGFyZ2V0IGNhbiBiZSBhIHBvaW50IGUuZy4gbGluay5nZXQoJ3NvdXJjZScpID09PiB7IHg6IDEwMCwgeTogMTAwIH07XG4gICAgICAgIGxpbmtQaW5uaW5nOiB0cnVlLFxuXG4gICAgICAgIC8vIEN1c3RvbSB2YWxpZGF0aW9uIGFmdGVyIGFuIGludGVyYWN0aW9uIHdpdGggYSBsaW5rIGVuZHMuXG4gICAgICAgIC8vIFJlY29nbml6ZXMgYSBmdW5jdGlvbi4gSWYgYGZhbHNlYCBpcyByZXR1cm5lZCwgdGhlIGxpbmsgaXMgZGlzYWxsb3dlZCAocmVtb3ZlZCBvciByZXZlcnRlZClcbiAgICAgICAgLy8gKGxpbmtWaWV3LCBwYXBlcikgPT4gYm9vbGVhblxuICAgICAgICBhbGxvd0xpbms6IG51bGwsXG5cbiAgICAgICAgLy8gQWxsb3dlZCBudW1iZXIgb2YgbW91c2Vtb3ZlIGV2ZW50cyBhZnRlciB3aGljaCB0aGUgcG9pbnRlcmNsaWNrIGV2ZW50IHdpbGwgYmUgc3RpbGwgdHJpZ2dlcmVkLlxuICAgICAgICBjbGlja1RocmVzaG9sZDogMCxcblxuICAgICAgICAvLyBOdW1iZXIgb2YgcmVxdWlyZWQgbW91c2Vtb3ZlIGV2ZW50cyBiZWZvcmUgdGhlIGZpcnN0IHBvaW50ZXJtb3ZlIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuICAgICAgICBtb3ZlVGhyZXNob2xkOiAwLFxuXG4gICAgICAgIC8vIE51bWJlciBvZiByZXF1aXJlZCBtb3VzZW1vdmUgZXZlbnRzIGJlZm9yZSBhIGxpbmsgaXMgY3JlYXRlZCBvdXQgb2YgdGhlIG1hZ25ldC5cbiAgICAgICAgLy8gT3Igc3RyaW5nIGBvbmxlYXZlYCBzbyB0aGUgbGluayBpcyBjcmVhdGVkIHdoZW4gdGhlIHBvaW50ZXIgbGVhdmVzIHRoZSBtYWduZXRcbiAgICAgICAgbWFnbmV0VGhyZXNob2xkOiAwLFxuXG4gICAgICAgIC8vIFJlbmRlcmluZyBPcHRpb25zXG5cbiAgICAgICAgc29ydGluZzogc29ydGluZ1R5cGVzLkVYQUNULFxuXG4gICAgICAgIGZyb3plbjogZmFsc2UsXG5cbiAgICAgICAgYXV0b0ZyZWV6ZTogZmFsc2UsXG5cbiAgICAgICAgLy8gbm8gZG9jcyB5ZXRcbiAgICAgICAgb25WaWV3VXBkYXRlOiBmdW5jdGlvbih2aWV3LCBmbGFnLCBwcmlvcml0eSwgb3B0LCBwYXBlcikge1xuICAgICAgICAgICAgLy8gRG8gbm90IHVwZGF0ZSBjb25uZWN0ZWQgbGlua3Mgd2hlbjpcbiAgICAgICAgICAgIC8vIDEuIHRoZSB2aWV3IHdhcyBqdXN0IGluc2VydGVkIChhZGRlZCB0byB0aGUgZ3JhcGggYW5kIHJlbmRlcmVkKVxuICAgICAgICAgICAgLy8gMi4gdGhlIHZpZXcgd2FzIGp1c3QgbW91bnRlZCAoYWRkZWQgYmFjayB0byB0aGUgcGFwZXIgYnkgdmlld3BvcnQgZnVuY3Rpb24pXG4gICAgICAgICAgICAvLyAzLiB0aGUgY2hhbmdlIHdhcyBtYXJrZWQgYXMgYGlzb2xhdGVgLlxuICAgICAgICAgICAgLy8gNC4gdGhlIHZpZXcgbW9kZWwgd2FzIGp1c3QgcmVtb3ZlZCBmcm9tIHRoZSBncmFwaFxuICAgICAgICAgICAgaWYgKChmbGFnICYgKHZpZXcuRkxBR19JTlNFUlQgfCB2aWV3LkZMQUdfUkVNT1ZFKSkgfHwgb3B0Lm1vdW50aW5nIHx8IG9wdC5pc29sYXRlKSByZXR1cm47XG4gICAgICAgICAgICBwYXBlci5yZXF1ZXN0Q29ubmVjdGVkTGlua3NVcGRhdGUodmlldywgcHJpb3JpdHksIG9wdCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gbm8gZG9jcyB5ZXRcbiAgICAgICAgb25WaWV3UG9zdHBvbmVkOiBmdW5jdGlvbih2aWV3LCBmbGFnLCBwYXBlcikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcGVyLmZvcmNlUG9zdHBvbmVkVmlld1VwZGF0ZSh2aWV3LCBmbGFnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVSZW5kZXI6IG51bGwsIC8vIGZ1bmN0aW9uKG9wdCwgcGFwZXIpIHsgfSxcblxuICAgICAgICBhZnRlclJlbmRlcjogbnVsbCwgLy8gZnVuY3Rpb24oc3RhdHMsIG9wdCwgcGFwZXIpIHtcblxuICAgICAgICB2aWV3cG9ydDogbnVsbCxcblxuICAgICAgICAvLyBEZWZhdWx0IG5hbWVzcGFjZXNcblxuICAgICAgICBjZWxsVmlld05hbWVzcGFjZTogbnVsbCxcblxuICAgICAgICByb3V0ZXJOYW1lc3BhY2U6IG51bGwsXG5cbiAgICAgICAgY29ubmVjdG9yTmFtZXNwYWNlOiBudWxsLFxuXG4gICAgICAgIGhpZ2hsaWdodGVyTmFtZXNwYWNlOiBoaWdobGlnaHRlcnMsXG5cbiAgICAgICAgYW5jaG9yTmFtZXNwYWNlOiBhbmNob3JzLFxuXG4gICAgICAgIGxpbmtBbmNob3JOYW1lc3BhY2U6IGxpbmtBbmNob3JzLFxuXG4gICAgICAgIGNvbm5lY3Rpb25Qb2ludE5hbWVzcGFjZTogY29ubmVjdGlvblBvaW50cyxcblxuICAgICAgICBvdmVyZmxvdzogZmFsc2VcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdkYmxjbGljayc6ICdwb2ludGVyZGJsY2xpY2snLFxuICAgICAgICAnZGJsdGFwJzogJ3BvaW50ZXJkYmxjbGljaycsXG4gICAgICAgICdjb250ZXh0bWVudSc6ICdjb250ZXh0bWVudScsXG4gICAgICAgICdtb3VzZWRvd24nOiAncG9pbnRlcmRvd24nLFxuICAgICAgICAndG91Y2hzdGFydCc6ICdwb2ludGVyZG93bicsXG4gICAgICAgICdtb3VzZW92ZXInOiAnbW91c2VvdmVyJyxcbiAgICAgICAgJ21vdXNlb3V0JzogJ21vdXNlb3V0JyxcbiAgICAgICAgJ21vdXNlZW50ZXInOiAnbW91c2VlbnRlcicsXG4gICAgICAgICdtb3VzZWxlYXZlJzogJ21vdXNlbGVhdmUnLFxuICAgICAgICAnd2hlZWwnOiAnbW91c2V3aGVlbCcsXG4gICAgICAgICdtb3VzZWVudGVyIC5qb2ludC1jZWxsJzogJ21vdXNlZW50ZXInLFxuICAgICAgICAnbW91c2VsZWF2ZSAuam9pbnQtY2VsbCc6ICdtb3VzZWxlYXZlJyxcbiAgICAgICAgJ21vdXNlZW50ZXIgLmpvaW50LXRvb2xzJzogJ21vdXNlZW50ZXInLFxuICAgICAgICAnbW91c2VsZWF2ZSAuam9pbnQtdG9vbHMnOiAnbW91c2VsZWF2ZScsXG4gICAgICAgICdkYmxjbGljayAuam9pbnQtY2VsbCBbbWFnbmV0XSc6ICdtYWduZXRwb2ludGVyZGJsY2xpY2snLFxuICAgICAgICAnY29udGV4dG1lbnUgLmpvaW50LWNlbGwgW21hZ25ldF0nOiAnbWFnbmV0Y29udGV4dG1lbnUnLFxuICAgICAgICAnbW91c2Vkb3duIC5qb2ludC1saW5rIC5sYWJlbCc6ICdvbmxhYmVsJywgLy8gaW50ZXJhY3Rpb24gd2l0aCBsaW5rIGxhYmVsXG4gICAgICAgICd0b3VjaHN0YXJ0IC5qb2ludC1saW5rIC5sYWJlbCc6ICdvbmxhYmVsJyxcbiAgICAgICAgJ2RyYWdzdGFydCAuam9pbnQtY2VsbCBpbWFnZSc6ICdvbkltYWdlRHJhZ1N0YXJ0JyAvLyBmaXJlZm94IGZpeFxuICAgIH0sXG5cbiAgICBkb2N1bWVudEV2ZW50czoge1xuICAgICAgICAnbW91c2Vtb3ZlJzogJ3BvaW50ZXJtb3ZlJyxcbiAgICAgICAgJ3RvdWNobW92ZSc6ICdwb2ludGVybW92ZScsXG4gICAgICAgICdtb3VzZXVwJzogJ3BvaW50ZXJ1cCcsXG4gICAgICAgICd0b3VjaGVuZCc6ICdwb2ludGVydXAnLFxuICAgICAgICAndG91Y2hjYW5jZWwnOiAncG9pbnRlcnVwJ1xuICAgIH0sXG5cbiAgICBzdmc6IG51bGwsXG4gICAgdmlld3BvcnQ6IG51bGwsXG4gICAgZGVmczogbnVsbCxcbiAgICB0b29sczogbnVsbCxcbiAgICAkYmFja2dyb3VuZDogbnVsbCxcbiAgICBsYXllcnM6IG51bGwsXG4gICAgJGdyaWQ6IG51bGwsXG4gICAgJGRvY3VtZW50OiBudWxsLFxuXG4gICAgLy8gRm9yIHN0b3JpbmcgdGhlIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gbWF0cml4IChDVE0pIG9mIHRoZSBwYXBlcidzIHZpZXdwb3J0LlxuICAgIF92aWV3cG9ydE1hdHJpeDogbnVsbCxcbiAgICAvLyBGb3IgdmVyaWZ5aW5nIHdoZXRoZXIgdGhlIENUTSBpcyB1cC10by1kYXRlLiBUaGUgdmlld3BvcnQgdHJhbnNmb3JtIGF0dHJpYnV0ZVxuICAgIC8vIGNvdWxkIGhhdmUgYmVlbiBtYW5pcHVsYXRlZCBkaXJlY3RseS5cbiAgICBfdmlld3BvcnRUcmFuc2Zvcm1TdHJpbmc6IG51bGwsXG4gICAgLy8gVXBkYXRlcyBkYXRhIChwcmlvcml0aWVzLCB1bm1vdW50ZWQgdmlld3MgZXRjLilcbiAgICBfdXBkYXRlczogbnVsbCxcbiAgICAvLyBQYXBlciBMYXllcnNcbiAgICBfbGF5ZXJzOiBudWxsLFxuXG4gICAgU09SVF9ERUxBWUlOR19CQVRDSEVTOiBbJ2FkZCcsICd0by1mcm9udCcsICd0by1iYWNrJ10sXG4gICAgVVBEQVRFX0RFTEFZSU5HX0JBVENIRVM6IFsndHJhbnNsYXRlJ10sXG4gICAgLy8gSWYgeW91IGludGVyYWN0IHdpdGggdGhlc2UgZWxlbWVudHMsXG4gICAgLy8gdGhlIGRlZmF1bHQgaW50ZXJhY3Rpb24gc3VjaCBhcyBgZWxlbWVudCBtb3ZlYCBpcyBwcmV2ZW50ZWQuXG4gICAgRk9STV9DT05UUk9MX1RBR19OQU1FUzogWydURVhUQVJFQScsICdJTlBVVCcsICdCVVRUT04nLCAnU0VMRUNUJywgJ09QVElPTiddICxcbiAgICAvLyBJZiB5b3UgaW50ZXJhY3Qgd2l0aCB0aGVzZSBlbGVtZW50cywgdGhlIGV2ZW50cyBhcmUgbm90IHByb3BhZ2F0ZWQgdG8gdGhlIHBhcGVyXG4gICAgLy8gaS5lLiBwYXBlciBldmVudHMgc3VjaCBhcyBgZWxlbWVudDpwb2ludGVyZG93bmAgYXJlIG5vdCB0cmlnZ2VyZWQuXG4gICAgR1VBUkRFRF9UQUdfTkFNRVM6IFtcbiAgICAgICAgLy8gR3VhcmQgPHNlbGVjdD4gZm9yIGNvbnNpc3RlbmN5LiBXaGVuIHlvdSBjbGljayBvbiBpdDpcbiAgICAgICAgLy8gQ2hyb21lOiB0cmlnZ2VycyBgcG9pbnRlcmRvd25gLCBgcG9pbnRlcnVwYCwgYHBvaW50ZXJjbGlja2AgdG8gb3BlblxuICAgICAgICAvLyBGaXJlZm94OiB0cmlnZ2VycyBgcG9pbnRlcmRvd25gIG9uIG9wZW4sIGBwb2ludGVydXBgIChhbmQgYHBvaW50ZXJjbGlja2Agb25seSBpZiB5b3UgaGF2ZW4ndCBtb3ZlZCkuXG4gICAgICAgIC8vICAgICAgICAgIG9uIGNsb3NlLiBIb3dldmVyLCBpZiB5b3Ugb3BlbiBhbmQgdGhlbiBjbG9zZSBieSBjbGlja2luZyBlbHNld2hlcmUgb24gdGhlIHBhZ2UsXG4gICAgICAgIC8vICAgICAgICAgICBubyBvdGhlciBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICAgIC8vIFNhZmFyaTogd2hlbiB5b3Ugb3BlbiBpdCwgaXQgdHJpZ2dlcnMgYHBvaW50ZXJkb3duYC4gVGhhdCdzIGl0LlxuICAgICAgICAnU0VMRUNUJyxcbiAgICBdLFxuICAgIE1JTl9TQ0FMRTogMWUtNixcblxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgZWwgfSA9IHRoaXM7XG4gICAgICAgIGlmICghb3B0aW9ucy5jZWxsVmlld05hbWVzcGFjZSkge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgICAgIG9wdGlvbnMuY2VsbFZpZXdOYW1lc3BhY2UgPSB0eXBlb2Ygam9pbnQgIT09ICd1bmRlZmluZWQnICYmIGhhcyhqb2ludCwgJ3NoYXBlcycpID8gam9pbnQuc2hhcGVzIDogbnVsbDtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWwgfHwgbmV3IEdyYXBoO1xuXG4gICAgICAgIC8vIExheWVycyAoU1ZHR3JvdXBzKVxuICAgICAgICB0aGlzLl9sYXllcnMgPSB7fTtcblxuICAgICAgICB0aGlzLnNldEdyaWQob3B0aW9ucy5kcmF3R3JpZCk7XG4gICAgICAgIHRoaXMuY2xvbmVPcHRpb25zKCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuX3NldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5zdGFydExpc3RlbmluZygpO1xuXG4gICAgICAgIC8vIEhhc2ggb2YgYWxsIGNlbGwgdmlld3MuXG4gICAgICAgIHRoaXMuX3ZpZXdzID0ge307XG5cbiAgICAgICAgLy8gTW91c2Ugd2hlZWwgZXZlbnRzIGJ1ZmZlclxuICAgICAgICB0aGlzLl9td19ldnRfYnVmZmVyID0ge1xuICAgICAgICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICAgICAgICBkZWx0YXM6IFtdLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFJlZmVyZW5jZSB0byB0aGUgcGFwZXIgb3duZXIgZG9jdW1lbnRcbiAgICAgICAgdGhpcy4kZG9jdW1lbnQgPSAkKGVsLm93bmVyRG9jdW1lbnQpO1xuICAgICAgICAvLyBSZW5kZXIgZXhpc3RpbmcgY2VsbHMgaW4gdGhlIGdyYXBoXG4gICAgICAgIHRoaXMucmVzZXRWaWV3cyhtb2RlbC5hdHRyaWJ1dGVzLmNlbGxzLm1vZGVscyk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBSZW5kZXJpbmcgTG9vcFxuICAgICAgICBpZiAoIXRoaXMuaXNGcm96ZW4oKSAmJiB0aGlzLmlzQXN5bmMoKSkgdGhpcy51cGRhdGVWaWV3c0FzeW5jKCk7XG4gICAgfSxcblxuICAgIF9yZXNldFVwZGF0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlcyA9IHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgcHJpb3JpdGllczogW3t9LCB7fSwge31dLFxuICAgICAgICAgICAgdW5tb3VudGVkQ2lkczogW10sXG4gICAgICAgICAgICBtb3VudGVkQ2lkczogW10sXG4gICAgICAgICAgICB1bm1vdW50ZWQ6IHt9LFxuICAgICAgICAgICAgbW91bnRlZDoge30sXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIGtleUZyb3plbjogZmFsc2UsXG4gICAgICAgICAgICBmcmVlemVLZXk6IG51bGwsXG4gICAgICAgICAgICBzb3J0OiBmYWxzZSxcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlkbGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHN0YXJ0TGlzdGVuaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyhtb2RlbCwgJ2FkZCcsIHRoaXMub25DZWxsQWRkZWQpXG4gICAgICAgICAgICAubGlzdGVuVG8obW9kZWwsICdyZW1vdmUnLCB0aGlzLm9uQ2VsbFJlbW92ZWQpXG4gICAgICAgICAgICAubGlzdGVuVG8obW9kZWwsICdjaGFuZ2UnLCB0aGlzLm9uQ2VsbENoYW5nZSlcbiAgICAgICAgICAgIC5saXN0ZW5Ubyhtb2RlbCwgJ3Jlc2V0JywgdGhpcy5vbkdyYXBoUmVzZXQpXG4gICAgICAgICAgICAubGlzdGVuVG8obW9kZWwsICdzb3J0JywgdGhpcy5vbkdyYXBoU29ydClcbiAgICAgICAgICAgIC5saXN0ZW5Ubyhtb2RlbCwgJ2JhdGNoOnN0b3AnLCB0aGlzLm9uR3JhcGhCYXRjaFN0b3ApO1xuICAgICAgICB0aGlzLm9uKCdjZWxsOmhpZ2hsaWdodCcsIHRoaXMub25DZWxsSGlnaGxpZ2h0KVxuICAgICAgICAgICAgLm9uKCdjZWxsOnVuaGlnaGxpZ2h0JywgdGhpcy5vbkNlbGxVbmhpZ2hsaWdodClcbiAgICAgICAgICAgIC5vbignc2NhbGUgdHJhbnNsYXRlJywgdGhpcy51cGRhdGUpO1xuICAgIH0sXG5cbiAgICBvbkNlbGxBZGRlZDogZnVuY3Rpb24oY2VsbCwgXywgb3B0KSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG9wdC5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuaXNBc3luYygpIHx8ICFpc051bWJlcihwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVmlldyhjZWxsLCBvcHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdC5tYXhQb3NpdGlvbiA9PT0gcG9zaXRpb24pIHRoaXMuZnJlZXplKHsga2V5OiAnYWRkQ2VsbHMnIH0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJWaWV3KGNlbGwsIG9wdCk7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IDApIHRoaXMudW5mcmVlemUoeyBrZXk6ICdhZGRDZWxscycgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25DZWxsUmVtb3ZlZDogZnVuY3Rpb24oY2VsbCwgXywgb3B0KSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmZpbmRWaWV3QnlNb2RlbChjZWxsKTtcbiAgICAgICAgaWYgKHZpZXcpIHRoaXMucmVxdWVzdFZpZXdVcGRhdGUodmlldywgdmlldy5GTEFHX1JFTU9WRSwgdmlldy5VUERBVEVfUFJJT1JJVFksIG9wdCk7XG4gICAgfSxcblxuICAgIG9uQ2VsbENoYW5nZTogZnVuY3Rpb24oY2VsbCwgb3B0KSB7XG4gICAgICAgIGlmIChjZWxsID09PSB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuY2VsbHMpIHJldHVybjtcbiAgICAgICAgaWYgKGNlbGwuaGFzQ2hhbmdlZCgneicpICYmIHRoaXMub3B0aW9ucy5zb3J0aW5nID09PSBzb3J0aW5nVHlwZXMuQVBQUk9YKSB7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5maW5kVmlld0J5TW9kZWwoY2VsbCk7XG4gICAgICAgICAgICBpZiAodmlldykgdGhpcy5yZXF1ZXN0Vmlld1VwZGF0ZSh2aWV3LCB2aWV3LkZMQUdfSU5TRVJULCB2aWV3LlVQREFURV9QUklPUklUWSwgb3B0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkdyYXBoUmVzZXQ6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIG9wdCkge1xuICAgICAgICB0aGlzLnJlc2V0TGF5ZXJzKCk7XG4gICAgICAgIHRoaXMucmVzZXRWaWV3cyhjb2xsZWN0aW9uLm1vZGVscywgb3B0KTtcbiAgICB9LFxuXG4gICAgb25HcmFwaFNvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlbC5oYXNBY3RpdmVCYXRjaCh0aGlzLlNPUlRfREVMQVlJTkdfQkFUQ0hFUykpIHJldHVybjtcbiAgICAgICAgdGhpcy5zb3J0Vmlld3MoKTtcbiAgICB9LFxuXG4gICAgb25HcmFwaEJhdGNoU3RvcDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5pc0Zyb3plbigpKSByZXR1cm47XG4gICAgICAgIHZhciBuYW1lID0gZGF0YSAmJiBkYXRhLmJhdGNoTmFtZTtcbiAgICAgICAgdmFyIGdyYXBoID0gdGhpcy5tb2RlbDtcbiAgICAgICAgaWYgKCF0aGlzLmlzQXN5bmMoKSkge1xuICAgICAgICAgICAgdmFyIHVwZGF0ZURlbGF5aW5nQmF0Y2hlcyA9IHRoaXMuVVBEQVRFX0RFTEFZSU5HX0JBVENIRVM7XG4gICAgICAgICAgICBpZiAodXBkYXRlRGVsYXlpbmdCYXRjaGVzLmluY2x1ZGVzKG5hbWUpICYmICFncmFwaC5oYXNBY3RpdmVCYXRjaCh1cGRhdGVEZWxheWluZ0JhdGNoZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3cyhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc29ydERlbGF5aW5nQmF0Y2hlcyA9IHRoaXMuU09SVF9ERUxBWUlOR19CQVRDSEVTO1xuICAgICAgICBpZiAoc29ydERlbGF5aW5nQmF0Y2hlcy5pbmNsdWRlcyhuYW1lKSAmJiAhZ3JhcGguaGFzQWN0aXZlQmF0Y2goc29ydERlbGF5aW5nQmF0Y2hlcykpIHtcbiAgICAgICAgICAgIHRoaXMuc29ydFZpZXdzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xvbmVPcHRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGRlZmF1bHRDb25uZWN0b3IsXG4gICAgICAgICAgICBkZWZhdWx0Um91dGVyLFxuICAgICAgICAgICAgZGVmYXVsdENvbm5lY3Rpb25Qb2ludCxcbiAgICAgICAgICAgIGRlZmF1bHRBbmNob3IsXG4gICAgICAgICAgICBkZWZhdWx0TGlua0FuY2hvcixcbiAgICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICAgIGhpZ2hsaWdodGluZyxcbiAgICAgICAgICAgIGNlbGxWaWV3TmFtZXNwYWNlLFxuICAgICAgICAgICAgaW50ZXJhY3RpdmVcbiAgICAgICAgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgLy8gRGVmYXVsdCBjZWxsVmlldyBuYW1lc3BhY2UgZm9yIEVTNVxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgICAgICBpZiAoIWNlbGxWaWV3TmFtZXNwYWNlICYmIHR5cGVvZiBqb2ludCAhPT0gJ3VuZGVmaW5lZCcgJiYgaGFzKGpvaW50LCAnc2hhcGVzJykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY2VsbFZpZXdOYW1lc3BhY2UgPSBqb2ludC5zaGFwZXM7XG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiAqL1xuXG4gICAgICAgIC8vIEhlcmUgaWYgYSBmdW5jdGlvbiB3YXMgcHJvdmlkZWQsIHdlIGNhbiBub3QgY2xvbmUgaXQsIGFzIHRoaXMgd291bGQgcmVzdWx0IGluIGxvb3NpbmcgdGhlIGZ1bmN0aW9uLlxuICAgICAgICAvLyBJZiB0aGUgZGVmYXVsdCBpcyB1c2VkLCB0aGUgY2xvbmluZyBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gcHJldmVudCBtb2RpZnlpbmcgdGhlIG9wdGlvbnMgb24gcHJvdG90eXBlLlxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZGVmYXVsdENvbm5lY3RvcikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdENvbm5lY3RvciA9IGNsb25lRGVlcChkZWZhdWx0Q29ubmVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZGVmYXVsdFJvdXRlcikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdFJvdXRlciA9IGNsb25lRGVlcChkZWZhdWx0Um91dGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZGVmYXVsdENvbm5lY3Rpb25Qb2ludCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdENvbm5lY3Rpb25Qb2ludCA9IGNsb25lRGVlcChkZWZhdWx0Q29ubmVjdGlvblBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZGVmYXVsdEFuY2hvcikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdEFuY2hvciA9IGNsb25lRGVlcChkZWZhdWx0QW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZGVmYXVsdExpbmtBbmNob3IpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRMaW5rQW5jaG9yID0gY2xvbmVEZWVwKGRlZmF1bHRMaW5rQW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChpbnRlcmFjdGl2ZSkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaW50ZXJhY3RpdmUgPSBhc3NpZ24oe30sIGludGVyYWN0aXZlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChoaWdobGlnaHRpbmcpKSB7XG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgaGlnaGxpZ2h0aW5nIG9wdGlvbnMgaW50byB0aGUgdXNlciBzcGVjaWZpZWQgb3B0aW9ucy5cbiAgICAgICAgICAgIG9wdGlvbnMuaGlnaGxpZ2h0aW5nID0gZGVmYXVsdHNEZWVwKHt9LCBoaWdobGlnaHRpbmcsIGRlZmF1bHRIaWdobGlnaHRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMub3JpZ2luID0gYXNzaWduKHt9LCBvcmlnaW4pO1xuICAgIH0sXG5cbiAgICBjaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBucyA9IFYubmFtZXNwYWNlO1xuICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgIG5hbWVzcGFjZVVSSTogbnMueGh0bWwsXG4gICAgICAgICAgICB0YWdOYW1lOiAnZGl2JyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogYWRkQ2xhc3NOYW1lUHJlZml4KCdwYXBlci1iYWNrZ3JvdW5kJyksXG4gICAgICAgICAgICBzZWxlY3RvcjogJ2JhY2tncm91bmQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZVVSSTogbnMueGh0bWwsXG4gICAgICAgICAgICB0YWdOYW1lOiAnZGl2JyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogYWRkQ2xhc3NOYW1lUHJlZml4KCdwYXBlci1ncmlkJyksXG4gICAgICAgICAgICBzZWxlY3RvcjogJ2dyaWQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZVVSSTogbnMuc3ZnLFxuICAgICAgICAgICAgdGFnTmFtZTogJ3N2ZycsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgJ3htbG5zOnhsaW5rJzogbnMueGxpbmtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3RvcjogJ3N2ZycsXG4gICAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYDxkZWZzPmAgZWxlbWVudCB0byB0aGUgU1ZHIGRvY3VtZW50LiBUaGlzIGlzIHVzZWZ1bCBmb3IgZmlsdGVycyBhbmQgZ3JhZGllbnRzLlxuICAgICAgICAgICAgICAgIC8vIEl0J3MgZGVzaXJlZCB0byBoYXZlIHRoZSBkZWZzIGRlZmluZWQgYmVmb3JlIHRoZSB2aWV3cG9ydCAoZS5nLiB0byBtYWtlIGEgUERGIGRvY3VtZW50IHBpY2sgdXAgZGVmcyBwcm9wZXJseSkuXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ2RlZnMnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGVmcydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiAnZycsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBhZGRDbGFzc05hbWVQcmVmaXgoJ2xheWVycycpLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbGF5ZXJzJ1xuICAgICAgICAgICAgfV1cbiAgICAgICAgfV07XG4gICAgfSxcblxuICAgIGhhc0xheWVyVmlldyhsYXllck5hbWUpIHtcbiAgICAgICAgcmV0dXJuICAobGF5ZXJOYW1lIGluIHRoaXMuX2xheWVycyk7XG4gICAgfSxcblxuICAgIGdldExheWVyVmlldyhsYXllck5hbWUpIHtcbiAgICAgICAgY29uc3QgeyBfbGF5ZXJzIH0gPSB0aGlzO1xuICAgICAgICBpZiAobGF5ZXJOYW1lIGluIF9sYXllcnMpIHJldHVybiBfbGF5ZXJzW2xheWVyTmFtZV07XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlhLlBhcGVyOiBVbmtub3duIGxheWVyIFwiJHtsYXllck5hbWV9XCJgKTtcbiAgICB9LFxuXG4gICAgZ2V0TGF5ZXJOb2RlKGxheWVyTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllclZpZXcobGF5ZXJOYW1lKS5lbDtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB0aGlzLnJlbmRlckNoaWxkcmVuKCk7XG4gICAgICAgIGNvbnN0IHsgY2hpbGROb2Rlcywgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzdmcsIGRlZnMsIGxheWVycywgYmFja2dyb3VuZCwgZ3JpZCB9ID0gY2hpbGROb2RlcztcblxuICAgICAgICBzdmcuc3R5bGUub3ZlcmZsb3cgPSBvcHRpb25zLm92ZXJmbG93ID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7XG5cbiAgICAgICAgdGhpcy5zdmcgPSBzdmc7XG4gICAgICAgIHRoaXMuZGVmcyA9IGRlZnM7XG4gICAgICAgIHRoaXMubGF5ZXJzID0gbGF5ZXJzO1xuICAgICAgICB0aGlzLiRiYWNrZ3JvdW5kID0gJChiYWNrZ3JvdW5kKTtcbiAgICAgICAgdGhpcy4kZ3JpZCA9ICQoZ3JpZCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJMYXllcnMoKTtcblxuICAgICAgICBWLmVuc3VyZUlkKHN2Zyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZChvcHRpb25zLmJhY2tncm91bmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZHJhd0dyaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0dyaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICByZW5kZXJMYXllcnM6IGZ1bmN0aW9uKGxheWVycyA9IGRlZmF1bHRMYXllcnMpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMYXllcnMoKTtcbiAgICAgICAgLy8gVE9ETzogTGF5ZXJzIHRvIGJlIHJlYWQgZnJvbSB0aGUgZ3JhcGggYGxheWVyc2AgYXR0cmlidXRlXG4gICAgICAgIGxheWVycy5mb3JFYWNoKCh7IG5hbWUsIHNvcnRlZCB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYXllclZpZXcgPSBuZXcgUGFwZXJMYXllcih7IG5hbWUgfSk7XG4gICAgICAgICAgICB0aGlzLmxheWVycy5hcHBlbmRDaGlsZChsYXllclZpZXcuZWwpO1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJzW25hbWVdID0gbGF5ZXJWaWV3O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiBkb2Vzbid0IGV4aXN0XG4gICAgICAgIGNvbnN0IGNlbGxzTGF5ZXJWaWV3ID0gdGhpcy5nZXRMYXllclZpZXcoTGF5ZXJzTmFtZXMuQ0VMTFMpO1xuICAgICAgICBjb25zdCB0b29sc0xheWVyVmlldyA9IHRoaXMuZ2V0TGF5ZXJWaWV3KExheWVyc05hbWVzLlRPT0xTKTtcbiAgICAgICAgY29uc3QgbGFiZWxzTGF5ZXJWaWV3ID0gdGhpcy5nZXRMYXllclZpZXcoTGF5ZXJzTmFtZXMuTEFCRUxTKTtcbiAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgdGhpcy50b29scyA9IHRvb2xzTGF5ZXJWaWV3LmVsO1xuICAgICAgICB0aGlzLmNlbGxzID0gdGhpcy52aWV3cG9ydCA9IGNlbGxzTGF5ZXJWaWV3LmVsO1xuICAgICAgICAvLyB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgY2VsbHNMYXllclZpZXcudmVsLmFkZENsYXNzKGFkZENsYXNzTmFtZVByZWZpeCgndmlld3BvcnQnKSk7XG4gICAgICAgIGxhYmVsc0xheWVyVmlldy52ZWwuYWRkQ2xhc3MoYWRkQ2xhc3NOYW1lUHJlZml4KCd2aWV3cG9ydCcpKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlTGF5ZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBfbGF5ZXJzIH0gPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyhfbGF5ZXJzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgICAgX2xheWVyc1tuYW1lXS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSBfbGF5ZXJzW25hbWVdO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVzZXRMYXllcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCB7IF9sYXllcnMgfSA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKF9sYXllcnMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICBfbGF5ZXJzW25hbWVdLnJlbW92ZVBpdm90cygpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRyYXdHcmlkKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdHcmlkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVCYWNrZ3JvdW5kSW1hZ2UodGhpcy5fYmFja2dyb3VuZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgbWF0cml4OiBmdW5jdGlvbihjdG0pIHtcblxuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLmxheWVycztcblxuICAgICAgICAvLyBHZXR0ZXI6XG4gICAgICAgIGlmIChjdG0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtU3RyaW5nID0gdmlld3BvcnQuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcblxuICAgICAgICAgICAgaWYgKCh0aGlzLl92aWV3cG9ydFRyYW5zZm9ybVN0cmluZyB8fCBudWxsKSA9PT0gdHJhbnNmb3JtU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBvayB0byByZXR1cm4gdGhlIGNhY2hlZCBtYXRyaXguIFRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGhhcyBub3QgY2hhbmdlZCBzaW5jZVxuICAgICAgICAgICAgICAgIC8vIHRoZSBtYXRyaXggd2FzIHN0b3JlZC5cbiAgICAgICAgICAgICAgICBjdG0gPSB0aGlzLl92aWV3cG9ydE1hdHJpeDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHZpZXdwb3J0IHRyYW5zZm9ybSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuIE1lYXN1cmUgdGhlIG1hdHJpeCBhbmQgY2FjaGUgYWdhaW4uXG4gICAgICAgICAgICAgICAgY3RtID0gdmlld3BvcnQuZ2V0Q1RNKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld3BvcnRNYXRyaXggPSBjdG07XG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld3BvcnRUcmFuc2Zvcm1TdHJpbmcgPSB0cmFuc2Zvcm1TdHJpbmc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsb25lIHRoZSBjYWNoZWQgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAgICAgICAgICAvLyBJZiBubyBtYXRyaXggcHJldmlvdXNseSBzdG9yZWQgdGhlIGlkZW50aXR5IG1hdHJpeCBpcyByZXR1cm5lZC5cbiAgICAgICAgICAgIHJldHVybiBWLmNyZWF0ZVNWR01hdHJpeChjdG0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dGVyOlxuICAgICAgICBjdG0gPSBWLmNyZWF0ZVNWR01hdHJpeChjdG0pO1xuICAgICAgICB2YXIgY3RtU3RyaW5nID0gVi5tYXRyaXhUb1RyYW5zZm9ybVN0cmluZyhjdG0pO1xuICAgICAgICB2aWV3cG9ydC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGN0bVN0cmluZyk7XG5cbiAgICAgICAgdGhpcy5fdmlld3BvcnRNYXRyaXggPSBjdG07XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0VHJhbnNmb3JtU3RyaW5nID0gdmlld3BvcnQuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgY2xpZW50TWF0cml4OiBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4gVi5jcmVhdGVTVkdNYXRyaXgodGhpcy5jZWxscy5nZXRTY3JlZW5DVE0oKSk7XG4gICAgfSxcblxuICAgIHJlcXVlc3RDb25uZWN0ZWRMaW5rc1VwZGF0ZTogZnVuY3Rpb24odmlldywgcHJpb3JpdHksIG9wdCkge1xuICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIENlbGxWaWV3KSB7XG4gICAgICAgICAgICB2YXIgbW9kZWwgPSB2aWV3Lm1vZGVsO1xuICAgICAgICAgICAgdmFyIGxpbmtzID0gdGhpcy5tb2RlbC5nZXRDb25uZWN0ZWRMaW5rcyhtb2RlbCk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaiA8IG47IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBsaW5rID0gbGlua3Nbal07XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtWaWV3ID0gdGhpcy5maW5kVmlld0J5TW9kZWwobGluayk7XG4gICAgICAgICAgICAgICAgaWYgKCFsaW5rVmlldykgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmFyIGZsYWdMYWJlbHMgPSBbJ1VQREFURSddO1xuICAgICAgICAgICAgICAgIGlmIChsaW5rLmdldFRhcmdldENlbGwoKSA9PT0gbW9kZWwpIGZsYWdMYWJlbHMucHVzaCgnVEFSR0VUJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmsuZ2V0U291cmNlQ2VsbCgpID09PSBtb2RlbCkgZmxhZ0xhYmVscy5wdXNoKCdTT1VSQ0UnKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFByaW9yaXR5ID0gTWF0aC5tYXgocHJpb3JpdHkgKyAxLCBsaW5rVmlldy5VUERBVEVfUFJJT1JJVFkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVWaWV3VXBkYXRlKGxpbmtWaWV3LCBsaW5rVmlldy5nZXRGbGFnKGZsYWdMYWJlbHMpLCBuZXh0UHJpb3JpdHksIG9wdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZm9yY2VQb3N0cG9uZWRWaWV3VXBkYXRlOiBmdW5jdGlvbih2aWV3LCBmbGFnKSB7XG4gICAgICAgIGlmICghdmlldyB8fCAhKHZpZXcgaW5zdGFuY2VvZiBDZWxsVmlldykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIG1vZGVsID0gdmlldy5tb2RlbDtcbiAgICAgICAgaWYgKG1vZGVsLmlzRWxlbWVudCgpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICgoZmxhZyAmIHZpZXcuZ2V0RmxhZyhbJ1NPVVJDRScsICdUQVJHRVQnXSkpID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgZHVtcE9wdGlvbnMgPSB7IHNpbGVudDogdHJ1ZSB9O1xuICAgICAgICAgICAgLy8gTGlua1ZpZXcgaXMgd2FpdGluZyBmb3IgdGhlIHRhcmdldCBvciB0aGUgc291cmNlIGNlbGxWaWV3IHRvIGJlIHJlbmRlcmVkXG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB0aGUgY2VsbHMgYXJlIG5vdCBpbiB0aGUgdmlld3BvcnQuXG4gICAgICAgICAgICB2YXIgc291cmNlRmxhZyA9IDA7XG4gICAgICAgICAgICB2YXIgc291cmNlVmlldyA9IHRoaXMuZmluZFZpZXdCeU1vZGVsKG1vZGVsLmdldFNvdXJjZUNlbGwoKSk7XG4gICAgICAgICAgICBpZiAoc291cmNlVmlldyAmJiAhdGhpcy5pc1ZpZXdNb3VudGVkKHNvdXJjZVZpZXcpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlRmxhZyA9IHRoaXMuZHVtcFZpZXcoc291cmNlVmlldywgZHVtcE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHZpZXcudXBkYXRlRW5kTWFnbmV0KCdzb3VyY2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0YXJnZXRGbGFnID0gMDtcbiAgICAgICAgICAgIHZhciB0YXJnZXRWaWV3ID0gdGhpcy5maW5kVmlld0J5TW9kZWwobW9kZWwuZ2V0VGFyZ2V0Q2VsbCgpKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRWaWV3ICYmICF0aGlzLmlzVmlld01vdW50ZWQodGFyZ2V0VmlldykpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRGbGFnID0gdGhpcy5kdW1wVmlldyh0YXJnZXRWaWV3LCBkdW1wT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdmlldy51cGRhdGVFbmRNYWduZXQoJ3RhcmdldCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZUZsYWcgPT09IDAgJiYgdGFyZ2V0RmxhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIElmIGxlZnRvdmVyIGZsYWcgaXMgMCwgYWxsIHZpZXcgdXBkYXRlcyB3ZXJlIGRvbmUuXG4gICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLmR1bXBWaWV3KHZpZXcsIGR1bXBPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHJlcXVlc3RWaWV3VXBkYXRlOiBmdW5jdGlvbih2aWV3LCBmbGFnLCBwcmlvcml0eSwgb3B0KSB7XG4gICAgICAgIG9wdCB8fCAob3B0ID0ge30pO1xuICAgICAgICB0aGlzLnNjaGVkdWxlVmlld1VwZGF0ZSh2aWV3LCBmbGFnLCBwcmlvcml0eSwgb3B0KTtcbiAgICAgICAgdmFyIGlzQXN5bmMgPSB0aGlzLmlzQXN5bmMoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4oKSB8fCAoaXNBc3luYyAmJiBvcHQuYXN5bmMgIT09IGZhbHNlKSkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5tb2RlbC5oYXNBY3RpdmVCYXRjaCh0aGlzLlVQREFURV9ERUxBWUlOR19CQVRDSEVTKSkgcmV0dXJuO1xuICAgICAgICB2YXIgc3RhdHMgPSB0aGlzLnVwZGF0ZVZpZXdzKG9wdCk7XG4gICAgICAgIGlmIChpc0FzeW5jKSB0aGlzLm5vdGlmeUFmdGVyUmVuZGVyKHN0YXRzLCBvcHQpO1xuICAgIH0sXG5cbiAgICBzY2hlZHVsZVZpZXdVcGRhdGU6IGZ1bmN0aW9uKHZpZXcsIHR5cGUsIHByaW9yaXR5LCBvcHQpIHtcbiAgICAgICAgY29uc3QgeyBfdXBkYXRlczogdXBkYXRlcywgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgaWYgKHVwZGF0ZXMuaWRsZSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0ZyZWV6ZSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXMuaWRsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMudW5mcmVlemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IEZMQUdfUkVNT1ZFLCBGTEFHX0lOU0VSVCwgVVBEQVRFX1BSSU9SSVRZLCBjaWQgfSA9IHZpZXc7XG4gICAgICAgIGxldCBwcmlvcml0eVVwZGF0ZXMgPSB1cGRhdGVzLnByaW9yaXRpZXNbcHJpb3JpdHldO1xuICAgICAgICBpZiAoIXByaW9yaXR5VXBkYXRlcykgcHJpb3JpdHlVcGRhdGVzID0gdXBkYXRlcy5wcmlvcml0aWVzW3ByaW9yaXR5XSA9IHt9O1xuICAgICAgICAvLyBNb3ZlIGhpZ2hlciBwcmlvcml0eSB1cGRhdGVzIHRvIHRoaXMgcHJpb3JpdHlcbiAgICAgICAgaWYgKHByaW9yaXR5ID4gVVBEQVRFX1BSSU9SSVRZKSB7XG4gICAgICAgICAgICAvLyBOb3QgdGhlIGRlZmF1bHQgcHJpb3JpdHkgZm9yIHRoaXMgdmlldy4gSXQncyBtb3N0IGxpa2VseSBhIGxpbmsgdmlld1xuICAgICAgICAgICAgLy8gY29ubmVjdGVkIHRvIGFub3RoZXIgbGluayB2aWV3LCB3aGljaCB0cmlnZ2VyZWQgdGhlIHVwZGF0ZS5cbiAgICAgICAgICAgIC8vIFRPRE86IElmIHRoZXJlIGlzIGFuIHVwZGF0ZSBzY2hlZHVsZWQgd2l0aCBhIGxvd2VyIHByaW9yaXR5IGFscmVhZHksIHdlIHNob3VsZFxuICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSByZXF1ZXN0ZWQgcHJpb3JpdHkgdG8gdGhlIGxvd2VzdCBvbmUuIERvZXMgbm90IHNlZW0gdG8gYmUgY3JpdGljYWxcbiAgICAgICAgICAgIC8vIHJpZ2h0IG5vdywgYXMgaXQgXCJvbmx5XCIgcmVzdWx0cyBpbiBtdWx0aXBsZSB1cGRhdGVzIG9uIHRoZSBzYW1lIHZpZXcuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gcHJpb3JpdHkgLSAxOyBpID49IFVQREFURV9QUklPUklUWTsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlByaW9yaXR5VXBkYXRlcyA9IHVwZGF0ZXMucHJpb3JpdGllc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXZQcmlvcml0eVVwZGF0ZXMgfHwgIShjaWQgaW4gcHJldlByaW9yaXR5VXBkYXRlcykpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHByaW9yaXR5VXBkYXRlc1tjaWRdIHw9IHByZXZQcmlvcml0eVVwZGF0ZXNbY2lkXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgcHJldlByaW9yaXR5VXBkYXRlc1tjaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50VHlwZSA9IHByaW9yaXR5VXBkYXRlc1tjaWRdIHx8IDA7XG4gICAgICAgIC8vIFByZXZlbnQgY3ljbGluZ1xuICAgICAgICBpZiAoKGN1cnJlbnRUeXBlICYgdHlwZSkgPT09IHR5cGUpIHJldHVybjtcbiAgICAgICAgaWYgKCFjdXJyZW50VHlwZSkgdXBkYXRlcy5jb3VudCsrO1xuICAgICAgICBpZiAodHlwZSAmIEZMQUdfUkVNT1ZFICYmIGN1cnJlbnRUeXBlICYgRkxBR19JTlNFUlQpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gYSB2aWV3IGlzIHJlbW92ZWQgd2UgbmVlZCB0byByZW1vdmUgdGhlIGluc2VydCBmbGFnIGFzIHRoaXMgaXMgYSByZWluc2VydFxuICAgICAgICAgICAgcHJpb3JpdHlVcGRhdGVzW2NpZF0gXj0gRkxBR19JTlNFUlQ7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSAmIEZMQUdfSU5TRVJUICYmIGN1cnJlbnRUeXBlICYgRkxBR19SRU1PVkUpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gYSB2aWV3IGlzIGFkZGVkIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSByZW1vdmUgZmxhZyBhcyB0aGlzIGlzIHZpZXcgd2FzIHByZXZpb3VzbHkgcmVtb3ZlZFxuICAgICAgICAgICAgcHJpb3JpdHlVcGRhdGVzW2NpZF0gXj0gRkxBR19SRU1PVkU7XG4gICAgICAgIH1cbiAgICAgICAgcHJpb3JpdHlVcGRhdGVzW2NpZF0gfD0gdHlwZTtcbiAgICAgICAgY29uc3Qgdmlld1VwZGF0ZUZuID0gb3B0aW9ucy5vblZpZXdVcGRhdGU7XG4gICAgICAgIGlmICh0eXBlb2Ygdmlld1VwZGF0ZUZuID09PSAnZnVuY3Rpb24nKSB2aWV3VXBkYXRlRm4uY2FsbCh0aGlzLCB2aWV3LCB0eXBlLCBwcmlvcml0eSwgb3B0IHx8IHt9LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgZHVtcFZpZXdVcGRhdGU6IGZ1bmN0aW9uKHZpZXcpIHtcbiAgICAgICAgaWYgKCF2aWV3KSByZXR1cm4gMDtcbiAgICAgICAgdmFyIHVwZGF0ZXMgPSB0aGlzLl91cGRhdGVzO1xuICAgICAgICB2YXIgY2lkID0gdmlldy5jaWQ7XG4gICAgICAgIHZhciBwcmlvcml0eVVwZGF0ZXMgPSB1cGRhdGVzLnByaW9yaXRpZXNbdmlldy5VUERBVEVfUFJJT1JJVFldO1xuICAgICAgICB2YXIgZmxhZyA9IHRoaXMucmVnaXN0ZXJNb3VudGVkVmlldyh2aWV3KSB8IHByaW9yaXR5VXBkYXRlc1tjaWRdO1xuICAgICAgICBkZWxldGUgcHJpb3JpdHlVcGRhdGVzW2NpZF07XG4gICAgICAgIHJldHVybiBmbGFnO1xuICAgIH0sXG5cbiAgICBkdW1wVmlldzogZnVuY3Rpb24odmlldywgb3B0ID0ge30pIHtcbiAgICAgICAgY29uc3QgZmxhZyA9IHRoaXMuZHVtcFZpZXdVcGRhdGUodmlldyk7XG4gICAgICAgIGlmICghZmxhZykgcmV0dXJuIDA7XG4gICAgICAgIGNvbnN0IHNob3VsZE5vdGlmeSA9ICFvcHQuc2lsZW50O1xuICAgICAgICBpZiAoc2hvdWxkTm90aWZ5KSB0aGlzLm5vdGlmeUJlZm9yZVJlbmRlcihvcHQpO1xuICAgICAgICBjb25zdCBsZWZ0b3ZlciA9IHRoaXMudXBkYXRlVmlldyh2aWV3LCBmbGFnLCBvcHQpO1xuICAgICAgICBpZiAoc2hvdWxkTm90aWZ5KSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IHsgdXBkYXRlZDogMSwgcHJpb3JpdHk6IHZpZXcuVVBEQVRFX1BSSU9SSVRZIH07XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUFmdGVyUmVuZGVyKHN0YXRzLCBvcHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZWZ0b3ZlcjtcbiAgICB9LFxuXG4gICAgdXBkYXRlVmlldzogZnVuY3Rpb24odmlldywgZmxhZywgb3B0KSB7XG4gICAgICAgIGlmICghdmlldykgcmV0dXJuIDA7XG4gICAgICAgIGNvbnN0IHsgRkxBR19SRU1PVkUsIEZMQUdfSU5TRVJULCBGTEFHX0lOSVQsIG1vZGVsIH0gPSB2aWV3O1xuICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIENlbGxWaWV3KSB7XG4gICAgICAgICAgICBpZiAoZmxhZyAmIEZMQUdfUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVWaWV3KG1vZGVsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFnICYgRkxBR19JTlNFUlQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0luaXRpYWxJbnNlcnQgPSAhIShmbGFnICYgRkxBR19JTklUKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNJbml0aWFsSW5zZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWcgXj0gRkxBR19JTklUO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydFZpZXcodmlldywgaXNJbml0aWFsSW5zZXJ0KTtcbiAgICAgICAgICAgICAgICBmbGFnIF49IEZMQUdfSU5TRVJUO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZmxhZykgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB2aWV3LmNvbmZpcm1VcGRhdGUoZmxhZywgb3B0IHx8IHt9KTtcbiAgICB9LFxuXG4gICAgcmVxdWlyZVZpZXc6IGZ1bmN0aW9uKG1vZGVsLCBvcHQpIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmZpbmRWaWV3QnlNb2RlbChtb2RlbCk7XG4gICAgICAgIGlmICghdmlldykgcmV0dXJuIG51bGw7XG4gICAgICAgIHRoaXMuZHVtcFZpZXcodmlldywgb3B0KTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfSxcblxuICAgIHJlZ2lzdGVyVW5tb3VudGVkVmlldzogZnVuY3Rpb24odmlldykge1xuICAgICAgICB2YXIgY2lkID0gdmlldy5jaWQ7XG4gICAgICAgIHZhciB1cGRhdGVzID0gdGhpcy5fdXBkYXRlcztcbiAgICAgICAgaWYgKGNpZCBpbiB1cGRhdGVzLnVubW91bnRlZCkgcmV0dXJuIDA7XG4gICAgICAgIHZhciBmbGFnID0gdXBkYXRlcy51bm1vdW50ZWRbY2lkXSB8PSB2aWV3LkZMQUdfSU5TRVJUO1xuICAgICAgICB1cGRhdGVzLnVubW91bnRlZENpZHMucHVzaChjaWQpO1xuICAgICAgICBkZWxldGUgdXBkYXRlcy5tb3VudGVkW2NpZF07XG4gICAgICAgIHJldHVybiBmbGFnO1xuICAgIH0sXG5cbiAgICByZWdpc3Rlck1vdW50ZWRWaWV3OiBmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgIHZhciBjaWQgPSB2aWV3LmNpZDtcbiAgICAgICAgdmFyIHVwZGF0ZXMgPSB0aGlzLl91cGRhdGVzO1xuICAgICAgICBpZiAoY2lkIGluIHVwZGF0ZXMubW91bnRlZCkgcmV0dXJuIDA7XG4gICAgICAgIHVwZGF0ZXMubW91bnRlZFtjaWRdID0gdHJ1ZTtcbiAgICAgICAgdXBkYXRlcy5tb3VudGVkQ2lkcy5wdXNoKGNpZCk7XG4gICAgICAgIHZhciBmbGFnID0gdXBkYXRlcy51bm1vdW50ZWRbY2lkXSB8fCAwO1xuICAgICAgICBkZWxldGUgdXBkYXRlcy51bm1vdW50ZWRbY2lkXTtcbiAgICAgICAgcmV0dXJuIGZsYWc7XG4gICAgfSxcblxuICAgIGlzVmlld01vdW50ZWQ6IGZ1bmN0aW9uKHZpZXcpIHtcbiAgICAgICAgaWYgKCF2aWV3KSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBjaWQgPSB2aWV3LmNpZDtcbiAgICAgICAgdmFyIHVwZGF0ZXMgPSB0aGlzLl91cGRhdGVzO1xuICAgICAgICByZXR1cm4gKGNpZCBpbiB1cGRhdGVzLm1vdW50ZWQpO1xuICAgIH0sXG5cbiAgICBkdW1wVmlld3M6IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICB2YXIgcGFzc2luZ09wdCA9IGRlZmF1bHRzKHt9LCBvcHQsIHsgdmlld3BvcnQ6IG51bGwgfSk7XG4gICAgICAgIHRoaXMuY2hlY2tWaWV3cG9ydChwYXNzaW5nT3B0KTtcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3cyhwYXNzaW5nT3B0KTtcbiAgICB9LFxuXG4gICAgLy8gU3luY2hyb25vdXMgdmlld3MgdXBkYXRlXG4gICAgdXBkYXRlVmlld3M6IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICB0aGlzLm5vdGlmeUJlZm9yZVJlbmRlcihvcHQpO1xuICAgICAgICBsZXQgYmF0Y2hTdGF0cztcbiAgICAgICAgbGV0IHVwZGF0ZUNvdW50ID0gMDtcbiAgICAgICAgbGV0IGJhdGNoQ291bnQgPSAwO1xuICAgICAgICBsZXQgcHJpb3JpdHkgPSBNSU5fUFJJT1JJVFk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGJhdGNoQ291bnQrKztcbiAgICAgICAgICAgIGJhdGNoU3RhdHMgPSB0aGlzLnVwZGF0ZVZpZXdzQmF0Y2gob3B0KTtcbiAgICAgICAgICAgIHVwZGF0ZUNvdW50ICs9IGJhdGNoU3RhdHMudXBkYXRlZDtcbiAgICAgICAgICAgIHByaW9yaXR5ID0gTWF0aC5taW4oYmF0Y2hTdGF0cy5wcmlvcml0eSwgcHJpb3JpdHkpO1xuICAgICAgICB9IHdoaWxlICghYmF0Y2hTdGF0cy5lbXB0eSk7XG4gICAgICAgIGNvbnN0IHN0YXRzID0geyB1cGRhdGVkOiB1cGRhdGVDb3VudCwgYmF0Y2hlczogYmF0Y2hDb3VudCwgcHJpb3JpdHkgfTtcbiAgICAgICAgdGhpcy5ub3RpZnlBZnRlclJlbmRlcihzdGF0cywgb3B0KTtcbiAgICAgICAgcmV0dXJuIHN0YXRzO1xuICAgIH0sXG5cbiAgICBoYXNTY2hlZHVsZWRVcGRhdGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcHJpb3JpdGllcyA9IHRoaXMuX3VwZGF0ZXMucHJpb3JpdGllcztcbiAgICAgICAgY29uc3QgcHJpb3JpdHlJbmRleGVzID0gT2JqZWN0LmtleXMocHJpb3JpdGllcyk7IC8vIGNvbnZlcnQgcHJpb3JpdGllcyB0byBhIGRlbnNlIGFycmF5XG4gICAgICAgIGxldCBpID0gcHJpb3JpdHlJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGkgPiAwICYmIGktLSkge1xuICAgICAgICAgICAgLy8gYSBmYXN0ZXIgd2F5IGhvdyB0byBjaGVjayBpZiBhbiBvYmplY3QgaXMgZW1wdHlcbiAgICAgICAgICAgIGZvciAobGV0IF9rZXkgaW4gcHJpb3JpdGllc1twcmlvcml0eUluZGV4ZXNbaV1dKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHVwZGF0ZVZpZXdzQXN5bmM6IGZ1bmN0aW9uKG9wdCwgZGF0YSkge1xuICAgICAgICBvcHQgfHwgKG9wdCA9IHt9KTtcbiAgICAgICAgZGF0YSB8fCAoZGF0YSA9IHsgcHJvY2Vzc2VkOiAwLCBwcmlvcml0eTogTUlOX1BSSU9SSVRZIH0pO1xuICAgICAgICBjb25zdCB7IF91cGRhdGVzOiB1cGRhdGVzLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBpZCA9IHVwZGF0ZXMuaWQ7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgY2FuY2VsRnJhbWUoaWQpO1xuICAgICAgICAgICAgaWYgKGRhdGEucHJvY2Vzc2VkID09PSAwICYmIHRoaXMuaGFzU2NoZWR1bGVkVXBkYXRlcygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlCZWZvcmVSZW5kZXIob3B0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gdGhpcy51cGRhdGVWaWV3c0JhdGNoKG9wdCk7XG4gICAgICAgICAgICBjb25zdCBwYXNzaW5nT3B0ID0gZGVmYXVsdHMoe30sIG9wdCwge1xuICAgICAgICAgICAgICAgIG1vdW50QmF0Y2hTaXplOiBNT1VOVF9CQVRDSF9TSVpFIC0gc3RhdHMubW91bnRlZCxcbiAgICAgICAgICAgICAgICB1bm1vdW50QmF0Y2hTaXplOiBNT1VOVF9CQVRDSF9TSVpFIC0gc3RhdHMudW5tb3VudGVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrU3RhdHMgPSB0aGlzLmNoZWNrVmlld3BvcnQocGFzc2luZ09wdCk7XG4gICAgICAgICAgICBjb25zdCB1bm1vdW50Q291bnQgPSBjaGVja1N0YXRzLnVubW91bnRlZDtcbiAgICAgICAgICAgIGNvbnN0IG1vdW50Q291bnQgPSBjaGVja1N0YXRzLm1vdW50ZWQ7XG4gICAgICAgICAgICBsZXQgcHJvY2Vzc2VkID0gZGF0YS5wcm9jZXNzZWQ7XG4gICAgICAgICAgICBjb25zdCB0b3RhbCA9IHVwZGF0ZXMuY291bnQ7XG4gICAgICAgICAgICBpZiAoc3RhdHMudXBkYXRlZCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTb21lIHVwZGF0ZXMgaGF2ZSBiZWVuIGp1c3QgcHJvY2Vzc2VkXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkICs9IHN0YXRzLnVwZGF0ZWQgKyBzdGF0cy51bm1vdW50ZWQ7XG4gICAgICAgICAgICAgICAgc3RhdHMucHJvY2Vzc2VkID0gcHJvY2Vzc2VkO1xuICAgICAgICAgICAgICAgIGRhdGEucHJpb3JpdHkgPSBNYXRoLm1pbihzdGF0cy5wcmlvcml0eSwgZGF0YS5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRzLmVtcHR5ICYmIG1vdW50Q291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMudW5tb3VudGVkICs9IHVubW91bnRDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMubW91bnRlZCArPSBtb3VudENvdW50O1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5wcmlvcml0eSA9IGRhdGEucHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5QWZ0ZXJSZW5kZXIoc3RhdHMsIG9wdCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJvY2Vzc2VkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmlvcml0eSA9IE1JTl9QUklPUklUWTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5jb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9jZXNzZWQgPSBwcm9jZXNzZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVwZGF0ZXMuaWRsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hdXRvRnJlZXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyZWV6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5pZGxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigncmVuZGVyOmlkbGUnLCBvcHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgY2FsbGJhY2tcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzRm4gPSBvcHQucHJvZ3Jlc3M7XG4gICAgICAgICAgICBpZiAodG90YWwgJiYgdHlwZW9mIHByb2dyZXNzRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0ZuLmNhbGwodGhpcywgc3RhdHMuZW1wdHksIHByb2Nlc3NlZCwgdG90YWwsIHN0YXRzLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IGZyYW1lIGNvdWxkIGhhdmUgYmVlbiBjYW5jZWxlZCBpbiBhIGNhbGxiYWNrXG4gICAgICAgICAgICBpZiAodXBkYXRlcy5pZCAhPT0gaWQpIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWEuUGFwZXI6IGNhbiBub3QgdW5mcmVlemUgdGhlIHBhcGVyIGFmdGVyIGl0IHdhcyByZW1vdmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlcy5pZCA9IG5leHRGcmFtZSh0aGlzLnVwZGF0ZVZpZXdzQXN5bmMsIHRoaXMsIG9wdCwgZGF0YSk7XG4gICAgfSxcblxuICAgIG5vdGlmeUJlZm9yZVJlbmRlcjogZnVuY3Rpb24ob3B0ID0ge30pIHtcbiAgICAgICAgbGV0IGJlZm9yZUZuID0gb3B0LmJlZm9yZVJlbmRlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBiZWZvcmVGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYmVmb3JlRm4gPSB0aGlzLm9wdGlvbnMuYmVmb3JlUmVuZGVyO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWZvcmVGbiAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJlZm9yZUZuLmNhbGwodGhpcywgb3B0LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgbm90aWZ5QWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uKHN0YXRzLCBvcHQgPSB7fSkge1xuICAgICAgICBsZXQgYWZ0ZXJGbiA9IG9wdC5hZnRlclJlbmRlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBhZnRlckZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhZnRlckZuID0gdGhpcy5vcHRpb25zLmFmdGVyUmVuZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWZ0ZXJGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYWZ0ZXJGbi5jYWxsKHRoaXMsIHN0YXRzLCBvcHQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVuZGVyOmRvbmUnLCBzdGF0cywgb3B0KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlVmlld3NCYXRjaDogZnVuY3Rpb24ob3B0KSB7XG4gICAgICAgIG9wdCB8fCAob3B0ID0ge30pO1xuICAgICAgICB2YXIgYmF0Y2hTaXplID0gb3B0LmJhdGNoU2l6ZSB8fCBVUERBVEVfQkFUQ0hfU0laRTtcbiAgICAgICAgdmFyIHVwZGF0ZXMgPSB0aGlzLl91cGRhdGVzO1xuICAgICAgICB2YXIgdXBkYXRlQ291bnQgPSAwO1xuICAgICAgICB2YXIgcG9zdHBvbmVDb3VudCA9IDA7XG4gICAgICAgIHZhciB1bm1vdW50Q291bnQgPSAwO1xuICAgICAgICB2YXIgbW91bnRDb3VudCA9IDA7XG4gICAgICAgIHZhciBtYXhQcmlvcml0eSA9IE1JTl9QUklPUklUWTtcbiAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciBwcmlvcml0aWVzID0gdXBkYXRlcy5wcmlvcml0aWVzO1xuICAgICAgICB2YXIgdmlld3BvcnRGbiA9ICd2aWV3cG9ydCcgaW4gb3B0ID8gb3B0LnZpZXdwb3J0IDogb3B0aW9ucy52aWV3cG9ydDtcbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3cG9ydEZuICE9PSAnZnVuY3Rpb24nKSB2aWV3cG9ydEZuID0gbnVsbDtcbiAgICAgICAgdmFyIHBvc3Rwb25lVmlld0ZuID0gb3B0aW9ucy5vblZpZXdQb3N0cG9uZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgcG9zdHBvbmVWaWV3Rm4gIT09ICdmdW5jdGlvbicpIHBvc3Rwb25lVmlld0ZuID0gbnVsbDtcbiAgICAgICAgdmFyIHByaW9yaXR5SW5kZXhlcyA9IE9iamVjdC5rZXlzKHByaW9yaXRpZXMpOyAvLyBjb252ZXJ0IHByaW9yaXRpZXMgdG8gYSBkZW5zZSBhcnJheVxuICAgICAgICBtYWluOiBmb3IgKHZhciBpID0gMCwgbiA9IHByaW9yaXR5SW5kZXhlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwcmlvcml0eSA9ICtwcmlvcml0eUluZGV4ZXNbaV07XG4gICAgICAgICAgICB2YXIgcHJpb3JpdHlVcGRhdGVzID0gcHJpb3JpdGllc1twcmlvcml0eV07XG4gICAgICAgICAgICBmb3IgKHZhciBjaWQgaW4gcHJpb3JpdHlVcGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZUNvdW50ID49IGJhdGNoU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBtYWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzW2NpZF07XG4gICAgICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBvY2N1clxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJpb3JpdHlVcGRhdGVzW2NpZF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEZsYWcgPSBwcmlvcml0eVVwZGF0ZXNbY2lkXTtcbiAgICAgICAgICAgICAgICBpZiAoKGN1cnJlbnRGbGFnICYgdmlldy5GTEFHX1JFTU9WRSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIG5ldmVyIGNoZWNrIGEgdmlldyBmb3Igdmlld3BvcnQgaWYgd2UgYXJlIGFib3V0IHRvIHJlbW92ZSB0aGUgdmlld1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNEZXRhY2hlZCA9IGNpZCBpbiB1cGRhdGVzLnVubW91bnRlZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcuREVUQUNIQUJMRSAmJiB2aWV3cG9ydEZuICYmICF2aWV3cG9ydEZuLmNhbGwodGhpcywgdmlldywgIWlzRGV0YWNoZWQsIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVbm1vdW50IFZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNEZXRhY2hlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJVbm1vdW50ZWRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0YWNoVmlldyh2aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZXMudW5tb3VudGVkW2NpZF0gfD0gY3VycmVudEZsYWc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJpb3JpdHlVcGRhdGVzW2NpZF07XG4gICAgICAgICAgICAgICAgICAgICAgICB1bm1vdW50Q291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdW50IFZpZXdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGV0YWNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGbGFnIHw9IHZpZXcuRkxBR19JTlNFUlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VudENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEZsYWcgfD0gdGhpcy5yZWdpc3Rlck1vdW50ZWRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGVmdG92ZXJGbGFnID0gdGhpcy51cGRhdGVWaWV3KHZpZXcsIGN1cnJlbnRGbGFnLCBvcHQpO1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0b3ZlckZsYWcgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZpZXcgdXBkYXRlIGhhcyBub3QgZmluaXNoZWQgY29tcGxldGVseVxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eVVwZGF0ZXNbY2lkXSA9IGxlZnRvdmVyRmxhZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3N0cG9uZVZpZXdGbiB8fCAhcG9zdHBvbmVWaWV3Rm4uY2FsbCh0aGlzLCB2aWV3LCBsZWZ0b3ZlckZsYWcsIHRoaXMpIHx8IHByaW9yaXR5VXBkYXRlc1tjaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0cG9uZUNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1heFByaW9yaXR5ID4gcHJpb3JpdHkpIG1heFByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ291bnQrKztcbiAgICAgICAgICAgICAgICBkZWxldGUgcHJpb3JpdHlVcGRhdGVzW2NpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByaW9yaXR5OiBtYXhQcmlvcml0eSxcbiAgICAgICAgICAgIHVwZGF0ZWQ6IHVwZGF0ZUNvdW50LFxuICAgICAgICAgICAgcG9zdHBvbmVkOiBwb3N0cG9uZUNvdW50LFxuICAgICAgICAgICAgdW5tb3VudGVkOiB1bm1vdW50Q291bnQsXG4gICAgICAgICAgICBtb3VudGVkOiBtb3VudENvdW50LFxuICAgICAgICAgICAgZW1wdHk6IGVtcHR5XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFVubW91bnRlZFZpZXdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlcyA9IHRoaXMuX3VwZGF0ZXM7XG4gICAgICAgIGNvbnN0IHVubW91bnRlZENpZHMgPSBPYmplY3Qua2V5cyh1cGRhdGVzLnVubW91bnRlZCk7XG4gICAgICAgIGNvbnN0IG4gPSB1bm1vdW50ZWRDaWRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdW5tb3VudGVkVmlld3MgPSBuZXcgQXJyYXkobik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICB1bm1vdW50ZWRWaWV3c1tpXSA9IHZpZXdzW3VubW91bnRlZENpZHNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bm1vdW50ZWRWaWV3cztcbiAgICB9LFxuXG4gICAgZ2V0TW91bnRlZFZpZXdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlcyA9IHRoaXMuX3VwZGF0ZXM7XG4gICAgICAgIGNvbnN0IG1vdW50ZWRDaWRzID0gT2JqZWN0LmtleXModXBkYXRlcy5tb3VudGVkKTtcbiAgICAgICAgY29uc3QgbiA9IG1vdW50ZWRDaWRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbW91bnRlZFZpZXdzID0gbmV3IEFycmF5KG4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgbW91bnRlZFZpZXdzW2ldID0gdmlld3NbbW91bnRlZENpZHNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb3VudGVkVmlld3M7XG4gICAgfSxcblxuICAgIGNoZWNrVW5tb3VudGVkVmlld3M6IGZ1bmN0aW9uKHZpZXdwb3J0Rm4sIG9wdCkge1xuICAgICAgICBvcHQgfHwgKG9wdCAgPSB7fSk7XG4gICAgICAgIHZhciBtb3VudENvdW50ID0gMDtcbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3cG9ydEZuICE9PSAnZnVuY3Rpb24nKSB2aWV3cG9ydEZuID0gbnVsbDtcbiAgICAgICAgdmFyIGJhdGNoU2l6ZSA9ICdtb3VudEJhdGNoU2l6ZScgaW4gb3B0ID8gb3B0Lm1vdW50QmF0Y2hTaXplIDogSW5maW5pdHk7XG4gICAgICAgIHZhciB1cGRhdGVzID0gdGhpcy5fdXBkYXRlcztcbiAgICAgICAgdmFyIHVubW91bnRlZENpZHMgPSB1cGRhdGVzLnVubW91bnRlZENpZHM7XG4gICAgICAgIHZhciB1bm1vdW50ZWQgPSB1cGRhdGVzLnVubW91bnRlZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBNYXRoLm1pbih1bm1vdW50ZWRDaWRzLmxlbmd0aCwgYmF0Y2hTaXplKTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgdmFyIGNpZCA9IHVubW91bnRlZENpZHNbaV07XG4gICAgICAgICAgICBpZiAoIShjaWQgaW4gdW5tb3VudGVkKSkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzW2NpZF07XG4gICAgICAgICAgICBpZiAoIXZpZXcpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHZpZXcuREVUQUNIQUJMRSAmJiB2aWV3cG9ydEZuICYmICF2aWV3cG9ydEZuLmNhbGwodGhpcywgdmlldywgZmFsc2UsIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgLy8gUHVzaCBhdCB0aGUgZW5kIG9mIGFsbCB1bm1vdW50ZWQgaWRzLCBzbyB0aGlzIGNhbiBiZSBjaGVjayBsYXRlciBhZ2FpblxuICAgICAgICAgICAgICAgIHVubW91bnRlZENpZHMucHVzaChjaWQpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW91bnRDb3VudCsrO1xuICAgICAgICAgICAgdmFyIGZsYWcgPSB0aGlzLnJlZ2lzdGVyTW91bnRlZFZpZXcodmlldyk7XG4gICAgICAgICAgICBpZiAoZmxhZykgdGhpcy5zY2hlZHVsZVZpZXdVcGRhdGUodmlldywgZmxhZywgdmlldy5VUERBVEVfUFJJT1JJVFksIHsgbW91bnRpbmc6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHJpZCBvZiB2aWV3cywgdGhhdCBoYXZlIGJlZW4gbW91bnRlZFxuICAgICAgICB1bm1vdW50ZWRDaWRzLnNwbGljZSgwLCBpKTtcbiAgICAgICAgcmV0dXJuIG1vdW50Q291bnQ7XG4gICAgfSxcblxuICAgIGNoZWNrTW91bnRlZFZpZXdzOiBmdW5jdGlvbih2aWV3cG9ydEZuLCBvcHQpIHtcbiAgICAgICAgb3B0IHx8IChvcHQgPSB7fSk7XG4gICAgICAgIHZhciB1bm1vdW50Q291bnQgPSAwO1xuICAgICAgICBpZiAodHlwZW9mIHZpZXdwb3J0Rm4gIT09ICdmdW5jdGlvbicpIHJldHVybiB1bm1vdW50Q291bnQ7XG4gICAgICAgIHZhciBiYXRjaFNpemUgPSAndW5tb3VudEJhdGNoU2l6ZScgaW4gb3B0ID8gb3B0LnVubW91bnRCYXRjaFNpemUgOiBJbmZpbml0eTtcbiAgICAgICAgdmFyIHVwZGF0ZXMgPSB0aGlzLl91cGRhdGVzO1xuICAgICAgICB2YXIgbW91bnRlZENpZHMgPSB1cGRhdGVzLm1vdW50ZWRDaWRzO1xuICAgICAgICB2YXIgbW91bnRlZCA9IHVwZGF0ZXMubW91bnRlZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBNYXRoLm1pbihtb3VudGVkQ2lkcy5sZW5ndGgsIGJhdGNoU2l6ZSk7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaWQgPSBtb3VudGVkQ2lkc1tpXTtcbiAgICAgICAgICAgIGlmICghKGNpZCBpbiBtb3VudGVkKSkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzW2NpZF07XG4gICAgICAgICAgICBpZiAoIXZpZXcpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCF2aWV3LkRFVEFDSEFCTEUgfHwgdmlld3BvcnRGbi5jYWxsKHRoaXMsIHZpZXcsIHRydWUsIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgLy8gUHVzaCBhdCB0aGUgZW5kIG9mIGFsbCBtb3VudGVkIGlkcywgc28gdGhpcyBjYW4gYmUgY2hlY2sgbGF0ZXIgYWdhaW5cbiAgICAgICAgICAgICAgICBtb3VudGVkQ2lkcy5wdXNoKGNpZCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1bm1vdW50Q291bnQrKztcbiAgICAgICAgICAgIHZhciBmbGFnID0gdGhpcy5yZWdpc3RlclVubW91bnRlZFZpZXcodmlldyk7XG4gICAgICAgICAgICBpZiAoZmxhZykgdGhpcy5kZXRhY2hWaWV3KHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCByaWQgb2Ygdmlld3MsIHRoYXQgaGF2ZSBiZWVuIHVubW91bnRlZFxuICAgICAgICBtb3VudGVkQ2lkcy5zcGxpY2UoMCwgaSk7XG4gICAgICAgIHJldHVybiB1bm1vdW50Q291bnQ7XG4gICAgfSxcblxuICAgIGNoZWNrVmlld1Zpc2liaWxpdHk6IGZ1bmN0aW9uKGNlbGxWaWV3LCBvcHQgPSB7fSkge1xuICAgICAgICBsZXQgdmlld3BvcnRGbiA9ICd2aWV3cG9ydCcgaW4gb3B0ID8gb3B0LnZpZXdwb3J0IDogdGhpcy5vcHRpb25zLnZpZXdwb3J0O1xuICAgICAgICBpZiAodHlwZW9mIHZpZXdwb3J0Rm4gIT09ICdmdW5jdGlvbicpIHZpZXdwb3J0Rm4gPSBudWxsO1xuICAgICAgICBjb25zdCB1cGRhdGVzID0gdGhpcy5fdXBkYXRlcztcbiAgICAgICAgY29uc3QgeyBtb3VudGVkLCB1bm1vdW50ZWQgfSA9IHVwZGF0ZXM7XG4gICAgICAgIGNvbnN0IHZpc2libGUgPSAhY2VsbFZpZXcuREVUQUNIQUJMRSB8fCAhdmlld3BvcnRGbiB8fCB2aWV3cG9ydEZuLmNhbGwodGhpcywgY2VsbFZpZXcsIGZhbHNlLCB0aGlzKTtcblxuICAgICAgICBsZXQgaXNVbm1vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGlzTW91bnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChjZWxsVmlldy5jaWQgaW4gbW91bnRlZCAmJiAhdmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgZmxhZyA9IHRoaXMucmVnaXN0ZXJVbm1vdW50ZWRWaWV3KGNlbGxWaWV3KTtcbiAgICAgICAgICAgIGlmIChmbGFnKSB0aGlzLmRldGFjaFZpZXcoY2VsbFZpZXcpO1xuICAgICAgICAgICAgY29uc3QgaSA9IHVwZGF0ZXMubW91bnRlZENpZHMuaW5kZXhPZihjZWxsVmlldy5jaWQpO1xuICAgICAgICAgICAgdXBkYXRlcy5tb3VudGVkQ2lkcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpc1VubW91bnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVW5tb3VudGVkICYmIGNlbGxWaWV3LmNpZCBpbiB1bm1vdW50ZWQgJiYgdmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgaSA9IHVwZGF0ZXMudW5tb3VudGVkQ2lkcy5pbmRleE9mKGNlbGxWaWV3LmNpZCk7XG4gICAgICAgICAgICB1cGRhdGVzLnVubW91bnRlZENpZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgdmFyIGZsYWcgPSB0aGlzLnJlZ2lzdGVyTW91bnRlZFZpZXcoY2VsbFZpZXcpO1xuICAgICAgICAgICAgaWYgKGZsYWcpIHRoaXMuc2NoZWR1bGVWaWV3VXBkYXRlKGNlbGxWaWV3LCBmbGFnLCBjZWxsVmlldy5VUERBVEVfUFJJT1JJVFksIHsgbW91bnRpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vdW50ZWQ6IGlzTW91bnRlZCA/IDEgOiAwLFxuICAgICAgICAgICAgdW5tb3VudGVkOiBpc1VubW91bnRlZCA/IDEgOiAwXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNoZWNrVmlld3BvcnQ6IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICB2YXIgcGFzc2luZ09wdCA9IGRlZmF1bHRzKHt9LCBvcHQsIHtcbiAgICAgICAgICAgIG1vdW50QmF0Y2hTaXplOiBJbmZpbml0eSxcbiAgICAgICAgICAgIHVubW91bnRCYXRjaFNpemU6IEluZmluaXR5XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdmlld3BvcnRGbiA9ICd2aWV3cG9ydCcgaW4gcGFzc2luZ09wdCA/IHBhc3NpbmdPcHQudmlld3BvcnQgOiB0aGlzLm9wdGlvbnMudmlld3BvcnQ7XG4gICAgICAgIHZhciB1bm1vdW50ZWRDb3VudCA9IHRoaXMuY2hlY2tNb3VudGVkVmlld3Modmlld3BvcnRGbiwgcGFzc2luZ09wdCk7XG4gICAgICAgIGlmICh1bm1vdW50ZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBjaGVjayB2aWV3cywgdGhhdCBoYXZlIGJlZW4ganVzdCB1bm1vdW50ZWQgYW5kIHB1c2hlZCBhdCB0aGUgZW5kIG9mIHRoZSBjaWRzIGFycmF5XG4gICAgICAgICAgICB2YXIgdW5tb3VudGVkQ2lkcyA9IHRoaXMuX3VwZGF0ZXMudW5tb3VudGVkQ2lkcztcbiAgICAgICAgICAgIHBhc3NpbmdPcHQubW91bnRCYXRjaFNpemUgPSBNYXRoLm1pbih1bm1vdW50ZWRDaWRzLmxlbmd0aCAtIHVubW91bnRlZENvdW50LCBwYXNzaW5nT3B0Lm1vdW50QmF0Y2hTaXplKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW91bnRlZENvdW50ID0gdGhpcy5jaGVja1VubW91bnRlZFZpZXdzKHZpZXdwb3J0Rm4sIHBhc3NpbmdPcHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW91bnRlZDogbW91bnRlZENvdW50LFxuICAgICAgICAgICAgdW5tb3VudGVkOiB1bm1vdW50ZWRDb3VudFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBmcmVlemU6IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICBvcHQgfHwgKG9wdCA9IHt9KTtcbiAgICAgICAgdmFyIHVwZGF0ZXMgPSB0aGlzLl91cGRhdGVzO1xuICAgICAgICB2YXIga2V5ID0gb3B0LmtleTtcbiAgICAgICAgdmFyIGlzRnJvemVuID0gdGhpcy5vcHRpb25zLmZyb3plbjtcbiAgICAgICAgdmFyIGZyZWV6ZUtleSA9IHVwZGF0ZXMuZnJlZXplS2V5O1xuICAgICAgICBpZiAoa2V5ICYmIGtleSAhPT0gZnJlZXplS2V5KSAge1xuICAgICAgICAgICAgLy8ga2V5IHBhc3NlZCwgYnV0IHRoZSBwYXBlciBpcyBhbHJlYWR5IGZyZWV6ZWQgd2l0aCBhbm90aGVyIGtleVxuICAgICAgICAgICAgaWYgKGlzRnJvemVuICYmIGZyZWV6ZUtleSkgcmV0dXJuO1xuICAgICAgICAgICAgdXBkYXRlcy5mcmVlemVLZXkgPSBrZXk7XG4gICAgICAgICAgICB1cGRhdGVzLmtleUZyb3plbiA9IGlzRnJvemVuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5mcm96ZW4gPSB0cnVlO1xuICAgICAgICB2YXIgaWQgPSB1cGRhdGVzLmlkO1xuICAgICAgICB1cGRhdGVzLmlkID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXNBc3luYygpICYmIGlkKSBjYW5jZWxGcmFtZShpZCk7XG4gICAgfSxcblxuICAgIHVuZnJlZXplOiBmdW5jdGlvbihvcHQpIHtcbiAgICAgICAgb3B0IHx8IChvcHQgPSB7fSk7XG4gICAgICAgIHZhciB1cGRhdGVzID0gdGhpcy5fdXBkYXRlcztcbiAgICAgICAgdmFyIGtleSA9IG9wdC5rZXk7XG4gICAgICAgIHZhciBmcmVlemVLZXkgPSB1cGRhdGVzLmZyZWV6ZUtleTtcbiAgICAgICAgLy8ga2V5IHBhc3NlZCwgYnV0IHRoZSBwYXBlciBpcyBhbHJlYWR5IGZyZWV6ZWQgd2l0aCBhbm90aGVyIGtleVxuICAgICAgICBpZiAoa2V5ICYmIGZyZWV6ZUtleSAmJiBrZXkgIT09IGZyZWV6ZUtleSkgcmV0dXJuO1xuICAgICAgICB1cGRhdGVzLmZyZWV6ZUtleSA9IG51bGw7XG4gICAgICAgIC8vIGtleSBwYXNzZWQsIGJ1dCB0aGUgcGFwZXIgaXMgYWxyZWFkeSBmcmVlemVkXG4gICAgICAgIGlmIChrZXkgJiYga2V5ID09PSBmcmVlemVLZXkgJiYgdXBkYXRlcy5rZXlGcm96ZW4pIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuaXNBc3luYygpKSB7XG4gICAgICAgICAgICB0aGlzLmZyZWV6ZSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3c0FzeW5jKG9wdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXdzKG9wdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zLmZyb3plbiA9IHVwZGF0ZXMua2V5RnJvemVuID0gZmFsc2U7XG4gICAgICAgIGlmICh1cGRhdGVzLnNvcnQpIHtcbiAgICAgICAgICAgIHRoaXMuc29ydFZpZXdzKCk7XG4gICAgICAgICAgICB1cGRhdGVzLnNvcnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc0FzeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5vcHRpb25zLmFzeW5jO1xuICAgIH0sXG5cbiAgICBpc0Zyb3plbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMub3B0aW9ucy5mcm96ZW47XG4gICAgfSxcblxuICAgIGlzRXhhY3RTb3J0aW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zb3J0aW5nID09PSBzb3J0aW5nVHlwZXMuRVhBQ1Q7XG4gICAgfSxcblxuICAgIG9uUmVtb3ZlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB0aGlzLmZyZWV6ZSgpO1xuICAgICAgICB0aGlzLl91cGRhdGVzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgLy9jbGVhbiB1cCBhbGwgRE9NIGVsZW1lbnRzL3ZpZXdzIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG4gICAgICAgIHRoaXMucmVtb3ZlTGF5ZXJzKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlVmlld3MoKTtcbiAgICB9LFxuXG4gICAgZ2V0Q29tcHV0ZWRTaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIHcgPSBvcHRpb25zLndpZHRoO1xuICAgICAgICB2YXIgaCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICBpZiAoIWlzTnVtYmVyKHcpKSB3ID0gdGhpcy5lbC5jbGllbnRXaWR0aDtcbiAgICAgICAgaWYgKCFpc051bWJlcihoKSkgaCA9IHRoaXMuZWwuY2xpZW50SGVpZ2h0O1xuICAgICAgICByZXR1cm4geyB3aWR0aDogdywgaGVpZ2h0OiBoIH07XG4gICAgfSxcblxuICAgIHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHdpZHRoOiBjdXJyZW50V2lkdGgsIGhlaWdodDogY3VycmVudEhlaWdodCB9ID0gb3B0aW9ucztcbiAgICAgICAgbGV0IHcgPSAod2lkdGggPT09IHVuZGVmaW5lZCkgPyBjdXJyZW50V2lkdGggOiB3aWR0aDtcbiAgICAgICAgbGV0IGggPSAoaGVpZ2h0ID09PSB1bmRlZmluZWQpID8gY3VycmVudEhlaWdodCA6IGhlaWdodDtcbiAgICAgICAgaWYgKGN1cnJlbnRXaWR0aCA9PT0gdyAmJiBjdXJyZW50SGVpZ2h0ID09PSBoKSByZXR1cm47XG4gICAgICAgIG9wdGlvbnMud2lkdGggPSB3O1xuICAgICAgICBvcHRpb25zLmhlaWdodCA9IGg7XG4gICAgICAgIHRoaXMuX3NldERpbWVuc2lvbnMoKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZWRTaXplID0gdGhpcy5nZXRDb21wdXRlZFNpemUoKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNpemUnLCBjb21wdXRlZFNpemUud2lkdGgsIGNvbXB1dGVkU2l6ZS5oZWlnaHQpO1xuICAgIH0sXG5cbiAgICBfc2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgbGV0IHcgPSBvcHRpb25zLndpZHRoO1xuICAgICAgICBsZXQgaCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICBpZiAoaXNOdW1iZXIodykpIHcgPSBNYXRoLnJvdW5kKHcpO1xuICAgICAgICBpZiAoaXNOdW1iZXIoaCkpIGggPSBNYXRoLnJvdW5kKGgpO1xuICAgICAgICB0aGlzLiRlbC5jc3Moe1xuICAgICAgICAgICAgd2lkdGg6ICh3ID09PSBudWxsKSA/ICcnIDogdyxcbiAgICAgICAgICAgIGhlaWdodDogKGggPT09IG51bGwpID8gJycgOiBoXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzZXRPcmlnaW46IGZ1bmN0aW9uKG94LCBveSkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUob3ggfHwgMCwgb3kgfHwgMCk7XG4gICAgfSxcblxuICAgIC8vIEV4cGFuZC9zaHJpbmsgdGhlIHBhcGVyIHRvIGZpdCB0aGUgY29udGVudC5cbiAgICAvLyBBbHRlcm5hdGl2ZWx5IHNpZ25hdHVyZSBmdW5jdGlvbihvcHQpXG4gICAgZml0VG9Db250ZW50OiBmdW5jdGlvbihncmlkV2lkdGgsIGdyaWRIZWlnaHQsIHBhZGRpbmcsIG9wdCkge1xuXG4gICAgICAgIGlmIChpc09iamVjdChncmlkV2lkdGgpKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCBwYXJhbWV0ZXIgaXMgYW4gb3B0aW9uIG9iamVjdFxuICAgICAgICAgICAgb3B0ID0gZ3JpZFdpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU3VwcG9ydCBmb3IgYSBkZXByZWNhdGVkIHNpZ25hdHVyZVxuICAgICAgICAgICAgb3B0ID0gYXNzaWduKHsgZ3JpZFdpZHRoLCBncmlkSGVpZ2h0LCBwYWRkaW5nIH0sIG9wdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZ2V0Rml0VG9Db250ZW50QXJlYShvcHQpO1xuICAgICAgICBjb25zdCB7IHN4LCBzeSB9ID0gdGhpcy5zY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0T3JpZ2luKC14ICogc3gsIC15ICogc3kpO1xuICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMod2lkdGggKiBzeCwgaGVpZ2h0ICogc3kpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgZ2V0Rml0VG9Db250ZW50QXJlYTogZnVuY3Rpb24ob3B0ID0ge30pIHtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBhcGVyIHNpemUgdG8gYWNjb21tb2RhdGUgYWxsIHRoZSBncmFwaCdzIGVsZW1lbnRzLlxuXG4gICAgICAgIGNvbnN0IGdyaWRXaWR0aCA9IG9wdC5ncmlkV2lkdGggfHwgMTtcbiAgICAgICAgY29uc3QgZ3JpZEhlaWdodCA9IG9wdC5ncmlkSGVpZ2h0IHx8IDE7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBub3JtYWxpemVTaWRlcyhvcHQucGFkZGluZyB8fCAwKTtcblxuICAgICAgICBjb25zdCBtaW5XaWR0aCA9IE1hdGgubWF4KG9wdC5taW5XaWR0aCB8fCAwLCBncmlkV2lkdGgpO1xuICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBNYXRoLm1heChvcHQubWluSGVpZ2h0IHx8IDAsIGdyaWRIZWlnaHQpO1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IG9wdC5tYXhXaWR0aCB8fCBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBvcHQubWF4SGVpZ2h0IHx8IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIGNvbnN0IG5ld09yaWdpbiA9IG9wdC5hbGxvd05ld09yaWdpbjtcblxuICAgICAgICBjb25zdCBhcmVhID0gKCdjb250ZW50QXJlYScgaW4gb3B0KSA/IG5ldyBSZWN0KG9wdC5jb250ZW50QXJlYSkgOiB0aGlzLmdldENvbnRlbnRBcmVhKG9wdCk7XG4gICAgICAgIGNvbnN0IHsgc3gsIHN5IH0gPSB0aGlzLnNjYWxlKCk7XG4gICAgICAgIGFyZWEueCAqPSBzeDtcbiAgICAgICAgYXJlYS55ICo9IHN5O1xuICAgICAgICBhcmVhLndpZHRoICo9IHN4O1xuICAgICAgICBhcmVhLmhlaWdodCAqPSBzeTtcblxuICAgICAgICBsZXQgY2FsY1dpZHRoID0gTWF0aC5jZWlsKChhcmVhLndpZHRoICsgYXJlYS54KSAvIGdyaWRXaWR0aCk7XG4gICAgICAgIGxldCBjYWxjSGVpZ2h0ID0gTWF0aC5jZWlsKChhcmVhLmhlaWdodCArIGFyZWEueSkgLyBncmlkSGVpZ2h0KTtcbiAgICAgICAgaWYgKCFvcHQuYWxsb3dOZWdhdGl2ZUJvdHRvbVJpZ2h0KSB7XG4gICAgICAgICAgICBjYWxjV2lkdGggPSBNYXRoLm1heChjYWxjV2lkdGgsIDEpO1xuICAgICAgICAgICAgY2FsY0hlaWdodCA9IE1hdGgubWF4KGNhbGNIZWlnaHQsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGNXaWR0aCAqPSBncmlkV2lkdGg7XG4gICAgICAgIGNhbGNIZWlnaHQgKj0gZ3JpZEhlaWdodDtcblxuICAgICAgICBsZXQgdHggPSAwO1xuICAgICAgICBpZiAoKG5ld09yaWdpbiA9PT0gJ25lZ2F0aXZlJyAmJiBhcmVhLnggPCAwKSB8fCAobmV3T3JpZ2luID09PSAncG9zaXRpdmUnICYmIGFyZWEueCA+PSAwKSB8fCBuZXdPcmlnaW4gPT09ICdhbnknKSB7XG4gICAgICAgICAgICB0eCA9IE1hdGguY2VpbCgtYXJlYS54IC8gZ3JpZFdpZHRoKSAqIGdyaWRXaWR0aDtcbiAgICAgICAgICAgIHR4ICs9IHBhZGRpbmcubGVmdDtcbiAgICAgICAgICAgIGNhbGNXaWR0aCArPSB0eDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0eSA9IDA7XG4gICAgICAgIGlmICgobmV3T3JpZ2luID09PSAnbmVnYXRpdmUnICYmIGFyZWEueSA8IDApIHx8IChuZXdPcmlnaW4gPT09ICdwb3NpdGl2ZScgJiYgYXJlYS55ID49IDApIHx8IG5ld09yaWdpbiA9PT0gJ2FueScpIHtcbiAgICAgICAgICAgIHR5ID0gTWF0aC5jZWlsKC1hcmVhLnkgLyBncmlkSGVpZ2h0KSAqIGdyaWRIZWlnaHQ7XG4gICAgICAgICAgICB0eSArPSBwYWRkaW5nLnRvcDtcbiAgICAgICAgICAgIGNhbGNIZWlnaHQgKz0gdHk7XG4gICAgICAgIH1cblxuICAgICAgICBjYWxjV2lkdGggKz0gcGFkZGluZy5yaWdodDtcbiAgICAgICAgY2FsY0hlaWdodCArPSBwYWRkaW5nLmJvdHRvbTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHJlc3VsdGluZyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBncmVhdGVyIHRoYW4gbWluaW11bS5cbiAgICAgICAgY2FsY1dpZHRoID0gTWF0aC5tYXgoY2FsY1dpZHRoLCBtaW5XaWR0aCk7XG4gICAgICAgIGNhbGNIZWlnaHQgPSBNYXRoLm1heChjYWxjSGVpZ2h0LCBtaW5IZWlnaHQpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcmVzdWx0aW5nIHdpZHRoIGFuZCBoZWlnaHQgYXJlIGxlc3NlciB0aGFuIG1heGltdW0uXG4gICAgICAgIGNhbGNXaWR0aCA9IE1hdGgubWluKGNhbGNXaWR0aCwgbWF4V2lkdGgpO1xuICAgICAgICBjYWxjSGVpZ2h0ID0gTWF0aC5taW4oY2FsY0hlaWdodCwgbWF4SGVpZ2h0KTtcblxuICAgICAgICByZXR1cm4gbmV3IFJlY3QoLXR4IC8gc3gsIC10eSAvIHN5LCBjYWxjV2lkdGggLyBzeCwgY2FsY0hlaWdodCAvIHN5KTtcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtVG9GaXRDb250ZW50OiBmdW5jdGlvbihvcHQpIHtcbiAgICAgICAgb3B0IHx8IChvcHQgPSB7fSk7XG5cbiAgICAgICAgbGV0IGNvbnRlbnRCQm94LCBjb250ZW50TG9jYWxPcmlnaW47XG4gICAgICAgIGlmICgnY29udGVudEFyZWEnIGluIG9wdCkge1xuICAgICAgICAgICAgY29uc3QgY29udGVudEFyZWEgPSBvcHQuY29udGVudEFyZWE7XG4gICAgICAgICAgICBjb250ZW50QkJveCA9IHRoaXMubG9jYWxUb1BhcGVyUmVjdChjb250ZW50QXJlYSk7XG4gICAgICAgICAgICBjb250ZW50TG9jYWxPcmlnaW4gPSBuZXcgUG9pbnQoY29udGVudEFyZWEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGVudEJCb3ggPSB0aGlzLmdldENvbnRlbnRCQm94KG9wdCk7XG4gICAgICAgICAgICBjb250ZW50TG9jYWxPcmlnaW4gPSB0aGlzLnBhcGVyVG9Mb2NhbFBvaW50KGNvbnRlbnRCQm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGVudEJCb3gud2lkdGggfHwgIWNvbnRlbnRCQm94LmhlaWdodCkgcmV0dXJuO1xuXG4gICAgICAgIGRlZmF1bHRzKG9wdCwge1xuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IHRydWUsXG4gICAgICAgICAgICBzY2FsZUdyaWQ6IG51bGwsXG4gICAgICAgICAgICBtaW5TY2FsZTogMCxcbiAgICAgICAgICAgIG1heFNjYWxlOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICBob3Jpem9udGFsQWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgIC8vbWluU2NhbGVYXG4gICAgICAgICAgICAvL21pblNjYWxlWVxuICAgICAgICAgICAgLy9tYXhTY2FsZVhcbiAgICAgICAgICAgIC8vbWF4U2NhbGVZXG4gICAgICAgICAgICAvL2ZpdHRpbmdCQm94XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBub3JtYWxpemVTaWRlcyhvcHQucGFkZGluZyk7XG5cbiAgICAgICAgY29uc3QgbWluU2NhbGVYID0gb3B0Lm1pblNjYWxlWCB8fCBvcHQubWluU2NhbGU7XG4gICAgICAgIGNvbnN0IG1heFNjYWxlWCA9IG9wdC5tYXhTY2FsZVggfHwgb3B0Lm1heFNjYWxlO1xuICAgICAgICBjb25zdCBtaW5TY2FsZVkgPSBvcHQubWluU2NhbGVZIHx8IG9wdC5taW5TY2FsZTtcbiAgICAgICAgY29uc3QgbWF4U2NhbGVZID0gb3B0Lm1heFNjYWxlWSB8fCBvcHQubWF4U2NhbGU7XG5cbiAgICAgICAgbGV0IGZpdHRpbmdCQm94O1xuICAgICAgICBpZiAob3B0LmZpdHRpbmdCQm94KSB7XG4gICAgICAgICAgICBmaXR0aW5nQkJveCA9IG9wdC5maXR0aW5nQkJveDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2xhdGUgPSB0aGlzLnRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRTaXplID0gdGhpcy5nZXRDb21wdXRlZFNpemUoKTtcbiAgICAgICAgICAgIGZpdHRpbmdCQm94ID0ge1xuICAgICAgICAgICAgICAgIHg6IGN1cnJlbnRUcmFuc2xhdGUudHgsXG4gICAgICAgICAgICAgICAgeTogY3VycmVudFRyYW5zbGF0ZS50eSxcbiAgICAgICAgICAgICAgICB3aWR0aDogY29tcHV0ZWRTaXplLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogY29tcHV0ZWRTaXplLmhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpdHRpbmdCQm94ID0gbmV3IFJlY3QoZml0dGluZ0JCb3gpLm1vdmVBbmRFeHBhbmQoe1xuICAgICAgICAgICAgeDogcGFkZGluZy5sZWZ0LFxuICAgICAgICAgICAgeTogcGFkZGluZy50b3AsXG4gICAgICAgICAgICB3aWR0aDogLXBhZGRpbmcubGVmdCAtIHBhZGRpbmcucmlnaHQsXG4gICAgICAgICAgICBoZWlnaHQ6IC1wYWRkaW5nLnRvcCAtIHBhZGRpbmcuYm90dG9tXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY2FsZSA9IHRoaXMuc2NhbGUoKTtcblxuICAgICAgICBsZXQgbmV3U3ggPSBmaXR0aW5nQkJveC53aWR0aCAvIGNvbnRlbnRCQm94LndpZHRoICogY3VycmVudFNjYWxlLnN4O1xuICAgICAgICBsZXQgbmV3U3kgPSBmaXR0aW5nQkJveC5oZWlnaHQgLyBjb250ZW50QkJveC5oZWlnaHQgKiBjdXJyZW50U2NhbGUuc3k7XG5cbiAgICAgICAgaWYgKG9wdC5wcmVzZXJ2ZUFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICBuZXdTeCA9IG5ld1N5ID0gTWF0aC5taW4obmV3U3gsIG5ld1N5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNuYXAgc2NhbGUgdG8gYSBncmlkXG4gICAgICAgIGlmIChvcHQuc2NhbGVHcmlkKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGdyaWRTaXplID0gb3B0LnNjYWxlR3JpZDtcblxuICAgICAgICAgICAgbmV3U3ggPSBncmlkU2l6ZSAqIE1hdGguZmxvb3IobmV3U3ggLyBncmlkU2l6ZSk7XG4gICAgICAgICAgICBuZXdTeSA9IGdyaWRTaXplICogTWF0aC5mbG9vcihuZXdTeSAvIGdyaWRTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjYWxlIG1pbi9tYXggYm91bmRhcmllc1xuICAgICAgICBuZXdTeCA9IE1hdGgubWluKG1heFNjYWxlWCwgTWF0aC5tYXgobWluU2NhbGVYLCBuZXdTeCkpO1xuICAgICAgICBuZXdTeSA9IE1hdGgubWluKG1heFNjYWxlWSwgTWF0aC5tYXgobWluU2NhbGVZLCBuZXdTeSkpO1xuXG4gICAgICAgIGNvbnN0IHNjYWxlRGlmZiA9IHtcbiAgICAgICAgICAgIHg6IG5ld1N4IC8gY3VycmVudFNjYWxlLnN4LFxuICAgICAgICAgICAgeTogbmV3U3kgLyBjdXJyZW50U2NhbGUuc3lcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBvcmlnaW4gPSB0aGlzLm9wdGlvbnMub3JpZ2luO1xuICAgICAgICBsZXQgbmV3T3ggPSBmaXR0aW5nQkJveC54IC0gY29udGVudExvY2FsT3JpZ2luLnggKiBuZXdTeCAtIG9yaWdpbi54O1xuICAgICAgICBsZXQgbmV3T3kgPSBmaXR0aW5nQkJveC55IC0gY29udGVudExvY2FsT3JpZ2luLnkgKiBuZXdTeSAtIG9yaWdpbi55O1xuXG4gICAgICAgIHN3aXRjaCAob3B0LnZlcnRpY2FsQWxpZ24pIHtcbiAgICAgICAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgICAgICAgICAgbmV3T3kgPSBuZXdPeSArIChmaXR0aW5nQkJveC5oZWlnaHQgLSBjb250ZW50QkJveC5oZWlnaHQgKiBzY2FsZURpZmYueSkgLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICBuZXdPeSA9IG5ld095ICsgKGZpdHRpbmdCQm94LmhlaWdodCAtIGNvbnRlbnRCQm94LmhlaWdodCAqIHNjYWxlRGlmZi55KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChvcHQuaG9yaXpvbnRhbEFsaWduKSB7XG4gICAgICAgICAgICBjYXNlICdtaWRkbGUnOlxuICAgICAgICAgICAgICAgIG5ld094ID0gbmV3T3ggKyAoZml0dGluZ0JCb3gud2lkdGggLSBjb250ZW50QkJveC53aWR0aCAqIHNjYWxlRGlmZi54KSAvIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgbmV3T3ggPSBuZXdPeCArIChmaXR0aW5nQkJveC53aWR0aCAtIGNvbnRlbnRCQm94LndpZHRoICogc2NhbGVEaWZmLngpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY2FsZShuZXdTeCwgbmV3U3kpO1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZShuZXdPeCwgbmV3T3kpO1xuICAgIH0sXG5cbiAgICBzY2FsZUNvbnRlbnRUb0ZpdDogZnVuY3Rpb24ob3B0KSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtVG9GaXRDb250ZW50KG9wdCk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiB0aGUgZGltZW5zaW9ucyBvZiB0aGUgY29udGVudCBhcmVhIGluIGxvY2FsIHVuaXRzICh3aXRob3V0IHRyYW5zZm9ybWF0aW9ucykuXG4gICAgZ2V0Q29udGVudEFyZWE6IGZ1bmN0aW9uKG9wdCkge1xuXG4gICAgICAgIGlmIChvcHQgJiYgb3B0LnVzZU1vZGVsR2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmdldEJCb3goKSB8fCBuZXcgUmVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFYodGhpcy5jZWxscykuZ2V0QkJveCgpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGNvbnRlbnQgYmJveCBpbiB0aGUgcGFwZXIgdW5pdHMgKGFzIGl0IGFwcGVhcnMgb24gc2NyZWVuKS5cbiAgICBnZXRDb250ZW50QkJveDogZnVuY3Rpb24ob3B0KSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxUb1BhcGVyUmVjdCh0aGlzLmdldENvbnRlbnRBcmVhKG9wdCkpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgZ2VvbWV0cnkgcmVjdGFuZ2xlIHJlcHJlc2VudGluZyB0aGUgZW50aXJlXG4gICAgLy8gcGFwZXIgYXJlYSAoY29vcmRpbmF0ZXMgZnJvbSB0aGUgbGVmdCBwYXBlciBib3JkZXIgdG8gdGhlIHJpZ2h0IG9uZVxuICAgIC8vIGFuZCB0aGUgdG9wIGJvcmRlciB0byB0aGUgYm90dG9tIG9uZSkuXG4gICAgZ2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGFwZXJUb0xvY2FsUmVjdCh0aGlzLmdldENvbXB1dGVkU2l6ZSgpKTtcbiAgICB9LFxuXG4gICAgZ2V0UmVzdHJpY3RlZEFyZWE6IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcblxuICAgICAgICBjb25zdCB7IHJlc3RyaWN0VHJhbnNsYXRlIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgbGV0IHJlc3RyaWN0ZWRBcmVhO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihyZXN0cmljdFRyYW5zbGF0ZSkpIHtcbiAgICAgICAgICAgIC8vIEEgbWV0aG9kIHJldHVybmluZyBhIGJvdW5kaW5nIGJveFxuICAgICAgICAgICAgcmVzdHJpY3RlZEFyZWEgPSByZXN0cmljdFRyYW5zbGF0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN0cmljdFRyYW5zbGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gVGhlIHBhcGVyIGFyZWFcbiAgICAgICAgICAgIHJlc3RyaWN0ZWRBcmVhID0gdGhpcy5nZXRBcmVhKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3RyaWN0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICAvLyBmYWxzeSB2YWx1ZVxuICAgICAgICAgICAgcmVzdHJpY3RlZEFyZWEgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYW55IG90aGVyIHZhbHVlXG4gICAgICAgICAgICByZXN0cmljdGVkQXJlYSA9IG5ldyBSZWN0KHJlc3RyaWN0VHJhbnNsYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN0cmljdGVkQXJlYTtcbiAgICB9LFxuXG4gICAgY3JlYXRlVmlld0Zvck1vZGVsOiBmdW5jdGlvbihjZWxsKSB7XG5cbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICAvLyBBIGNsYXNzIHRha2VuIGZyb20gdGhlIHBhcGVyIG9wdGlvbnMuXG4gICAgICAgIHZhciBvcHRpb25hbFZpZXdDbGFzcztcblxuICAgICAgICAvLyBBIGRlZmF1bHQgYmFzaWMgY2xhc3MgKGVpdGhlciBkaWEuRWxlbWVudFZpZXcgb3IgZGlhLkxpbmtWaWV3KVxuICAgICAgICB2YXIgZGVmYXVsdFZpZXdDbGFzcztcblxuICAgICAgICAvLyBBIHNwZWNpYWwgY2xhc3MgZGVmaW5lZCBmb3IgdGhpcyBtb2RlbCBpbiB0aGUgY29ycmVzcG9uZGluZyBuYW1lc3BhY2UuXG4gICAgICAgIC8vIGUuZy4gam9pbnQuc2hhcGVzLmJhc2ljLlJlY3Qgc2VhcmNoZXMgZm9yIGpvaW50LnNoYXBlcy5iYXNpYy5SZWN0Vmlld1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gb3B0aW9ucy5jZWxsVmlld05hbWVzcGFjZTtcbiAgICAgICAgdmFyIHR5cGUgPSBjZWxsLmdldCgndHlwZScpICsgJ1ZpZXcnO1xuICAgICAgICB2YXIgbmFtZXNwYWNlVmlld0NsYXNzID0gZ2V0QnlQYXRoKG5hbWVzcGFjZSwgdHlwZSwgJy4nKTtcblxuICAgICAgICBpZiAoY2VsbC5pc0xpbmsoKSkge1xuICAgICAgICAgICAgb3B0aW9uYWxWaWV3Q2xhc3MgPSBvcHRpb25zLmxpbmtWaWV3O1xuICAgICAgICAgICAgZGVmYXVsdFZpZXdDbGFzcyA9IExpbmtWaWV3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9uYWxWaWV3Q2xhc3MgPSBvcHRpb25zLmVsZW1lbnRWaWV3O1xuICAgICAgICAgICAgZGVmYXVsdFZpZXdDbGFzcyA9IEVsZW1lbnRWaWV3O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYSkgdGhlIHBhcGVyIG9wdGlvbnMgdmlldyBpcyBhIGNsYXNzIChkZXByZWNhdGVkKVxuICAgICAgICAvLyAgMS4gc2VhcmNoIHRoZSBuYW1lc3BhY2UgZm9yIGEgdmlld1xuICAgICAgICAvLyAgMi4gaWYgbm8gdmlldyB3YXMgZm91bmQsIHVzZSB2aWV3IGZyb20gdGhlIHBhcGVyIG9wdGlvbnNcbiAgICAgICAgLy8gYikgdGhlIHBhcGVyIG9wdGlvbnMgdmlldyBpcyBhIGZ1bmN0aW9uXG4gICAgICAgIC8vICAxLiBjYWxsIHRoZSBmdW5jdGlvbiBmcm9tIHRoZSBwYXBlciBvcHRpb25zXG4gICAgICAgIC8vICAyLiBpZiBubyB2aWV3IHdhcyByZXR1cm4sIHNlYXJjaCB0aGUgbmFtZXNwYWNlIGZvciBhIHZpZXdcbiAgICAgICAgLy8gIDMuIGlmIG5vIHZpZXcgd2FzIGZvdW5kLCB1c2UgdGhlIGRlZmF1bHRcbiAgICAgICAgdmFyIFZpZXdDbGFzcyA9IChvcHRpb25hbFZpZXdDbGFzcy5wcm90b3R5cGUgaW5zdGFuY2VvZiBCYWNrYm9uZS5WaWV3KVxuICAgICAgICAgICAgPyBuYW1lc3BhY2VWaWV3Q2xhc3MgfHwgb3B0aW9uYWxWaWV3Q2xhc3NcbiAgICAgICAgICAgIDogb3B0aW9uYWxWaWV3Q2xhc3MuY2FsbCh0aGlzLCBjZWxsKSB8fCBuYW1lc3BhY2VWaWV3Q2xhc3MgfHwgZGVmYXVsdFZpZXdDbGFzcztcblxuICAgICAgICByZXR1cm4gbmV3IFZpZXdDbGFzcyh7XG4gICAgICAgICAgICBtb2RlbDogY2VsbCxcbiAgICAgICAgICAgIGludGVyYWN0aXZlOiBvcHRpb25zLmludGVyYWN0aXZlLFxuICAgICAgICAgICAgbGFiZWxzTGF5ZXI6IG9wdGlvbnMubGFiZWxzTGF5ZXIgPT09IHRydWUgPyBMYXllcnNOYW1lcy5MQUJFTFMgOiBvcHRpb25zLmxhYmVsc0xheWVyXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW1vdmVWaWV3OiBmdW5jdGlvbihjZWxsKSB7XG5cbiAgICAgICAgY29uc3QgeyBpZCB9ID0gY2VsbDtcbiAgICAgICAgY29uc3QgeyBfdmlld3MsIF91cGRhdGVzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2aWV3ID0gX3ZpZXdzW2lkXTtcbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIHZhciB7IGNpZCB9ID0gdmlldztcbiAgICAgICAgICAgIGNvbnN0IHsgbW91bnRlZCwgdW5tb3VudGVkIH0gPSBfdXBkYXRlcztcbiAgICAgICAgICAgIHZpZXcucmVtb3ZlKCk7XG4gICAgICAgICAgICBkZWxldGUgX3ZpZXdzW2lkXTtcbiAgICAgICAgICAgIGRlbGV0ZSBtb3VudGVkW2NpZF07XG4gICAgICAgICAgICBkZWxldGUgdW5tb3VudGVkW2NpZF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfSxcblxuICAgIHJlbmRlclZpZXc6IGZ1bmN0aW9uKGNlbGwsIG9wdCkge1xuXG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IGNlbGw7XG4gICAgICAgIGNvbnN0IHZpZXdzID0gdGhpcy5fdmlld3M7XG4gICAgICAgIGxldCB2aWV3LCBmbGFnO1xuICAgICAgICBsZXQgY3JlYXRlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGlkIGluIHZpZXdzKSB7XG4gICAgICAgICAgICB2aWV3ID0gdmlld3NbaWRdO1xuICAgICAgICAgICAgaWYgKHZpZXcubW9kZWwgPT09IGNlbGwpIHtcbiAgICAgICAgICAgICAgICBmbGFnID0gdmlldy5GTEFHX0lOU0VSVDtcbiAgICAgICAgICAgICAgICBjcmVhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHZpZXcgZm9yIHRoaXMgYGlkYCBhbHJlYWR5IGV4aXN0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBjZWxsIGlzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCB3aXRoIGlkZW50aWNhbCBpZFxuICAgICAgICAgICAgICAgIC8vIFdlIHNpbXBseSByZW1vdmUgdGhlIGV4aXN0aW5nIHZpZXcgYW5kIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVZpZXcoY2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNyZWF0ZSkge1xuICAgICAgICAgICAgdmlldyA9IHZpZXdzW2lkXSA9IHRoaXMuY3JlYXRlVmlld0Zvck1vZGVsKGNlbGwpO1xuICAgICAgICAgICAgdmlldy5wYXBlciA9IHRoaXM7XG4gICAgICAgICAgICBmbGFnID0gdGhpcy5yZWdpc3RlclVubW91bnRlZFZpZXcodmlldykgfCB0aGlzLkZMQUdfSU5JVCB8IHZpZXcuZ2V0RmxhZyhyZXN1bHQodmlldywgJ2luaXRGbGFnJykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdFZpZXdVcGRhdGUodmlldywgZmxhZywgdmlldy5VUERBVEVfUFJJT1JJVFksIG9wdCk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH0sXG5cbiAgICBvbkltYWdlRHJhZ1N0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gcHJldmVudCBpbWFnZSBkcmFnZ2luZyBpbiBGaXJlZm94IHRoYXQgd29ya3MuXG4gICAgICAgIC8vIFNldHRpbmcgLW1vei11c2VyLXNlbGVjdDogbm9uZSwgZHJhZ2dhYmxlPVwiZmFsc2VcIiBhdHRyaWJ1dGUgb3IgdXNlci1kcmFnOiBub25lIGRpZG4ndCBoZWxwLlxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgcmVzZXRWaWV3czogZnVuY3Rpb24oY2VsbHMsIG9wdCkge1xuICAgICAgICBvcHQgfHwgKG9wdCA9IHt9KTtcbiAgICAgICAgY2VsbHMgfHwgKGNlbGxzID0gW10pO1xuICAgICAgICB0aGlzLl9yZXNldFVwZGF0ZXMoKTtcbiAgICAgICAgLy8gY2xlYXJpbmcgdmlld3MgcmVtb3ZlcyBhbnkgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMucmVtb3ZlVmlld3MoKTtcbiAgICAgICAgLy8gQWxsb3dzIHRvIHVuZnJlZXplIG5vcm1hbGx5IHdoaWxlIGluIHRoZSBpZGxlIHN0YXRlIHVzaW5nIGF1dG9GcmVlemUgb3B0aW9uXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMub3B0aW9ucy5hdXRvRnJlZXplID8gbnVsbCA6ICdyZXNldCc7XG4gICAgICAgIHRoaXMuZnJlZXplKHsga2V5IH0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGNlbGxzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJWaWV3KGNlbGxzW2ldLCBvcHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5mcmVlemUoeyBrZXkgfSk7XG4gICAgICAgIHRoaXMuc29ydFZpZXdzKCk7XG4gICAgfSxcblxuICAgIHJlbW92ZVZpZXdzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpbnZva2UodGhpcy5fdmlld3MsICdyZW1vdmUnKTtcblxuICAgICAgICB0aGlzLl92aWV3cyA9IHt9O1xuICAgIH0sXG5cbiAgICBzb3J0Vmlld3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmICghdGhpcy5pc0V4YWN0U29ydGluZygpKSB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4oKSkge1xuICAgICAgICAgICAgLy8gc29ydCB2aWV3cyBvbmNlIHVuZnJvemVuXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVzLnNvcnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ydFZpZXdzRXhhY3QoKTtcbiAgICB9LFxuXG4gICAgc29ydFZpZXdzRXhhY3Q6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8vIFJ1biBpbnNlcnRpb24gc29ydCBhbGdvcml0aG0gaW4gb3JkZXIgdG8gZWZmaWNpZW50bHkgc29ydCBET00gZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZWlyXG4gICAgICAgIC8vIGFzc29jaWF0ZWQgbW9kZWwgYHpgIGF0dHJpYnV0ZS5cblxuICAgICAgICB2YXIgJGNlbGxzID0gJCh0aGlzLmNlbGxzKS5jaGlsZHJlbignW21vZGVsLWlkXScpO1xuICAgICAgICB2YXIgY2VsbHMgPSB0aGlzLm1vZGVsLmdldCgnY2VsbHMnKTtcblxuICAgICAgICBzb3J0RWxlbWVudHMoJGNlbGxzLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICB2YXIgY2VsbEEgPSBjZWxscy5nZXQoYS5nZXRBdHRyaWJ1dGUoJ21vZGVsLWlkJykpO1xuICAgICAgICAgICAgdmFyIGNlbGxCID0gY2VsbHMuZ2V0KGIuZ2V0QXR0cmlidXRlKCdtb2RlbC1pZCcpKTtcbiAgICAgICAgICAgIHZhciB6QSA9IGNlbGxBLmF0dHJpYnV0ZXMueiB8fCAwO1xuICAgICAgICAgICAgdmFyIHpCID0gY2VsbEIuYXR0cmlidXRlcy56IHx8IDA7XG4gICAgICAgICAgICByZXR1cm4gKHpBID09PSB6QikgPyAwIDogKHpBIDwgekIpID8gLTEgOiAxO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgaW5zZXJ0VmlldzogZnVuY3Rpb24odmlldywgaXNJbml0aWFsSW5zZXJ0KSB7XG4gICAgICAgIGNvbnN0IGxheWVyVmlldyA9IHRoaXMuZ2V0TGF5ZXJWaWV3KExheWVyc05hbWVzLkNFTExTKTtcbiAgICAgICAgY29uc3QgeyBlbCwgbW9kZWwgfSA9IHZpZXc7XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnNvcnRpbmcpIHtcbiAgICAgICAgICAgIGNhc2Ugc29ydGluZ1R5cGVzLkFQUFJPWDpcbiAgICAgICAgICAgICAgICBsYXllclZpZXcuaW5zZXJ0U29ydGVkTm9kZShlbCwgbW9kZWwuZ2V0KCd6JykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb3J0aW5nVHlwZXMuRVhBQ1Q6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGxheWVyVmlldy5pbnNlcnROb2RlKGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2aWV3Lm9uTW91bnQoaXNJbml0aWFsSW5zZXJ0KTtcbiAgICB9LFxuXG4gICAgZGV0YWNoVmlldyh2aWV3KSB7XG4gICAgICAgIHZpZXcudW5tb3VudCgpO1xuICAgICAgICB2aWV3Lm9uRGV0YWNoKCk7XG4gICAgfSxcblxuICAgIHNjYWxlOiBmdW5jdGlvbihzeCwgc3ksIG94LCBveSkge1xuXG4gICAgICAgIC8vIGdldHRlclxuICAgICAgICBpZiAoc3ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFYubWF0cml4VG9TY2FsZSh0aGlzLm1hdHJpeCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldHRlclxuICAgICAgICBpZiAoc3kgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3kgPSBzeDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3ggPSAwO1xuICAgICAgICAgICAgb3kgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlKCk7XG5cbiAgICAgICAgaWYgKG94IHx8IG95IHx8IHRyYW5zbGF0ZS50eCB8fCB0cmFuc2xhdGUudHkpIHtcbiAgICAgICAgICAgIHZhciBuZXdUeCA9IHRyYW5zbGF0ZS50eCAtIG94ICogKHN4IC0gMSk7XG4gICAgICAgICAgICB2YXIgbmV3VHkgPSB0cmFuc2xhdGUudHkgLSBveSAqIChzeSAtIDEpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUobmV3VHgsIG5ld1R5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN4ID0gTWF0aC5tYXgoc3ggfHwgMCwgdGhpcy5NSU5fU0NBTEUpO1xuICAgICAgICBzeSA9IE1hdGgubWF4KHN5IHx8IDAsIHRoaXMuTUlOX1NDQUxFKTtcblxuICAgICAgICB2YXIgY3RtID0gdGhpcy5tYXRyaXgoKTtcbiAgICAgICAgY3RtLmEgPSBzeDtcbiAgICAgICAgY3RtLmQgPSBzeTtcblxuICAgICAgICB0aGlzLm1hdHJpeChjdG0pO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcignc2NhbGUnLCBzeCwgc3ksIG94LCBveSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEV4cGVyaW1lbnRhbCAtIGRvIG5vdCB1c2UgaW4gcHJvZHVjdGlvbi5cbiAgICByb3RhdGU6IGZ1bmN0aW9uKGFuZ2xlLCBjeCwgY3kpIHtcblxuICAgICAgICAvLyBnZXR0ZXJcbiAgICAgICAgaWYgKGFuZ2xlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBWLm1hdHJpeFRvUm90YXRlKHRoaXMubWF0cml4KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0dGVyXG5cbiAgICAgICAgLy8gSWYgdGhlIG9yaWdpbiBpcyBub3Qgc2V0IGV4cGxpY2l0ZWx5LCByb3RhdGUgYXJvdW5kIHRoZSBjZW50ZXIuIE5vdGUgdGhhdFxuICAgICAgICAvLyB3ZSBtdXN0IHVzZSB0aGUgcGxhaW4gYm91bmRpbmcgYm94IChgdGhpcy5lbC5nZXRCQm94KClgIGluc3RlYWQgb2YgdGhlIG9uZSB0aGF0IGdpdmVzIHVzXG4gICAgICAgIC8vIHRoZSByZWFsIGJvdW5kaW5nIGJveCAoYGJib3goKWApIGluY2x1ZGluZyB0cmFuc2Zvcm1hdGlvbnMpLlxuICAgICAgICBpZiAoY3ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGJib3ggPSB0aGlzLmNlbGxzLmdldEJCb3goKTtcbiAgICAgICAgICAgIGN4ID0gYmJveC53aWR0aCAvIDI7XG4gICAgICAgICAgICBjeSA9IGJib3guaGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdG0gPSB0aGlzLm1hdHJpeCgpLnRyYW5zbGF0ZShjeCwgY3kpLnJvdGF0ZShhbmdsZSkudHJhbnNsYXRlKC1jeCwgLWN5KTtcbiAgICAgICAgdGhpcy5tYXRyaXgoY3RtKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbih0eCwgdHkpIHtcblxuICAgICAgICAvLyBnZXR0ZXJcbiAgICAgICAgaWYgKHR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBWLm1hdHJpeFRvVHJhbnNsYXRlKHRoaXMubWF0cml4KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IG9yaWdpbiwgZHJhd0dyaWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgLy8gc2V0dGVyXG4gICAgICAgIHR4IHx8ICh0eCA9IDApO1xuICAgICAgICB0eSB8fCAodHkgPSAwKTtcblxuICAgICAgICBjb25zdCBjdG0gPSB0aGlzLm1hdHJpeCgpO1xuICAgICAgICBpZiAoY3RtLmUgPT09IHR4ICYmIGN0bS5mID09PSB0eSkgcmV0dXJuIHRoaXM7XG4gICAgICAgIGN0bS5lID0gdHg7XG4gICAgICAgIGN0bS5mID0gdHk7XG5cbiAgICAgICAgdGhpcy5tYXRyaXgoY3RtKTtcblxuICAgICAgICBjb25zdCB7IHR4OiBveCwgdHk6IG95IH0gPSB0aGlzLnRyYW5zbGF0ZSgpO1xuICAgICAgICBvcmlnaW4ueCA9IG94O1xuICAgICAgICBvcmlnaW4ueSA9IG95O1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcigndHJhbnNsYXRlJywgb3gsIG95KTtcblxuICAgICAgICBpZiAoZHJhd0dyaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0dyaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBGaW5kIHRoZSBmaXJzdCB2aWV3IGNsaW1iaW5nIHVwIHRoZSBET00gdHJlZSBzdGFydGluZyBhdCBlbGVtZW50IGBlbGAuIE5vdGUgdGhhdCBgZWxgIGNhbiBhbHNvXG4gICAgLy8gYmUgYSBzZWxlY3RvciBvciBhIGpRdWVyeSBvYmplY3QuXG4gICAgZmluZFZpZXc6IGZ1bmN0aW9uKCRlbCkge1xuXG4gICAgICAgIHZhciBlbCA9IGlzU3RyaW5nKCRlbClcbiAgICAgICAgICAgID8gdGhpcy5jZWxscy5xdWVyeVNlbGVjdG9yKCRlbClcbiAgICAgICAgICAgIDogJGVsIGluc3RhbmNlb2YgJCA/ICRlbFswXSA6ICRlbDtcblxuICAgICAgICB2YXIgaWQgPSB0aGlzLmZpbmRBdHRyaWJ1dGUoJ21vZGVsLWlkJywgZWwpO1xuICAgICAgICBpZiAoaWQpIHJldHVybiB0aGlzLl92aWV3c1tpZF07XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgLy8gRmluZCBhIHZpZXcgZm9yIGEgbW9kZWwgYGNlbGxgLiBgY2VsbGAgY2FuIGFsc28gYmUgYSBzdHJpbmcgb3IgbnVtYmVyIHJlcHJlc2VudGluZyBhIG1vZGVsIGBpZGAuXG4gICAgZmluZFZpZXdCeU1vZGVsOiBmdW5jdGlvbihjZWxsKSB7XG5cbiAgICAgICAgdmFyIGlkID0gKGlzU3RyaW5nKGNlbGwpIHx8IGlzTnVtYmVyKGNlbGwpKSA/IGNlbGwgOiAoY2VsbCAmJiBjZWxsLmlkKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fdmlld3NbaWRdO1xuICAgIH0sXG5cbiAgICAvLyBGaW5kIGFsbCB2aWV3cyBhdCBnaXZlbiBwb2ludFxuICAgIGZpbmRWaWV3c0Zyb21Qb2ludDogZnVuY3Rpb24ocCkge1xuXG4gICAgICAgIHAgPSBuZXcgUG9pbnQocCk7XG5cbiAgICAgICAgdmFyIHZpZXdzID0gdGhpcy5tb2RlbC5nZXRFbGVtZW50cygpLm1hcCh0aGlzLmZpbmRWaWV3QnlNb2RlbCwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIHZpZXdzLmZpbHRlcihmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldyAmJiB2aWV3LnZlbC5nZXRCQm94KHsgdGFyZ2V0OiB0aGlzLmNlbGxzIH0pLmNvbnRhaW5zUG9pbnQocCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvLyBGaW5kIGFsbCB2aWV3cyBpbiBnaXZlbiBhcmVhXG4gICAgZmluZFZpZXdzSW5BcmVhOiBmdW5jdGlvbihyZWN0LCBvcHQpIHtcblxuICAgICAgICBvcHQgPSBkZWZhdWx0cyhvcHQgfHwge30sIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgICAgICAgcmVjdCA9IG5ldyBSZWN0KHJlY3QpO1xuXG4gICAgICAgIHZhciB2aWV3cyA9IHRoaXMubW9kZWwuZ2V0RWxlbWVudHMoKS5tYXAodGhpcy5maW5kVmlld0J5TW9kZWwsIHRoaXMpO1xuICAgICAgICB2YXIgbWV0aG9kID0gb3B0LnN0cmljdCA/ICdjb250YWluc1JlY3QnIDogJ2ludGVyc2VjdCc7XG5cbiAgICAgICAgcmV0dXJuIHZpZXdzLmZpbHRlcihmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldyAmJiByZWN0W21ldGhvZF0odmlldy52ZWwuZ2V0QkJveCh7IHRhcmdldDogdGhpcy5jZWxscyB9KSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG5cbiAgICByZW1vdmVUb29sczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hUb29sc0V2ZW50KCdyZW1vdmUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGhpZGVUb29sczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hUb29sc0V2ZW50KCdoaWRlJyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBzaG93VG9vbHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoVG9vbHNFdmVudCgnc2hvdycpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hUb29sc0V2ZW50OiBmdW5jdGlvbihldmVudCwgLi4uYXJncykge1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykgcmV0dXJuO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Rvb2xzOmV2ZW50JywgZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH0sXG5cblxuICAgIGdldE1vZGVsQnlJZDogZnVuY3Rpb24oaWQpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5nZXRDZWxsKGlkKTtcbiAgICB9LFxuXG4gICAgc25hcFRvR3JpZDogZnVuY3Rpb24oeCwgeSkge1xuXG4gICAgICAgIC8vIENvbnZlcnQgZ2xvYmFsIGNvb3JkaW5hdGVzIHRvIHRoZSBsb2NhbCBvbmVzIG9mIHRoZSBgdmlld3BvcnRgLiBPdGhlcndpc2UsXG4gICAgICAgIC8vIGltcHJvcGVyIHRyYW5zZm9ybWF0aW9uIHdvdWxkIGJlIGFwcGxpZWQgd2hlbiB0aGUgdmlld3BvcnQgZ2V0cyB0cmFuc2Zvcm1lZCAoc2NhbGVkL3JvdGF0ZWQpLlxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRUb0xvY2FsUG9pbnQoeCwgeSkuc25hcFRvR3JpZCh0aGlzLm9wdGlvbnMuZ3JpZFNpemUpO1xuICAgIH0sXG5cbiAgICBsb2NhbFRvUGFwZXJQb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICAvLyBhbGxvdyBgeGAgdG8gYmUgYSBwb2ludCBhbmQgYHlgIHVuZGVmaW5lZFxuICAgICAgICB2YXIgbG9jYWxQb2ludCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICAgICAgdmFyIHBhcGVyUG9pbnQgPSBWLnRyYW5zZm9ybVBvaW50KGxvY2FsUG9pbnQsIHRoaXMubWF0cml4KCkpO1xuICAgICAgICByZXR1cm4gcGFwZXJQb2ludDtcbiAgICB9LFxuXG4gICAgbG9jYWxUb1BhcGVyUmVjdDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAvLyBhbGxvdyBgeGAgdG8gYmUgYSByZWN0YW5nbGUgYW5kIHJlc3QgYXJndW1lbnRzIHVuZGVmaW5lZFxuICAgICAgICB2YXIgbG9jYWxSZWN0ID0gbmV3IFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHZhciBwYXBlclJlY3QgPSBWLnRyYW5zZm9ybVJlY3QobG9jYWxSZWN0LCB0aGlzLm1hdHJpeCgpKTtcbiAgICAgICAgcmV0dXJuIHBhcGVyUmVjdDtcbiAgICB9LFxuXG4gICAgcGFwZXJUb0xvY2FsUG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgLy8gYWxsb3cgYHhgIHRvIGJlIGEgcG9pbnQgYW5kIGB5YCB1bmRlZmluZWRcbiAgICAgICAgdmFyIHBhcGVyUG9pbnQgPSBuZXcgUG9pbnQoeCwgeSk7XG4gICAgICAgIHZhciBsb2NhbFBvaW50ID0gVi50cmFuc2Zvcm1Qb2ludChwYXBlclBvaW50LCB0aGlzLm1hdHJpeCgpLmludmVyc2UoKSk7XG4gICAgICAgIHJldHVybiBsb2NhbFBvaW50O1xuICAgIH0sXG5cbiAgICBwYXBlclRvTG9jYWxSZWN0OiBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIC8vIGFsbG93IGB4YCB0byBiZSBhIHJlY3RhbmdsZSBhbmQgcmVzdCBhcmd1bWVudHMgdW5kZWZpbmVkXG4gICAgICAgIHZhciBwYXBlclJlY3QgPSBuZXcgUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdmFyIGxvY2FsUmVjdCA9IFYudHJhbnNmb3JtUmVjdChwYXBlclJlY3QsIHRoaXMubWF0cml4KCkuaW52ZXJzZSgpKTtcbiAgICAgICAgcmV0dXJuIGxvY2FsUmVjdDtcbiAgICB9LFxuXG4gICAgbG9jYWxUb0NsaWVudFBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIC8vIGFsbG93IGB4YCB0byBiZSBhIHBvaW50IGFuZCBgeWAgdW5kZWZpbmVkXG4gICAgICAgIHZhciBsb2NhbFBvaW50ID0gbmV3IFBvaW50KHgsIHkpO1xuICAgICAgICB2YXIgY2xpZW50UG9pbnQgPSBWLnRyYW5zZm9ybVBvaW50KGxvY2FsUG9pbnQsIHRoaXMuY2xpZW50TWF0cml4KCkpO1xuICAgICAgICByZXR1cm4gY2xpZW50UG9pbnQ7XG4gICAgfSxcblxuICAgIGxvY2FsVG9DbGllbnRSZWN0OiBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIC8vIGFsbG93IGB4YCB0byBiZSBhIHBvaW50IGFuZCBgeWAgdW5kZWZpbmVkXG4gICAgICAgIHZhciBsb2NhbFJlY3QgPSBuZXcgUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdmFyIGNsaWVudFJlY3QgPSBWLnRyYW5zZm9ybVJlY3QobG9jYWxSZWN0LCB0aGlzLmNsaWVudE1hdHJpeCgpKTtcbiAgICAgICAgcmV0dXJuIGNsaWVudFJlY3Q7XG4gICAgfSxcblxuICAgIC8vIFRyYW5zZm9ybSBjbGllbnQgY29vcmRpbmF0ZXMgdG8gdGhlIHBhcGVyIGxvY2FsIGNvb3JkaW5hdGVzLlxuICAgIC8vIFVzZWZ1bCB3aGVuIHlvdSBoYXZlIGEgbW91c2UgZXZlbnQgb2JqZWN0IGFuZCB5b3UnZCBsaWtlIHRvIGdldCBjb29yZGluYXRlc1xuICAgIC8vIGluc2lkZSB0aGUgcGFwZXIgdGhhdCBjb3JyZXNwb25kIHRvIGBldnQuY2xpZW50WGAgYW5kIGBldnQuY2xpZW50WWAgcG9pbnQuXG4gICAgLy8gRXhhbXBsZTogdmFyIGxvY2FsUG9pbnQgPSBwYXBlci5jbGllbnRUb0xvY2FsUG9pbnQoeyB4OiBldnQuY2xpZW50WCwgeTogZXZ0LmNsaWVudFkgfSk7XG4gICAgY2xpZW50VG9Mb2NhbFBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIC8vIGFsbG93IGB4YCB0byBiZSBhIHBvaW50IGFuZCBgeWAgdW5kZWZpbmVkXG4gICAgICAgIHZhciBjbGllbnRQb2ludCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICAgICAgdmFyIGxvY2FsUG9pbnQgPSBWLnRyYW5zZm9ybVBvaW50KGNsaWVudFBvaW50LCB0aGlzLmNsaWVudE1hdHJpeCgpLmludmVyc2UoKSk7XG4gICAgICAgIHJldHVybiBsb2NhbFBvaW50O1xuICAgIH0sXG5cbiAgICBjbGllbnRUb0xvY2FsUmVjdDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAvLyBhbGxvdyBgeGAgdG8gYmUgYSBwb2ludCBhbmQgYHlgIHVuZGVmaW5lZFxuICAgICAgICB2YXIgY2xpZW50UmVjdCA9IG5ldyBSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB2YXIgbG9jYWxSZWN0ID0gVi50cmFuc2Zvcm1SZWN0KGNsaWVudFJlY3QsIHRoaXMuY2xpZW50TWF0cml4KCkuaW52ZXJzZSgpKTtcbiAgICAgICAgcmV0dXJuIGxvY2FsUmVjdDtcbiAgICB9LFxuXG4gICAgbG9jYWxUb1BhZ2VQb2ludDogZnVuY3Rpb24oeCwgeSkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9QYXBlclBvaW50KHgsIHkpLm9mZnNldCh0aGlzLnBhZ2VPZmZzZXQoKSk7XG4gICAgfSxcblxuICAgIGxvY2FsVG9QYWdlUmVjdDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9QYXBlclJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkub2Zmc2V0KHRoaXMucGFnZU9mZnNldCgpKTtcbiAgICB9LFxuXG4gICAgcGFnZVRvTG9jYWxQb2ludDogZnVuY3Rpb24oeCwgeSkge1xuXG4gICAgICAgIHZhciBwYWdlUG9pbnQgPSBuZXcgUG9pbnQoeCwgeSk7XG4gICAgICAgIHZhciBwYXBlclBvaW50ID0gcGFnZVBvaW50LmRpZmZlcmVuY2UodGhpcy5wYWdlT2Zmc2V0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXBlclRvTG9jYWxQb2ludChwYXBlclBvaW50KTtcbiAgICB9LFxuXG4gICAgcGFnZVRvTG9jYWxSZWN0OiBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgICAgICAgdmFyIHBhZ2VPZmZzZXQgPSB0aGlzLnBhZ2VPZmZzZXQoKTtcbiAgICAgICAgdmFyIHBhcGVyUmVjdCA9IG5ldyBSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBwYXBlclJlY3QueCAtPSBwYWdlT2Zmc2V0Lng7XG4gICAgICAgIHBhcGVyUmVjdC55IC09IHBhZ2VPZmZzZXQueTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFwZXJUb0xvY2FsUmVjdChwYXBlclJlY3QpO1xuICAgIH0sXG5cbiAgICBjbGllbnRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBjbGllbnRSZWN0ID0gdGhpcy5zdmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQoY2xpZW50UmVjdC5sZWZ0LCBjbGllbnRSZWN0LnRvcCk7XG4gICAgfSxcblxuICAgIHBhZ2VPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudE9mZnNldCgpLm9mZnNldCh3aW5kb3cuc2Nyb2xsWCwgd2luZG93LnNjcm9sbFkpO1xuICAgIH0sXG5cbiAgICBsaW5rQWxsb3dlZDogZnVuY3Rpb24obGlua1ZpZXcpIHtcblxuICAgICAgICBpZiAoIShsaW5rVmlldyBpbnN0YW5jZW9mIExpbmtWaWV3KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYSBsaW5rVmlldy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsaW5rID0gbGlua1ZpZXcubW9kZWw7XG4gICAgICAgIHZhciBwYXBlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciBncmFwaCA9IHRoaXMubW9kZWw7XG4gICAgICAgIHZhciBucyA9IGdyYXBoLmNvbnN0cnVjdG9yLnZhbGlkYXRpb25zO1xuXG4gICAgICAgIGlmICghcGFwZXJPcHRpb25zLm11bHRpTGlua3MpIHtcbiAgICAgICAgICAgIGlmICghbnMubXVsdGlMaW5rcy5jYWxsKHRoaXMsIGdyYXBoLCBsaW5rKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXBlck9wdGlvbnMubGlua1Bpbm5pbmcpIHtcbiAgICAgICAgICAgIC8vIExpbmsgcGlubmluZyBpcyBub3QgYWxsb3dlZCBhbmQgdGhlIGxpbmsgaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgaWYgKCFucy5saW5rUGlubmluZy5jYWxsKHRoaXMsIGdyYXBoLCBsaW5rKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXBlck9wdGlvbnMuYWxsb3dMaW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoIXBhcGVyT3B0aW9ucy5hbGxvd0xpbmsuY2FsbCh0aGlzLCBsaW5rVmlldywgdGhpcykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBnZXREZWZhdWx0TGluazogZnVuY3Rpb24oY2VsbFZpZXcsIG1hZ25ldCkge1xuXG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5kZWZhdWx0TGluaylcbiAgICAgICAgLy8gZGVmYXVsdCBsaW5rIGlzIGEgZnVuY3Rpb24gcHJvZHVjaW5nIGxpbmsgbW9kZWxcbiAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLmRlZmF1bHRMaW5rLmNhbGwodGhpcywgY2VsbFZpZXcsIG1hZ25ldClcbiAgICAgICAgLy8gZGVmYXVsdCBsaW5rIGlzIHRoZSBCYWNrYm9uZSBtb2RlbFxuICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMuZGVmYXVsdExpbmsuY2xvbmUoKTtcbiAgICB9LFxuXG4gICAgLy8gQ2VsbCBoaWdobGlnaHRpbmcuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICByZXNvbHZlSGlnaGxpZ2h0ZXI6IGZ1bmN0aW9uKG9wdCA9IHt9KSB7XG5cbiAgICAgICAgbGV0IHsgaGlnaGxpZ2h0ZXI6IGhpZ2hsaWdodGVyRGVmLCB0eXBlIH0gPSBvcHQ7XG4gICAgICAgIGNvbnN0IHsgaGlnaGxpZ2h0aW5nLGhpZ2hsaWdodGVyTmFtZXNwYWNlICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAgICBFeHBlY3Rpbmcgb3B0LmhpZ2hsaWdodGVyIHRvIGhhdmUgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hpZ2hsaWdodGVyLW5hbWUnLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc29tZTogJ3ZhbHVlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKi9cbiAgICAgICAgaWYgKGhpZ2hsaWdodGVyRGVmID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgLy8gSXMgaGlnaGxpZ2h0aW5nIGRpc2FibGVkP1xuICAgICAgICAgICAgaWYgKCFoaWdobGlnaHRpbmcpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBidWlsdC1pbiB0eXBlc1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRlckRlZiA9IGhpZ2hsaWdodGluZ1t0eXBlXTtcbiAgICAgICAgICAgICAgICAvLyBJcyBhIHNwZWNpZmljIHR5cGUgaGlnaGxpZ2h0IGRpc2FibGVkP1xuICAgICAgICAgICAgICAgIGlmIChoaWdobGlnaHRlckRlZiA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaGlnaGxpZ2h0ZXJEZWYpIHtcbiAgICAgICAgICAgICAgICAvLyBUeXBlIG5vdCBkZWZpbmVkIHVzZSBkZWZhdWx0IGhpZ2hsaWdodFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVyRGVmID0gaGlnaGxpZ2h0aW5nWydkZWZhdWx0J107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIG9wdC5oaWdobGlnaHRlciBpcyBmYWxzeS5cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgdGhlIGNhc2UgdG8gbm90IGhpZ2hsaWdodCBjZWxsKHMpIGluIGNlcnRhaW4gY2FzZXMuXG4gICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byBOT1QgaGlnaGxpZ2h0IHdoZW4gZW1iZWRkaW5nIGVsZW1lbnRzXG4gICAgICAgIC8vIG9yIHVzZSBhIGN1c3RvbSBoaWdobGlnaHRlci5cbiAgICAgICAgaWYgKCFoaWdobGlnaHRlckRlZikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIEFsbG93IHNwZWNpZnlpbmcgYSBoaWdobGlnaHRlciBieSBuYW1lLlxuICAgICAgICBpZiAoaXNTdHJpbmcoaGlnaGxpZ2h0ZXJEZWYpKSB7XG4gICAgICAgICAgICBoaWdobGlnaHRlckRlZiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBoaWdobGlnaHRlckRlZlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBoaWdobGlnaHRlckRlZi5uYW1lO1xuICAgICAgICBjb25zdCBoaWdobGlnaHRlciA9IGhpZ2hsaWdodGVyTmFtZXNwYWNlW25hbWVdO1xuXG4gICAgICAgIC8vIEhpZ2hsaWdodGVyIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCFoaWdobGlnaHRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGhpZ2hsaWdodGVyIChcIicgKyBuYW1lICsgJ1wiKScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaGlnaGxpZ2h0ZXIuaGlnaGxpZ2h0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hpZ2hsaWdodGVyIChcIicgKyBuYW1lICsgJ1wiKSBpcyBtaXNzaW5nIHJlcXVpcmVkIGhpZ2hsaWdodCgpIG1ldGhvZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaGlnaGxpZ2h0ZXIudW5oaWdobGlnaHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSGlnaGxpZ2h0ZXIgKFwiJyArIG5hbWUgKyAnXCIpIGlzIG1pc3NpbmcgcmVxdWlyZWQgdW5oaWdobGlnaHQoKSBtZXRob2QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoaWdobGlnaHRlcixcbiAgICAgICAgICAgIG9wdGlvbnM6IGhpZ2hsaWdodGVyRGVmLm9wdGlvbnMgfHwge30sXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG9uQ2VsbEhpZ2hsaWdodDogZnVuY3Rpb24oY2VsbFZpZXcsIG1hZ25ldEVsLCBvcHQpIHtcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0ZXJEZXNjcmlwdG9yID0gdGhpcy5yZXNvbHZlSGlnaGxpZ2h0ZXIob3B0KTtcbiAgICAgICAgaWYgKCFoaWdobGlnaHRlckRlc2NyaXB0b3IpIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBoaWdobGlnaHRlciwgb3B0aW9ucyB9ID0gaGlnaGxpZ2h0ZXJEZXNjcmlwdG9yO1xuICAgICAgICBoaWdobGlnaHRlci5oaWdobGlnaHQoY2VsbFZpZXcsIG1hZ25ldEVsLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgb25DZWxsVW5oaWdobGlnaHQ6IGZ1bmN0aW9uKGNlbGxWaWV3LCBtYWduZXRFbCwgb3B0KSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodGVyRGVzY3JpcHRvciA9IHRoaXMucmVzb2x2ZUhpZ2hsaWdodGVyKG9wdCk7XG4gICAgICAgIGlmICghaGlnaGxpZ2h0ZXJEZXNjcmlwdG9yKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgaGlnaGxpZ2h0ZXIsIG9wdGlvbnMgfSA9IGhpZ2hsaWdodGVyRGVzY3JpcHRvcjtcbiAgICAgICAgaGlnaGxpZ2h0ZXIudW5oaWdobGlnaHQoY2VsbFZpZXcsIG1hZ25ldEVsLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLy8gSW50ZXJhY3Rpb24uXG4gICAgLy8gLS0tLS0tLS0tLS0tXG5cbiAgICBwb2ludGVyZGJsY2xpY2s6IGZ1bmN0aW9uKGV2dCkge1xuXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIC8vIG1hZ25ldHBvaW50ZXJkYmxjbGljayBjYW4gc3RvcCBwcm9wYWdhdGlvblxuXG4gICAgICAgIGV2dCA9IG5vcm1hbGl6ZUV2ZW50KGV2dCk7XG5cbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmZpbmRWaWV3KGV2dC50YXJnZXQpO1xuICAgICAgICBpZiAodGhpcy5ndWFyZChldnQsIHZpZXcpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGxvY2FsUG9pbnQgPSB0aGlzLnNuYXBUb0dyaWQoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTtcblxuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5wb2ludGVyZGJsY2xpY2soZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignYmxhbms6cG9pbnRlcmRibGNsaWNrJywgZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcG9pbnRlcmNsaWNrOiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICAvLyBtYWduZXRwb2ludGVyY2xpY2sgY2FuIHN0b3AgcHJvcGFnYXRpb25cblxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZXZlbnREYXRhKGV2dCk7XG4gICAgICAgIC8vIFRyaWdnZXIgZXZlbnQgb25seSBpZiBtb3VzZSBoYXMgbm90IG1vdmVkLlxuICAgICAgICBpZiAoZGF0YS5tb3VzZW1vdmVkIDw9IHRoaXMub3B0aW9ucy5jbGlja1RocmVzaG9sZCkge1xuXG4gICAgICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuXG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuZmluZFZpZXcoZXZ0LnRhcmdldCk7XG4gICAgICAgICAgICBpZiAodGhpcy5ndWFyZChldnQsIHZpZXcpKSByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG5cbiAgICAgICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICAgICAgdmlldy5wb2ludGVyY2xpY2soZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdibGFuazpwb2ludGVyY2xpY2snLCBldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb250ZXh0bWVudTogZnVuY3Rpb24oZXZ0KSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50Q29udGV4dE1lbnUpIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbnRleHRNZW51RmlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVGaXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZ0ID0gbm9ybWFsaXplRXZlbnQoZXZ0KTtcblxuICAgICAgICB0aGlzLmNvbnRleHRNZW51VHJpZ2dlcihldnQpO1xuICAgIH0sXG5cbiAgICBjb250ZXh0TWVudVRyaWdnZXI6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICB2YXIgdmlldyA9IHRoaXMuZmluZFZpZXcoZXZ0LnRhcmdldCk7XG4gICAgICAgIGlmICh0aGlzLmd1YXJkKGV2dCwgdmlldykpIHJldHVybjtcblxuICAgICAgICB2YXIgbG9jYWxQb2ludCA9IHRoaXMuc25hcFRvR3JpZChldnQuY2xpZW50WCwgZXZ0LmNsaWVudFkpO1xuXG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LmNvbnRleHRtZW51KGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JsYW5rOmNvbnRleHRtZW51JywgZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcG9pbnRlcmRvd246IGZ1bmN0aW9uKGV2dCkge1xuXG4gICAgICAgIGV2dCA9IG5vcm1hbGl6ZUV2ZW50KGV2dCk7XG5cbiAgICAgICAgY29uc3QgeyB0YXJnZXQsIGJ1dHRvbiB9ID0gZXZ0O1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5maW5kVmlldyh0YXJnZXQpO1xuICAgICAgICBjb25zdCBpc0NvbnRleHRNZW51ID0gKGJ1dHRvbiA9PT0gMik7XG5cbiAgICAgICAgaWYgKHZpZXcpIHtcblxuICAgICAgICAgICAgaWYgKCFpc0NvbnRleHRNZW51ICYmIHRoaXMuZ3VhcmQoZXZ0LCB2aWV3KSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCBpc1RhcmdldEZvcm1Ob2RlID0gdGhpcy5GT1JNX0NPTlRST0xfVEFHX05BTUVTLmluY2x1ZGVzKHRhcmdldC50YWdOYW1lKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdFZpZXdBY3Rpb24gJiYgIWlzVGFyZ2V0Rm9ybU5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGEgZm9ybSBlbGVtZW50LCB3ZSBkbyBub3Qgd2FudCB0byBwcmV2ZW50IHRoZSBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgd2Ugd2FudCB0byBiZSBhYmxlIHRvIHNlbGVjdCB0ZXh0IGluIGEgdGV4dCBpbnB1dCBvclxuICAgICAgICAgICAgICAgIC8vIHRvIGJlIGFibGUgdG8gY2xpY2sgb24gYSBjaGVja2JveC5cbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzVGFyZ2V0Rm9ybU5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGEgZm9ybSBlbGVtZW50LCB3ZSBkbyBub3Qgd2FudCB0byBzdGFydCBkcmFnZ2luZyB0aGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgd2Ugd2FudCB0byBiZSBhYmxlIHRvIHNlbGVjdCB0ZXh0IGJ5IGRyYWdnaW5nIHRoZSBtb3VzZS5cbiAgICAgICAgICAgICAgICB2aWV3LnByZXZlbnREZWZhdWx0SW50ZXJhY3Rpb24oZXZ0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3VzdG9tIGV2ZW50XG4gICAgICAgICAgICBjb25zdCBldmVudEV2dCA9IHRoaXMuY3VzdG9tRXZlbnRUcmlnZ2VyKGV2dCwgdmlldyk7XG4gICAgICAgICAgICBpZiAoZXZlbnRFdnQpIHtcbiAgICAgICAgICAgIC8vIGBvbmV2ZW50YCBjb3VsZCBoYXZlIHN0b3BwZWQgcHJvcGFnYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRFdnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgZXZ0LmRhdGEgPSBldmVudEV2dC5kYXRhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbGVtZW50IG1hZ25ldFxuICAgICAgICAgICAgY29uc3QgbWFnbmV0Tm9kZSA9IHRhcmdldC5jbG9zZXN0KCdbbWFnbmV0XScpO1xuICAgICAgICAgICAgaWYgKG1hZ25ldE5vZGUgJiYgdmlldy5lbCAhPT0gbWFnbmV0Tm9kZSAmJiB2aWV3LmVsLmNvbnRhaW5zKG1hZ25ldE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFnbmV0RXZ0ID0gbm9ybWFsaXplRXZlbnQoJC5FdmVudChldnQub3JpZ2luYWxFdmVudCwge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBldnQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgLy8gT3JpZ2luYWxseSB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIGF0dGFjaGVkIHRvIHRoZSBtYWduZXQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhcmdldDogbWFnbmV0Tm9kZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubWFnbmV0KG1hZ25ldEV2dCk7XG4gICAgICAgICAgICAgICAgaWYgKG1hZ25ldEV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYG9ubWFnbmV0YCBzdG9wcyBwcm9wYWdhdGlvbiB3aGVuIGBhZGRMaW5rRnJvbU1hZ25ldGAgaXMgYWxsb3dlZFxuICAgICAgICAgICAgICAgIGlmIChtYWduZXRFdnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBgbWFnbmV0OnBvaW50ZXJtb3ZlYCBhbmQgYG1hZ25ldDpwb2ludGVydXBgIGV2ZW50cyBtdXN0IGJlIGZpcmVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbnRleHRNZW51KSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVEcmFnRXZlbnRzKHZpZXcsIG1hZ25ldEV2dC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBldnQuZGF0YSA9IG1hZ25ldEV2dC5kYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQ29udGV4dE1lbnUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVGaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0bWVudUV2dCA9ICQuRXZlbnQoZXZ0Lm9yaWdpbmFsRXZlbnQsIHsgdHlwZTogJ2NvbnRleHRtZW51JywgZGF0YTogZXZ0LmRhdGEgfSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51VHJpZ2dlcihjb250ZXh0bWVudUV2dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG4gICAgICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgICAgIHZpZXcucG9pbnRlcmRvd24oZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHRCbGFua0FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdibGFuazpwb2ludGVyZG93bicsIGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlRHJhZ0V2ZW50cyh2aWV3LCBldnQuZGF0YSk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBwb2ludGVybW92ZTogZnVuY3Rpb24oZXZ0KSB7XG5cbiAgICAgICAgLy8gbW91c2UgbW92ZWQgY291bnRlclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZXZlbnREYXRhKGV2dCk7XG4gICAgICAgIGlmICghZGF0YS5tb3VzZW1vdmVkKSB7XG4gICAgICAgICAgICBkYXRhLm1vdXNlbW92ZWQgPSAwO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgZXZlbnRzIGxpa2UgYG1vdXNlZW50ZXJgIGFuZCBgbW91c2VsZWF2ZWAgYXJlXG4gICAgICAgICAgICAvLyBub3QgdHJpZ2dlcmVkIHdoaWxlIHRoZSB1c2VyIGlzIGRyYWdnaW5nIGEgY2VsbFZpZXcuXG4gICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgICAgICAgIC8vIE5vdGU6IHRoZSBldmVudHMgYXJlIHVuZGVsZWdhdGVkIGFmdGVyIHRoZSBmaXJzdCBgcG9pbnRlcm1vdmVgIGV2ZW50LlxuICAgICAgICAgICAgLy8gTm90IG9uIGBwb2ludGVyZG93bmAgdG8gbWFrZSBzdXJlIHRoYXQgYGRibHRhcGAgaXMgcmVjb2duaXplZC5cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb3VzZW1vdmVkID0gKytkYXRhLm1vdXNlbW92ZWQ7XG5cbiAgICAgICAgaWYgKG1vdXNlbW92ZWQgPD0gdGhpcy5vcHRpb25zLm1vdmVUaHJlc2hvbGQpIHJldHVybjtcblxuICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuXG4gICAgICAgIHZhciBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG5cbiAgICAgICAgdmFyIHZpZXcgPSBkYXRhLnNvdXJjZVZpZXc7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LnBvaW50ZXJtb3ZlKGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdibGFuazpwb2ludGVybW92ZScsIGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ldmVudERhdGEoZXZ0LCBkYXRhKTtcbiAgICB9LFxuXG4gICAgcG9pbnRlcnVwOiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICB0aGlzLnVuZGVsZWdhdGVEb2N1bWVudEV2ZW50cygpO1xuXG4gICAgICAgIHZhciBub3JtYWxpemVkRXZ0ID0gbm9ybWFsaXplRXZlbnQoZXZ0KTtcblxuICAgICAgICB2YXIgbG9jYWxQb2ludCA9IHRoaXMuc25hcFRvR3JpZChub3JtYWxpemVkRXZ0LmNsaWVudFgsIG5vcm1hbGl6ZWRFdnQuY2xpZW50WSk7XG5cbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmV2ZW50RGF0YShldnQpLnNvdXJjZVZpZXc7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LnBvaW50ZXJ1cChub3JtYWxpemVkRXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JsYW5rOnBvaW50ZXJ1cCcsIG5vcm1hbGl6ZWRFdnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbm9ybWFsaXplZEV2dC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJjbGljaygkLkV2ZW50KGV2dC5vcmlnaW5hbEV2ZW50LCB7IHR5cGU6ICdjbGljaycsIGRhdGE6IGV2dC5kYXRhIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICB9LFxuXG4gICAgbW91c2VvdmVyOiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuXG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5maW5kVmlldyhldnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKHRoaXMuZ3VhcmQoZXZ0LCB2aWV3KSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3Lm1vdXNlb3ZlcihldnQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbCA9PT0gZXZ0LnRhcmdldCkgcmV0dXJuOyAvLyBwcmV2ZW50IGJvcmRlciBvZiBwYXBlciBmcm9tIHRyaWdnZXJpbmcgdGhpc1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdibGFuazptb3VzZW92ZXInLCBldnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1vdXNlb3V0OiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuXG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5maW5kVmlldyhldnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKHRoaXMuZ3VhcmQoZXZ0LCB2aWV3KSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3Lm1vdXNlb3V0KGV2dCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsID09PSBldnQudGFyZ2V0KSByZXR1cm47IC8vIHByZXZlbnQgYm9yZGVyIG9mIHBhcGVyIGZyb20gdHJpZ2dlcmluZyB0aGlzXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JsYW5rOm1vdXNlb3V0JywgZXZ0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtb3VzZWVudGVyOiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRhcmdldCwgLy8gVGhlIEV2ZW50VGFyZ2V0IHRoZSBwb2ludGluZyBkZXZpY2UgZW50ZXJlZCB0b1xuICAgICAgICAgICAgcmVsYXRlZFRhcmdldCwgLy8gVGhlIEV2ZW50VGFyZ2V0IHRoZSBwb2ludGluZyBkZXZpY2UgZXhpdGVkIGZyb21cbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQgLy8gVGhlIEV2ZW50VGFyZ2V0IG9uIHdoaWNoIHRoZSBldmVudCBsaXN0ZW5lciB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICB9ID0gZXZ0O1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5maW5kVmlldyh0YXJnZXQpO1xuICAgICAgICBpZiAodGhpcy5ndWFyZChldnQsIHZpZXcpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHJlbGF0ZWRWaWV3ID0gdGhpcy5maW5kVmlldyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIGlmIChyZWxhdGVkVmlldyA9PT0gdmlldykge1xuICAgICAgICAgICAgICAgIC8vIE1vdXNlIGxlZnQgYSBjZWxsIHRvb2xcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aWV3Lm1vdXNlZW50ZXIoZXZ0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsLmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHBvaW50ZXIgcmVtYWlucyBpbnNpZGUgdGhlIHBhcGVyLlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsYXRlZFZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmV2ZW50IGRvdWJsZSBgbW91c2VlbnRlcmAgZXZlbnQgaWYgdGhlIGByZWxhdGVkVGFyZ2V0YCBpcyBvdXRzaWRlIHRoZSBwYXBlclxuICAgICAgICAvLyAobW91c2VlbnRlciBtZXRob2Qgd291bGQgYmUgZmlyZWQgdHdpY2UpXG4gICAgICAgIGlmIChjdXJyZW50VGFyZ2V0ID09PSB0aGlzLmVsKSB7XG4gICAgICAgICAgICAvLyBgcGFwZXJgIChtb3JlIGRlc2NyaXB0aXZlKSwgbm90IGBibGFua2BcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcigncGFwZXI6bW91c2VlbnRlcicsIGV2dCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oZXZ0KSB7XG5cbiAgICAgICAgZXZ0ID0gbm9ybWFsaXplRXZlbnQoZXZ0KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0YXJnZXQsIC8vIFRoZSBFdmVudFRhcmdldCB0aGUgcG9pbnRpbmcgZGV2aWNlIGV4aXRlZCBmcm9tXG4gICAgICAgICAgICByZWxhdGVkVGFyZ2V0LCAvLyBUaGUgRXZlbnRUYXJnZXQgdGhlIHBvaW50aW5nIGRldmljZSBlbnRlcmVkIHRvXG4gICAgICAgICAgICBjdXJyZW50VGFyZ2V0IC8vIFRoZSBFdmVudFRhcmdldCBvbiB3aGljaCB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgfSA9IGV2dDtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuZmluZFZpZXcodGFyZ2V0KTtcbiAgICAgICAgaWYgKHRoaXMuZ3VhcmQoZXZ0LCB2aWV3KSkgcmV0dXJuO1xuICAgICAgICBjb25zdCByZWxhdGVkVmlldyA9IHRoaXMuZmluZFZpZXcocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICBpZiAocmVsYXRlZFZpZXcgPT09IHZpZXcpIHtcbiAgICAgICAgICAgICAgICAvLyBNb3VzZSBlbnRlcmVkIGEgY2VsbCB0b29sXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlldy5tb3VzZWxlYXZlKGV2dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5lbC5jb250YWlucyhyZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBwb2ludGVyIGhhcyBleGl0ZWQgYSBjZWxsVmlldy4gVGhlIHBvaW50ZXIgaXMgc3RpbGwgaW5zaWRlIG9mIHRoZSBwYXBlci5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0ZWRWaWV3KSB7XG4gICAgICAgICAgICAvLyBUaGUgcG9pbnRlciBoYXMgZW50ZXJlZCBhIG5ldyBjZWxsVmlld1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByZXZlbnQgZG91YmxlIGBtb3VzZWxlYXZlYCBldmVudCBpZiB0aGUgYHJlbGF0ZWRUYXJnZXRgIGlzIG91dHNpZGUgdGhlIHBhcGVyXG4gICAgICAgIC8vIChtb3VzZWxlYXZlIG1ldGhvZCB3b3VsZCBiZSBmaXJlZCB0d2ljZSlcbiAgICAgICAgaWYgKGN1cnJlbnRUYXJnZXQgPT09IHRoaXMuZWwpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIGNlbGxWaWV3IHVuZGVyIHRoZSBwb2ludGVyLCBub3IgdGhlIGJsYW5rIGFyZWEgb2YgdGhlIHBhcGVyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3BhcGVyOm1vdXNlbGVhdmUnLCBldnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9wcm9jZXNzTW91c2VXaGVlbEV2dEJ1ZjogZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgZXZlbnQsIGRlbHRhcyB9ID0gdGhpcy5fbXdfZXZ0X2J1ZmZlcjtcbiAgICAgICAgY29uc3QgZGVsdGFZID0gZGVsdGFzLnJlZHVjZSgoYWNjLCBkZWx0YVkpID0+IGFjYyArIGNhcChkZWx0YVksIFdIRUVMX0NBUCksIDApO1xuXG4gICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMC45OTUsIGRlbHRhWSk7IC8vIDEuMDA1IGZvciBpbnZlcnRlZCBwaW5jaC96b29tXG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5jbGllbnRUb0xvY2FsUG9pbnQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncGFwZXI6cGluY2gnLCBldmVudCwgeCwgeSwgc2NhbGUpO1xuXG4gICAgICAgIHRoaXMuX213X2V2dF9idWZmZXIgPSB7XG4gICAgICAgICAgICBldmVudDogbnVsbCxcbiAgICAgICAgICAgIGRlbHRhczogW10sXG4gICAgICAgIH07XG4gICAgfSwgV0hFRUxfV0FJVF9NUywgeyBtYXhXYWl0OiBXSEVFTF9XQUlUX01TIH0pLFxuXG4gICAgbW91c2V3aGVlbDogZnVuY3Rpb24oZXZ0KSB7XG5cbiAgICAgICAgZXZ0ID0gbm9ybWFsaXplRXZlbnQoZXZ0KTtcblxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5maW5kVmlldyhldnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKHRoaXMuZ3VhcmQoZXZ0LCB2aWV3KSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsRXZlbnQgPSBldnQub3JpZ2luYWxFdmVudDtcbiAgICAgICAgY29uc3QgbG9jYWxQb2ludCA9IHRoaXMuc25hcFRvR3JpZChvcmlnaW5hbEV2ZW50LmNsaWVudFgsIG9yaWdpbmFsRXZlbnQuY2xpZW50WSk7XG4gICAgICAgIGNvbnN0IHsgZGVsdGFYLCBkZWx0YVkgfSA9IG5vcm1hbGl6ZVdoZWVsKG9yaWdpbmFsRXZlbnQpO1xuXG4gICAgICAgIGNvbnN0IHBpbmNoSGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbJ3BhcGVyOnBpbmNoJ107XG5cbiAgICAgICAgLy8gVG91Y2hwYWQgZGV2aWNlcyB3aWxsIHNlbmQgYSBmYWtlIENUUkwgcHJlc3Mgd2hlbiBhIHBpbmNoIGlzIHBlcmZvcm1lZFxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBhbHNvIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgc3Vic2NyaWJlcnMgdG8gcGFwZXI6cGluY2ggZXZlbnQuIElmIHRoZXJlIGFyZSBub25lLFxuICAgICAgICAvLyBqdXN0IHNraXAgdGhlIGVudGlyZSBibG9jayBvZiBjb2RlICh3ZSBkb24ndCB3YW50IHRvIGJsaW5kbHkgY2FsbFxuICAgICAgICAvLyAucHJldmVudERlZmF1bHQoKSBpZiB3ZSByZWFsbHkgZG9uJ3QgaGF2ZSB0bykuXG4gICAgICAgIGlmIChldnQuY3RybEtleSAmJiBwaW5jaEhhbmRsZXJzICYmIHBpbmNoSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHBpbmNoIGdlc3R1cmUsIGl0J3Mgc2FmZSB0byBhc3N1bWUgdGhhdCB3ZSBtdXN0IGNhbGwgLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX213X2V2dF9idWZmZXIuZXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgICAgICAgdGhpcy5fbXdfZXZ0X2J1ZmZlci5kZWx0YXMucHVzaChkZWx0YVkpO1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc01vdXNlV2hlZWxFdnRCdWYoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIG9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSkpO1xuICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3Lm1vdXNld2hlZWwoZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSwgZGVsdGEpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignYmxhbms6bW91c2V3aGVlbCcsIGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnksIGRlbHRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdwYXBlcjpwYW4nLCBldnQsIGRlbHRhWCwgZGVsdGFZKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbmV2ZW50OiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICB2YXIgZXZlbnROb2RlID0gZXZ0LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBldmVudE5vZGUuZ2V0QXR0cmlidXRlKCdldmVudCcpO1xuICAgICAgICBpZiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuZmluZFZpZXcoZXZlbnROb2RlKTtcbiAgICAgICAgICAgIGlmICh2aWV3KSB7XG5cbiAgICAgICAgICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmd1YXJkKGV2dCwgdmlldykpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHZhciBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG4gICAgICAgICAgICAgICAgdmlldy5vbmV2ZW50KGV2dCwgZXZlbnROYW1lLCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWFnbmV0RXZlbnQ6IGZ1bmN0aW9uKGV2dCwgaGFuZGxlcikge1xuXG4gICAgICAgIHZhciBtYWduZXROb2RlID0gZXZ0LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIHZhciBtYWduZXRWYWx1ZSA9IG1hZ25ldE5vZGUuZ2V0QXR0cmlidXRlKCdtYWduZXQnKTtcbiAgICAgICAgaWYgKG1hZ25ldFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuZmluZFZpZXcobWFnbmV0Tm9kZSk7XG4gICAgICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgICAgIGV2dCA9IG5vcm1hbGl6ZUV2ZW50KGV2dCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3VhcmQoZXZ0LCB2aWV3KSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIHZpZXcsIGV2dCwgbWFnbmV0Tm9kZSwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9ubWFnbmV0OiBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBpZiAoZXZ0LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudUZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubWFnbmV0Q29udGV4dE1lbnVGaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0bWVudUV2dCA9ICQuRXZlbnQoZXZ0Lm9yaWdpbmFsRXZlbnQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29udGV4dG1lbnUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGV2dC5kYXRhLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGV2dC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hZ25ldENvbnRleHRNZW51VHJpZ2dlcihjb250ZXh0bWVudUV2dCk7XG4gICAgICAgICAgICBpZiAoY29udGV4dG1lbnVFdnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFnbmV0RXZlbnQoZXZ0LCBmdW5jdGlvbih2aWV3LCBldnQsIF8sIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB2aWV3Lm9ubWFnbmV0KGV2dCwgeCwgeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYWduZXRwb2ludGVyZGJsY2xpY2s6IGZ1bmN0aW9uKGV2dCkge1xuXG4gICAgICAgIHRoaXMubWFnbmV0RXZlbnQoZXZ0LCBmdW5jdGlvbih2aWV3LCBldnQsIG1hZ25ldCwgeCwgeSkge1xuICAgICAgICAgICAgdmlldy5tYWduZXRwb2ludGVyZGJsY2xpY2soZXZ0LCBtYWduZXQsIHgsIHkpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgbWFnbmV0Y29udGV4dG1lbnU6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnRDb250ZXh0TWVudSkgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMubWFnbmV0Q29udGV4dE1lbnVGaXJlZCkge1xuICAgICAgICAgICAgdGhpcy5tYWduZXRDb250ZXh0TWVudUZpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hZ25ldENvbnRleHRNZW51VHJpZ2dlcihldnQpO1xuICAgIH0sXG5cbiAgICBtYWduZXRDb250ZXh0TWVudVRyaWdnZXI6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICB0aGlzLm1hZ25ldEV2ZW50KGV2dCwgZnVuY3Rpb24odmlldywgZXZ0LCBtYWduZXQsIHgsIHkpIHtcbiAgICAgICAgICAgIHZpZXcubWFnbmV0Y29udGV4dG1lbnUoZXZ0LCBtYWduZXQsIHgsIHkpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgb25sYWJlbDogZnVuY3Rpb24oZXZ0KSB7XG5cbiAgICAgICAgdmFyIGxhYmVsTm9kZSA9IGV2dC5jdXJyZW50VGFyZ2V0O1xuXG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5maW5kVmlldyhsYWJlbE5vZGUpO1xuICAgICAgICBpZiAoIXZpZXcpIHJldHVybjtcblxuICAgICAgICBldnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuICAgICAgICBpZiAodGhpcy5ndWFyZChldnQsIHZpZXcpKSByZXR1cm47XG5cbiAgICAgICAgLy8gQ3VzdG9tIGV2ZW50XG4gICAgICAgIGNvbnN0IGV2ZW50RXZ0ID0gdGhpcy5jdXN0b21FdmVudFRyaWdnZXIoZXZ0LCB2aWV3LCBsYWJlbE5vZGUpO1xuICAgICAgICBpZiAoZXZlbnRFdnQpIHtcbiAgICAgICAgICAgIC8vIGBvbmV2ZW50YCBjb3VsZCBoYXZlIHN0b3BwZWQgcHJvcGFnYXRpb25cbiAgICAgICAgICAgIGlmIChldmVudEV2dC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSByZXR1cm47XG5cbiAgICAgICAgICAgIGV2dC5kYXRhID0gZXZlbnRFdnQuZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG4gICAgICAgIHZpZXcub25sYWJlbChldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTtcbiAgICB9LFxuXG4gICAgZ2V0UG9pbnRlckFyZ3MoZXZ0KSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFdnQgPSBub3JtYWxpemVFdmVudChldnQpO1xuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMuc25hcFRvR3JpZChub3JtYWxpemVkRXZ0LmNsaWVudFgsIG5vcm1hbGl6ZWRFdnQuY2xpZW50WSk7XG4gICAgICAgIHJldHVybiBbbm9ybWFsaXplZEV2dCwgeCwgeV07XG4gICAgfSxcblxuICAgIGRlbGVnYXRlRHJhZ0V2ZW50czogZnVuY3Rpb24odmlldywgZGF0YSkge1xuXG4gICAgICAgIGRhdGEgfHwgKGRhdGEgPSB7fSk7XG4gICAgICAgIHRoaXMuZXZlbnREYXRhKHsgZGF0YTogZGF0YSB9LCB7IHNvdXJjZVZpZXc6IHZpZXcgfHwgbnVsbCwgbW91c2Vtb3ZlZDogMCB9KTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZURvY3VtZW50RXZlbnRzKG51bGwsIGRhdGEpO1xuICAgIH0sXG5cbiAgICAvLyBHdWFyZCB0aGUgc3BlY2lmaWVkIGV2ZW50LiBJZiB0aGUgZXZlbnQgc2hvdWxkIGJlIGlnbm9yZWQsIGd1YXJkIHJldHVybnMgYHRydWVgLlxuICAgIC8vIE90aGVyd2lzZSwgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgIGd1YXJkOiBmdW5jdGlvbihldnQsIHZpZXcpIHtcblxuICAgICAgICBpZiAoZXZ0LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2dC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZWQgYXMgYGNvbnRleHRtZW51YCB0eXBlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3VhcmQgJiYgdGhpcy5vcHRpb25zLmd1YXJkKGV2dCwgdmlldykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2dC5kYXRhICYmIGV2dC5kYXRhLmd1YXJkZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV2dC5kYXRhLmd1YXJkZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZ0O1xuXG4gICAgICAgIGlmICh0aGlzLkdVQVJERURfVEFHX05BTUVTLmluY2x1ZGVzKHRhcmdldC50YWdOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlldyAmJiB2aWV3Lm1vZGVsICYmICh2aWV3Lm1vZGVsIGluc3RhbmNlb2YgQ2VsbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN2ZyA9PT0gdGFyZ2V0IHx8IHRoaXMuZWwgPT09IHRhcmdldCB8fCAkLmNvbnRhaW5zKHRoaXMuc3ZnLCB0YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTsgICAgLy8gRXZlbnQgZ3VhcmRlZC4gUGFwZXIgc2hvdWxkIG5vdCByZWFjdCBvbiBpdCBpbiBhbnkgd2F5LlxuICAgIH0sXG5cbiAgICBzZXRHcmlkU2l6ZTogZnVuY3Rpb24oZ3JpZFNpemUpIHtcblxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIG9wdGlvbnMuZ3JpZFNpemUgPSBncmlkU2l6ZTtcblxuICAgICAgICBpZiAob3B0aW9ucy5kcmF3R3JpZCAmJiAhb3B0aW9ucy5kcmF3R3JpZFNpemUpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCByZWRyYXcgdGhlIGdyaWQgaWYgdGhlIGBkcmF3R3JpZFNpemVgIGlzIHNldC5cbiAgICAgICAgICAgIHRoaXMuZHJhd0dyaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBjbGVhckdyaWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmICh0aGlzLiRncmlkKSB7XG4gICAgICAgICAgICB0aGlzLiRncmlkLmNzcygnYmFja2dyb3VuZEltYWdlJywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2dldEdyaWRSZWZzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAoIXRoaXMuX2dyaWRDYWNoZSkge1xuXG4gICAgICAgICAgICB0aGlzLl9ncmlkQ2FjaGUgPSB7XG4gICAgICAgICAgICAgICAgcm9vdDogVignc3ZnJywgeyB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJyB9LCBWKCdkZWZzJykpLFxuICAgICAgICAgICAgICAgIHBhdHRlcm5zOiB7fSxcbiAgICAgICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uKGlkLCB2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgVih0aGlzLnJvb3Qubm9kZS5jaGlsZE5vZGVzWzBdKS5hcHBlbmQodmVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXR0ZXJuc1tpZF0gPSB2ZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5hcHBlbmQoVigncmVjdCcsIHsgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMTAwJScsIGZpbGw6ICd1cmwoIycgKyBpZCArICcpJyB9KSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdHRlcm5zW2lkXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGV4aXN0OiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXR0ZXJuc1tpZF0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWRDYWNoZTtcbiAgICB9LFxuXG4gICAgc2V0R3JpZDogZnVuY3Rpb24oZHJhd0dyaWQpIHtcblxuICAgICAgICB0aGlzLmNsZWFyR3JpZCgpO1xuXG4gICAgICAgIHRoaXMuX2dyaWRDYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2dyaWRTZXR0aW5ncyA9IFtdO1xuXG4gICAgICAgIHZhciBvcHRpb25zTGlzdCA9IEFycmF5LmlzQXJyYXkoZHJhd0dyaWQpID8gZHJhd0dyaWQgOiBbZHJhd0dyaWQgfHwge31dO1xuICAgICAgICBvcHRpb25zTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuX2dyaWRTZXR0aW5ncy5wdXNoLmFwcGx5KHRoaXMuX2dyaWRTZXR0aW5ncywgdGhpcy5fcmVzb2x2ZURyYXdHcmlkT3B0aW9uKGl0ZW0pKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfcmVzb2x2ZURyYXdHcmlkT3B0aW9uOiBmdW5jdGlvbihvcHQpIHtcblxuICAgICAgICB2YXIgbmFtZXNwYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5ncmlkUGF0dGVybnM7XG4gICAgICAgIGlmIChpc1N0cmluZyhvcHQpICYmIEFycmF5LmlzQXJyYXkobmFtZXNwYWNlW29wdF0pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZXNwYWNlW29wdF0ubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzaWduKHt9LCBpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBvcHQgfHwgeyBhcmdzOiBbe31dIH07XG4gICAgICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShvcHRpb25zKTtcbiAgICAgICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWU7XG5cbiAgICAgICAgaWYgKCFpc0FycmF5ICYmICFuYW1lICYmICFvcHRpb25zLm1hcmt1cCkge1xuICAgICAgICAgICAgbmFtZSA9ICdkb3QnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUgJiYgQXJyYXkuaXNBcnJheShuYW1lc3BhY2VbbmFtZV0pKSB7XG4gICAgICAgICAgICB2YXIgcGF0dGVybiA9IG5hbWVzcGFjZVtuYW1lXS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkuaXNBcnJheShvcHRpb25zLmFyZ3MpID8gb3B0aW9ucy5hcmdzIDogW29wdGlvbnMuYXJncyB8fCB7fV07XG5cbiAgICAgICAgICAgIGRlZmF1bHRzKGFyZ3NbMF0sIG9taXQob3B0LCAnYXJncycpKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihwYXR0ZXJuW2ldLCBhcmdzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGF0dGVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0FycmF5ID8gb3B0aW9ucyA6IFtvcHRpb25zXTtcbiAgICB9LFxuXG4gICAgZHJhd0dyaWQ6IGZ1bmN0aW9uKG9wdCkge1xuXG4gICAgICAgIGNvbnN0IGdyaWRTaXplID0gdGhpcy5vcHRpb25zLmRyYXdHcmlkU2l6ZSB8fCB0aGlzLm9wdGlvbnMuZ3JpZFNpemU7XG4gICAgICAgIGlmIChncmlkU2l6ZSA8PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhckdyaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbE9wdGlvbnMgPSBBcnJheS5pc0FycmF5KG9wdCkgPyBvcHQgOiBbb3B0XTtcblxuICAgICAgICB2YXIgY3RtID0gdGhpcy5tYXRyaXgoKTtcbiAgICAgICAgdmFyIHJlZnMgPSB0aGlzLl9nZXRHcmlkUmVmcygpO1xuXG4gICAgICAgIHRoaXMuX2dyaWRTZXR0aW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGdyaWRMYXllclNldHRpbmcsIGluZGV4KSB7XG5cbiAgICAgICAgICAgIHZhciBpZCA9ICdwYXR0ZXJuXycgKyBpbmRleDtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gbWVyZ2UoZ3JpZExheWVyU2V0dGluZywgbG9jYWxPcHRpb25zW2luZGV4XSwge1xuICAgICAgICAgICAgICAgIHN4OiBjdG0uYSB8fCAxLFxuICAgICAgICAgICAgICAgIHN5OiBjdG0uZCB8fCAxLFxuICAgICAgICAgICAgICAgIG94OiBjdG0uZSB8fCAwLFxuICAgICAgICAgICAgICAgIG95OiBjdG0uZiB8fCAwXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3B0aW9ucy53aWR0aCA9IGdyaWRTaXplICogKGN0bS5hIHx8IDEpICogKG9wdGlvbnMuc2NhbGVGYWN0b3IgfHwgMSk7XG4gICAgICAgICAgICBvcHRpb25zLmhlaWdodCA9IGdyaWRTaXplICogKGN0bS5kIHx8IDEpICogKG9wdGlvbnMuc2NhbGVGYWN0b3IgfHwgMSk7XG5cbiAgICAgICAgICAgIGlmICghcmVmcy5leGlzdChpZCkpIHtcbiAgICAgICAgICAgICAgICByZWZzLmFkZChpZCwgVigncGF0dGVybicsIHsgaWQ6IGlkLCBwYXR0ZXJuVW5pdHM6ICd1c2VyU3BhY2VPblVzZScgfSwgVihvcHRpb25zLm1hcmt1cCkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhdHRlcm5EZWZWZWwgPSByZWZzLmdldChpZCk7XG5cbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMudXBkYXRlKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlKHBhdHRlcm5EZWZWZWwubm9kZS5jaGlsZE5vZGVzWzBdLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHggPSBvcHRpb25zLm94ICUgb3B0aW9ucy53aWR0aDtcbiAgICAgICAgICAgIGlmICh4IDwgMCkgeCArPSBvcHRpb25zLndpZHRoO1xuXG4gICAgICAgICAgICB2YXIgeSA9IG9wdGlvbnMub3kgJSBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgICAgIGlmICh5IDwgMCkgeSArPSBvcHRpb25zLmhlaWdodDtcblxuICAgICAgICAgICAgcGF0dGVybkRlZlZlbC5hdHRyKHtcbiAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBwYXR0ZXJuVXJpID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhyZWZzLnJvb3Qubm9kZSk7XG4gICAgICAgIHBhdHRlcm5VcmkgPSAndXJsKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIGJ0b2EocGF0dGVyblVyaSkgKyAnKSc7XG5cbiAgICAgICAgdGhpcy4kZ3JpZC5jc3MoJ2JhY2tncm91bmRJbWFnZScsIHBhdHRlcm5VcmkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICB1cGRhdGVCYWNrZ3JvdW5kSW1hZ2U6IGZ1bmN0aW9uKG9wdCkge1xuXG4gICAgICAgIG9wdCA9IG9wdCB8fCB7fTtcblxuICAgICAgICB2YXIgYmFja2dyb3VuZFBvc2l0aW9uID0gb3B0LnBvc2l0aW9uIHx8ICdjZW50ZXInO1xuICAgICAgICB2YXIgYmFja2dyb3VuZFNpemUgPSBvcHQuc2l6ZSB8fCAnYXV0byBhdXRvJztcblxuICAgICAgICB2YXIgY3VycmVudFNjYWxlID0gdGhpcy5zY2FsZSgpO1xuICAgICAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlKCk7XG5cbiAgICAgICAgLy8gYmFja2dyb3VuZFBvc2l0aW9uXG4gICAgICAgIGlmIChpc09iamVjdChiYWNrZ3JvdW5kUG9zaXRpb24pKSB7XG4gICAgICAgICAgICB2YXIgeCA9IGN1cnJlbnRUcmFuc2xhdGUudHggKyAoY3VycmVudFNjYWxlLnN4ICogKGJhY2tncm91bmRQb3NpdGlvbi54IHx8IDApKTtcbiAgICAgICAgICAgIHZhciB5ID0gY3VycmVudFRyYW5zbGF0ZS50eSArIChjdXJyZW50U2NhbGUuc3kgKiAoYmFja2dyb3VuZFBvc2l0aW9uLnkgfHwgMCkpO1xuICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uID0geCArICdweCAnICsgeSArICdweCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiYWNrZ3JvdW5kU2l6ZVxuICAgICAgICBpZiAoaXNPYmplY3QoYmFja2dyb3VuZFNpemUpKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZSA9IG5ldyBSZWN0KGJhY2tncm91bmRTaXplKS5zY2FsZShjdXJyZW50U2NhbGUuc3gsIGN1cnJlbnRTY2FsZS5zeSk7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZSA9IGJhY2tncm91bmRTaXplLndpZHRoICsgJ3B4ICcgKyBiYWNrZ3JvdW5kU2l6ZS5oZWlnaHQgKyAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kYmFja2dyb3VuZC5jc3Moe1xuICAgICAgICAgICAgYmFja2dyb3VuZFNpemU6IGJhY2tncm91bmRTaXplLFxuICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBiYWNrZ3JvdW5kUG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGRyYXdCYWNrZ3JvdW5kSW1hZ2U6IGZ1bmN0aW9uKGltZywgb3B0KSB7XG5cbiAgICAgICAgLy8gQ2xlYXIgdGhlIGJhY2tncm91bmQgaW1hZ2UgaWYgbm8gaW1hZ2UgcHJvdmlkZWRcbiAgICAgICAgaWYgKCEoaW1nIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuJGJhY2tncm91bmQuY3NzKCdiYWNrZ3JvdW5kSW1hZ2UnLCAnJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2JhY2tncm91bmQgfHwgdGhpcy5fYmFja2dyb3VuZC5pZCAhPT0gb3B0LmlkKSB7XG4gICAgICAgICAgICAvLyBEcmF3IG9ubHkgdGhlIGxhc3QgaW1hZ2UgcmVxdWVzdGVkIChzZWUgZHJhd0JhY2tncm91bmQoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdCA9IG9wdCB8fCB7fTtcblxuICAgICAgICB2YXIgYmFja2dyb3VuZEltYWdlO1xuICAgICAgICB2YXIgYmFja2dyb3VuZFNpemUgPSBvcHQuc2l6ZTtcbiAgICAgICAgdmFyIGJhY2tncm91bmRSZXBlYXQgPSBvcHQucmVwZWF0IHx8ICduby1yZXBlYXQnO1xuICAgICAgICB2YXIgYmFja2dyb3VuZE9wYWNpdHkgPSBvcHQub3BhY2l0eSB8fCAxO1xuICAgICAgICB2YXIgYmFja2dyb3VuZFF1YWxpdHkgPSBNYXRoLmFicyhvcHQucXVhbGl0eSkgfHwgMTtcbiAgICAgICAgdmFyIGJhY2tncm91bmRQYXR0ZXJuID0gdGhpcy5jb25zdHJ1Y3Rvci5iYWNrZ3JvdW5kUGF0dGVybnNbY2FtZWxDYXNlKGJhY2tncm91bmRSZXBlYXQpXTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihiYWNrZ3JvdW5kUGF0dGVybikpIHtcbiAgICAgICAgICAgIC8vICdmbGlwLXgnLCAnZmxpcC15JywgJ2ZsaXAteHknLCAnd2F0ZXJtYXJrJyBhbmQgY3VzdG9tXG4gICAgICAgICAgICBpbWcud2lkdGggKj0gYmFja2dyb3VuZFF1YWxpdHk7XG4gICAgICAgICAgICBpbWcuaGVpZ2h0ICo9IGJhY2tncm91bmRRdWFsaXR5O1xuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGJhY2tncm91bmRQYXR0ZXJuKGltZywgb3B0KTtcbiAgICAgICAgICAgIGlmICghKGNhbnZhcyBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhLlBhcGVyOiBiYWNrZ3JvdW5kIHBhdHRlcm4gbXVzdCByZXR1cm4gYW4gSFRNTCBDYW52YXMgaW5zdGFuY2UnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJyk7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0ID0gJ3JlcGVhdCc7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QoYmFja2dyb3VuZFNpemUpKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgdGhlIHRpbGUgc2l6ZSBpZiBhbiBvYmplY3QgcGFzc2VkIGluXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFNpemUud2lkdGggKj0gY2FudmFzLndpZHRoIC8gaW1nLndpZHRoO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplLmhlaWdodCAqPSBjYW52YXMuaGVpZ2h0IC8gaW1nLmhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYmFja2dyb3VuZFNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgdGlsZSBzaXplIGlmIG5vIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgb3B0LnNpemUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjYW52YXMud2lkdGggLyBiYWNrZ3JvdW5kUXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBjYW52YXMuaGVpZ2h0IC8gYmFja2dyb3VuZFF1YWxpdHlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYmFja2dyb3VuZFJlcGVhdDpcbiAgICAgICAgICAgIC8vIG5vLXJlcGVhdCcsICdyb3VuZCcsICdzcGFjZScsICdyZXBlYXQnLCAncmVwZWF0LXgnLCAncmVwZWF0LXknXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBpbWcuc3JjO1xuICAgICAgICAgICAgaWYgKGJhY2tncm91bmRTaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBwYXNzIHRoZSBpbWFnZSBzaXplIGZvciAgdGhlIGJhY2tncm91bmRTaXplIGlmIG5vIHNpemUgcHJvdmlkZWRcbiAgICAgICAgICAgICAgICBvcHQuc2l6ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGltZy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbWcuaGVpZ2h0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJGJhY2tncm91bmQuY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IGJhY2tncm91bmRPcGFjaXR5LFxuICAgICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogYmFja2dyb3VuZFJlcGVhdCxcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgYmFja2dyb3VuZEltYWdlICsgJyknXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudXBkYXRlQmFja2dyb3VuZEltYWdlKG9wdCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZUJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24oY29sb3IpIHtcblxuICAgICAgICB0aGlzLiRlbC5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGNvbG9yIHx8ICcnKTtcbiAgICB9LFxuXG4gICAgZHJhd0JhY2tncm91bmQ6IGZ1bmN0aW9uKG9wdCkge1xuXG4gICAgICAgIG9wdCA9IG9wdCB8fCB7fTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUJhY2tncm91bmRDb2xvcihvcHQuY29sb3IpO1xuXG4gICAgICAgIGlmIChvcHQuaW1hZ2UpIHtcbiAgICAgICAgICAgIG9wdCA9IHRoaXMuX2JhY2tncm91bmQgPSBjbG9uZURlZXAob3B0KTtcbiAgICAgICAgICAgIGd1aWQob3B0KTtcbiAgICAgICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSB0aGlzLmRyYXdCYWNrZ3JvdW5kSW1hZ2UuYmluZCh0aGlzLCBpbWcsIG9wdCk7XG4gICAgICAgICAgICBpbWcuc3JjID0gb3B0LmltYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZEltYWdlKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgc2V0SW50ZXJhY3Rpdml0eTogZnVuY3Rpb24odmFsdWUpIHtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUgPSB2YWx1ZTtcblxuICAgICAgICBpbnZva2UodGhpcy5fdmlld3MsICdzZXRJbnRlcmFjdGl2aXR5JywgdmFsdWUpO1xuICAgIH0sXG5cbiAgICAvLyBQYXBlciBkZWZpbml0aW9ucy5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGlzRGVmaW5lZDogZnVuY3Rpb24oZGVmSWQpIHtcblxuICAgICAgICByZXR1cm4gISF0aGlzLnN2Zy5nZXRFbGVtZW50QnlJZChkZWZJZCk7XG4gICAgfSxcblxuICAgIGRlZmluZUZpbHRlcjogZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgaWYgKCFpc09iamVjdChmaWx0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaWEuUGFwZXI6IGRlZmluZUZpbHRlcigpIHJlcXVpcmVzIDEuIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaWx0ZXJJZCA9IGZpbHRlci5pZDtcbiAgICAgICAgdmFyIG5hbWUgPSBmaWx0ZXIubmFtZTtcbiAgICAgICAgLy8gR2VuZXJhdGUgYSBoYXNoIGNvZGUgZnJvbSB0aGUgc3RyaW5naWZpZWQgZmlsdGVyIGRlZmluaXRpb24uIFRoaXMgZ2l2ZXMgdXNcbiAgICAgICAgLy8gYSB1bmlxdWUgZmlsdGVyIElEIGZvciBkaWZmZXJlbnQgZGVmaW5pdGlvbnMuXG4gICAgICAgIGlmICghZmlsdGVySWQpIHtcbiAgICAgICAgICAgIGZpbHRlcklkID0gbmFtZSArIHRoaXMuc3ZnLmlkICsgaGFzaENvZGUoSlNPTi5zdHJpbmdpZnkoZmlsdGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGZpbHRlciBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQsXG4gICAgICAgIC8vIHdlJ3JlIGRvbmUgYW5kIHdlIGNhbiBqdXN0IHVzZSBpdCAocmVmZXJlbmNlIGl0IHVzaW5nIGB1cmwoKWApLlxuICAgICAgICAvLyBJZiBub3QsIGNyZWF0ZSBvbmUuXG4gICAgICAgIGlmICghdGhpcy5pc0RlZmluZWQoZmlsdGVySWQpKSB7XG5cbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBfZmlsdGVyO1xuICAgICAgICAgICAgdmFyIGZpbHRlclNWR1N0cmluZyA9IG5hbWVzcGFjZVtuYW1lXSAmJiBuYW1lc3BhY2VbbmFtZV0oZmlsdGVyLmFyZ3MgfHwge30pO1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJTVkdTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1leGlzdGluZyBmaWx0ZXIgJyArIG5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIGZpbHRlciBhcmVhIHRvIGJlIDN4IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGNlbGxcbiAgICAgICAgICAgIC8vIGFuZCBjZW50ZXIgdGhlIGZpbHRlciBhcm91bmQgdGhlIGNlbGwuXG4gICAgICAgICAgICB2YXIgZmlsdGVyQXR0cnMgPSBhc3NpZ24oe1xuICAgICAgICAgICAgICAgIGZpbHRlclVuaXRzOiAnb2JqZWN0Qm91bmRpbmdCb3gnLFxuICAgICAgICAgICAgICAgIHg6IC0xLFxuICAgICAgICAgICAgICAgIHk6IC0xLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxuICAgICAgICAgICAgICAgIGhlaWdodDogM1xuICAgICAgICAgICAgfSwgZmlsdGVyLmF0dHJzLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGZpbHRlcklkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgVihmaWx0ZXJTVkdTdHJpbmcsIGZpbHRlckF0dHJzKS5hcHBlbmRUbyh0aGlzLmRlZnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcklkO1xuICAgIH0sXG5cbiAgICBkZWZpbmVHcmFkaWVudDogZnVuY3Rpb24oZ3JhZGllbnQpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChncmFkaWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RpYS5QYXBlcjogZGVmaW5lR3JhZGllbnQoKSByZXF1aXJlcyAxLiBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzdmcsIGRlZnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIGhhc2ggY29kZSBmcm9tIHRoZSBzdHJpbmdpZmllZCBmaWx0ZXIgZGVmaW5pdGlvbi4gVGhpcyBnaXZlcyB1c1xuICAgICAgICAgICAgLy8gYSB1bmlxdWUgZmlsdGVyIElEIGZvciBkaWZmZXJlbnQgZGVmaW5pdGlvbnMuXG4gICAgICAgICAgICBpZCA9IHR5cGUgKyBzdmcuaWQgKyBoYXNoQ29kZShKU09OLnN0cmluZ2lmeShncmFkaWVudCkpLFxuICAgICAgICAgICAgc3RvcHMsXG4gICAgICAgICAgICBhdHRycyA9IHt9XG4gICAgICAgIH0gPSBncmFkaWVudDtcbiAgICAgICAgLy8gSWYgdGhlIGdyYWRpZW50IGFscmVhZHkgZXhpc3RzIGluIHRoZSBkb2N1bWVudCxcbiAgICAgICAgLy8gd2UncmUgZG9uZSBhbmQgd2UgY2FuIGp1c3QgdXNlIGl0IChyZWZlcmVuY2UgaXQgdXNpbmcgYHVybCgpYCkuXG4gICAgICAgIGlmICh0aGlzLmlzRGVmaW5lZChpZCkpIHJldHVybiBpZDtcbiAgICAgICAgLy8gSWYgbm90LCBjcmVhdGUgb25lLlxuICAgICAgICBjb25zdCBzdG9wVkVscyA9IHRvQXJyYXkoc3RvcHMpLm1hcCgoeyBvZmZzZXQsIGNvbG9yLCBvcGFjaXR5IH0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBWKCdzdG9wJykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ29mZnNldCc6IG9mZnNldCxcbiAgICAgICAgICAgICAgICAnc3RvcC1jb2xvcic6IGNvbG9yLFxuICAgICAgICAgICAgICAgICdzdG9wLW9wYWNpdHknOiBOdW1iZXIuaXNGaW5pdGUob3BhY2l0eSkgPyBvcGFjaXR5IDogMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBncmFkaWVudFZFbCA9IFYodHlwZSwgYXR0cnMsIHN0b3BWRWxzKTtcbiAgICAgICAgZ3JhZGllbnRWRWwuaWQgPSBpZDtcbiAgICAgICAgZ3JhZGllbnRWRWwuYXBwZW5kVG8oZGVmcyk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9LFxuXG4gICAgZGVmaW5lUGF0dGVybjogZnVuY3Rpb24ocGF0dGVybikge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHBhdHRlcm4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaWEuUGFwZXI6IGRlZmluZVBhdHRlcm4oKSByZXF1aXJlcyAxLiBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzdmcsIGRlZnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgaGFzaCBjb2RlIGZyb20gdGhlIHN0cmluZ2lmaWVkIGZpbHRlciBkZWZpbml0aW9uLiBUaGlzIGdpdmVzIHVzXG4gICAgICAgICAgICAvLyBhIHVuaXF1ZSBmaWx0ZXIgSUQgZm9yIGRpZmZlcmVudCBkZWZpbml0aW9ucy5cbiAgICAgICAgICAgIGlkID0gc3ZnLmlkICsgaGFzaENvZGUoSlNPTi5zdHJpbmdpZnkocGF0dGVybikpLFxuICAgICAgICAgICAgbWFya3VwLFxuICAgICAgICAgICAgYXR0cnMgPSB7fVxuICAgICAgICB9ID0gcGF0dGVybjtcbiAgICAgICAgaWYgKCFtYXJrdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RpYS5QYXBlcjogZGVmaW5lUGF0dGVybigpIHJlcXVpcmVzIG1hcmt1cC4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZ3JhZGllbnQgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGRvY3VtZW50LFxuICAgICAgICAvLyB3ZSdyZSBkb25lIGFuZCB3ZSBjYW4ganVzdCB1c2UgaXQgKHJlZmVyZW5jZSBpdCB1c2luZyBgdXJsKClgKS5cbiAgICAgICAgaWYgKHRoaXMuaXNEZWZpbmVkKGlkKSkgcmV0dXJuIGlkO1xuICAgICAgICAvLyBJZiBub3QsIGNyZWF0ZSBvbmUuXG4gICAgICAgIGNvbnN0IHBhdHRlcm5WRWwgPSBWKCdwYXR0ZXJuJywge1xuICAgICAgICAgICAgcGF0dGVyblVuaXRzOiAndXNlclNwYWNlT25Vc2UnXG4gICAgICAgIH0pO1xuICAgICAgICBwYXR0ZXJuVkVsLmlkID0gaWQ7XG4gICAgICAgIHBhdHRlcm5WRWwuYXR0cihhdHRycyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcGF0dGVyblZFbC5hcHBlbmQoVihtYXJrdXApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZnJhZ21lbnQgfSA9IHBhcnNlRE9NSlNPTihtYXJrdXApO1xuICAgICAgICAgICAgcGF0dGVyblZFbC5hcHBlbmQoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhdHRlcm5WRWwuYXBwZW5kVG8oZGVmcyk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9LFxuXG4gICAgZGVmaW5lTWFya2VyOiBmdW5jdGlvbihtYXJrZXIpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChtYXJrZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaWEuUGFwZXI6IGRlZmluZU1hcmtlcigpIHJlcXVpcmVzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzdmcsIGRlZnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgaGFzaCBjb2RlIGZyb20gdGhlIHN0cmluZ2lmaWVkIGZpbHRlciBkZWZpbml0aW9uLiBUaGlzIGdpdmVzIHVzXG4gICAgICAgICAgICAvLyBhIHVuaXF1ZSBmaWx0ZXIgSUQgZm9yIGRpZmZlcmVudCBkZWZpbml0aW9ucy5cbiAgICAgICAgICAgIGlkID0gc3ZnLmlkICsgaGFzaENvZGUoSlNPTi5zdHJpbmdpZnkobWFya2VyKSksXG4gICAgICAgICAgICAvLyB1c2VyLXByb3ZpZGVkIG1hcmt1cFxuICAgICAgICAgICAgLy8gKGUuZy4gZGVmaW5lZCB3aGVuIGNyZWF0aW5nIGxpbmsgdmlhIGBhdHRycy9saW5lL3NvdXJjZU1hcmtlci9tYXJrdXBgKVxuICAgICAgICAgICAgbWFya3VwLFxuICAgICAgICAgICAgLy8gdXNlci1wcm92aWRlZCBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAvLyAoZS5nLiBkZWZpbmVkIHdoZW4gY3JlYXRpbmcgbGluayB2aWEgYGF0dHJzL2xpbmUvc291cmNlTWFya2VyL2F0dHJzYClcbiAgICAgICAgICAgIC8vIG5vdGU6IGB0cmFuc2Zvcm1gIGF0dHJzIGFyZSBpZ25vcmVkIGJ5IGJyb3dzZXJzXG4gICAgICAgICAgICBhdHRycyA9IHt9LFxuICAgICAgICAgICAgLy8gZGVwcmVjYXRlZCAtIHVzZSBgYXR0cnMvbWFya2VyVW5pdHNgIGluc3RlYWQgKHdoaWNoIGhhcyBoaWdoZXIgcHJpb3JpdHkpXG4gICAgICAgICAgICBtYXJrZXJVbml0cyA9ICd1c2VyU3BhY2VPblVzZSdcbiAgICAgICAgfSA9IG1hcmtlcjtcbiAgICAgICAgLy8gSWYgdGhlIG1hcmtlciBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQsXG4gICAgICAgIC8vIHdlJ3JlIGRvbmUgYW5kIHdlIGNhbiBqdXN0IHVzZSBpdCAocmVmZXJlbmNlIGl0IHVzaW5nIGB1cmwoKWApLlxuICAgICAgICBpZiAodGhpcy5pc0RlZmluZWQoaWQpKSByZXR1cm4gaWQ7XG4gICAgICAgIC8vIElmIG5vdCwgY3JlYXRlIG9uZS5cbiAgICAgICAgY29uc3QgbWFya2VyVkVsID0gVignbWFya2VyJywge1xuICAgICAgICAgICAgb3JpZW50OiAnYXV0bycsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgICAgICAgbWFya2VyVW5pdHM6IG1hcmtlclVuaXRzXG4gICAgICAgIH0pO1xuICAgICAgICBtYXJrZXJWRWwuaWQgPSBpZDtcbiAgICAgICAgbWFya2VyVkVsLmF0dHIoYXR0cnMpO1xuICAgICAgICBsZXQgbWFya2VyQ29udGVudFZFbDtcbiAgICAgICAgaWYgKG1hcmt1cCkge1xuICAgICAgICAgICAgbGV0IG1hcmt1cFZFbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vIE1hcmtlciBvYmplY3QgaGFzIGEgYG1hcmt1cGAgcHJvcGVydHkgb2YgdHlwZSBzdHJpbmcuXG4gICAgICAgICAgICAgICAgLy8gLSBDb25zdHJ1Y3QgViBmcm9tIHRoZSBwcm92aWRlZCBzdHJpbmcuXG4gICAgICAgICAgICAgICAgbWFya3VwVkVsID0gVihtYXJrdXApO1xuICAgICAgICAgICAgICAgIC8vIGBtYXJrdXBWRWxgIGlzIG5vdyBlaXRoZXIgYSBzaW5nbGUgVkVsLCBvciBhbiBhcnJheSBvZiBWRWxzLlxuICAgICAgICAgICAgICAgIC8vIC0gQ29lcmNlIGl0IHRvIGFuIGFycmF5LlxuICAgICAgICAgICAgICAgIG1hcmt1cFZFbCA9IChBcnJheS5pc0FycmF5KG1hcmt1cFZFbCkgPyBtYXJrdXBWRWwgOiBbbWFya3VwVkVsXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE1hcmtlciBvYmplY3QgaGFzIGEgYG1hcmt1cGAgcHJvcGVydHkgb2YgdHlwZSBvYmplY3QuXG4gICAgICAgICAgICAgICAgLy8gLSBDb25zdHJ1Y3QgViBmcm9tIHRoZSBvYmplY3QgYnkgcGFyc2luZyBpdCBhcyBET00gSlNPTi5cbiAgICAgICAgICAgICAgICBjb25zdCB7IGZyYWdtZW50IH0gPSBwYXJzZURPTUpTT04obWFya3VwKTtcbiAgICAgICAgICAgICAgICBtYXJrdXBWRWwgPSBWKGZyYWdtZW50KS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYG1hcmt1cFZFbGAgaXMgYW4gYXJyYXkgd2l0aCBvbmUgb3IgbW9yZSBWRWxzIGluc2lkZS5cbiAgICAgICAgICAgIC8vIC0gSWYgdGhlcmUgYXJlIG11bHRpcGxlIFZFbHMsIHdyYXAgdGhlbSBpbiBhIG5ld2x5LWNvbnN0cnVjdGVkIDxnPiBlbGVtZW50XG4gICAgICAgICAgICBpZiAobWFya3VwVkVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJDb250ZW50VkVsID0gVignZycpLmFwcGVuZChtYXJrdXBWRWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJDb250ZW50VkVsID0gbWFya3VwVkVsWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFya2VyIG9iamVjdCBpcyBhIGZsYXQgc3RydWN0dXJlLlxuICAgICAgICAgICAgLy8gLSBDb25zdHJ1Y3QgYSBuZXcgViBvZiB0eXBlIGBtYXJrZXIudHlwZWAuXG4gICAgICAgICAgICBjb25zdCB7IHR5cGUgPSAncGF0aCcgfSA9IG1hcmtlcjtcbiAgICAgICAgICAgIG1hcmtlckNvbnRlbnRWRWwgPSBWKHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGBtYXJrZXJDb250ZW50VkVsYCBpcyBhIHNpbmdsZSBWRWwuXG4gICAgICAgIC8vIEFzc2lnbiBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgdG8gaXQgKD0gY29udGV4dCBhdHRyaWJ1dGVzICsgbWFya2VyIGF0dHJpYnV0ZXMpOlxuICAgICAgICAvLyAtIEF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHRha2VuIGZyb20gbm9uLXNwZWNpYWwgcHJvcGVydGllcyBvZiBgbWFya2VyYC5cbiAgICAgICAgY29uc3QgbWFya2VyQXR0cnMgPSBvbWl0KG1hcmtlciwgJ3R5cGUnLCAnaWQnLCAnbWFya3VwJywgJ2F0dHJzJywgJ21hcmtlclVuaXRzJyk7XG4gICAgICAgIGNvbnN0IG1hcmtlckF0dHJzS2V5cyA9IE9iamVjdC5rZXlzKG1hcmtlckF0dHJzKTtcbiAgICAgICAgbWFya2VyQXR0cnNLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtYXJrZXJBdHRyc1trZXldO1xuICAgICAgICAgICAgY29uc3QgbWFya3VwVmFsdWUgPSBtYXJrZXJDb250ZW50VkVsLmF0dHIoa2V5KTsgLy8gdmFsdWUgY29taW5nIGZyb20gbWFya3VwVkVsIChpZiBhbnkpID0gaGlnaGVyIHByaW9yaXR5XG4gICAgICAgICAgICBpZiAobWFya3VwVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgbG9naWM6XG4gICAgICAgICAgICAgICAgbWFya2VyQ29udGVudFZFbC5hdHRyKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBQcm9wZXJ0aWVzIHdpdGggc3BlY2lhbCBsb2dpYyBzaG91bGQgYmUgYWRkZWQgYXMgY2FzZXMgdG8gdGhpcyBzd2l0Y2ggYmxvY2s6XG4gICAgICAgICAgICAgICAgc3dpdGNoKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2Zvcm0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBQcmVwZW5kIGB0cmFuc2Zvcm1gIHRvIGV4aXN0aW5nIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyQ29udGVudFZFbC5hdHRyKGtleSwgKHZhbHVlICsgJyAnICsgbWFya3VwVmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1hcmtlckNvbnRlbnRWRWwuYXBwZW5kVG8obWFya2VyVkVsKTtcbiAgICAgICAgbWFya2VyVkVsLmFwcGVuZFRvKGRlZnMpO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfSxcblxuICAgIGN1c3RvbUV2ZW50VHJpZ2dlcjogZnVuY3Rpb24oZXZ0LCB2aWV3LCByb290Tm9kZSA9IHZpZXcuZWwpIHtcblxuICAgICAgICBjb25zdCBldmVudE5vZGUgPSBldnQudGFyZ2V0LmNsb3Nlc3QoJ1tldmVudF0nKTtcblxuICAgICAgICBpZiAoZXZlbnROb2RlICYmIHJvb3ROb2RlICE9PSBldmVudE5vZGUgJiYgdmlldy5lbC5jb250YWlucyhldmVudE5vZGUpKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudEV2dCA9IG5vcm1hbGl6ZUV2ZW50KCQuRXZlbnQoZXZ0Lm9yaWdpbmFsRXZlbnQsIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBldnQuZGF0YSxcbiAgICAgICAgICAgICAgICAvLyBPcmlnaW5hbGx5IHRoZSBldmVudCBsaXN0ZW5lciB3YXMgYXR0YWNoZWQgdG8gdGhlIGV2ZW50IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgY3VycmVudFRhcmdldDogZXZlbnROb2RlXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHRoaXMub25ldmVudChldmVudEV2dCk7XG5cbiAgICAgICAgICAgIGlmIChldmVudEV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRFdnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn0sIHtcblxuICAgIHNvcnRpbmc6IHNvcnRpbmdUeXBlcyxcblxuICAgIExheWVyczogTGF5ZXJzTmFtZXMsXG5cbiAgICBiYWNrZ3JvdW5kUGF0dGVybnM6IHtcblxuICAgICAgICBmbGlwWHk6IGZ1bmN0aW9uKGltZykge1xuICAgICAgICAgICAgLy8gZCBiXG4gICAgICAgICAgICAvLyBxIHBcblxuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgdmFyIGltZ1dpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgdmFyIGltZ0hlaWdodCA9IGltZy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IDIgKiBpbWdXaWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSAyICogaW1nSGVpZ2h0O1xuXG4gICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICAvLyB0b3AtbGVmdCBpbWFnZVxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZ1dpZHRoLCBpbWdIZWlnaHQpO1xuICAgICAgICAgICAgLy8geHktZmxpcHBlZCBib3R0b20tcmlnaHQgaW1hZ2VcbiAgICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0oLTEsIDAsIDAsIC0xLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZ1dpZHRoLCBpbWdIZWlnaHQpO1xuICAgICAgICAgICAgLy8geC1mbGlwcGVkIHRvcC1yaWdodCBpbWFnZVxuICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybSgtMSwgMCwgMCwgMSwgY2FudmFzLndpZHRoLCAwKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBpbWdXaWR0aCwgaW1nSGVpZ2h0KTtcbiAgICAgICAgICAgIC8vIHktZmxpcHBlZCBib3R0b20tbGVmdCBpbWFnZVxuICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAtMSwgMCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgaW1nV2lkdGgsIGltZ0hlaWdodCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmxpcFg6IGZ1bmN0aW9uKGltZykge1xuICAgICAgICAgICAgLy8gZCBiXG4gICAgICAgICAgICAvLyBkIGJcblxuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgdmFyIGltZ1dpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgdmFyIGltZ0hlaWdodCA9IGltZy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltZ1dpZHRoICogMjtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWdIZWlnaHQ7XG5cbiAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIC8vIGxlZnQgaW1hZ2VcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBpbWdXaWR0aCwgaW1nSGVpZ2h0KTtcbiAgICAgICAgICAgIC8vIGZsaXBwZWQgcmlnaHQgaW1hZ2VcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMiAqIGltZ1dpZHRoLCAwKTtcbiAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgaW1nV2lkdGgsIGltZ0hlaWdodCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmxpcFk6IGZ1bmN0aW9uKGltZykge1xuICAgICAgICAgICAgLy8gZCBkXG4gICAgICAgICAgICAvLyBxIHFcblxuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgdmFyIGltZ1dpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgdmFyIGltZ0hlaWdodCA9IGltZy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltZ1dpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGltZ0hlaWdodCAqIDI7XG5cbiAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIC8vIHRvcCBpbWFnZVxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZ1dpZHRoLCBpbWdIZWlnaHQpO1xuICAgICAgICAgICAgLy8gZmxpcHBlZCBib3R0b20gaW1hZ2VcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMCwgMiAqIGltZ0hlaWdodCk7XG4gICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZ1dpZHRoLCBpbWdIZWlnaHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHdhdGVybWFyazogZnVuY3Rpb24oaW1nLCBvcHQpIHtcbiAgICAgICAgICAgIC8vICAgZFxuICAgICAgICAgICAgLy8gZFxuXG4gICAgICAgICAgICBvcHQgPSBvcHQgfHwge307XG5cbiAgICAgICAgICAgIHZhciBpbWdXaWR0aCA9IGltZy53aWR0aDtcbiAgICAgICAgICAgIHZhciBpbWdIZWlnaHQgPSBpbWcuaGVpZ2h0O1xuXG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWdXaWR0aCAqIDM7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nSGVpZ2h0ICogMztcblxuICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgdmFyIGFuZ2xlID0gaXNOdW1iZXIob3B0LndhdGVybWFya0FuZ2xlKSA/IC1vcHQud2F0ZXJtYXJrQW5nbGUgOiAtMjA7XG4gICAgICAgICAgICB2YXIgcmFkaWFucyA9IHRvUmFkKGFuZ2xlKTtcbiAgICAgICAgICAgIHZhciBzdGVwWCA9IGNhbnZhcy53aWR0aCAvIDQ7XG4gICAgICAgICAgICB2YXIgc3RlcFkgPSBjYW52YXMuaGVpZ2h0IC8gNDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGkgKyBqKSAlIDIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgKDIgKiBpIC0gMSkgKiBzdGVwWCwgKDIgKiBqIC0gMSkgKiBzdGVwWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucm90YXRlKHJhZGlhbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIC1pbWdXaWR0aCAvIDIsIC1pbWdIZWlnaHQgLyAyLCBpbWdXaWR0aCwgaW1nSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBncmlkUGF0dGVybnM6IHtcbiAgICAgICAgZG90OiBbe1xuICAgICAgICAgICAgY29sb3I6ICcjQUFBQUFBJyxcbiAgICAgICAgICAgIHRoaWNrbmVzczogMSxcbiAgICAgICAgICAgIG1hcmt1cDogJ3JlY3QnLFxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihlbCwgb3B0KSB7XG4gICAgICAgICAgICAgICAgVihlbCkuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBvcHQudGhpY2tuZXNzICogb3B0LnN4LFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG9wdC50aGlja25lc3MgKiBvcHQuc3ksXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IG9wdC5jb2xvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSxcbiAgICAgICAgZml4ZWREb3Q6IFt7XG4gICAgICAgICAgICBjb2xvcjogJyNBQUFBQUEnLFxuICAgICAgICAgICAgdGhpY2tuZXNzOiAxLFxuICAgICAgICAgICAgbWFya3VwOiAncmVjdCcsXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsLCBvcHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IG9wdC5zeCA8PSAxID8gb3B0LnRoaWNrbmVzcyAqIG9wdC5zeCA6IG9wdC50aGlja25lc3M7XG4gICAgICAgICAgICAgICAgVihlbCkuYXR0cih7IHdpZHRoOiBzaXplLCBoZWlnaHQ6IHNpemUsIGZpbGw6IG9wdC5jb2xvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0sXG4gICAgICAgIG1lc2g6IFt7XG4gICAgICAgICAgICBjb2xvcjogJyNBQUFBQUEnLFxuICAgICAgICAgICAgdGhpY2tuZXNzOiAxLFxuICAgICAgICAgICAgbWFya3VwOiAncGF0aCcsXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsLCBvcHQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IG9wdC53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gb3B0LmhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgdGhpY2tuZXNzID0gb3B0LnRoaWNrbmVzcztcblxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCAtIHRoaWNrbmVzcyA+PSAwICYmIGhlaWdodCAtIHRoaWNrbmVzcyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBbJ00nLCB3aWR0aCwgMCwgJ0gwIE0wIDAgVjAnLCBoZWlnaHRdLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkID0gJ00gMCAwIDAgMCc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgVihlbCkuYXR0cih7ICdkJzogZCwgc3Ryb2tlOiBvcHQuY29sb3IsICdzdHJva2Utd2lkdGgnOiBvcHQudGhpY2tuZXNzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSxcbiAgICAgICAgZG91YmxlTWVzaDogW3tcbiAgICAgICAgICAgIGNvbG9yOiAnI0FBQUFBQScsXG4gICAgICAgICAgICB0aGlja25lc3M6IDEsXG4gICAgICAgICAgICBtYXJrdXA6ICdwYXRoJyxcbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZWwsIG9wdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGQ7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gb3B0LndpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciB0aGlja25lc3MgPSBvcHQudGhpY2tuZXNzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoIC0gdGhpY2tuZXNzID49IDAgJiYgaGVpZ2h0IC0gdGhpY2tuZXNzID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9IFsnTScsIHdpZHRoLCAwLCAnSDAgTTAgMCBWMCcsIGhlaWdodF0uam9pbignICcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSAnTSAwIDAgMCAwJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBWKGVsKS5hdHRyKHsgJ2QnOiBkLCBzdHJva2U6IG9wdC5jb2xvciwgJ3N0cm9rZS13aWR0aCc6IG9wdC50aGlja25lc3MgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgICB0aGlja25lc3M6IDMsXG4gICAgICAgICAgICBzY2FsZUZhY3RvcjogNCxcbiAgICAgICAgICAgIG1hcmt1cDogJ3BhdGgnLFxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihlbCwgb3B0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvcHQud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9wdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHRoaWNrbmVzcyA9IG9wdC50aGlja25lc3M7XG5cbiAgICAgICAgICAgICAgICBpZiAod2lkdGggLSB0aGlja25lc3MgPj0gMCAmJiBoZWlnaHQgLSB0aGlja25lc3MgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkID0gWydNJywgd2lkdGgsIDAsICdIMCBNMCAwIFYwJywgaGVpZ2h0XS5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9ICdNIDAgMCAwIDAnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIFYoZWwpLmF0dHIoeyAnZCc6IGQsIHN0cm9rZTogb3B0LmNvbG9yLCAnc3Ryb2tlLXdpZHRoJzogb3B0LnRoaWNrbmVzcyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICB9XG59KTtcblxuIl0sIm5hbWVzIjpbIlYiLCJpc051bWJlciIsImFzc2lnbiIsIm5leHRGcmFtZSIsImlzT2JqZWN0IiwiY2FuY2VsRnJhbWUiLCJkZWZhdWx0cyIsImRlZmF1bHRzRGVlcCIsImFkZENsYXNzTmFtZVByZWZpeCIsIm5vcm1hbGl6ZVNpZGVzIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJnZXRCeVBhdGgiLCJzb3J0RWxlbWVudHMiLCJpc1N0cmluZyIsImd1aWQiLCJub3JtYWxpemVFdmVudCIsIm5vcm1hbGl6ZVdoZWVsIiwiY2FwIiwiZGVib3VuY2UiLCJvbWl0IiwicmVzdWx0IiwibWVyZ2UiLCJjYW1lbENhc2UiLCJjbG9uZURlZXAiLCJpbnZva2UiLCJoYXNoQ29kZSIsImZpbHRlciIsIl9maWx0ZXIiLCJwYXJzZURPTUpTT04iLCJ0b0FycmF5IiwiaGFzIiwiUmVjdCIsIlBvaW50IiwidG9SYWQiLCJWaWV3Iiwidmlld3MiLCJDZWxsVmlldyIsIkVsZW1lbnRWaWV3IiwiTGlua1ZpZXciLCJMaW5rIiwiQ2VsbCIsIkdyYXBoIiwiTGF5ZXJzTmFtZXMiLCJQYXBlckxheWVyIiwiaGlnaGxpZ2h0ZXJzIiwibGlua0FuY2hvcnMiLCJjb25uZWN0aW9uUG9pbnRzIiwiYW5jaG9ycyIsIiQiLCJCYWNrYm9uZSIsInNvcnRpbmdUeXBlcyIsIk5PTkUiLCJBUFBST1giLCJFWEFDVCIsIldIRUVMX0NBUCIsIldIRUVMX1dBSVRfTVMiLCJNT1VOVF9CQVRDSF9TSVpFIiwiVVBEQVRFX0JBVENIX1NJWkUiLCJJbmZpbml0eSIsIk1JTl9QUklPUklUWSIsIkhpZ2hsaWdodGluZ1R5cGVzIiwiSGlnaGxpZ2h0aW5nIiwiZGVmYXVsdEhpZ2hsaWdodGluZyIsIkRFRkFVTFQiLCJuYW1lIiwib3B0aW9ucyIsInBhZGRpbmciLCJNQUdORVRfQVZBSUxBQklMSVRZIiwiY2xhc3NOYW1lIiwiRUxFTUVOVF9BVkFJTEFCSUxJVFkiLCJkZWZhdWx0TGF5ZXJzIiwiQkFDSyIsIkNFTExTIiwiTEFCRUxTIiwiRlJPTlQiLCJUT09MUyIsIlBhcGVyIiwiZXh0ZW5kIiwid2lkdGgiLCJoZWlnaHQiLCJvcmlnaW4iLCJ4IiwieSIsImdyaWRTaXplIiwiZHJhd0dyaWQiLCJkcmF3R3JpZFNpemUiLCJiYWNrZ3JvdW5kIiwicGVycGVuZGljdWxhckxpbmtzIiwiZWxlbWVudFZpZXciLCJsaW5rVmlldyIsInNuYXBMYWJlbHMiLCJzbmFwTGlua3MiLCJzbmFwTGlua3NTZWxmIiwibGFiZWxzTGF5ZXIiLCJtdWx0aUxpbmtzIiwiZ3VhcmQiLCJldnQiLCJ2aWV3IiwiaGlnaGxpZ2h0aW5nIiwicHJldmVudENvbnRleHRNZW51IiwicHJldmVudERlZmF1bHRCbGFua0FjdGlvbiIsInByZXZlbnREZWZhdWx0Vmlld0FjdGlvbiIsInJlc3RyaWN0VHJhbnNsYXRlIiwibWFya0F2YWlsYWJsZSIsImRlZmF1bHRMaW5rIiwiZGVmYXVsdENvbm5lY3RvciIsImRlZmF1bHRSb3V0ZXIiLCJkZWZhdWx0QW5jaG9yIiwiZGVmYXVsdExpbmtBbmNob3IiLCJkZWZhdWx0Q29ubmVjdGlvblBvaW50IiwiY29ubmVjdGlvblN0cmF0ZWd5IiwidmFsaWRhdGVNYWduZXQiLCJfY2VsbFZpZXciLCJtYWduZXQiLCJfZXZ0IiwiZ2V0QXR0cmlidXRlIiwidmFsaWRhdGVDb25uZWN0aW9uIiwiY2VsbFZpZXdTIiwiX21hZ25ldFMiLCJjZWxsVmlld1QiLCJfbWFnbmV0VCIsImVuZCIsIl9saW5rVmlldyIsImVtYmVkZGluZ01vZGUiLCJ2YWxpZGF0ZUVtYmVkZGluZyIsImNoaWxkVmlldyIsInBhcmVudFZpZXciLCJ2YWxpZGF0ZVVuZW1iZWRkaW5nIiwiZmluZFBhcmVudEJ5IiwiZnJvbnRQYXJlbnRPbmx5IiwiaW50ZXJhY3RpdmUiLCJsYWJlbE1vdmUiLCJsaW5rUGlubmluZyIsImFsbG93TGluayIsImNsaWNrVGhyZXNob2xkIiwibW92ZVRocmVzaG9sZCIsIm1hZ25ldFRocmVzaG9sZCIsInNvcnRpbmciLCJmcm96ZW4iLCJhdXRvRnJlZXplIiwib25WaWV3VXBkYXRlIiwiZmxhZyIsInByaW9yaXR5Iiwib3B0IiwicGFwZXIiLCJGTEFHX0lOU0VSVCIsIkZMQUdfUkVNT1ZFIiwibW91bnRpbmciLCJpc29sYXRlIiwicmVxdWVzdENvbm5lY3RlZExpbmtzVXBkYXRlIiwib25WaWV3UG9zdHBvbmVkIiwiZm9yY2VQb3N0cG9uZWRWaWV3VXBkYXRlIiwiYmVmb3JlUmVuZGVyIiwiYWZ0ZXJSZW5kZXIiLCJ2aWV3cG9ydCIsImNlbGxWaWV3TmFtZXNwYWNlIiwicm91dGVyTmFtZXNwYWNlIiwiY29ubmVjdG9yTmFtZXNwYWNlIiwiaGlnaGxpZ2h0ZXJOYW1lc3BhY2UiLCJhbmNob3JOYW1lc3BhY2UiLCJsaW5rQW5jaG9yTmFtZXNwYWNlIiwiY29ubmVjdGlvblBvaW50TmFtZXNwYWNlIiwib3ZlcmZsb3ciLCJldmVudHMiLCJkb2N1bWVudEV2ZW50cyIsInN2ZyIsImRlZnMiLCJ0b29scyIsIiRiYWNrZ3JvdW5kIiwibGF5ZXJzIiwiJGdyaWQiLCIkZG9jdW1lbnQiLCJfdmlld3BvcnRNYXRyaXgiLCJfdmlld3BvcnRUcmFuc2Zvcm1TdHJpbmciLCJfdXBkYXRlcyIsIl9sYXllcnMiLCJTT1JUX0RFTEFZSU5HX0JBVENIRVMiLCJVUERBVEVfREVMQVlJTkdfQkFUQ0hFUyIsIkZPUk1fQ09OVFJPTF9UQUdfTkFNRVMiLCJHVUFSREVEX1RBR19OQU1FUyIsIk1JTl9TQ0FMRSIsImluaXQiLCJlbCIsImpvaW50Iiwic2hhcGVzIiwibW9kZWwiLCJzZXRHcmlkIiwiY2xvbmVPcHRpb25zIiwicmVuZGVyIiwiX3NldERpbWVuc2lvbnMiLCJzdGFydExpc3RlbmluZyIsIl92aWV3cyIsIl9td19ldnRfYnVmZmVyIiwiZXZlbnQiLCJkZWx0YXMiLCJvd25lckRvY3VtZW50IiwicmVzZXRWaWV3cyIsImF0dHJpYnV0ZXMiLCJjZWxscyIsIm1vZGVscyIsImlzRnJvemVuIiwiaXNBc3luYyIsInVwZGF0ZVZpZXdzQXN5bmMiLCJfcmVzZXRVcGRhdGVzIiwiaWQiLCJwcmlvcml0aWVzIiwidW5tb3VudGVkQ2lkcyIsIm1vdW50ZWRDaWRzIiwidW5tb3VudGVkIiwibW91bnRlZCIsImNvdW50Iiwia2V5RnJvemVuIiwiZnJlZXplS2V5Iiwic29ydCIsImRpc2FibGVkIiwiaWRsZSIsImxpc3RlblRvIiwib25DZWxsQWRkZWQiLCJvbkNlbGxSZW1vdmVkIiwib25DZWxsQ2hhbmdlIiwib25HcmFwaFJlc2V0Iiwib25HcmFwaFNvcnQiLCJvbkdyYXBoQmF0Y2hTdG9wIiwib24iLCJvbkNlbGxIaWdobGlnaHQiLCJvbkNlbGxVbmhpZ2hsaWdodCIsInVwZGF0ZSIsImNlbGwiLCJfIiwicG9zaXRpb24iLCJyZW5kZXJWaWV3IiwibWF4UG9zaXRpb24iLCJmcmVlemUiLCJrZXkiLCJ1bmZyZWV6ZSIsImZpbmRWaWV3QnlNb2RlbCIsInJlcXVlc3RWaWV3VXBkYXRlIiwiVVBEQVRFX1BSSU9SSVRZIiwiaGFzQ2hhbmdlZCIsImNvbGxlY3Rpb24iLCJyZXNldExheWVycyIsImhhc0FjdGl2ZUJhdGNoIiwic29ydFZpZXdzIiwiZGF0YSIsImJhdGNoTmFtZSIsImdyYXBoIiwidXBkYXRlRGVsYXlpbmdCYXRjaGVzIiwiaW5jbHVkZXMiLCJ1cGRhdGVWaWV3cyIsInNvcnREZWxheWluZ0JhdGNoZXMiLCJjaGlsZHJlbiIsIm5zIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwieGh0bWwiLCJ0YWdOYW1lIiwic2VsZWN0b3IiLCJ4bGluayIsImhhc0xheWVyVmlldyIsImxheWVyTmFtZSIsImdldExheWVyVmlldyIsIkVycm9yIiwiZ2V0TGF5ZXJOb2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiZ3JpZCIsInN0eWxlIiwicmVuZGVyTGF5ZXJzIiwiZW5zdXJlSWQiLCJkcmF3QmFja2dyb3VuZCIsInJlbW92ZUxheWVycyIsImZvckVhY2giLCJzb3J0ZWQiLCJsYXllclZpZXciLCJhcHBlbmRDaGlsZCIsImNlbGxzTGF5ZXJWaWV3IiwidG9vbHNMYXllclZpZXciLCJsYWJlbHNMYXllclZpZXciLCJ2ZWwiLCJhZGRDbGFzcyIsIk9iamVjdCIsImtleXMiLCJyZW1vdmUiLCJyZW1vdmVQaXZvdHMiLCJfYmFja2dyb3VuZCIsInVwZGF0ZUJhY2tncm91bmRJbWFnZSIsIm1hdHJpeCIsImN0bSIsInVuZGVmaW5lZCIsInRyYW5zZm9ybVN0cmluZyIsImdldENUTSIsImNyZWF0ZVNWR01hdHJpeCIsImN0bVN0cmluZyIsIm1hdHJpeFRvVHJhbnNmb3JtU3RyaW5nIiwic2V0QXR0cmlidXRlIiwiY2xpZW50TWF0cml4IiwiZ2V0U2NyZWVuQ1RNIiwibGlua3MiLCJnZXRDb25uZWN0ZWRMaW5rcyIsImoiLCJuIiwibGVuZ3RoIiwibGluayIsImZsYWdMYWJlbHMiLCJnZXRUYXJnZXRDZWxsIiwicHVzaCIsImdldFNvdXJjZUNlbGwiLCJuZXh0UHJpb3JpdHkiLCJNYXRoIiwibWF4Iiwic2NoZWR1bGVWaWV3VXBkYXRlIiwiZ2V0RmxhZyIsImlzRWxlbWVudCIsImR1bXBPcHRpb25zIiwic2lsZW50Iiwic291cmNlRmxhZyIsInNvdXJjZVZpZXciLCJpc1ZpZXdNb3VudGVkIiwiZHVtcFZpZXciLCJ1cGRhdGVFbmRNYWduZXQiLCJ0YXJnZXRGbGFnIiwidGFyZ2V0VmlldyIsImFzeW5jIiwic3RhdHMiLCJub3RpZnlBZnRlclJlbmRlciIsInR5cGUiLCJ1cGRhdGVzIiwiY2lkIiwicHJpb3JpdHlVcGRhdGVzIiwiaSIsInByZXZQcmlvcml0eVVwZGF0ZXMiLCJjdXJyZW50VHlwZSIsInZpZXdVcGRhdGVGbiIsImNhbGwiLCJkdW1wVmlld1VwZGF0ZSIsInJlZ2lzdGVyTW91bnRlZFZpZXciLCJzaG91bGROb3RpZnkiLCJub3RpZnlCZWZvcmVSZW5kZXIiLCJsZWZ0b3ZlciIsInVwZGF0ZVZpZXciLCJ1cGRhdGVkIiwiRkxBR19JTklUIiwicmVtb3ZlVmlldyIsImlzSW5pdGlhbEluc2VydCIsImluc2VydFZpZXciLCJjb25maXJtVXBkYXRlIiwicmVxdWlyZVZpZXciLCJyZWdpc3RlclVubW91bnRlZFZpZXciLCJkdW1wVmlld3MiLCJwYXNzaW5nT3B0IiwiY2hlY2tWaWV3cG9ydCIsImJhdGNoU3RhdHMiLCJ1cGRhdGVDb3VudCIsImJhdGNoQ291bnQiLCJ1cGRhdGVWaWV3c0JhdGNoIiwibWluIiwiZW1wdHkiLCJiYXRjaGVzIiwiaGFzU2NoZWR1bGVkVXBkYXRlcyIsInByaW9yaXR5SW5kZXhlcyIsIl9rZXkiLCJwcm9jZXNzZWQiLCJtb3VudEJhdGNoU2l6ZSIsInVubW91bnRCYXRjaFNpemUiLCJjaGVja1N0YXRzIiwidW5tb3VudENvdW50IiwibW91bnRDb3VudCIsInRvdGFsIiwidHJpZ2dlciIsInByb2dyZXNzRm4iLCJwcm9ncmVzcyIsImJlZm9yZUZuIiwiYWZ0ZXJGbiIsImJhdGNoU2l6ZSIsInBvc3Rwb25lQ291bnQiLCJtYXhQcmlvcml0eSIsInZpZXdwb3J0Rm4iLCJwb3N0cG9uZVZpZXdGbiIsIm1haW4iLCJjdXJyZW50RmxhZyIsImlzRGV0YWNoZWQiLCJERVRBQ0hBQkxFIiwiZGV0YWNoVmlldyIsImxlZnRvdmVyRmxhZyIsInBvc3Rwb25lZCIsImdldFVubW91bnRlZFZpZXdzIiwidW5tb3VudGVkVmlld3MiLCJBcnJheSIsImdldE1vdW50ZWRWaWV3cyIsIm1vdW50ZWRWaWV3cyIsImNoZWNrVW5tb3VudGVkVmlld3MiLCJzcGxpY2UiLCJjaGVja01vdW50ZWRWaWV3cyIsImNoZWNrVmlld1Zpc2liaWxpdHkiLCJjZWxsVmlldyIsInZpc2libGUiLCJpc1VubW91bnRlZCIsImlzTW91bnRlZCIsImluZGV4T2YiLCJ1bm1vdW50ZWRDb3VudCIsIm1vdW50ZWRDb3VudCIsImlzRXhhY3RTb3J0aW5nIiwib25SZW1vdmUiLCJyZW1vdmVWaWV3cyIsImdldENvbXB1dGVkU2l6ZSIsInciLCJoIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJzZXREaW1lbnNpb25zIiwiY3VycmVudFdpZHRoIiwiY3VycmVudEhlaWdodCIsImNvbXB1dGVkU2l6ZSIsInJvdW5kIiwiJGVsIiwiY3NzIiwic2V0T3JpZ2luIiwib3giLCJveSIsInRyYW5zbGF0ZSIsImZpdFRvQ29udGVudCIsImdyaWRXaWR0aCIsImdyaWRIZWlnaHQiLCJnZXRGaXRUb0NvbnRlbnRBcmVhIiwic3giLCJzeSIsInNjYWxlIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJtYXhXaWR0aCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIm1heEhlaWdodCIsIm5ld09yaWdpbiIsImFsbG93TmV3T3JpZ2luIiwiYXJlYSIsImNvbnRlbnRBcmVhIiwiZ2V0Q29udGVudEFyZWEiLCJjYWxjV2lkdGgiLCJjZWlsIiwiY2FsY0hlaWdodCIsImFsbG93TmVnYXRpdmVCb3R0b21SaWdodCIsInR4IiwibGVmdCIsInR5IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJ0cmFuc2Zvcm1Ub0ZpdENvbnRlbnQiLCJjb250ZW50QkJveCIsImNvbnRlbnRMb2NhbE9yaWdpbiIsImxvY2FsVG9QYXBlclJlY3QiLCJnZXRDb250ZW50QkJveCIsInBhcGVyVG9Mb2NhbFBvaW50IiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInNjYWxlR3JpZCIsIm1pblNjYWxlIiwibWF4U2NhbGUiLCJ2ZXJ0aWNhbEFsaWduIiwiaG9yaXpvbnRhbEFsaWduIiwibWluU2NhbGVYIiwibWF4U2NhbGVYIiwibWluU2NhbGVZIiwibWF4U2NhbGVZIiwiZml0dGluZ0JCb3giLCJjdXJyZW50VHJhbnNsYXRlIiwibW92ZUFuZEV4cGFuZCIsImN1cnJlbnRTY2FsZSIsIm5ld1N4IiwibmV3U3kiLCJmbG9vciIsInNjYWxlRGlmZiIsIm5ld094IiwibmV3T3kiLCJzY2FsZUNvbnRlbnRUb0ZpdCIsInVzZU1vZGVsR2VvbWV0cnkiLCJnZXRCQm94IiwiZ2V0QXJlYSIsInBhcGVyVG9Mb2NhbFJlY3QiLCJnZXRSZXN0cmljdGVkQXJlYSIsImFyZ3MiLCJyZXN0cmljdGVkQXJlYSIsImFwcGx5IiwiY3JlYXRlVmlld0Zvck1vZGVsIiwib3B0aW9uYWxWaWV3Q2xhc3MiLCJkZWZhdWx0Vmlld0NsYXNzIiwiZ2V0IiwibmFtZXNwYWNlVmlld0NsYXNzIiwiaXNMaW5rIiwiVmlld0NsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwib25JbWFnZURyYWdTdGFydCIsInNvcnRWaWV3c0V4YWN0IiwiJGNlbGxzIiwiYSIsImIiLCJjZWxsQSIsImNlbGxCIiwiekEiLCJ6IiwiekIiLCJpbnNlcnRTb3J0ZWROb2RlIiwiaW5zZXJ0Tm9kZSIsIm9uTW91bnQiLCJ1bm1vdW50Iiwib25EZXRhY2giLCJtYXRyaXhUb1NjYWxlIiwibmV3VHgiLCJuZXdUeSIsImQiLCJyb3RhdGUiLCJhbmdsZSIsImN4IiwiY3kiLCJtYXRyaXhUb1JvdGF0ZSIsImJib3giLCJtYXRyaXhUb1RyYW5zbGF0ZSIsImUiLCJmIiwiZmluZFZpZXciLCJxdWVyeVNlbGVjdG9yIiwiZmluZEF0dHJpYnV0ZSIsImZpbmRWaWV3c0Zyb21Qb2ludCIsInAiLCJnZXRFbGVtZW50cyIsIm1hcCIsInRhcmdldCIsImNvbnRhaW5zUG9pbnQiLCJmaW5kVmlld3NJbkFyZWEiLCJyZWN0Iiwic3RyaWN0IiwibWV0aG9kIiwicmVtb3ZlVG9vbHMiLCJkaXNwYXRjaFRvb2xzRXZlbnQiLCJoaWRlVG9vbHMiLCJzaG93VG9vbHMiLCJnZXRNb2RlbEJ5SWQiLCJnZXRDZWxsIiwic25hcFRvR3JpZCIsImNsaWVudFRvTG9jYWxQb2ludCIsImxvY2FsVG9QYXBlclBvaW50IiwibG9jYWxQb2ludCIsInBhcGVyUG9pbnQiLCJ0cmFuc2Zvcm1Qb2ludCIsImxvY2FsUmVjdCIsInBhcGVyUmVjdCIsInRyYW5zZm9ybVJlY3QiLCJpbnZlcnNlIiwibG9jYWxUb0NsaWVudFBvaW50IiwiY2xpZW50UG9pbnQiLCJsb2NhbFRvQ2xpZW50UmVjdCIsImNsaWVudFJlY3QiLCJjbGllbnRUb0xvY2FsUmVjdCIsImxvY2FsVG9QYWdlUG9pbnQiLCJvZmZzZXQiLCJwYWdlT2Zmc2V0IiwibG9jYWxUb1BhZ2VSZWN0IiwicGFnZVRvTG9jYWxQb2ludCIsInBhZ2VQb2ludCIsImRpZmZlcmVuY2UiLCJwYWdlVG9Mb2NhbFJlY3QiLCJjbGllbnRPZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5kb3ciLCJzY3JvbGxYIiwic2Nyb2xsWSIsImxpbmtBbGxvd2VkIiwicGFwZXJPcHRpb25zIiwiY29uc3RydWN0b3IiLCJ2YWxpZGF0aW9ucyIsImdldERlZmF1bHRMaW5rIiwiY2xvbmUiLCJyZXNvbHZlSGlnaGxpZ2h0ZXIiLCJoaWdobGlnaHRlciIsImhpZ2hsaWdodGVyRGVmIiwiaGlnaGxpZ2h0IiwidW5oaWdobGlnaHQiLCJtYWduZXRFbCIsImhpZ2hsaWdodGVyRGVzY3JpcHRvciIsInBvaW50ZXJkYmxjbGljayIsInByZXZlbnREZWZhdWx0IiwiY2xpZW50WCIsImNsaWVudFkiLCJwb2ludGVyY2xpY2siLCJldmVudERhdGEiLCJtb3VzZW1vdmVkIiwiY29udGV4dG1lbnUiLCJjb250ZXh0TWVudUZpcmVkIiwiY29udGV4dE1lbnVUcmlnZ2VyIiwicG9pbnRlcmRvd24iLCJidXR0b24iLCJpc0NvbnRleHRNZW51IiwiaXNUYXJnZXRGb3JtTm9kZSIsInByZXZlbnREZWZhdWx0SW50ZXJhY3Rpb24iLCJldmVudEV2dCIsImN1c3RvbUV2ZW50VHJpZ2dlciIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwibWFnbmV0Tm9kZSIsImNsb3Nlc3QiLCJjb250YWlucyIsIm1hZ25ldEV2dCIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImN1cnJlbnRUYXJnZXQiLCJvbm1hZ25ldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlbGVnYXRlRHJhZ0V2ZW50cyIsImNvbnRleHRtZW51RXZ0IiwicG9pbnRlcm1vdmUiLCJ1bmRlbGVnYXRlRXZlbnRzIiwicG9pbnRlcnVwIiwidW5kZWxlZ2F0ZURvY3VtZW50RXZlbnRzIiwibm9ybWFsaXplZEV2dCIsImRlbGVnYXRlRXZlbnRzIiwibW91c2VvdmVyIiwibW91c2VvdXQiLCJtb3VzZWVudGVyIiwicmVsYXRlZFRhcmdldCIsInJlbGF0ZWRWaWV3IiwibW91c2VsZWF2ZSIsIl9wcm9jZXNzTW91c2VXaGVlbEV2dEJ1ZiIsImRlbHRhWSIsInJlZHVjZSIsImFjYyIsInBvdyIsIm1heFdhaXQiLCJtb3VzZXdoZWVsIiwiZGVsdGFYIiwicGluY2hIYW5kbGVycyIsIl9ldmVudHMiLCJjdHJsS2V5IiwiZGVsdGEiLCJ3aGVlbERlbHRhIiwib25ldmVudCIsImV2ZW50Tm9kZSIsImV2ZW50TmFtZSIsIm1hZ25ldEV2ZW50IiwiaGFuZGxlciIsIm1hZ25ldFZhbHVlIiwibWFnbmV0Q29udGV4dE1lbnVGaXJlZCIsIm1hZ25ldENvbnRleHRNZW51VHJpZ2dlciIsInN0b3BQcm9wYWdhdGlvbiIsIm1hZ25ldHBvaW50ZXJkYmxjbGljayIsIm1hZ25ldGNvbnRleHRtZW51Iiwib25sYWJlbCIsImxhYmVsTm9kZSIsImdldFBvaW50ZXJBcmdzIiwiZGVsZWdhdGVEb2N1bWVudEV2ZW50cyIsImd1YXJkZWQiLCJzZXRHcmlkU2l6ZSIsImNsZWFyR3JpZCIsIl9nZXRHcmlkUmVmcyIsIl9ncmlkQ2FjaGUiLCJyb290IiwicGF0dGVybnMiLCJhZGQiLCJub2RlIiwiYXBwZW5kIiwiZmlsbCIsImV4aXN0IiwiX2dyaWRTZXR0aW5ncyIsIm9wdGlvbnNMaXN0IiwiaXNBcnJheSIsIml0ZW0iLCJfcmVzb2x2ZURyYXdHcmlkT3B0aW9uIiwiZ3JpZFBhdHRlcm5zIiwibWFya3VwIiwicGF0dGVybiIsImxvY2FsT3B0aW9ucyIsInJlZnMiLCJncmlkTGF5ZXJTZXR0aW5nIiwiaW5kZXgiLCJzY2FsZUZhY3RvciIsInBhdHRlcm5Vbml0cyIsInBhdHRlcm5EZWZWZWwiLCJhdHRyIiwicGF0dGVyblVyaSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsImJ0b2EiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kU2l6ZSIsInNpemUiLCJkcmF3QmFja2dyb3VuZEltYWdlIiwiaW1nIiwiSFRNTEltYWdlRWxlbWVudCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRSZXBlYXQiLCJyZXBlYXQiLCJiYWNrZ3JvdW5kT3BhY2l0eSIsIm9wYWNpdHkiLCJiYWNrZ3JvdW5kUXVhbGl0eSIsImFicyIsInF1YWxpdHkiLCJiYWNrZ3JvdW5kUGF0dGVybiIsImJhY2tncm91bmRQYXR0ZXJucyIsImNhbnZhcyIsIkhUTUxDYW52YXNFbGVtZW50IiwidG9EYXRhVVJMIiwic3JjIiwidXBkYXRlQmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJpbWFnZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm9ubG9hZCIsImJpbmQiLCJzZXRJbnRlcmFjdGl2aXR5IiwidmFsdWUiLCJpc0RlZmluZWQiLCJkZWZJZCIsImdldEVsZW1lbnRCeUlkIiwiZGVmaW5lRmlsdGVyIiwiVHlwZUVycm9yIiwiZmlsdGVySWQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlsdGVyU1ZHU3RyaW5nIiwiZmlsdGVyQXR0cnMiLCJmaWx0ZXJVbml0cyIsImF0dHJzIiwiYXBwZW5kVG8iLCJkZWZpbmVHcmFkaWVudCIsImdyYWRpZW50Iiwic3RvcHMiLCJzdG9wVkVscyIsImlzRmluaXRlIiwiZ3JhZGllbnRWRWwiLCJkZWZpbmVQYXR0ZXJuIiwicGF0dGVyblZFbCIsImZyYWdtZW50IiwiZGVmaW5lTWFya2VyIiwibWFya2VyIiwibWFya2VyVW5pdHMiLCJtYXJrZXJWRWwiLCJvcmllbnQiLCJtYXJrZXJDb250ZW50VkVsIiwibWFya3VwVkVsIiwibWFya2VyQXR0cnMiLCJtYXJrZXJBdHRyc0tleXMiLCJtYXJrdXBWYWx1ZSIsInJvb3ROb2RlIiwiTGF5ZXJzIiwiZmxpcFh5IiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwic2V0VHJhbnNmb3JtIiwiZmxpcFgiLCJmbGlwWSIsIndhdGVybWFyayIsIndhdGVybWFya0FuZ2xlIiwicmFkaWFucyIsInN0ZXBYIiwic3RlcFkiLCJkb3QiLCJ0aGlja25lc3MiLCJmaXhlZERvdCIsIm1lc2giLCJqb2luIiwic3Ryb2tlIiwiZG91YmxlTWVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/Paper.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/PaperLayer.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/jointjs/src/dia/PaperLayer.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LayersNames: () => (/* binding */ LayersNames),\n/* harmony export */   PaperLayer: () => (/* binding */ PaperLayer)\n/* harmony export */ });\n/* harmony import */ var _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mvc/index.mjs */ \"(ssr)/./node_modules/jointjs/src/mvc/View.mjs\");\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n\n\nconst LayersNames = {\n    CELLS: \"cells\",\n    BACK: \"back\",\n    FRONT: \"front\",\n    TOOLS: \"tools\",\n    LABELS: \"labels\"\n};\nconst PaperLayer = _mvc_index_mjs__WEBPACK_IMPORTED_MODULE_0__.View.extend({\n    tagName: \"g\",\n    svgElement: true,\n    pivotNodes: null,\n    defaultTheme: null,\n    options: {\n        name: \"\"\n    },\n    className: function() {\n        return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.addClassNamePrefix)(`${this.options.name}-layer`);\n    },\n    init: function() {\n        this.pivotNodes = {};\n    },\n    insertSortedNode: function(node, z) {\n        this.el.insertBefore(node, this.insertPivot(z));\n    },\n    insertNode: function(node) {\n        const { el } = this;\n        if (node.parentNode !== el) {\n            el.appendChild(node);\n        }\n    },\n    insertPivot: function(z) {\n        const { el, pivotNodes } = this;\n        z = +z;\n        z || (z = 0);\n        let pivotNode = pivotNodes[z];\n        if (pivotNode) return pivotNode;\n        pivotNode = pivotNodes[z] = document.createComment(\"z-index:\" + (z + 1));\n        let neighborZ = -Infinity;\n        for(let currentZ in pivotNodes){\n            currentZ = +currentZ;\n            if (currentZ < z && currentZ > neighborZ) {\n                neighborZ = currentZ;\n                if (neighborZ === z - 1) continue;\n            }\n        }\n        if (neighborZ !== -Infinity) {\n            const neighborPivot = pivotNodes[neighborZ];\n            // Insert After\n            el.insertBefore(pivotNode, neighborPivot.nextSibling);\n        } else {\n            // First Child\n            el.insertBefore(pivotNode, el.firstChild);\n        }\n        return pivotNode;\n    },\n    removePivots: function() {\n        const { el, pivotNodes } = this;\n        for(let z in pivotNodes)el.removeChild(pivotNodes[z]);\n        this.pivotNodes = {};\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZGlhL1BhcGVyTGF5ZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0M7QUFDYztBQUUvQyxNQUFNRSxjQUFjO0lBQ3ZCQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsT0FBTztJQUNQQyxPQUFPO0lBQ1BDLFFBQVE7QUFDWixFQUFFO0FBRUssTUFBTUMsYUFBYVIsZ0RBQUlBLENBQUNTLE1BQU0sQ0FBQztJQUVsQ0MsU0FBUztJQUNUQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsY0FBYztJQUVkQyxTQUFTO1FBQ0xDLE1BQU07SUFDVjtJQUVBQyxXQUFXO1FBQ1AsT0FBT2Ysa0VBQWtCQSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNhLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMxRDtJQUVBRSxNQUFNO1FBQ0YsSUFBSSxDQUFDTCxVQUFVLEdBQUcsQ0FBQztJQUN2QjtJQUVBTSxrQkFBa0IsU0FBU0MsSUFBSSxFQUFFQyxDQUFDO1FBQzlCLElBQUksQ0FBQ0MsRUFBRSxDQUFDQyxZQUFZLENBQUNILE1BQU0sSUFBSSxDQUFDSSxXQUFXLENBQUNIO0lBQ2hEO0lBRUFJLFlBQVksU0FBU0wsSUFBSTtRQUNyQixNQUFNLEVBQUVFLEVBQUUsRUFBRSxHQUFHLElBQUk7UUFDbkIsSUFBSUYsS0FBS00sVUFBVSxLQUFLSixJQUFJO1lBQ3hCQSxHQUFHSyxXQUFXLENBQUNQO1FBQ25CO0lBQ0o7SUFFQUksYUFBYSxTQUFTSCxDQUFDO1FBQ25CLE1BQU0sRUFBRUMsRUFBRSxFQUFFVCxVQUFVLEVBQUUsR0FBRyxJQUFJO1FBQy9CUSxJQUFJLENBQUNBO1FBQ0xBLEtBQU1BLENBQUFBLElBQUk7UUFDVixJQUFJTyxZQUFZZixVQUFVLENBQUNRLEVBQUU7UUFDN0IsSUFBSU8sV0FBVyxPQUFPQTtRQUN0QkEsWUFBWWYsVUFBVSxDQUFDUSxFQUFFLEdBQUdRLFNBQVNDLGFBQWEsQ0FBQyxhQUFjVCxDQUFBQSxJQUFJO1FBQ3JFLElBQUlVLFlBQVksQ0FBQ0M7UUFDakIsSUFBSyxJQUFJQyxZQUFZcEIsV0FBWTtZQUM3Qm9CLFdBQVcsQ0FBQ0E7WUFDWixJQUFJQSxXQUFXWixLQUFLWSxXQUFXRixXQUFXO2dCQUN0Q0EsWUFBWUU7Z0JBQ1osSUFBSUYsY0FBY1YsSUFBSSxHQUFHO1lBQzdCO1FBQ0o7UUFDQSxJQUFJVSxjQUFjLENBQUNDLFVBQVU7WUFDekIsTUFBTUUsZ0JBQWdCckIsVUFBVSxDQUFDa0IsVUFBVTtZQUMzQyxlQUFlO1lBQ2ZULEdBQUdDLFlBQVksQ0FBQ0ssV0FBV00sY0FBY0MsV0FBVztRQUN4RCxPQUFPO1lBQ0gsY0FBYztZQUNkYixHQUFHQyxZQUFZLENBQUNLLFdBQVdOLEdBQUdjLFVBQVU7UUFDNUM7UUFDQSxPQUFPUjtJQUNYO0lBRUFTLGNBQWM7UUFDVixNQUFNLEVBQUVmLEVBQUUsRUFBRVQsVUFBVSxFQUFFLEdBQUcsSUFBSTtRQUMvQixJQUFLLElBQUlRLEtBQUtSLFdBQVlTLEdBQUdnQixXQUFXLENBQUN6QixVQUFVLENBQUNRLEVBQUU7UUFDdEQsSUFBSSxDQUFDUixVQUFVLEdBQUcsQ0FBQztJQUN2QjtBQUVKLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9kaWEvUGFwZXJMYXllci5tanM/NDBhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vbXZjL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBhZGRDbGFzc05hbWVQcmVmaXggfSBmcm9tICcuLi91dGlsL3V0aWwubWpzJztcblxuZXhwb3J0IGNvbnN0IExheWVyc05hbWVzID0ge1xuICAgIENFTExTOiAnY2VsbHMnLFxuICAgIEJBQ0s6ICdiYWNrJyxcbiAgICBGUk9OVDogJ2Zyb250JyxcbiAgICBUT09MUzogJ3Rvb2xzJyxcbiAgICBMQUJFTFM6ICdsYWJlbHMnXG59O1xuXG5leHBvcnQgY29uc3QgUGFwZXJMYXllciA9IFZpZXcuZXh0ZW5kKHtcblxuICAgIHRhZ05hbWU6ICdnJyxcbiAgICBzdmdFbGVtZW50OiB0cnVlLFxuICAgIHBpdm90Tm9kZXM6IG51bGwsXG4gICAgZGVmYXVsdFRoZW1lOiBudWxsLFxuXG4gICAgb3B0aW9uczoge1xuICAgICAgICBuYW1lOiAnJ1xuICAgIH0sXG5cbiAgICBjbGFzc05hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkQ2xhc3NOYW1lUHJlZml4KGAke3RoaXMub3B0aW9ucy5uYW1lfS1sYXllcmApO1xuICAgIH0sXG5cbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5waXZvdE5vZGVzID0ge307XG4gICAgfSxcblxuICAgIGluc2VydFNvcnRlZE5vZGU6IGZ1bmN0aW9uKG5vZGUsIHopIHtcbiAgICAgICAgdGhpcy5lbC5pbnNlcnRCZWZvcmUobm9kZSwgdGhpcy5pbnNlcnRQaXZvdCh6KSk7XG4gICAgfSxcblxuICAgIGluc2VydE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgY29uc3QgeyBlbCB9ID0gdGhpcztcbiAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gZWwpIHtcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGluc2VydFBpdm90OiBmdW5jdGlvbih6KSB7XG4gICAgICAgIGNvbnN0IHsgZWwsIHBpdm90Tm9kZXMgfSA9IHRoaXM7XG4gICAgICAgIHogPSArejtcbiAgICAgICAgeiB8fCAoeiA9IDApO1xuICAgICAgICBsZXQgcGl2b3ROb2RlID0gcGl2b3ROb2Rlc1t6XTtcbiAgICAgICAgaWYgKHBpdm90Tm9kZSkgcmV0dXJuIHBpdm90Tm9kZTtcbiAgICAgICAgcGl2b3ROb2RlID0gcGl2b3ROb2Rlc1t6XSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ3otaW5kZXg6JyArICh6ICsgMSkpO1xuICAgICAgICBsZXQgbmVpZ2hib3JaID0gLUluZmluaXR5O1xuICAgICAgICBmb3IgKGxldCBjdXJyZW50WiBpbiBwaXZvdE5vZGVzKSB7XG4gICAgICAgICAgICBjdXJyZW50WiA9ICtjdXJyZW50WjtcbiAgICAgICAgICAgIGlmIChjdXJyZW50WiA8IHogJiYgY3VycmVudFogPiBuZWlnaGJvclopIHtcbiAgICAgICAgICAgICAgICBuZWlnaGJvclogPSBjdXJyZW50WjtcbiAgICAgICAgICAgICAgICBpZiAobmVpZ2hib3JaID09PSB6IC0gMSkgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5laWdoYm9yWiAhPT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICBjb25zdCBuZWlnaGJvclBpdm90ID0gcGl2b3ROb2Rlc1tuZWlnaGJvclpdO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IEFmdGVyXG4gICAgICAgICAgICBlbC5pbnNlcnRCZWZvcmUocGl2b3ROb2RlLCBuZWlnaGJvclBpdm90Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpcnN0IENoaWxkXG4gICAgICAgICAgICBlbC5pbnNlcnRCZWZvcmUocGl2b3ROb2RlLCBlbC5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGl2b3ROb2RlO1xuICAgIH0sXG5cbiAgICByZW1vdmVQaXZvdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCB7IGVsLCBwaXZvdE5vZGVzIH0gPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCB6IGluIHBpdm90Tm9kZXMpIGVsLnJlbW92ZUNoaWxkKHBpdm90Tm9kZXNbel0pO1xuICAgICAgICB0aGlzLnBpdm90Tm9kZXMgPSB7fTtcbiAgICB9XG5cbn0pO1xuIl0sIm5hbWVzIjpbIlZpZXciLCJhZGRDbGFzc05hbWVQcmVmaXgiLCJMYXllcnNOYW1lcyIsIkNFTExTIiwiQkFDSyIsIkZST05UIiwiVE9PTFMiLCJMQUJFTFMiLCJQYXBlckxheWVyIiwiZXh0ZW5kIiwidGFnTmFtZSIsInN2Z0VsZW1lbnQiLCJwaXZvdE5vZGVzIiwiZGVmYXVsdFRoZW1lIiwib3B0aW9ucyIsIm5hbWUiLCJjbGFzc05hbWUiLCJpbml0IiwiaW5zZXJ0U29ydGVkTm9kZSIsIm5vZGUiLCJ6IiwiZWwiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRQaXZvdCIsImluc2VydE5vZGUiLCJwYXJlbnROb2RlIiwiYXBwZW5kQ2hpbGQiLCJwaXZvdE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUNvbW1lbnQiLCJuZWlnaGJvcloiLCJJbmZpbml0eSIsImN1cnJlbnRaIiwibmVpZ2hib3JQaXZvdCIsIm5leHRTaWJsaW5nIiwiZmlyc3RDaGlsZCIsInJlbW92ZVBpdm90cyIsInJlbW92ZUNoaWxkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/PaperLayer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/attributes/calc.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/jointjs/src/dia/attributes/calc.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   evalCalcAttribute: () => (/* binding */ evalCalcAttribute),\n/* harmony export */   evalCalcExpression: () => (/* binding */ evalCalcExpression),\n/* harmony export */   isCalcAttribute: () => (/* binding */ isCalcAttribute)\n/* harmony export */ });\nconst props = {\n    x: \"x\",\n    y: \"y\",\n    width: \"w\",\n    height: \"h\",\n    minimum: \"s\",\n    maximum: \"l\",\n    diagonal: \"d\"\n};\nconst propsList = Object.keys(props).map((key)=>props[key]).join(\"\");\nconst numberPattern = \"[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?\";\nconst findSpacesRegex = /\\s/g;\nconst parseExpressionRegExp = new RegExp(`^(${numberPattern}\\\\*)?([${propsList}])(/${numberPattern})?([-+]{1,2}${numberPattern})?$`, \"g\");\nfunction throwInvalid(expression) {\n    throw new Error(`Invalid calc() expression: ${expression}`);\n}\nfunction evalCalcExpression(expression, bbox) {\n    const match = parseExpressionRegExp.exec(expression.replace(findSpacesRegex, \"\"));\n    if (!match) throwInvalid(expression);\n    parseExpressionRegExp.lastIndex = 0; // reset regex results for the next run\n    const [, multiply, property, divide, add] = match;\n    const { x, y, width, height } = bbox;\n    let value = 0;\n    switch(property){\n        case props.width:\n            {\n                value = width;\n                break;\n            }\n        case props.height:\n            {\n                value = height;\n                break;\n            }\n        case props.x:\n            {\n                value = x;\n                break;\n            }\n        case props.y:\n            {\n                value = y;\n                break;\n            }\n        case props.minimum:\n            {\n                value = Math.min(height, width);\n                break;\n            }\n        case props.maximum:\n            {\n                value = Math.max(height, width);\n                break;\n            }\n        case props.diagonal:\n            {\n                value = Math.sqrt(height * height + width * width);\n                break;\n            }\n    }\n    if (multiply) {\n        // e.g \"2*\"\n        value *= parseFloat(multiply);\n    }\n    if (divide) {\n        // e.g \"/2\"\n        value /= parseFloat(divide.slice(1));\n    }\n    if (add) {\n        value += evalAddExpression(add);\n    }\n    return value;\n}\nfunction evalAddExpression(addExpression) {\n    if (!addExpression) return 0;\n    const [sign] = addExpression;\n    switch(sign){\n        case \"+\":\n            {\n                return parseFloat(addExpression.substr(1));\n            }\n        case \"-\":\n            {\n                return -parseFloat(addExpression.substr(1));\n            }\n    }\n    return parseFloat(addExpression);\n}\nfunction isCalcAttribute(value) {\n    return typeof value === \"string\" && value.includes(\"calc\");\n}\nconst calcStart = \"calc(\";\nconst calcStartOffset = calcStart.length;\nfunction evalCalcAttribute(attributeValue, refBBox) {\n    let value = attributeValue;\n    let startSearchIndex = 0;\n    do {\n        let calcIndex = value.indexOf(calcStart, startSearchIndex);\n        if (calcIndex === -1) return value;\n        let calcEndIndex = calcIndex + calcStartOffset;\n        let brackets = 1;\n        findClosingBracket: do {\n            switch(value[calcEndIndex]){\n                case \"(\":\n                    {\n                        brackets++;\n                        break;\n                    }\n                case \")\":\n                    {\n                        brackets--;\n                        if (brackets === 0) break findClosingBracket;\n                        break;\n                    }\n                case undefined:\n                    {\n                        // Could not find the closing bracket.\n                        throwInvalid(value);\n                    }\n            }\n            calcEndIndex++;\n        }while (true);\n        // Get the calc() expression without nested calcs (recursion)\n        let expression = value.slice(calcIndex + calcStartOffset, calcEndIndex);\n        if (isCalcAttribute(expression)) {\n            expression = evalCalcAttribute(expression, refBBox);\n        }\n        // Eval the calc() expression without nested calcs.\n        const calcValue = String(evalCalcExpression(expression, refBBox));\n        // Replace the calc() expression and continue search\n        value = value.slice(0, calcIndex) + calcValue + value.slice(calcEndIndex + 1);\n        startSearchIndex = calcIndex + calcValue.length;\n    }while (true);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/attributes/calc.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/attributes/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/jointjs/src/dia/attributes/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attributes: () => (/* binding */ attributes)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _calc_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./calc.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/attributes/calc.mjs\");\n/* harmony import */ var _props_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./props.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/attributes/props.mjs\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n\n\n\n\n\n\nfunction setWrapper(attrName, dimension) {\n    return function(value, refBBox) {\n        var isValuePercentage = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPercentage)(value);\n        value = parseFloat(value);\n        if (isValuePercentage) {\n            value /= 100;\n        }\n        var attrs = {};\n        if (isFinite(value)) {\n            var attrValue = isValuePercentage || value >= 0 && value <= 1 ? value * refBBox[dimension] : Math.max(value + refBBox[dimension], 0);\n            attrs[attrName] = attrValue;\n        }\n        return attrs;\n    };\n}\nfunction positionWrapper(axis, dimension, origin) {\n    return function(value, refBBox) {\n        var valuePercentage = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPercentage)(value);\n        value = parseFloat(value);\n        if (valuePercentage) {\n            value /= 100;\n        }\n        var delta;\n        if (isFinite(value)) {\n            var refOrigin = refBBox[origin]();\n            if (valuePercentage || value > 0 && value < 1) {\n                delta = refOrigin[axis] + refBBox[dimension] * value;\n            } else {\n                delta = refOrigin[axis] + value;\n            }\n        }\n        var point = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point)();\n        point[axis] = delta || 0;\n        return point;\n    };\n}\nfunction offsetWrapper(axis, dimension, corner) {\n    return function(value, nodeBBox) {\n        var delta;\n        if (value === \"middle\") {\n            delta = nodeBBox[dimension] / 2;\n        } else if (value === corner) {\n            delta = nodeBBox[dimension];\n        } else if (isFinite(value)) {\n            // TODO: or not to do a breaking change?\n            delta = value > -1 && value < 1 ? -nodeBBox[dimension] * value : -value;\n        } else if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPercentage)(value)) {\n            delta = nodeBBox[dimension] * parseFloat(value) / 100;\n        } else {\n            delta = 0;\n        }\n        var point = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point)();\n        point[axis] = -(nodeBBox[axis] + delta);\n        return point;\n    };\n}\nfunction shapeWrapper(shapeConstructor, opt) {\n    var cacheName = \"joint-shape\";\n    var resetOffset = opt && opt.resetOffset;\n    return function(value, refBBox, node) {\n        var $node = jquery__WEBPACK_IMPORTED_MODULE_0__(node);\n        var cache = $node.data(cacheName);\n        if (!cache || cache.value !== value) {\n            // only recalculate if value has changed\n            var cachedShape = shapeConstructor(value);\n            cache = {\n                value: value,\n                shape: cachedShape,\n                shapeBBox: cachedShape.bbox()\n            };\n            $node.data(cacheName, cache);\n        }\n        var shape = cache.shape.clone();\n        var shapeBBox = cache.shapeBBox.clone();\n        var shapeOrigin = shapeBBox.origin();\n        var refOrigin = refBBox.origin();\n        shapeBBox.x = refOrigin.x;\n        shapeBBox.y = refOrigin.y;\n        var fitScale = refBBox.maxRectScaleToFit(shapeBBox, refOrigin);\n        // `maxRectScaleToFit` can give Infinity if width or height is 0\n        var sx = shapeBBox.width === 0 || refBBox.width === 0 ? 1 : fitScale.sx;\n        var sy = shapeBBox.height === 0 || refBBox.height === 0 ? 1 : fitScale.sy;\n        shape.scale(sx, sy, shapeOrigin);\n        if (resetOffset) {\n            shape.translate(-shapeOrigin.x, -shapeOrigin.y);\n        }\n        return shape;\n    };\n}\n// `d` attribute for SVGPaths\nfunction dWrapper(opt) {\n    function pathConstructor(value) {\n        return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Path(_V_index_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"].normalizePathData(value));\n    }\n    var shape = shapeWrapper(pathConstructor, opt);\n    return function(value, refBBox, node) {\n        var path = shape(value, refBBox, node);\n        return {\n            d: path.serialize()\n        };\n    };\n}\n// `points` attribute for SVGPolylines and SVGPolygons\nfunction pointsWrapper(opt) {\n    var shape = shapeWrapper(_g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Polyline, opt);\n    return function(value, refBBox, node) {\n        var polyline = shape(value, refBBox, node);\n        return {\n            points: polyline.serialize()\n        };\n    };\n}\nfunction atConnectionWrapper(method, opt) {\n    var zeroVector = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(1, 0);\n    return function(value) {\n        var p, angle;\n        var tangent = this[method](value);\n        if (tangent) {\n            angle = opt.rotate ? tangent.vector().vectorAngle(zeroVector) : 0;\n            p = tangent.start;\n        } else {\n            p = this.path.start;\n            angle = 0;\n        }\n        if (angle === 0) return {\n            transform: \"translate(\" + p.x + \",\" + p.y + \")\"\n        };\n        return {\n            transform: \"translate(\" + p.x + \",\" + p.y + \") rotate(\" + angle + \")\"\n        };\n    };\n}\nfunction setIfChangedWrapper(attribute) {\n    return function setIfChanged(value, _, node) {\n        const vel = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(node);\n        if (vel.attr(attribute) === value) return;\n        vel.attr(attribute, value);\n    };\n}\nfunction isTextInUse(_value, _node, attrs) {\n    return attrs.text !== undefined;\n}\nfunction isLinkView() {\n    return this.model.isLink();\n}\nfunction contextMarker(context) {\n    var marker = {};\n    // Stroke\n    // The context 'fill' is disregared here. The usual case is to use the marker with a connection\n    // (for which 'fill' attribute is set to 'none').\n    var stroke = context.stroke;\n    if (typeof stroke === \"string\") {\n        marker[\"stroke\"] = stroke;\n        marker[\"fill\"] = stroke;\n    }\n    // Opacity\n    // Again the context 'fill-opacity' is ignored.\n    var strokeOpacity = context.strokeOpacity;\n    if (strokeOpacity === undefined) strokeOpacity = context[\"stroke-opacity\"];\n    if (strokeOpacity === undefined) strokeOpacity = context.opacity;\n    if (strokeOpacity !== undefined) {\n        marker[\"stroke-opacity\"] = strokeOpacity;\n        marker[\"fill-opacity\"] = strokeOpacity;\n    }\n    return marker;\n}\nfunction setPaintURL(def) {\n    const { paper } = this;\n    const url = def.type === \"pattern\" ? paper.definePattern(def) : paper.defineGradient(def);\n    return `url(#${url})`;\n}\nconst attributesNS = {\n    xlinkShow: {\n        set: \"xlink:show\"\n    },\n    xlinkRole: {\n        set: \"xlink:role\"\n    },\n    xlinkType: {\n        set: \"xlink:type\"\n    },\n    xlinkArcrole: {\n        set: \"xlink:arcrole\"\n    },\n    xlinkTitle: {\n        set: \"xlink:title\"\n    },\n    xlinkActuate: {\n        set: \"xlink:actuate\"\n    },\n    xmlSpace: {\n        set: \"xml:space\"\n    },\n    xmlBase: {\n        set: \"xml:base\"\n    },\n    xmlLang: {\n        set: \"xml:lang\"\n    },\n    preserveAspectRatio: {\n        set: \"preserveAspectRatio\"\n    },\n    requiredExtension: {\n        set: \"requiredExtension\"\n    },\n    requiredFeatures: {\n        set: \"requiredFeatures\"\n    },\n    systemLanguage: {\n        set: \"systemLanguage\"\n    },\n    externalResourcesRequired: {\n        set: \"externalResourceRequired\"\n    },\n    href: {\n        set: setIfChangedWrapper(\"href\")\n    },\n    xlinkHref: {\n        set: setIfChangedWrapper(\"xlink:href\")\n    },\n    filter: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: function(filter) {\n            return \"url(#\" + this.paper.defineFilter(filter) + \")\";\n        }\n    },\n    fill: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: setPaintURL\n    },\n    stroke: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: setPaintURL\n    },\n    sourceMarker: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: function(marker, refBBox, node, attrs) {\n            marker = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.assign)(contextMarker(attrs), marker);\n            return {\n                \"marker-start\": \"url(#\" + this.paper.defineMarker(marker) + \")\"\n            };\n        }\n    },\n    targetMarker: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: function(marker, refBBox, node, attrs) {\n            marker = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.assign)(contextMarker(attrs), {\n                \"transform\": \"rotate(180)\"\n            }, marker);\n            return {\n                \"marker-end\": \"url(#\" + this.paper.defineMarker(marker) + \")\"\n            };\n        }\n    },\n    vertexMarker: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: function(marker, refBBox, node, attrs) {\n            marker = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.assign)(contextMarker(attrs), marker);\n            return {\n                \"marker-mid\": \"url(#\" + this.paper.defineMarker(marker) + \")\"\n            };\n        }\n    },\n    text: {\n        qualify: function(_text, _node, attrs) {\n            return !attrs.textWrap || !(0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject)(attrs.textWrap);\n        },\n        set: function(text, refBBox, node, attrs) {\n            const $node = jquery__WEBPACK_IMPORTED_MODULE_0__(node);\n            const cacheName = \"joint-text\";\n            const cache = $node.data(cacheName);\n            const { lineHeight, annotations, textVerticalAnchor, eol, displayEmpty } = attrs;\n            let textPath = attrs.textPath;\n            // eval `x` if using calc()\n            let x = attrs.x;\n            if ((0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute)(x)) {\n                x = (0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(x, refBBox);\n            }\n            // eval `font-size` if using calc()\n            let fontSize = attrs[\"font-size\"] || attrs[\"fontSize\"];\n            if ((0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute)(fontSize)) {\n                fontSize = (0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(fontSize, refBBox);\n            }\n            // Update the text only if there was a change in the string\n            // or any of its attributes.\n            const textHash = JSON.stringify([\n                text,\n                lineHeight,\n                annotations,\n                textVerticalAnchor,\n                eol,\n                displayEmpty,\n                textPath,\n                x,\n                fontSize\n            ]);\n            if (cache === undefined || cache !== textHash) {\n                // Chrome bug:\n                // <tspan> positions defined as `em` are not updated\n                // when container `font-size` change.\n                if (fontSize) node.setAttribute(\"font-size\", fontSize);\n                // Text Along Path Selector\n                if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isObject)(textPath)) {\n                    const pathSelector = textPath.selector;\n                    if (typeof pathSelector === \"string\") {\n                        const [pathNode] = this.findBySelector(pathSelector);\n                        if (pathNode instanceof SVGPathElement) {\n                            textPath = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.assign)({\n                                \"xlink:href\": \"#\" + pathNode.id\n                            }, textPath);\n                        }\n                    }\n                }\n                (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(node).text(\"\" + text, {\n                    lineHeight,\n                    annotations,\n                    textPath,\n                    x,\n                    textVerticalAnchor,\n                    eol,\n                    displayEmpty\n                });\n                $node.data(cacheName, textHash);\n            }\n        }\n    },\n    textWrap: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: function(value, refBBox, node, attrs) {\n            var size = {};\n            // option `width`\n            var width = value.width || 0;\n            if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPercentage)(width)) {\n                size.width = refBBox.width * parseFloat(width) / 100;\n            } else if ((0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute)(width)) {\n                size.width = Number((0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(width, refBBox));\n            } else {\n                if (value.width === null) {\n                    // breakText() requires width to be specified.\n                    size.width = Infinity;\n                } else if (width <= 0) {\n                    size.width = refBBox.width + width;\n                } else {\n                    size.width = width;\n                }\n            }\n            // option `height`\n            var height = value.height || 0;\n            if ((0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPercentage)(height)) {\n                size.height = refBBox.height * parseFloat(height) / 100;\n            } else if ((0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute)(height)) {\n                size.height = Number((0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(height, refBBox));\n            } else {\n                if (value.height === null) {\n                // if height is not specified breakText() does not\n                // restrict the height of the text.\n                } else if (height <= 0) {\n                    size.height = refBBox.height + height;\n                } else {\n                    size.height = height;\n                }\n            }\n            // option `text`\n            var wrappedText;\n            var text = value.text;\n            if (text === undefined) text = attrs.text;\n            if (text !== undefined) {\n                const breakTextFn = value.breakText || _util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.breakText;\n                const fontSizeAttr = attrs[\"font-size\"] || attrs.fontSize;\n                wrappedText = breakTextFn(\"\" + text, size, {\n                    \"font-weight\": attrs[\"font-weight\"] || attrs.fontWeight,\n                    \"font-size\": (0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute)(fontSizeAttr) ? (0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(fontSizeAttr, refBBox) : fontSizeAttr,\n                    \"font-family\": attrs[\"font-family\"] || attrs.fontFamily,\n                    \"lineHeight\": attrs.lineHeight,\n                    \"letter-spacing\": \"letter-spacing\" in attrs ? attrs[\"letter-spacing\"] : attrs.letterSpacing\n                }, {\n                    // Provide an existing SVG Document here\n                    // instead of creating a temporary one over again.\n                    svgDocument: this.paper.svg,\n                    ellipsis: value.ellipsis,\n                    hyphen: value.hyphen,\n                    separator: value.separator,\n                    maxLineCount: value.maxLineCount,\n                    preserveSpaces: value.preserveSpaces\n                });\n            } else {\n                wrappedText = \"\";\n            }\n            attributesNS.text.set.call(this, wrappedText, refBBox, node, attrs);\n        }\n    },\n    title: {\n        qualify: function(title, node) {\n            // HTMLElement title is specified via an attribute (i.e. not an element)\n            return node instanceof SVGElement;\n        },\n        set: function(title, refBBox, node) {\n            var $node = jquery__WEBPACK_IMPORTED_MODULE_0__(node);\n            var cacheName = \"joint-title\";\n            var cache = $node.data(cacheName);\n            if (cache === undefined || cache !== title) {\n                $node.data(cacheName, title);\n                if (node.tagName === \"title\") {\n                    // The target node is a <title> element.\n                    node.textContent = title;\n                    return;\n                }\n                // Generally <title> element should be the first child element of its parent.\n                var firstChild = node.firstElementChild;\n                if (firstChild && firstChild.tagName === \"title\") {\n                    // Update an existing title\n                    firstChild.textContent = title;\n                } else {\n                    // Create a new title\n                    var titleNode = document.createElementNS(node.namespaceURI, \"title\");\n                    titleNode.textContent = title;\n                    node.insertBefore(titleNode, firstChild);\n                }\n            }\n        }\n    },\n    lineHeight: {\n        qualify: isTextInUse\n    },\n    textVerticalAnchor: {\n        qualify: isTextInUse\n    },\n    textPath: {\n        qualify: isTextInUse\n    },\n    annotations: {\n        qualify: isTextInUse\n    },\n    eol: {\n        qualify: isTextInUse\n    },\n    displayEmpty: {\n        qualify: isTextInUse\n    },\n    // `port` attribute contains the `id` of the port that the underlying magnet represents.\n    port: {\n        set: function(port) {\n            return port === null || port.id === undefined ? port : port.id;\n        }\n    },\n    // `style` attribute is special in the sense that it sets the CSS style of the subelement.\n    style: {\n        qualify: _util_util_mjs__WEBPACK_IMPORTED_MODULE_6__.isPlainObject,\n        set: function(styles, refBBox, node) {\n            jquery__WEBPACK_IMPORTED_MODULE_0__(node).css(styles);\n        }\n    },\n    html: {\n        set: function(html, refBBox, node) {\n            jquery__WEBPACK_IMPORTED_MODULE_0__(node).html(html + \"\");\n        }\n    },\n    // Properties setter (set various properties on the node)\n    props: _props_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    ref: {\n    },\n    // if `refX` is in [0, 1] then `refX` is a fraction of bounding box width\n    // if `refX` is < 0 then `refX`'s absolute values is the right coordinate of the bounding box\n    // otherwise, `refX` is the left coordinate of the bounding box\n    refX: {\n        position: positionWrapper(\"x\", \"width\", \"origin\")\n    },\n    refY: {\n        position: positionWrapper(\"y\", \"height\", \"origin\")\n    },\n    // `ref-dx` and `ref-dy` define the offset of the subelement relative to the right and/or bottom\n    // coordinate of the reference element.\n    refDx: {\n        position: positionWrapper(\"x\", \"width\", \"corner\")\n    },\n    refDy: {\n        position: positionWrapper(\"y\", \"height\", \"corner\")\n    },\n    // 'ref-width'/'ref-height' defines the width/height of the subelement relatively to\n    // the reference element size\n    // val in 0..1         ref-width = 0.75 sets the width to 75% of the ref. el. width\n    // val < 0 || val > 1  ref-height = -20 sets the height to the ref. el. height shorter by 20\n    refWidth: {\n        set: setWrapper(\"width\", \"width\")\n    },\n    refHeight: {\n        set: setWrapper(\"height\", \"height\")\n    },\n    refRx: {\n        set: setWrapper(\"rx\", \"width\")\n    },\n    refRy: {\n        set: setWrapper(\"ry\", \"height\")\n    },\n    refRInscribed: {\n        set: function(attrName) {\n            var widthFn = setWrapper(attrName, \"width\");\n            var heightFn = setWrapper(attrName, \"height\");\n            return function(value, refBBox) {\n                var fn = refBBox.height > refBBox.width ? widthFn : heightFn;\n                return fn(value, refBBox);\n            };\n        }(\"r\")\n    },\n    refRCircumscribed: {\n        set: function(value, refBBox) {\n            var isValuePercentage = (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_1__.isPercentage)(value);\n            value = parseFloat(value);\n            if (isValuePercentage) {\n                value /= 100;\n            }\n            var diagonalLength = Math.sqrt(refBBox.height * refBBox.height + refBBox.width * refBBox.width);\n            var rValue;\n            if (isFinite(value)) {\n                if (isValuePercentage || value >= 0 && value <= 1) rValue = value * diagonalLength;\n                else rValue = Math.max(value + diagonalLength, 0);\n            }\n            return {\n                r: rValue\n            };\n        }\n    },\n    refCx: {\n        set: setWrapper(\"cx\", \"width\")\n    },\n    refCy: {\n        set: setWrapper(\"cy\", \"height\")\n    },\n    // `x-alignment` when set to `middle` causes centering of the subelement around its new x coordinate.\n    // `x-alignment` when set to `right` uses the x coordinate as referenced to the right of the bbox.\n    xAlignment: {\n        offset: offsetWrapper(\"x\", \"width\", \"right\")\n    },\n    // `y-alignment` when set to `middle` causes centering of the subelement around its new y coordinate.\n    // `y-alignment` when set to `bottom` uses the y coordinate as referenced to the bottom of the bbox.\n    yAlignment: {\n        offset: offsetWrapper(\"y\", \"height\", \"bottom\")\n    },\n    resetOffset: {\n        offset: function(val, nodeBBox) {\n            return val ? {\n                x: -nodeBBox.x,\n                y: -nodeBBox.y\n            } : {\n                x: 0,\n                y: 0\n            };\n        }\n    },\n    refDResetOffset: {\n        set: dWrapper({\n            resetOffset: true\n        })\n    },\n    refDKeepOffset: {\n        set: dWrapper({\n            resetOffset: false\n        })\n    },\n    refPointsResetOffset: {\n        set: pointsWrapper({\n            resetOffset: true\n        })\n    },\n    refPointsKeepOffset: {\n        set: pointsWrapper({\n            resetOffset: false\n        })\n    },\n    // LinkView Attributes\n    connection: {\n        qualify: isLinkView,\n        set: function({ stubs = 0 }) {\n            let d;\n            if (isFinite(stubs) && stubs !== 0) {\n                let offset;\n                if (stubs < 0) {\n                    offset = (this.getConnectionLength() + stubs) / 2;\n                } else {\n                    offset = stubs;\n                }\n                const path = this.getConnection();\n                const segmentSubdivisions = this.getConnectionSubdivisions();\n                const sourceParts = path.divideAtLength(offset, {\n                    segmentSubdivisions\n                });\n                const targetParts = path.divideAtLength(-offset, {\n                    segmentSubdivisions\n                });\n                if (sourceParts && targetParts) {\n                    d = `${sourceParts[0].serialize()} ${targetParts[1].serialize()}`;\n                }\n            }\n            return {\n                d: d || this.getSerializedConnection()\n            };\n        }\n    },\n    atConnectionLengthKeepGradient: {\n        qualify: isLinkView,\n        set: atConnectionWrapper(\"getTangentAtLength\", {\n            rotate: true\n        })\n    },\n    atConnectionLengthIgnoreGradient: {\n        qualify: isLinkView,\n        set: atConnectionWrapper(\"getTangentAtLength\", {\n            rotate: false\n        })\n    },\n    atConnectionRatioKeepGradient: {\n        qualify: isLinkView,\n        set: atConnectionWrapper(\"getTangentAtRatio\", {\n            rotate: true\n        })\n    },\n    atConnectionRatioIgnoreGradient: {\n        qualify: isLinkView,\n        set: atConnectionWrapper(\"getTangentAtRatio\", {\n            rotate: false\n        })\n    }\n};\nattributesNS[\"xlink:href\"] = attributesNS.xlinkHref;\n// Support `calc()` with the following SVG attributes\n[\n    \"transform\",\n    \"d\",\n    \"points\",\n    \"cx\",\n    \"cy\",\n    \"x1\",\n    \"x2\",\n    \"y1\",\n    \"y2\",\n    \"x\",\n    \"y\",\n    \"dx\",\n    \"dy\" // text\n].forEach((attribute)=>{\n    attributesNS[attribute] = {\n        qualify: _calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute,\n        set: function setCalcAttribute(value, refBBox) {\n            return {\n                [attribute]: (0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(value, refBBox)\n            };\n        }\n    };\n});\n// Prevent \"A negative value is not valid\" error.\n[\n    \"width\",\n    \"height\",\n    \"r\",\n    \"rx\",\n    \"ry\",\n    \"font-size\",\n    \"stroke-width\" // elements\n].forEach((attribute)=>{\n    attributesNS[attribute] = {\n        qualify: _calc_mjs__WEBPACK_IMPORTED_MODULE_7__.isCalcAttribute,\n        set: function setCalcAttribute(value, refBBox) {\n            return {\n                [attribute]: Math.max(0, (0,_calc_mjs__WEBPACK_IMPORTED_MODULE_7__.evalCalcAttribute)(value, refBBox))\n            };\n        }\n    };\n});\n// Aliases\nattributesNS.refR = attributesNS.refRInscribed;\nattributesNS.refD = attributesNS.refDResetOffset;\nattributesNS.refPoints = attributesNS.refPointsResetOffset;\nattributesNS.atConnectionLength = attributesNS.atConnectionLengthKeepGradient;\nattributesNS.atConnectionRatio = attributesNS.atConnectionRatioKeepGradient;\nattributesNS.fontSize = attributesNS[\"font-size\"];\nattributesNS.strokeWidth = attributesNS[\"stroke-width\"];\n// This allows to combine both absolute and relative positioning\n// refX: 50%, refX2: 20\nattributesNS.refX2 = attributesNS.refX;\nattributesNS.refY2 = attributesNS.refY;\nattributesNS.refWidth2 = attributesNS.refWidth;\nattributesNS.refHeight2 = attributesNS.refHeight;\n// Aliases for backwards compatibility\nattributesNS[\"ref-x\"] = attributesNS.refX;\nattributesNS[\"ref-y\"] = attributesNS.refY;\nattributesNS[\"ref-dy\"] = attributesNS.refDy;\nattributesNS[\"ref-dx\"] = attributesNS.refDx;\nattributesNS[\"ref-width\"] = attributesNS.refWidth;\nattributesNS[\"ref-height\"] = attributesNS.refHeight;\nattributesNS[\"x-alignment\"] = attributesNS.xAlignment;\nattributesNS[\"y-alignment\"] = attributesNS.yAlignment;\nconst attributes = attributesNS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/attributes/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/attributes/props.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/jointjs/src/dia/attributes/props.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\nconst validPropertiesList = [\n    \"checked\",\n    \"selected\",\n    \"disabled\",\n    \"readOnly\",\n    \"contentEditable\",\n    \"value\",\n    \"indeterminate\"\n];\nconst validProperties = validPropertiesList.reduce((acc, key)=>{\n    acc[key] = true;\n    return acc;\n}, {});\nconst props = {\n    qualify: function(properties) {\n        return (0,_util_util_mjs__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(properties);\n    },\n    set: function(properties, _, node) {\n        Object.keys(properties).forEach(function(key) {\n            if (validProperties[key] && key in node) {\n                const value = properties[key];\n                if (node.tagName === \"SELECT\" && Array.isArray(value)) {\n                    Array.from(node.options).forEach(function(option, index) {\n                        option.selected = value.includes(option.value);\n                    });\n                } else {\n                    node[key] = value;\n                }\n            }\n        });\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (props);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZGlhL2F0dHJpYnV0ZXMvcHJvcHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBRXBELE1BQU1DLHNCQUFzQjtJQUFDO0lBQVc7SUFBWTtJQUFZO0lBQVk7SUFBbUI7SUFBUztDQUFnQjtBQUV4SCxNQUFNQyxrQkFBa0JELG9CQUFvQkUsTUFBTSxDQUFDLENBQUNDLEtBQUtDO0lBQ3JERCxHQUFHLENBQUNDLElBQUksR0FBRztJQUNYLE9BQU9EO0FBQ1gsR0FBRyxDQUFDO0FBRUosTUFBTUUsUUFBUTtJQUNWQyxTQUFTLFNBQVNDLFVBQVU7UUFDeEIsT0FBT1IsNkRBQWFBLENBQUNRO0lBQ3pCO0lBQ0FDLEtBQUssU0FBU0QsVUFBVSxFQUFFRSxDQUFDLEVBQUVDLElBQUk7UUFDN0JDLE9BQU9DLElBQUksQ0FBQ0wsWUFBWU0sT0FBTyxDQUFDLFNBQVNULEdBQUc7WUFDeEMsSUFBSUgsZUFBZSxDQUFDRyxJQUFJLElBQUlBLE9BQU9NLE1BQU07Z0JBQ3JDLE1BQU1JLFFBQVFQLFVBQVUsQ0FBQ0gsSUFBSTtnQkFDN0IsSUFBSU0sS0FBS0ssT0FBTyxLQUFLLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUTtvQkFDbkRFLE1BQU1FLElBQUksQ0FBQ1IsS0FBS1MsT0FBTyxFQUFFTixPQUFPLENBQUMsU0FBU08sTUFBTSxFQUFFQyxLQUFLO3dCQUNuREQsT0FBT0UsUUFBUSxHQUFHUixNQUFNUyxRQUFRLENBQUNILE9BQU9OLEtBQUs7b0JBQ2pEO2dCQUNKLE9BQU87b0JBQ0hKLElBQUksQ0FBQ04sSUFBSSxHQUFHVTtnQkFDaEI7WUFDSjtRQUNKO0lBQ0o7QUFDSjtBQUVBLGlFQUFlVCxLQUFLQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZGlhL2F0dHJpYnV0ZXMvcHJvcHMubWpzPzEwNjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbC5tanMnO1xuXG5jb25zdCB2YWxpZFByb3BlcnRpZXNMaXN0ID0gWydjaGVja2VkJywgJ3NlbGVjdGVkJywgJ2Rpc2FibGVkJywgJ3JlYWRPbmx5JywgJ2NvbnRlbnRFZGl0YWJsZScsICd2YWx1ZScsICdpbmRldGVybWluYXRlJ107XG5cbmNvbnN0IHZhbGlkUHJvcGVydGllcyA9IHZhbGlkUHJvcGVydGllc0xpc3QucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGFjY1trZXldID0gdHJ1ZTtcbiAgICByZXR1cm4gYWNjO1xufSwge30pO1xuXG5jb25zdCBwcm9wcyA9IHtcbiAgICBxdWFsaWZ5OiBmdW5jdGlvbihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHByb3BlcnRpZXMpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihwcm9wZXJ0aWVzLCBfLCBub2RlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAodmFsaWRQcm9wZXJ0aWVzW2tleV0gJiYga2V5IGluIG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnU0VMRUNUJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKG5vZGUub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbihvcHRpb24sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5pbmNsdWRlcyhvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub2RlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb3BzO1xuIl0sIm5hbWVzIjpbImlzUGxhaW5PYmplY3QiLCJ2YWxpZFByb3BlcnRpZXNMaXN0IiwidmFsaWRQcm9wZXJ0aWVzIiwicmVkdWNlIiwiYWNjIiwia2V5IiwicHJvcHMiLCJxdWFsaWZ5IiwicHJvcGVydGllcyIsInNldCIsIl8iLCJub2RlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJ2YWx1ZSIsInRhZ05hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJmcm9tIiwib3B0aW9ucyIsIm9wdGlvbiIsImluZGV4Iiwic2VsZWN0ZWQiLCJpbmNsdWRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/attributes/props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/dia/ports.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/dia/ports.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   elementPortPrototype: () => (/* binding */ elementPortPrototype),\n/* harmony export */   elementViewPortPrototype: () => (/* binding */ elementViewPortPrototype)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _layout_ports_port_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/ports/port.mjs */ \"(ssr)/./node_modules/jointjs/src/layout/ports/port.mjs\");\n/* harmony import */ var _layout_ports_portLabel_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layout/ports/portLabel.mjs */ \"(ssr)/./node_modules/jointjs/src/layout/ports/portLabel.mjs\");\n\n\n\n\n\nvar PortData = function(data) {\n    var clonedData = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.cloneDeep(data) || {};\n    this.ports = [];\n    this.groups = {};\n    this.portLayoutNamespace = _layout_ports_port_mjs__WEBPACK_IMPORTED_MODULE_1__;\n    this.portLabelLayoutNamespace = _layout_ports_portLabel_mjs__WEBPACK_IMPORTED_MODULE_2__;\n    this._init(clonedData);\n};\nPortData.prototype = {\n    getPorts: function() {\n        return this.ports;\n    },\n    getGroup: function(name) {\n        return this.groups[name] || {};\n    },\n    getPortsByGroup: function(groupName) {\n        return this.ports.filter(function(port) {\n            return port.group === groupName;\n        });\n    },\n    getGroupPortsMetrics: function(groupName, elBBox) {\n        var group = this.getGroup(groupName);\n        var ports = this.getPortsByGroup(groupName);\n        var groupPosition = group.position || {};\n        var groupPositionName = groupPosition.name;\n        var namespace = this.portLayoutNamespace;\n        if (!namespace[groupPositionName]) {\n            groupPositionName = \"left\";\n        }\n        var groupArgs = groupPosition.args || {};\n        var portsArgs = ports.map(function(port) {\n            return port && port.position && port.position.args;\n        });\n        var groupPortTransformations = namespace[groupPositionName](portsArgs, elBBox, groupArgs);\n        var accumulator = {\n            ports: ports,\n            result: []\n        };\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(groupPortTransformations).reduce((function(res, portTransformation, index) {\n            var port = res.ports[index];\n            res.result.push({\n                portId: port.id,\n                portTransformation: portTransformation,\n                labelTransformation: this._getPortLabelLayout(port, (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point)(portTransformation), elBBox),\n                portAttrs: port.attrs,\n                portSize: port.size,\n                labelSize: port.label.size\n            });\n            return res;\n        }).bind(this), accumulator);\n        return accumulator.result;\n    },\n    _getPortLabelLayout: function(port, portPosition, elBBox) {\n        var namespace = this.portLabelLayoutNamespace;\n        var labelPosition = port.label.position.name || \"left\";\n        if (namespace[labelPosition]) {\n            return namespace[labelPosition](portPosition, elBBox, port.label.position.args);\n        }\n        return null;\n    },\n    _init: function(data) {\n        // prepare groups\n        if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(data.groups)) {\n            var groups = Object.keys(data.groups);\n            for(var i = 0, n = groups.length; i < n; i++){\n                var key = groups[i];\n                this.groups[key] = this._evaluateGroup(data.groups[key]);\n            }\n        }\n        // prepare ports\n        var ports = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(data.items);\n        for(var j = 0, m = ports.length; j < m; j++){\n            this.ports.push(this._evaluatePort(ports[j]));\n        }\n    },\n    _evaluateGroup: function(group) {\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.merge(group, {\n            position: this._getPosition(group.position, true),\n            label: this._getLabel(group, true)\n        });\n    },\n    _evaluatePort: function(port) {\n        var evaluated = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign({}, port);\n        var group = this.getGroup(port.group);\n        evaluated.markup = evaluated.markup || group.markup;\n        evaluated.attrs = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.merge({}, group.attrs, evaluated.attrs);\n        evaluated.position = this._createPositionNode(group, evaluated);\n        evaluated.label = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.merge({}, group.label, this._getLabel(evaluated));\n        evaluated.z = this._getZIndex(group, evaluated);\n        evaluated.size = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign({}, group.size, evaluated.size);\n        return evaluated;\n    },\n    _getZIndex: function(group, port) {\n        if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isNumber(port.z)) {\n            return port.z;\n        }\n        if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isNumber(group.z) || group.z === \"auto\") {\n            return group.z;\n        }\n        return \"auto\";\n    },\n    _createPositionNode: function(group, port) {\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.merge({\n            name: \"left\",\n            args: {}\n        }, group.position, {\n            args: port.args\n        });\n    },\n    _getPosition: function(position, setDefault) {\n        var args = {};\n        var positionName;\n        if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction(position)) {\n            positionName = \"fn\";\n            args.fn = position;\n        } else if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isString(position)) {\n            positionName = position;\n        } else if (position === undefined) {\n            positionName = setDefault ? \"left\" : null;\n        } else if (Array.isArray(position)) {\n            positionName = \"absolute\";\n            args.x = position[0];\n            args.y = position[1];\n        } else if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(position)) {\n            positionName = position.name;\n            _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign(args, position.args);\n        }\n        var result = {\n            args: args\n        };\n        if (positionName) {\n            result.name = positionName;\n        }\n        return result;\n    },\n    _getLabel: function(item, setDefaults) {\n        var label = item.label || {};\n        var ret = label;\n        ret.position = this._getPosition(label.position, setDefaults);\n        return ret;\n    }\n};\nconst elementPortPrototype = {\n    _initializePorts: function() {\n        this._createPortData();\n        this.on(\"change:ports\", function() {\n            this._processRemovedPort();\n            this._createPortData();\n        }, this);\n    },\n    /**\n     * remove links tied wiht just removed element\n     * @private\n     */ _processRemovedPort: function() {\n        var current = this.get(\"ports\") || {};\n        var currentItemsMap = {};\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(current.items).forEach(function(item) {\n            currentItemsMap[item.id] = true;\n        });\n        var previous = this.previous(\"ports\") || {};\n        var removed = {};\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(previous.items).forEach(function(item) {\n            if (!currentItemsMap[item.id]) {\n                removed[item.id] = true;\n            }\n        });\n        var graph = this.graph;\n        if (graph && !_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isEmpty(removed)) {\n            var inboundLinks = graph.getConnectedLinks(this, {\n                inbound: true\n            });\n            inboundLinks.forEach(function(link) {\n                if (removed[link.get(\"target\").port]) link.remove();\n            });\n            var outboundLinks = graph.getConnectedLinks(this, {\n                outbound: true\n            });\n            outboundLinks.forEach(function(link) {\n                if (removed[link.get(\"source\").port]) link.remove();\n            });\n        }\n    },\n    /**\n     * @returns {boolean}\n     */ hasPorts: function() {\n        var ports = this.prop(\"ports/items\");\n        return Array.isArray(ports) && ports.length > 0;\n    },\n    /**\n     * @param {string} id\n     * @returns {boolean}\n     */ hasPort: function(id) {\n        return this.getPortIndex(id) !== -1;\n    },\n    /**\n     * @returns {Array<object>}\n     */ getPorts: function() {\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.cloneDeep(this.prop(\"ports/items\")) || [];\n    },\n    /**\n     * @returns {Array<object>}\n     */ getGroupPorts: function(groupName) {\n        const groupPorts = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(this.prop([\n            \"ports\",\n            \"items\"\n        ])).filter((port)=>port.group === groupName);\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.cloneDeep(groupPorts);\n    },\n    /**\n     * @param {string} id\n     * @returns {object}\n     */ getPort: function(id) {\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.cloneDeep(_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(this.prop(\"ports/items\")).find(function(port) {\n            return port.id && port.id === id;\n        }));\n    },\n    /**\n     * @param {string} groupName\n     * @returns {Object<portId, {x: number, y: number, angle: number}>}\n     */ getPortsPositions: function(groupName) {\n        var portsMetrics = this._portSettingsData.getGroupPortsMetrics(groupName, (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Rect)(this.size()));\n        return portsMetrics.reduce(function(positions, metrics) {\n            var transformation = metrics.portTransformation;\n            positions[metrics.portId] = {\n                x: transformation.x,\n                y: transformation.y,\n                angle: transformation.angle\n            };\n            return positions;\n        }, {});\n    },\n    /**\n     * @param {string|Port} port port id or port\n     * @returns {number} port index\n     */ getPortIndex: function(port) {\n        var id = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(port) ? port.id : port;\n        if (!this._isValidPortId(id)) {\n            return -1;\n        }\n        return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(this.prop(\"ports/items\")).findIndex(function(item) {\n            return item.id === id;\n        });\n    },\n    /**\n     * @param {object} port\n     * @param {object} [opt]\n     * @returns {joint.dia.Element}\n     */ addPort: function(port, opt) {\n        if (!_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(port) || Array.isArray(port)) {\n            throw new Error(\"Element: addPort requires an object.\");\n        }\n        var ports = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign([], this.prop(\"ports/items\"));\n        ports.push(port);\n        this.prop(\"ports/items\", ports, opt);\n        return this;\n    },\n    /**\n     * @param {string|Port|number} before\n     * @param {object} port\n     * @param {object} [opt]\n     * @returns {joint.dia.Element}\n     */ insertPort: function(before, port, opt) {\n        const index = typeof before === \"number\" ? before : this.getPortIndex(before);\n        if (!_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(port) || Array.isArray(port)) {\n            throw new Error(\"dia.Element: insertPort requires an object.\");\n        }\n        const ports = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign([], this.prop(\"ports/items\"));\n        ports.splice(index, 0, port);\n        this.prop(\"ports/items\", ports, opt);\n        return this;\n    },\n    /**\n     * @param {string} portId\n     * @param {string|object=} path\n     * @param {*=} value\n     * @param {object=} opt\n     * @returns {joint.dia.Element}\n     */ portProp: function(portId, path, value, opt) {\n        var index = this.getPortIndex(portId);\n        if (index === -1) {\n            throw new Error(\"Element: unable to find port with id \" + portId);\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        if (Array.isArray(path)) {\n            args[0] = [\n                \"ports\",\n                \"items\",\n                index\n            ].concat(path);\n        } else if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isString(path)) {\n            // Get/set an attribute by a special path syntax that delimits\n            // nested objects by the colon character.\n            args[0] = [\n                \"ports/items/\",\n                index,\n                \"/\",\n                path\n            ].join(\"\");\n        } else {\n            args = [\n                \"ports/items/\" + index\n            ];\n            if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isPlainObject(path)) {\n                args.push(path);\n                args.push(value);\n            }\n        }\n        return this.prop.apply(this, args);\n    },\n    _validatePorts: function() {\n        var portsAttr = this.get(\"ports\") || {};\n        var errorMessages = [];\n        portsAttr = portsAttr || {};\n        var ports = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(portsAttr.items);\n        ports.forEach(function(p) {\n            if (typeof p !== \"object\") {\n                errorMessages.push(\"Element: invalid port \", p);\n            }\n            if (!this._isValidPortId(p.id)) {\n                p.id = this.generatePortId();\n            }\n        }, this);\n        if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.uniq(ports, \"id\").length !== ports.length) {\n            errorMessages.push(\"Element: found id duplicities in ports.\");\n        }\n        return errorMessages;\n    },\n    generatePortId: function() {\n        return this.generateId();\n    },\n    /**\n     * @param {string} id port id\n     * @returns {boolean}\n     * @private\n     */ _isValidPortId: function(id) {\n        return id !== null && id !== undefined && !_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(id);\n    },\n    addPorts: function(ports, opt) {\n        if (ports.length) {\n            this.prop(\"ports/items\", _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign([], this.prop(\"ports/items\")).concat(ports), opt);\n        }\n        return this;\n    },\n    removePort: function(port, opt) {\n        const options = opt || {};\n        const index = this.getPortIndex(port);\n        if (index !== -1) {\n            const ports = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign([], this.prop([\n                \"ports\",\n                \"items\"\n            ]));\n            ports.splice(index, 1);\n            options.rewrite = true;\n            this.startBatch(\"port-remove\");\n            this.prop([\n                \"ports\",\n                \"items\"\n            ], ports, options);\n            this.stopBatch(\"port-remove\");\n        }\n        return this;\n    },\n    removePorts: function(portsForRemoval, opt) {\n        let options, newPorts;\n        if (Array.isArray(portsForRemoval)) {\n            options = opt || {};\n            if (portsForRemoval.length === 0) return this.this;\n            const currentPorts = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign([], this.prop([\n                \"ports\",\n                \"items\"\n            ]));\n            newPorts = currentPorts.filter(function(cp) {\n                return !portsForRemoval.some(function(rp) {\n                    const rpId = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(rp) ? rp.id : rp;\n                    return cp.id === rpId;\n                });\n            });\n        } else {\n            options = portsForRemoval || {};\n            newPorts = [];\n        }\n        this.startBatch(\"port-remove\");\n        options.rewrite = true;\n        this.prop([\n            \"ports\",\n            \"items\"\n        ], newPorts, options);\n        this.stopBatch(\"port-remove\");\n        return this;\n    },\n    /**\n     * @private\n     */ _createPortData: function() {\n        var err = this._validatePorts();\n        if (err.length > 0) {\n            this.set(\"ports\", this.previous(\"ports\"));\n            throw new Error(err.join(\" \"));\n        }\n        var prevPortData;\n        if (this._portSettingsData) {\n            prevPortData = this._portSettingsData.getPorts();\n        }\n        this._portSettingsData = new PortData(this.get(\"ports\"));\n        var curPortData = this._portSettingsData.getPorts();\n        if (prevPortData) {\n            var added = curPortData.filter(function(item) {\n                if (!prevPortData.find(function(prevPort) {\n                    return prevPort.id === item.id;\n                })) {\n                    return item;\n                }\n            });\n            var removed = prevPortData.filter(function(item) {\n                if (!curPortData.find(function(curPort) {\n                    return curPort.id === item.id;\n                })) {\n                    return item;\n                }\n            });\n            if (removed.length > 0) {\n                this.trigger(\"ports:remove\", this, removed);\n            }\n            if (added.length > 0) {\n                this.trigger(\"ports:add\", this, added);\n            }\n        }\n    }\n};\nconst elementViewPortPrototype = {\n    portContainerMarkup: \"g\",\n    portMarkup: [\n        {\n            tagName: \"circle\",\n            selector: \"circle\",\n            attributes: {\n                \"r\": 10,\n                \"fill\": \"#FFFFFF\",\n                \"stroke\": \"#000000\"\n            }\n        }\n    ],\n    portLabelMarkup: [\n        {\n            tagName: \"text\",\n            selector: \"text\",\n            attributes: {\n                \"fill\": \"#000000\"\n            }\n        }\n    ],\n    /** @type {Object<string, {portElement: Vectorizer, portLabelElement: Vectorizer}>} */ _portElementsCache: null,\n    /**\n     * @private\n     */ _initializePorts: function() {\n        this._cleanPortsCache();\n    },\n    /**\n     * @typedef {Object} Port\n     *\n     * @property {string} id\n     * @property {Object} position\n     * @property {Object} label\n     * @property {Object} attrs\n     * @property {string} markup\n     * @property {string} group\n     */ /**\n     * @private\n     */ _refreshPorts: function() {\n        this._removePorts();\n        this._cleanPortsCache();\n        this._renderPorts();\n    },\n    _cleanPortsCache: function() {\n        this._portElementsCache = {};\n    },\n    /**\n     * @private\n     */ _renderPorts: function() {\n        // references to rendered elements without z-index\n        var elementReferences = [];\n        var elem = this._getContainerElement();\n        for(var i = 0, count = elem.node.childNodes.length; i < count; i++){\n            elementReferences.push(elem.node.childNodes[i]);\n        }\n        var portsGropsByZ = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.groupBy(this.model._portSettingsData.getPorts(), \"z\");\n        var withoutZKey = \"auto\";\n        // render non-z first\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(portsGropsByZ[withoutZKey]).forEach(function(port) {\n            var portElement = this._getPortElement(port);\n            elem.append(portElement);\n            elementReferences.push(portElement);\n        }, this);\n        var groupNames = Object.keys(portsGropsByZ);\n        for(var k = 0; k < groupNames.length; k++){\n            var groupName = groupNames[k];\n            if (groupName !== withoutZKey) {\n                var z = parseInt(groupName, 10);\n                this._appendPorts(portsGropsByZ[groupName], z, elementReferences);\n            }\n        }\n        this._updatePorts();\n    },\n    /**\n     * @returns {V}\n     * @private\n     */ _getContainerElement: function() {\n        return this.rotatableNode || this.vel;\n    },\n    /**\n     * @param {Array<Port>}ports\n     * @param {number} z\n     * @param refs\n     * @private\n     */ _appendPorts: function(ports, z, refs) {\n        var containerElement = this._getContainerElement();\n        var portElements = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(ports).map(this._getPortElement, this);\n        if (refs[z] || z < 0) {\n            (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(refs[Math.max(z, 0)]).before(portElements);\n        } else {\n            containerElement.append(portElements);\n        }\n    },\n    /**\n     * Try to get element from cache,\n     * @param port\n     * @returns {*}\n     * @private\n     */ _getPortElement: function(port) {\n        if (this._portElementsCache[port.id]) {\n            return this._portElementsCache[port.id].portElement;\n        }\n        return this._createPortElement(port);\n    },\n    findPortNode: function(portId, selector) {\n        const portCache = this._portElementsCache[portId];\n        if (!portCache) return null;\n        if (!selector) return portCache.portContentElement.node;\n        const portRoot = portCache.portElement.node;\n        const portSelectors = portCache.portSelectors;\n        const [node = null] = this.findBySelector(selector, portRoot, portSelectors);\n        return node;\n    },\n    /**\n     * @private\n     */ _updatePorts: function() {\n        // layout ports without group\n        this._updatePortGroup(undefined);\n        // layout ports with explicit group\n        var groupsNames = Object.keys(this.model._portSettingsData.groups);\n        groupsNames.forEach(this._updatePortGroup, this);\n    },\n    /**\n     * @private\n     */ _removePorts: function() {\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.invoke(this._portElementsCache, \"portElement.remove\");\n    },\n    /**\n     * @param {Port} port\n     * @returns {V}\n     * @private\n     */ _createPortElement: function(port) {\n        let portElement;\n        let labelElement;\n        let labelSelectors;\n        let portSelectors;\n        var portContainerElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.portContainerMarkup).addClass(\"joint-port\");\n        var portMarkup = this._getPortMarkup(port);\n        if (Array.isArray(portMarkup)) {\n            var portDoc = this.parseDOMJSON(portMarkup, portContainerElement.node);\n            var portFragment = portDoc.fragment;\n            if (portFragment.childNodes.length > 1) {\n                portElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"g\").append(portFragment);\n            } else {\n                portElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(portFragment.firstChild);\n            }\n            portSelectors = portDoc.selectors;\n        } else {\n            portElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(portMarkup);\n            if (Array.isArray(portElement)) {\n                portElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"g\").append(portElement);\n            }\n        }\n        if (!portElement) {\n            throw new Error(\"ElementView: Invalid port markup.\");\n        }\n        portElement.attr({\n            \"port\": port.id,\n            \"port-group\": port.group\n        });\n        const labelMarkupDef = this._getPortLabelMarkup(port.label);\n        if (Array.isArray(labelMarkupDef)) {\n            // JSON Markup\n            const { fragment, selectors } = this.parseDOMJSON(labelMarkupDef, portContainerElement.node);\n            const childCount = fragment.childNodes.length;\n            if (childCount > 0) {\n                labelSelectors = selectors;\n                labelElement = childCount === 1 ? (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(fragment.firstChild) : (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"g\").append(fragment);\n            }\n        } else {\n            // String Markup\n            labelElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(labelMarkupDef);\n            if (Array.isArray(labelElement)) {\n                labelElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"g\").append(labelElement);\n            }\n        }\n        var portContainerSelectors;\n        if (portSelectors && labelSelectors) {\n            for(var key in labelSelectors){\n                if (portSelectors[key] && key !== this.selector) throw new Error(\"ElementView: selectors within port must be unique.\");\n            }\n            portContainerSelectors = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign({}, portSelectors, labelSelectors);\n        } else {\n            portContainerSelectors = portSelectors || labelSelectors || {};\n        }\n        // The `portRootSelector` points to the root SVGNode of the port.\n        // Either the implicit wrapping group <g/> in case the port consist of multiple SVGNodes.\n        // Or the single SVGNode of the port.\n        const portRootSelector = \"portRoot\";\n        // The `labelRootSelector` points to the root SVGNode of the label.\n        const labelRootSelector = \"labelRoot\";\n        // The `labelTextSelector` points to all text SVGNodes of the label.\n        const labelTextSelector = \"labelText\";\n        if (!(portRootSelector in portContainerSelectors)) {\n            portContainerSelectors[portRootSelector] = portElement.node;\n        }\n        if (labelElement) {\n            const labelNode = labelElement.node;\n            if (!(labelRootSelector in portContainerSelectors)) {\n                portContainerSelectors[labelRootSelector] = labelNode;\n            }\n            if (!(labelTextSelector in portContainerSelectors)) {\n                // If the label is a <text> element, we can use it directly.\n                // Otherwise, we need to find the <text> element within the label.\n                const labelTextNode = labelElement.tagName() === \"TEXT\" ? labelNode : Array.from(labelNode.querySelectorAll(\"text\"));\n                portContainerSelectors[labelTextSelector] = labelTextNode;\n                if (!labelSelectors) labelSelectors = {};\n                labelSelectors[labelTextSelector] = labelTextNode;\n            }\n        }\n        portContainerElement.append(portElement.addClass(\"joint-port-body\"));\n        if (labelElement) {\n            portContainerElement.append(labelElement.addClass(\"joint-port-label\"));\n        }\n        this._portElementsCache[port.id] = {\n            portElement: portContainerElement,\n            portLabelElement: labelElement,\n            portSelectors: portContainerSelectors,\n            portLabelSelectors: labelSelectors,\n            portContentElement: portElement,\n            portContentSelectors: portSelectors\n        };\n        return portContainerElement;\n    },\n    /**\n     * @param {string=} groupName\n     * @private\n     */ _updatePortGroup: function(groupName) {\n        var elementBBox = (0,_g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Rect)(this.model.size());\n        var portsMetrics = this.model._portSettingsData.getGroupPortsMetrics(groupName, elementBBox);\n        for(var i = 0, n = portsMetrics.length; i < n; i++){\n            var metrics = portsMetrics[i];\n            var portId = metrics.portId;\n            var cached = this._portElementsCache[portId] || {};\n            var portTransformation = metrics.portTransformation;\n            var labelTransformation = metrics.labelTransformation;\n            if (labelTransformation && cached.portLabelElement) {\n                this.updateDOMSubtreeAttributes(cached.portLabelElement.node, labelTransformation.attrs, {\n                    rootBBox: new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Rect(metrics.labelSize),\n                    selectors: cached.portLabelSelectors\n                });\n                this.applyPortTransform(cached.portLabelElement, labelTransformation, -portTransformation.angle || 0);\n            }\n            this.updateDOMSubtreeAttributes(cached.portElement.node, metrics.portAttrs, {\n                rootBBox: new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Rect(metrics.portSize),\n                selectors: cached.portSelectors\n            });\n            this.applyPortTransform(cached.portElement, portTransformation);\n        }\n    },\n    /**\n     * @param {Vectorizer} element\n     * @param {{dx:number, dy:number, angle: number, attrs: Object, x:number: y:number}} transformData\n     * @param {number=} initialAngle\n     * @constructor\n     */ applyPortTransform: function(element, transformData, initialAngle) {\n        var matrix = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createSVGMatrix().rotate(initialAngle || 0).translate(transformData.x || 0, transformData.y || 0).rotate(transformData.angle || 0);\n        element.transform(matrix, {\n            absolute: true\n        });\n    },\n    /**\n     * @param {Port} port\n     * @returns {string}\n     * @private\n     */ _getPortMarkup: function(port) {\n        return port.markup || this.model.get(\"portMarkup\") || this.model.portMarkup || this.portMarkup;\n    },\n    /**\n     * @param {Object} label\n     * @returns {string}\n     * @private\n     */ _getPortLabelMarkup: function(label) {\n        return label.markup || this.model.get(\"portLabelMarkup\") || this.model.portLabelMarkup || this.portLabelMarkup;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/dia/ports.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/env/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/env/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   env: () => (/* binding */ env)\n/* harmony export */ });\nconst env = {\n    _results: {},\n    _tests: {\n        svgforeignobject: function() {\n            return !!document.createElementNS && /SVGForeignObject/.test(({}).toString.call(document.createElementNS(\"http://www.w3.org/2000/svg\", \"foreignObject\")));\n        }\n    },\n    addTest: function(name, fn) {\n        return this._tests[name] = fn;\n    },\n    test: function(name) {\n        var fn = this._tests[name];\n        if (!fn) {\n            throw new Error('Test not defined (\"' + name + '\"). Use `joint.env.addTest(name, fn) to add a new test.`');\n        }\n        var result = this._results[name];\n        if (typeof result !== \"undefined\") {\n            return result;\n        }\n        try {\n            result = fn();\n        } catch (error) {\n            result = false;\n        }\n        // Cache the test result.\n        this._results[name] = result;\n        return result;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZW52L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsTUFBTTtJQUVmQyxVQUFVLENBQUM7SUFFWEMsUUFBUTtRQUVKQyxrQkFBa0I7WUFDZCxPQUFPLENBQUMsQ0FBQ0MsU0FBU0MsZUFBZSxJQUM3QixtQkFBbUJDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBR0MsUUFBUSxDQUFDQyxJQUFJLENBQUNKLFNBQVNDLGVBQWUsQ0FBQyw4QkFBOEI7UUFDMUc7SUFDSjtJQUVBSSxTQUFTLFNBQVNDLElBQUksRUFBRUMsRUFBRTtRQUV0QixPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDUSxLQUFLLEdBQUdDO0lBQy9CO0lBRUFMLE1BQU0sU0FBU0ksSUFBSTtRQUVmLElBQUlDLEtBQUssSUFBSSxDQUFDVCxNQUFNLENBQUNRLEtBQUs7UUFFMUIsSUFBSSxDQUFDQyxJQUFJO1lBQ0wsTUFBTSxJQUFJQyxNQUFNLHdCQUF3QkYsT0FBTztRQUNuRDtRQUVBLElBQUlHLFNBQVMsSUFBSSxDQUFDWixRQUFRLENBQUNTLEtBQUs7UUFFaEMsSUFBSSxPQUFPRyxXQUFXLGFBQWE7WUFDL0IsT0FBT0E7UUFDWDtRQUVBLElBQUk7WUFDQUEsU0FBU0Y7UUFDYixFQUFFLE9BQU9HLE9BQU87WUFDWkQsU0FBUztRQUNiO1FBRUEseUJBQXlCO1FBQ3pCLElBQUksQ0FBQ1osUUFBUSxDQUFDUyxLQUFLLEdBQUdHO1FBRXRCLE9BQU9BO0lBQ1g7QUFDSixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZW52L2luZGV4Lm1qcz82Y2Q0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBlbnYgPSB7XG5cbiAgICBfcmVzdWx0czoge30sXG5cbiAgICBfdGVzdHM6IHtcblxuICAgICAgICBzdmdmb3JlaWdub2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyAmJlxuICAgICAgICAgICAgICAgIC9TVkdGb3JlaWduT2JqZWN0Ly50ZXN0KCh7fSkudG9TdHJpbmcuY2FsbChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2ZvcmVpZ25PYmplY3QnKSkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFkZFRlc3Q6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rlc3RzW25hbWVdID0gZm47XG4gICAgfSxcblxuICAgIHRlc3Q6IGZ1bmN0aW9uKG5hbWUpIHtcblxuICAgICAgICB2YXIgZm4gPSB0aGlzLl90ZXN0c1tuYW1lXTtcblxuICAgICAgICBpZiAoIWZuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rlc3Qgbm90IGRlZmluZWQgKFwiJyArIG5hbWUgKyAnXCIpLiBVc2UgYGpvaW50LmVudi5hZGRUZXN0KG5hbWUsIGZuKSB0byBhZGQgYSBuZXcgdGVzdC5gJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fcmVzdWx0c1tuYW1lXTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZm4oKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FjaGUgdGhlIHRlc3QgcmVzdWx0LlxuICAgICAgICB0aGlzLl9yZXN1bHRzW25hbWVdID0gcmVzdWx0O1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJlbnYiLCJfcmVzdWx0cyIsIl90ZXN0cyIsInN2Z2ZvcmVpZ25vYmplY3QiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInRlc3QiLCJ0b1N0cmluZyIsImNhbGwiLCJhZGRUZXN0IiwibmFtZSIsImZuIiwiRXJyb3IiLCJyZXN1bHQiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/env/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/bezier.mjs":
/*!***********************************************!*\
  !*** ./node_modules/jointjs/src/g/bezier.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bezier: () => (/* binding */ bezier)\n/* harmony export */ });\n/* harmony import */ var _path_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _curve_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./curve.mjs */ \"(ssr)/./node_modules/jointjs/src/g/curve.mjs\");\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n\n\n\nconst bezier = {\n    // Cubic Bezier curve path through points.\n    // @deprecated\n    // @param {array} points Array of points through which the smooth line will go.\n    // @return {array} SVG Path commands as an array\n    curveThroughPoints: function(points) {\n        console.warn(\"deprecated\");\n        return new _path_mjs__WEBPACK_IMPORTED_MODULE_0__.Path(_curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve.throughPoints(points)).serialize();\n    },\n    // Get open-ended Bezier Spline Control Points.\n    // @deprecated\n    // @param knots Input Knot Bezier spline points (At least two points!).\n    // @param firstControlPoints Output First Control points. Array of knots.length - 1 length.\n    // @param secondControlPoints Output Second Control points. Array of knots.length - 1 length.\n    getCurveControlPoints: function(knots) {\n        console.warn(\"deprecated\");\n        var firstControlPoints = [];\n        var secondControlPoints = [];\n        var n = knots.length - 1;\n        var i;\n        // Special case: Bezier curve should be a straight line.\n        if (n == 1) {\n            // 3P1 = 2P0 + P3\n            firstControlPoints[0] = new _point_mjs__WEBPACK_IMPORTED_MODULE_2__.Point((2 * knots[0].x + knots[1].x) / 3, (2 * knots[0].y + knots[1].y) / 3);\n            // P2 = 2P1 – P0\n            secondControlPoints[0] = new _point_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(2 * firstControlPoints[0].x - knots[0].x, 2 * firstControlPoints[0].y - knots[0].y);\n            return [\n                firstControlPoints,\n                secondControlPoints\n            ];\n        }\n        // Calculate first Bezier control points.\n        // Right hand side vector.\n        var rhs = [];\n        // Set right hand side X values.\n        for(i = 1; i < n - 1; i++){\n            rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;\n        }\n        rhs[0] = knots[0].x + 2 * knots[1].x;\n        rhs[n - 1] = (8 * knots[n - 1].x + knots[n].x) / 2.0;\n        // Get first control points X-values.\n        var x = this.getFirstControlPoints(rhs);\n        // Set right hand side Y values.\n        for(i = 1; i < n - 1; ++i){\n            rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;\n        }\n        rhs[0] = knots[0].y + 2 * knots[1].y;\n        rhs[n - 1] = (8 * knots[n - 1].y + knots[n].y) / 2.0;\n        // Get first control points Y-values.\n        var y = this.getFirstControlPoints(rhs);\n        // Fill output arrays.\n        for(i = 0; i < n; i++){\n            // First control point.\n            firstControlPoints.push(new _point_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(x[i], y[i]));\n            // Second control point.\n            if (i < n - 1) {\n                secondControlPoints.push(new _point_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(2 * knots[i + 1].x - x[i + 1], 2 * knots[i + 1].y - y[i + 1]));\n            } else {\n                secondControlPoints.push(new _point_mjs__WEBPACK_IMPORTED_MODULE_2__.Point((knots[n].x + x[n - 1]) / 2, (knots[n].y + y[n - 1]) / 2));\n            }\n        }\n        return [\n            firstControlPoints,\n            secondControlPoints\n        ];\n    },\n    // Divide a Bezier curve into two at point defined by value 't' <0,1>.\n    // Using deCasteljau algorithm. http://math.stackexchange.com/a/317867\n    // @deprecated\n    // @param control points (start, control start, control end, end)\n    // @return a function that accepts t and returns 2 curves.\n    getCurveDivider: function(p0, p1, p2, p3) {\n        console.warn(\"deprecated\");\n        var curve = new _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve(p0, p1, p2, p3);\n        return function divideCurve(t) {\n            var divided = curve.divide(t);\n            return [\n                {\n                    p0: divided[0].start,\n                    p1: divided[0].controlPoint1,\n                    p2: divided[0].controlPoint2,\n                    p3: divided[0].end\n                },\n                {\n                    p0: divided[1].start,\n                    p1: divided[1].controlPoint1,\n                    p2: divided[1].controlPoint2,\n                    p3: divided[1].end\n                }\n            ];\n        };\n    },\n    // Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points.\n    // @deprecated\n    // @param rhs Right hand side vector.\n    // @return Solution vector.\n    getFirstControlPoints: function(rhs) {\n        console.warn(\"deprecated\");\n        var n = rhs.length;\n        // `x` is a solution vector.\n        var x = [];\n        var tmp = [];\n        var b = 2.0;\n        x[0] = rhs[0] / b;\n        // Decomposition and forward substitution.\n        for(var i = 1; i < n; i++){\n            tmp[i] = 1 / b;\n            b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];\n            x[i] = (rhs[i] - x[i - 1]) / b;\n        }\n        for(i = 1; i < n; i++){\n            // Backsubstitution.\n            x[n - i - 1] -= tmp[n - i] * x[n - i];\n        }\n        return x;\n    },\n    // Solves an inversion problem -- Given the (x, y) coordinates of a point which lies on\n    // a parametric curve x = x(t)/w(t), y = y(t)/w(t), ﬁnd the parameter value t\n    // which corresponds to that point.\n    // @deprecated\n    // @param control points (start, control start, control end, end)\n    // @return a function that accepts a point and returns t.\n    getInversionSolver: function(p0, p1, p2, p3) {\n        console.warn(\"deprecated\");\n        var curve = new _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve(p0, p1, p2, p3);\n        return function solveInversion(p) {\n            return curve.closestPointT(p);\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/bezier.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/curve.mjs":
/*!**********************************************!*\
  !*** ./node_modules/jointjs/src/g/curve.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Curve: () => (/* binding */ Curve)\n/* harmony export */ });\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./line.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _polyline_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyline.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n\n\n\n\n\nconst { abs, sqrt, min, max, pow } = Math;\nconst Curve = function(p1, p2, p3, p4) {\n    if (!(this instanceof Curve)) {\n        return new Curve(p1, p2, p3, p4);\n    }\n    if (p1 instanceof Curve) {\n        return new Curve(p1.start, p1.controlPoint1, p1.controlPoint2, p1.end);\n    }\n    this.start = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p1);\n    this.controlPoint1 = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p2);\n    this.controlPoint2 = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p3);\n    this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p4);\n};\n// Curve passing through points.\n// Ported from C# implementation by Oleg V. Polikarpotchkin and Peter Lee (http://www.codeproject.com/KB/graphics/BezierSpline.aspx).\n// @param {array} points Array of points through which the smooth line will go.\n// @return {array} curves.\nCurve.throughPoints = function() {\n    // Get open-ended Bezier Spline Control Points.\n    // @param knots Input Knot Bezier spline points (At least two points!).\n    // @param firstControlPoints Output First Control points. Array of knots.length - 1 length.\n    // @param secondControlPoints Output Second Control points. Array of knots.length - 1 length.\n    function getCurveControlPoints(knots) {\n        var firstControlPoints = [];\n        var secondControlPoints = [];\n        var n = knots.length - 1;\n        var i;\n        // Special case: Bezier curve should be a straight line.\n        if (n == 1) {\n            // 3P1 = 2P0 + P3\n            firstControlPoints[0] = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point((2 * knots[0].x + knots[1].x) / 3, (2 * knots[0].y + knots[1].y) / 3);\n            // P2 = 2P1 – P0\n            secondControlPoints[0] = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(2 * firstControlPoints[0].x - knots[0].x, 2 * firstControlPoints[0].y - knots[0].y);\n            return [\n                firstControlPoints,\n                secondControlPoints\n            ];\n        }\n        // Calculate first Bezier control points.\n        // Right hand side vector.\n        var rhs = [];\n        // Set right hand side X values.\n        for(i = 1; i < n - 1; i++){\n            rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;\n        }\n        rhs[0] = knots[0].x + 2 * knots[1].x;\n        rhs[n - 1] = (8 * knots[n - 1].x + knots[n].x) / 2.0;\n        // Get first control points X-values.\n        var x = getFirstControlPoints(rhs);\n        // Set right hand side Y values.\n        for(i = 1; i < n - 1; ++i){\n            rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;\n        }\n        rhs[0] = knots[0].y + 2 * knots[1].y;\n        rhs[n - 1] = (8 * knots[n - 1].y + knots[n].y) / 2.0;\n        // Get first control points Y-values.\n        var y = getFirstControlPoints(rhs);\n        // Fill output arrays.\n        for(i = 0; i < n; i++){\n            // First control point.\n            firstControlPoints.push(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(x[i], y[i]));\n            // Second control point.\n            if (i < n - 1) {\n                secondControlPoints.push(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(2 * knots[i + 1].x - x[i + 1], 2 * knots[i + 1].y - y[i + 1]));\n            } else {\n                secondControlPoints.push(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point((knots[n].x + x[n - 1]) / 2, (knots[n].y + y[n - 1]) / 2));\n            }\n        }\n        return [\n            firstControlPoints,\n            secondControlPoints\n        ];\n    }\n    // Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points.\n    // @param rhs Right hand side vector.\n    // @return Solution vector.\n    function getFirstControlPoints(rhs) {\n        var n = rhs.length;\n        // `x` is a solution vector.\n        var x = [];\n        var tmp = [];\n        var b = 2.0;\n        x[0] = rhs[0] / b;\n        // Decomposition and forward substitution.\n        for(var i = 1; i < n; i++){\n            tmp[i] = 1 / b;\n            b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];\n            x[i] = (rhs[i] - x[i - 1]) / b;\n        }\n        for(i = 1; i < n; i++){\n            // Backsubstitution.\n            x[n - i - 1] -= tmp[n - i] * x[n - i];\n        }\n        return x;\n    }\n    return function(points) {\n        if (!points || Array.isArray(points) && points.length < 2) {\n            throw new Error(\"At least 2 points are required\");\n        }\n        var controlPoints = getCurveControlPoints(points);\n        var curves = [];\n        var n = controlPoints[0].length;\n        for(var i = 0; i < n; i++){\n            var controlPoint1 = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(controlPoints[0][i].x, controlPoints[0][i].y);\n            var controlPoint2 = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(controlPoints[1][i].x, controlPoints[1][i].y);\n            curves.push(new Curve(points[i], controlPoint1, controlPoint2, points[i + 1]));\n        }\n        return curves;\n    };\n}();\nCurve.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_1__.types.Curve,\n    // Returns a bbox that tightly envelops the curve.\n    bbox: function() {\n        var start = this.start;\n        var controlPoint1 = this.controlPoint1;\n        var controlPoint2 = this.controlPoint2;\n        var end = this.end;\n        var x0 = start.x;\n        var y0 = start.y;\n        var x1 = controlPoint1.x;\n        var y1 = controlPoint1.y;\n        var x2 = controlPoint2.x;\n        var y2 = controlPoint2.y;\n        var x3 = end.x;\n        var y3 = end.y;\n        var points = new Array(); // local extremes\n        var tvalues = new Array(); // t values of local extremes\n        var bounds = [\n            new Array(),\n            new Array()\n        ];\n        var a, b, c, t;\n        var t1, t2;\n        var b2ac, sqrtb2ac;\n        for(var i = 0; i < 2; ++i){\n            if (i === 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) tvalues.push(t);\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = sqrt(b2ac);\n            if (b2ac < 0) continue;\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) tvalues.push(t1);\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) tvalues.push(t2);\n        }\n        var j = tvalues.length;\n        var jlen = j;\n        var mt;\n        var x, y;\n        while(j--){\n            t = tvalues[j];\n            mt = 1 - t;\n            x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[0][j] = x;\n            y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n            bounds[1][j] = y;\n            points[j] = {\n                X: x,\n                Y: y\n            };\n        }\n        tvalues[jlen] = 0;\n        tvalues[jlen + 1] = 1;\n        points[jlen] = {\n            X: x0,\n            Y: y0\n        };\n        points[jlen + 1] = {\n            X: x3,\n            Y: y3\n        };\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        tvalues.length = jlen + 2;\n        bounds[0].length = jlen + 2;\n        bounds[1].length = jlen + 2;\n        points.length = jlen + 2;\n        var left = min.apply(null, bounds[0]);\n        var top = min.apply(null, bounds[1]);\n        var right = max.apply(null, bounds[0]);\n        var bottom = max.apply(null, bounds[1]);\n        return new _rect_mjs__WEBPACK_IMPORTED_MODULE_2__.Rect(left, top, right - left, bottom - top);\n    },\n    clone: function() {\n        return new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n    },\n    // Returns the point on the curve closest to point `p`\n    closestPoint: function(p, opt) {\n        return this.pointAtT(this.closestPointT(p, opt));\n    },\n    closestPointLength: function(p, opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        var localOpt = {\n            precision: precision,\n            subdivisions: subdivisions\n        };\n        return this.lengthAtT(this.closestPointT(p, localOpt), localOpt);\n    },\n    closestPointNormalizedLength: function(p, opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        var localOpt = {\n            precision: precision,\n            subdivisions: subdivisions\n        };\n        var cpLength = this.closestPointLength(p, localOpt);\n        if (!cpLength) return 0;\n        var length = this.length(localOpt);\n        if (length === 0) return 0;\n        return cpLength / length;\n    },\n    // Returns `t` of the point on the curve closest to point `p`\n    closestPointT: function(p, opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        // does not use localOpt\n        // identify the subdivision that contains the point:\n        var investigatedSubdivision;\n        var investigatedSubdivisionStartT; // assume that subdivisions are evenly spaced\n        var investigatedSubdivisionEndT;\n        var distFromStart; // distance of point from start of baseline\n        var distFromEnd; // distance of point from end of baseline\n        var chordLength; // distance between start and end of the subdivision\n        var minSumDist; // lowest observed sum of the two distances\n        var n = subdivisions.length;\n        var subdivisionSize = n ? 1 / n : 0;\n        for(var i = 0; i < n; i++){\n            var currentSubdivision = subdivisions[i];\n            var startDist = currentSubdivision.start.distance(p);\n            var endDist = currentSubdivision.end.distance(p);\n            var sumDist = startDist + endDist;\n            // check that the point is closest to current subdivision and not any other\n            if (!minSumDist || sumDist < minSumDist) {\n                investigatedSubdivision = currentSubdivision;\n                investigatedSubdivisionStartT = i * subdivisionSize;\n                investigatedSubdivisionEndT = (i + 1) * subdivisionSize;\n                distFromStart = startDist;\n                distFromEnd = endDist;\n                chordLength = currentSubdivision.start.distance(currentSubdivision.end);\n                minSumDist = sumDist;\n            }\n        }\n        var precisionRatio = pow(10, -precision);\n        // recursively divide investigated subdivision:\n        // until distance between baselinePoint and closest path endpoint is within 10^(-precision)\n        // then return the closest endpoint of that final subdivision\n        while(true){\n            // check if we have reached at least one required observed precision\n            // - calculated as: the difference in distances from point to start and end divided by the distance\n            // - note that this function is not monotonic = it doesn't converge stably but has \"teeth\"\n            // - the function decreases while one of the endpoints is fixed but \"jumps\" whenever we switch\n            // - this criterion works well for points lying far away from the curve\n            var startPrecisionRatio = distFromStart ? abs(distFromStart - distFromEnd) / distFromStart : 0;\n            var endPrecisionRatio = distFromEnd ? abs(distFromStart - distFromEnd) / distFromEnd : 0;\n            var hasRequiredPrecision = startPrecisionRatio < precisionRatio || endPrecisionRatio < precisionRatio;\n            // check if we have reached at least one required minimal distance\n            // - calculated as: the subdivision chord length multiplied by precisionRatio\n            // - calculation is relative so it will work for arbitrarily large/small curves and their subdivisions\n            // - this is a backup criterion that works well for points lying \"almost at\" the curve\n            var hasMinimalStartDistance = distFromStart ? distFromStart < chordLength * precisionRatio : true;\n            var hasMinimalEndDistance = distFromEnd ? distFromEnd < chordLength * precisionRatio : true;\n            var hasMinimalDistance = hasMinimalStartDistance || hasMinimalEndDistance;\n            // do we stop now?\n            if (hasRequiredPrecision || hasMinimalDistance) {\n                return distFromStart <= distFromEnd ? investigatedSubdivisionStartT : investigatedSubdivisionEndT;\n            }\n            // otherwise, set up for next iteration\n            var divided = investigatedSubdivision.divide(0.5);\n            subdivisionSize /= 2;\n            var startDist1 = divided[0].start.distance(p);\n            var endDist1 = divided[0].end.distance(p);\n            var sumDist1 = startDist1 + endDist1;\n            var startDist2 = divided[1].start.distance(p);\n            var endDist2 = divided[1].end.distance(p);\n            var sumDist2 = startDist2 + endDist2;\n            if (sumDist1 <= sumDist2) {\n                investigatedSubdivision = divided[0];\n                investigatedSubdivisionEndT -= subdivisionSize; // subdivisionSize was already halved\n                distFromStart = startDist1;\n                distFromEnd = endDist1;\n            } else {\n                investigatedSubdivision = divided[1];\n                investigatedSubdivisionStartT += subdivisionSize; // subdivisionSize was already halved\n                distFromStart = startDist2;\n                distFromEnd = endDist2;\n            }\n        }\n    },\n    closestPointTangent: function(p, opt) {\n        return this.tangentAtT(this.closestPointT(p, opt));\n    },\n    // Returns `true` if the area surrounded by the curve contains the point `p`.\n    // Implements the even-odd algorithm (self-intersections are \"outside\").\n    // Closes open curves (always imagines a closing segment).\n    // Precision may be adjusted by passing an `opt` object.\n    containsPoint: function(p, opt) {\n        var polyline = this.toPolyline(opt);\n        return polyline.containsPoint(p);\n    },\n    // Divides the curve into two at requested `ratio` between 0 and 1 with precision better than `opt.precision`; optionally using `opt.subdivisions` provided.\n    // For a function that uses `t`, use Curve.divideAtT().\n    divideAt: function(ratio, opt) {\n        if (ratio <= 0) return this.divideAtT(0);\n        if (ratio >= 1) return this.divideAtT(1);\n        var t = this.tAt(ratio, opt);\n        return this.divideAtT(t);\n    },\n    // Divides the curve into two at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.\n    divideAtLength: function(length, opt) {\n        var t = this.tAtLength(length, opt);\n        return this.divideAtT(t);\n    },\n    // Divides the curve into two at point defined by `t` between 0 and 1.\n    // Using de Casteljau's algorithm (http://math.stackexchange.com/a/317867).\n    // Additional resource: https://pomax.github.io/bezierinfo/#decasteljau\n    divideAtT: function(t) {\n        var start = this.start;\n        var controlPoint1 = this.controlPoint1;\n        var controlPoint2 = this.controlPoint2;\n        var end = this.end;\n        // shortcuts for `t` values that are out of range\n        if (t <= 0) {\n            return [\n                new Curve(start, start, start, start),\n                new Curve(start, controlPoint1, controlPoint2, end)\n            ];\n        }\n        if (t >= 1) {\n            return [\n                new Curve(start, controlPoint1, controlPoint2, end),\n                new Curve(end, end, end, end)\n            ];\n        }\n        var dividerPoints = this.getSkeletonPoints(t);\n        var startControl1 = dividerPoints.startControlPoint1;\n        var startControl2 = dividerPoints.startControlPoint2;\n        var divider = dividerPoints.divider;\n        var dividerControl1 = dividerPoints.dividerControlPoint1;\n        var dividerControl2 = dividerPoints.dividerControlPoint2;\n        // return array with two new curves\n        return [\n            new Curve(start, startControl1, startControl2, divider),\n            new Curve(divider, dividerControl1, dividerControl2, end)\n        ];\n    },\n    // Returns the distance between the curve's start and end points.\n    endpointDistance: function() {\n        return this.start.distance(this.end);\n    },\n    // Checks whether two curves are exactly the same.\n    equals: function(c) {\n        return !!c && this.start.x === c.start.x && this.start.y === c.start.y && this.controlPoint1.x === c.controlPoint1.x && this.controlPoint1.y === c.controlPoint1.y && this.controlPoint2.x === c.controlPoint2.x && this.controlPoint2.y === c.controlPoint2.y && this.end.x === c.end.x && this.end.y === c.end.y;\n    },\n    // Returns five helper points necessary for curve division.\n    getSkeletonPoints: function(t) {\n        var start = this.start;\n        var control1 = this.controlPoint1;\n        var control2 = this.controlPoint2;\n        var end = this.end;\n        // shortcuts for `t` values that are out of range\n        if (t <= 0) {\n            return {\n                startControlPoint1: start.clone(),\n                startControlPoint2: start.clone(),\n                divider: start.clone(),\n                dividerControlPoint1: control1.clone(),\n                dividerControlPoint2: control2.clone()\n            };\n        }\n        if (t >= 1) {\n            return {\n                startControlPoint1: control1.clone(),\n                startControlPoint2: control2.clone(),\n                divider: end.clone(),\n                dividerControlPoint1: end.clone(),\n                dividerControlPoint2: end.clone()\n            };\n        }\n        var midpoint1 = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(start, control1).pointAt(t);\n        var midpoint2 = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(control1, control2).pointAt(t);\n        var midpoint3 = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(control2, end).pointAt(t);\n        var subControl1 = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(midpoint1, midpoint2).pointAt(t);\n        var subControl2 = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(midpoint2, midpoint3).pointAt(t);\n        var divider = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(subControl1, subControl2).pointAt(t);\n        var output = {\n            startControlPoint1: midpoint1,\n            startControlPoint2: subControl1,\n            divider: divider,\n            dividerControlPoint1: subControl2,\n            dividerControlPoint2: midpoint3\n        };\n        return output;\n    },\n    // Returns a list of curves whose flattened length is better than `opt.precision`.\n    // That is, observed difference in length between recursions is less than 10^(-3) = 0.001 = 0.1%\n    // (Observed difference is not real precision, but close enough as long as special cases are covered)\n    // As a rule of thumb, increasing `precision` by 1 requires 2 more iterations (= levels of division operations)\n    // - Precision 0 (endpointDistance) - 0 iterations => total of 2^0 - 1 = 0 operations (1 subdivision)\n    // - Precision 1 (<10% error) - 2 iterations => total of 2^2 - 1 = 3 operations (4 subdivisions)\n    // - Precision 2 (<1% error) - 4 iterations => total of 2^4 - 1 = 15 operations requires 4 division operations on all elements (15 operations total) (16 subdivisions)\n    // - Precision 3 (<0.1% error) - 6 iterations => total of 2^6 - 1 = 63 operations - acceptable when drawing (64 subdivisions)\n    // - Precision 4 (<0.01% error) - 8 iterations => total of 2^8 - 1 = 255 operations - high resolution, can be used to interpolate `t` (256 subdivisions)\n    // (Variation of 1 recursion worse or better is possible depending on the curve, doubling/halving the number of operations accordingly)\n    getSubdivisions: function(opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        // not using opt.subdivisions\n        // not using localOpt\n        var start = this.start;\n        var control1 = this.controlPoint1;\n        var control2 = this.controlPoint2;\n        var end = this.end;\n        var subdivisions = [\n            new Curve(start, control1, control2, end)\n        ];\n        if (precision === 0) return subdivisions;\n        // special case #1: point-like curves\n        // - no need to calculate subdivisions, they would all be identical\n        var isPoint = !this.isDifferentiable();\n        if (isPoint) return subdivisions;\n        var previousLength = this.endpointDistance();\n        var precisionRatio = pow(10, -precision);\n        // special case #2: sine-like curves may have the same observed length in iteration 0 and 1 - skip iteration 1\n        // - not a problem for further iterations because cubic curves cannot have more than two local extrema\n        // - (i.e. cubic curves cannot intersect the baseline more than once)\n        // - therefore starting from iteration = 2 ensures that subsequent iterations do not produce sampling with equal length\n        // - (unless it's a straight-line curve, see below)\n        var minIterations = 2; // = 2*1\n        // special case #3: straight-line curves have the same observed length in all iterations\n        // - this causes observed precision ratio to always be 0 (= lower than `precisionRatio`, which is our exit condition)\n        // - we enforce the expected number of iterations = 2 * precision\n        var isLine = control1.cross(start, end) === 0 && control2.cross(start, end) === 0;\n        if (isLine) {\n            minIterations = 2 * precision;\n        }\n        // recursively divide curve at `t = 0.5`\n        // until we reach `minIterations`\n        // and until the difference between observed length at subsequent iterations is lower than `precision`\n        var iteration = 0;\n        while(true){\n            iteration += 1;\n            // divide all subdivisions\n            var newSubdivisions = [];\n            var numSubdivisions = subdivisions.length;\n            for(var i = 0; i < numSubdivisions; i++){\n                var currentSubdivision = subdivisions[i];\n                var divided = currentSubdivision.divide(0.5); // dividing at t = 0.5 (not at middle length!)\n                newSubdivisions.push(divided[0], divided[1]);\n            }\n            // measure new length\n            var length = 0;\n            var numNewSubdivisions = newSubdivisions.length;\n            for(var j = 0; j < numNewSubdivisions; j++){\n                var currentNewSubdivision = newSubdivisions[j];\n                length += currentNewSubdivision.endpointDistance();\n            }\n            // check if we have reached minimum number of iterations\n            if (iteration >= minIterations) {\n                // check if we have reached required observed precision\n                var observedPrecisionRatio = length !== 0 ? (length - previousLength) / length : 0;\n                if (observedPrecisionRatio < precisionRatio) {\n                    return newSubdivisions;\n                }\n            }\n            // otherwise, set up for next iteration\n            subdivisions = newSubdivisions;\n            previousLength = length;\n        }\n    },\n    isDifferentiable: function() {\n        var start = this.start;\n        var control1 = this.controlPoint1;\n        var control2 = this.controlPoint2;\n        var end = this.end;\n        return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));\n    },\n    // Returns flattened length of the curve with precision better than `opt.precision`; or using `opt.subdivisions` provided.\n    length: function(opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision; // opt.precision only used in getSubdivisions() call\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        // not using localOpt\n        var length = 0;\n        var n = subdivisions.length;\n        for(var i = 0; i < n; i++){\n            var currentSubdivision = subdivisions[i];\n            length += currentSubdivision.endpointDistance();\n        }\n        return length;\n    },\n    // Returns distance along the curve up to `t` with precision better than requested `opt.precision`. (Not using `opt.subdivisions`.)\n    lengthAtT: function(t, opt) {\n        if (t <= 0) return 0;\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        // not using opt.subdivisions\n        // not using localOpt\n        var subCurve = this.divide(t)[0];\n        var subCurveLength = subCurve.length({\n            precision: precision\n        });\n        return subCurveLength;\n    },\n    // Returns point at requested `ratio` between 0 and 1 with precision better than `opt.precision`; optionally using `opt.subdivisions` provided.\n    // Mirrors Line.pointAt() function.\n    // For a function that tracks `t`, use Curve.pointAtT().\n    pointAt: function(ratio, opt) {\n        if (ratio <= 0) return this.start.clone();\n        if (ratio >= 1) return this.end.clone();\n        var t = this.tAt(ratio, opt);\n        return this.pointAtT(t);\n    },\n    // Returns point at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.\n    pointAtLength: function(length, opt) {\n        var t = this.tAtLength(length, opt);\n        return this.pointAtT(t);\n    },\n    // Returns the point at provided `t` between 0 and 1.\n    // `t` does not track distance along curve as it does in Line objects.\n    // Non-linear relationship, speeds up and slows down as curve warps!\n    // For linear length-based solution, use Curve.pointAt().\n    pointAtT: function(t) {\n        if (t <= 0) return this.start.clone();\n        if (t >= 1) return this.end.clone();\n        return this.getSkeletonPoints(t).divider;\n    },\n    // Default precision\n    PRECISION: 3,\n    round: function(precision) {\n        this.start.round(precision);\n        this.controlPoint1.round(precision);\n        this.controlPoint2.round(precision);\n        this.end.round(precision);\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        this.start.scale(sx, sy, origin);\n        this.controlPoint1.scale(sx, sy, origin);\n        this.controlPoint2.scale(sx, sy, origin);\n        this.end.scale(sx, sy, origin);\n        return this;\n    },\n    // Returns a tangent line at requested `ratio` with precision better than requested `opt.precision`; or using `opt.subdivisions` provided.\n    tangentAt: function(ratio, opt) {\n        if (!this.isDifferentiable()) return null;\n        if (ratio < 0) ratio = 0;\n        else if (ratio > 1) ratio = 1;\n        var t = this.tAt(ratio, opt);\n        return this.tangentAtT(t);\n    },\n    // Returns a tangent line at requested `length` with precision better than requested `opt.precision`; or using `opt.subdivisions` provided.\n    tangentAtLength: function(length, opt) {\n        if (!this.isDifferentiable()) return null;\n        var t = this.tAtLength(length, opt);\n        return this.tangentAtT(t);\n    },\n    // Returns a tangent line at requested `t`.\n    tangentAtT: function(t) {\n        if (!this.isDifferentiable()) return null;\n        if (t < 0) t = 0;\n        else if (t > 1) t = 1;\n        var skeletonPoints = this.getSkeletonPoints(t);\n        var p1 = skeletonPoints.startControlPoint2;\n        var p2 = skeletonPoints.dividerControlPoint1;\n        var tangentStart = skeletonPoints.divider;\n        var tangentLine = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(p1, p2);\n        tangentLine.translate(tangentStart.x - p1.x, tangentStart.y - p1.y); // move so that tangent line starts at the point requested\n        return tangentLine;\n    },\n    // Returns `t` at requested `ratio` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.\n    tAt: function(ratio, opt) {\n        if (ratio <= 0) return 0;\n        if (ratio >= 1) return 1;\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        var localOpt = {\n            precision: precision,\n            subdivisions: subdivisions\n        };\n        var curveLength = this.length(localOpt);\n        var length = curveLength * ratio;\n        return this.tAtLength(length, localOpt);\n    },\n    // Returns `t` at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.\n    // Uses `precision` to approximate length within `precision` (always underestimates)\n    // Then uses a binary search to find the `t` of a subdivision endpoint that is close (within `precision`) to the `length`, if the curve was as long as approximated\n    // As a rule of thumb, increasing `precision` by 1 causes the algorithm to go 2^(precision - 1) deeper\n    // - Precision 0 (chooses one of the two endpoints) - 0 levels\n    // - Precision 1 (chooses one of 5 points, <10% error) - 1 level\n    // - Precision 2 (<1% error) - 3 levels\n    // - Precision 3 (<0.1% error) - 7 levels\n    // - Precision 4 (<0.01% error) - 15 levels\n    tAtLength: function(length, opt) {\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        var localOpt = {\n            precision: precision,\n            subdivisions: subdivisions\n        };\n        // identify the subdivision that contains the point at requested `length`:\n        var investigatedSubdivision;\n        var investigatedSubdivisionStartT; // assume that subdivisions are evenly spaced\n        var investigatedSubdivisionEndT;\n        //var baseline; // straightened version of subdivision to investigate\n        //var baselinePoint; // point on the baseline that is the requested distance away from start\n        var baselinePointDistFromStart; // distance of baselinePoint from start of baseline\n        var baselinePointDistFromEnd; // distance of baselinePoint from end of baseline\n        var l = 0; // length so far\n        var n = subdivisions.length;\n        var subdivisionSize = 1 / n;\n        for(var i = 0; i < n; i++){\n            var index = fromStart ? i : n - 1 - i;\n            var currentSubdivision = subdivisions[i];\n            var d = currentSubdivision.endpointDistance(); // length of current subdivision\n            if (length <= l + d) {\n                investigatedSubdivision = currentSubdivision;\n                investigatedSubdivisionStartT = index * subdivisionSize;\n                investigatedSubdivisionEndT = (index + 1) * subdivisionSize;\n                baselinePointDistFromStart = fromStart ? length - l : d + l - length;\n                baselinePointDistFromEnd = fromStart ? d + l - length : length - l;\n                break;\n            }\n            l += d;\n        }\n        if (!investigatedSubdivision) return fromStart ? 1 : 0; // length requested is out of range - return maximum t\n        // note that precision affects what length is recorded\n        // (imprecise measurements underestimate length by up to 10^(-precision) of the precise length)\n        // e.g. at precision 1, the length may be underestimated by up to 10% and cause this function to return 1\n        var curveLength = this.length(localOpt);\n        var precisionRatio = pow(10, -precision);\n        // recursively divide investigated subdivision:\n        // until distance between baselinePoint and closest path endpoint is within 10^(-precision)\n        // then return the closest endpoint of that final subdivision\n        while(true){\n            // check if we have reached required observed precision\n            var observedPrecisionRatio;\n            observedPrecisionRatio = curveLength !== 0 ? baselinePointDistFromStart / curveLength : 0;\n            if (observedPrecisionRatio < precisionRatio) return investigatedSubdivisionStartT;\n            observedPrecisionRatio = curveLength !== 0 ? baselinePointDistFromEnd / curveLength : 0;\n            if (observedPrecisionRatio < precisionRatio) return investigatedSubdivisionEndT;\n            // otherwise, set up for next iteration\n            var newBaselinePointDistFromStart;\n            var newBaselinePointDistFromEnd;\n            var divided = investigatedSubdivision.divide(0.5);\n            subdivisionSize /= 2;\n            var baseline1Length = divided[0].endpointDistance();\n            var baseline2Length = divided[1].endpointDistance();\n            if (baselinePointDistFromStart <= baseline1Length) {\n                investigatedSubdivision = divided[0];\n                investigatedSubdivisionEndT -= subdivisionSize; // sudivisionSize was already halved\n                newBaselinePointDistFromStart = baselinePointDistFromStart;\n                newBaselinePointDistFromEnd = baseline1Length - newBaselinePointDistFromStart;\n            } else {\n                investigatedSubdivision = divided[1];\n                investigatedSubdivisionStartT += subdivisionSize; // subdivisionSize was already halved\n                newBaselinePointDistFromStart = baselinePointDistFromStart - baseline1Length;\n                newBaselinePointDistFromEnd = baseline2Length - newBaselinePointDistFromStart;\n            }\n            baselinePointDistFromStart = newBaselinePointDistFromStart;\n            baselinePointDistFromEnd = newBaselinePointDistFromEnd;\n        }\n    },\n    // Returns an array of points that represents the curve when flattened, up to `opt.precision`; or using `opt.subdivisions` provided.\n    // Flattened length is no more than 10^(-precision) away from real curve length.\n    toPoints: function(opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision; // opt.precision only used in getSubdivisions() call\n        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({\n            precision: precision\n        }) : opt.subdivisions;\n        // not using localOpt\n        var points = [\n            subdivisions[0].start.clone()\n        ];\n        var n = subdivisions.length;\n        for(var i = 0; i < n; i++){\n            var currentSubdivision = subdivisions[i];\n            points.push(currentSubdivision.end.clone());\n        }\n        return points;\n    },\n    // Returns a polyline that represents the curve when flattened, up to `opt.precision`; or using `opt.subdivisions` provided.\n    // Flattened length is no more than 10^(-precision) away from real curve length.\n    toPolyline: function(opt) {\n        return new _polyline_mjs__WEBPACK_IMPORTED_MODULE_4__.Polyline(this.toPoints(opt));\n    },\n    toString: function() {\n        return this.start + \" \" + this.controlPoint1 + \" \" + this.controlPoint2 + \" \" + this.end;\n    },\n    translate: function(tx, ty) {\n        this.start.translate(tx, ty);\n        this.controlPoint1.translate(tx, ty);\n        this.controlPoint2.translate(tx, ty);\n        this.end.translate(tx, ty);\n        return this;\n    }\n};\nCurve.prototype.divide = Curve.prototype.divideAtT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/curve.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/ellipse.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/g/ellipse.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ellipse: () => (/* binding */ Ellipse),\n/* harmony export */   ellipse: () => (/* binding */ ellipse)\n/* harmony export */ });\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n\n\n\nconst { sqrt, round, pow } = Math;\nconst Ellipse = function(c, a, b) {\n    if (!(this instanceof Ellipse)) {\n        return new Ellipse(c, a, b);\n    }\n    if (c instanceof Ellipse) {\n        return new Ellipse(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(c.x, c.y), c.a, c.b);\n    }\n    c = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(c);\n    this.x = c.x;\n    this.y = c.y;\n    this.a = a;\n    this.b = b;\n};\nEllipse.fromRect = function(rect) {\n    rect = new _rect_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect(rect);\n    return new Ellipse(rect.center(), rect.width / 2, rect.height / 2);\n};\nEllipse.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_2__.types.Ellipse,\n    bbox: function() {\n        return new _rect_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect(this.x - this.a, this.y - this.b, 2 * this.a, 2 * this.b);\n    },\n    /**\n     * @returns {g.Point}\n     */ center: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.x, this.y);\n    },\n    clone: function() {\n        return new Ellipse(this);\n    },\n    /**\n     * @param {g.Point} p\n     * @returns {boolean}\n     */ containsPoint: function(p) {\n        return this.normalizedDistance(p) <= 1;\n    },\n    equals: function(ellipse) {\n        return !!ellipse && ellipse.x === this.x && ellipse.y === this.y && ellipse.a === this.a && ellipse.b === this.b;\n    },\n    // inflate by dx and dy\n    // @param dx {delta_x} representing additional size to x\n    // @param dy {delta_y} representing additional size to y -\n    // dy param is not required -> in that case y is sized by dx\n    inflate: function(dx, dy) {\n        if (dx === undefined) {\n            dx = 0;\n        }\n        if (dy === undefined) {\n            dy = dx;\n        }\n        this.a += 2 * dx;\n        this.b += 2 * dy;\n        return this;\n    },\n    intersectionWithLine: function(line) {\n        var intersections = [];\n        var a1 = line.start;\n        var a2 = line.end;\n        var rx = this.a;\n        var ry = this.b;\n        var dir = line.vector();\n        var diff = a1.difference(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this));\n        var mDir = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(dir.x / (rx * rx), dir.y / (ry * ry));\n        var mDiff = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(diff.x / (rx * rx), diff.y / (ry * ry));\n        var a = dir.dot(mDir);\n        var b = dir.dot(mDiff);\n        var c = diff.dot(mDiff) - 1.0;\n        var d = b * b - a * c;\n        if (d < 0) {\n            return null;\n        } else if (d > 0) {\n            var root = sqrt(d);\n            var ta = (-b - root) / a;\n            var tb = (-b + root) / a;\n            if ((ta < 0 || 1 < ta) && (tb < 0 || 1 < tb)) {\n                // if ((ta < 0 && tb < 0) || (ta > 1 && tb > 1)) outside else inside\n                return null;\n            } else {\n                if (0 <= ta && ta <= 1) intersections.push(a1.lerp(a2, ta));\n                if (0 <= tb && tb <= 1) intersections.push(a1.lerp(a2, tb));\n            }\n        } else {\n            var t = -b / a;\n            if (0 <= t && t <= 1) {\n                intersections.push(a1.lerp(a2, t));\n            } else {\n                // outside\n                return null;\n            }\n        }\n        return intersections;\n    },\n    // Find point on me where line from my center to\n    // point p intersects my boundary.\n    // @param {number} angle If angle is specified, intersection with rotated ellipse is computed.\n    intersectionWithLineFromCenterToPoint: function(p, angle) {\n        p = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p);\n        if (angle) p.rotate(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.x, this.y), angle);\n        var dx = p.x - this.x;\n        var dy = p.y - this.y;\n        var result;\n        if (dx === 0) {\n            result = this.bbox().pointNearestToPoint(p);\n            if (angle) return result.rotate(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.x, this.y), -angle);\n            return result;\n        }\n        var m = dy / dx;\n        var mSquared = m * m;\n        var aSquared = this.a * this.a;\n        var bSquared = this.b * this.b;\n        var x = sqrt(1 / (1 / aSquared + mSquared / bSquared));\n        x = dx < 0 ? -x : x;\n        var y = m * x;\n        result = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.x + x, this.y + y);\n        if (angle) return result.rotate(new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.x, this.y), -angle);\n        return result;\n    },\n    /**\n     * @param {g.Point} point\n     * @returns {number} result < 1 - inside ellipse, result == 1 - on ellipse boundary, result > 1 - outside\n     */ normalizedDistance: function(point) {\n        var x0 = point.x;\n        var y0 = point.y;\n        var a = this.a;\n        var b = this.b;\n        var x = this.x;\n        var y = this.y;\n        return (x0 - x) * (x0 - x) / (a * a) + (y0 - y) * (y0 - y) / (b * b);\n    },\n    round: function(precision) {\n        let f = 1; // case 0\n        if (precision) {\n            switch(precision){\n                case 1:\n                    f = 10;\n                    break;\n                case 2:\n                    f = 100;\n                    break;\n                case 3:\n                    f = 1000;\n                    break;\n                default:\n                    f = pow(10, precision);\n                    break;\n            }\n        }\n        this.x = round(this.x * f) / f;\n        this.y = round(this.y * f) / f;\n        this.a = round(this.a * f) / f;\n        this.b = round(this.b * f) / f;\n        return this;\n    },\n    /** Compute angle between tangent and x axis\n     * @param {g.Point} p Point of tangency, it has to be on ellipse boundaries.\n     * @returns {number} angle between tangent and x axis\n     */ tangentTheta: function(p) {\n        var refPointDelta = 30;\n        var x0 = p.x;\n        var y0 = p.y;\n        var a = this.a;\n        var b = this.b;\n        var center = this.bbox().center();\n        var m = center.x;\n        var n = center.y;\n        var q1 = x0 > center.x + a / 2;\n        var q3 = x0 < center.x - a / 2;\n        var y, x;\n        if (q1 || q3) {\n            y = x0 > center.x ? y0 - refPointDelta : y0 + refPointDelta;\n            x = a * a / (x0 - m) - a * a * (y0 - n) * (y - n) / (b * b * (x0 - m)) + m;\n        } else {\n            x = y0 > center.y ? x0 + refPointDelta : x0 - refPointDelta;\n            y = b * b / (y0 - n) - b * b * (x0 - m) * (x - m) / (a * a * (y0 - n)) + n;\n        }\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(x, y).theta(p);\n    },\n    toString: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.x, this.y).toString() + \" \" + this.a + \" \" + this.b;\n    }\n};\n// For backwards compatibility:\nconst ellipse = Ellipse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/ellipse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/extend.mjs":
/*!***********************************************!*\
  !*** ./node_modules/jointjs/src/g/extend.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extend: () => (/* binding */ extend)\n/* harmony export */ });\n// Local helper function.\n// Add properties from arguments on top of properties from `obj`.\n// This allows for rudimentary inheritance.\n// - The `obj` argument acts as parent.\n// - This function creates a new object that inherits all `obj` properties and adds/replaces those that are present in arguments.\n// - A high-level example: calling `extend(Vehicle, Car)` would be akin to declaring `class Car extends Vehicle`.\nfunction extend(obj) {\n    // In JavaScript, the combination of a constructor function (e.g. `g.Line = function(...) {...}`) and prototype (e.g. `g.Line.prototype = {...}) is akin to a C++ class.\n    // - When inheritance is not necessary, we can leave it at that. (This would be akin to calling extend with only `obj`.)\n    // - But, what if we wanted the `g.Line` quasiclass to inherit from another quasiclass (let's call it `g.GeometryObject`) in JavaScript?\n    // - First, realize that both of those quasiclasses would still have their own separate constructor function.\n    // - So what we are actually saying is that we want the `g.Line` prototype to inherit from `g.GeometryObject` prototype.\n    // - This method provides a way to do exactly that.\n    // - It copies parent prototype's properties, then adds extra ones from child prototype/overrides parent prototype properties with child prototype properties.\n    // - Therefore, to continue with the example above:\n    //   - `g.Line.prototype = extend(g.GeometryObject.prototype, linePrototype)`\n    //   - Where `linePrototype` is a properties object that looks just like `g.Line.prototype` does right now.\n    //   - Then, `g.Line` would allow the programmer to access to all methods currently in `g.Line.Prototype`, plus any non-overridden methods from `g.GeometryObject.prototype`.\n    //   - In that aspect, `g.GeometryObject` would then act like the parent of `g.Line`.\n    // - Multiple inheritance is also possible, if multiple arguments are provided.\n    // - What if we wanted to add another level of abstraction between `g.GeometryObject` and `g.Line` (let's call it `g.LinearObject`)?\n    //   - `g.Line.prototype = extend(g.GeometryObject.prototype, g.LinearObject.prototype, linePrototype)`\n    //   - The ancestors are applied in order of appearance.\n    //   - That means that `g.Line` would have inherited from `g.LinearObject` that would have inherited from `g.GeometryObject`.\n    //   - Any number of ancestors may be provided.\n    // - Note that neither `obj` nor any of the arguments need to actually be prototypes of any JavaScript quasiclass, that was just a simplified explanation.\n    // - We can create a new object composed from the properties of any number of other objects (since they do not have a constructor, we can think of those as interfaces).\n    //   - `extend({ a: 1, b: 2 }, { b: 10, c: 20 }, { c: 100, d: 200 })` gives `{ a: 1, b: 10, c: 100, d: 200 }`.\n    //   - Basically, with this function, we can emulate the `extends` keyword as well as the `implements` keyword.\n    // - Therefore, both of the following are valid:\n    //   - `Lineto.prototype = extend(Line.prototype, segmentPrototype, linetoPrototype)`\n    //   - `Moveto.prototype = extend(segmentPrototype, movetoPrototype)`\n    var i;\n    var n;\n    var args = [];\n    n = arguments.length;\n    for(i = 1; i < n; i++){\n        args.push(arguments[i]);\n    }\n    if (!obj) throw new Error(\"Missing a parent object.\");\n    var child = Object.create(obj);\n    n = args.length;\n    for(i = 0; i < n; i++){\n        var src = args[i];\n        var inheritedProperty;\n        var key;\n        for(key in src){\n            if (src.hasOwnProperty(key)) {\n                delete child[key]; // delete property inherited from parent\n                inheritedProperty = Object.getOwnPropertyDescriptor(src, key); // get new definition of property from src\n                Object.defineProperty(child, key, inheritedProperty); // re-add property with new definition (includes getter/setter methods)\n            }\n        }\n    }\n    return child;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9leHRlbmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx5QkFBeUI7QUFDekIsaUVBQWlFO0FBQ2pFLDJDQUEyQztBQUMzQyx1Q0FBdUM7QUFDdkMsaUlBQWlJO0FBQ2pJLGlIQUFpSDtBQUMxRyxTQUFTQSxPQUFPQyxHQUFHO0lBQ3RCLHdLQUF3SztJQUN4Syx3SEFBd0g7SUFDeEgsd0lBQXdJO0lBQ3hJLDZHQUE2RztJQUM3Ryx3SEFBd0g7SUFDeEgsbURBQW1EO0lBQ25ELDhKQUE4SjtJQUM5SixtREFBbUQ7SUFDbkQsNkVBQTZFO0lBQzdFLDJHQUEyRztJQUMzRyw2S0FBNks7SUFDN0sscUZBQXFGO0lBQ3JGLCtFQUErRTtJQUMvRSxvSUFBb0k7SUFDcEksdUdBQXVHO0lBQ3ZHLHdEQUF3RDtJQUN4RCw2SEFBNkg7SUFDN0gsK0NBQStDO0lBQy9DLDBKQUEwSjtJQUMxSix3S0FBd0s7SUFDeEssOEdBQThHO0lBQzlHLCtHQUErRztJQUMvRyxnREFBZ0Q7SUFDaEQscUZBQXFGO0lBQ3JGLHFFQUFxRTtJQUVyRSxJQUFJQztJQUNKLElBQUlDO0lBRUosSUFBSUMsT0FBTyxFQUFFO0lBQ2JELElBQUlFLFVBQVVDLE1BQU07SUFDcEIsSUFBS0osSUFBSSxHQUFHQSxJQUFJQyxHQUFHRCxJQUFLO1FBQ3BCRSxLQUFLRyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0gsRUFBRTtJQUMxQjtJQUVBLElBQUksQ0FBQ0QsS0FBSyxNQUFNLElBQUlPLE1BQU07SUFDMUIsSUFBSUMsUUFBUUMsT0FBT0MsTUFBTSxDQUFDVjtJQUUxQkUsSUFBSUMsS0FBS0UsTUFBTTtJQUNmLElBQUtKLElBQUksR0FBR0EsSUFBSUMsR0FBR0QsSUFBSztRQUVwQixJQUFJVSxNQUFNUixJQUFJLENBQUNGLEVBQUU7UUFFakIsSUFBSVc7UUFDSixJQUFJQztRQUNKLElBQUtBLE9BQU9GLElBQUs7WUFFYixJQUFJQSxJQUFJRyxjQUFjLENBQUNELE1BQU07Z0JBQ3pCLE9BQU9MLEtBQUssQ0FBQ0ssSUFBSSxFQUFFLHdDQUF3QztnQkFDM0RELG9CQUFvQkgsT0FBT00sd0JBQXdCLENBQUNKLEtBQUtFLE1BQU0sMENBQTBDO2dCQUN6R0osT0FBT08sY0FBYyxDQUFDUixPQUFPSyxLQUFLRCxvQkFBb0IsdUVBQXVFO1lBQ2pJO1FBQ0o7SUFDSjtJQUVBLE9BQU9KO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9nL2V4dGVuZC5tanM/NTZlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMb2NhbCBoZWxwZXIgZnVuY3Rpb24uXG4vLyBBZGQgcHJvcGVydGllcyBmcm9tIGFyZ3VtZW50cyBvbiB0b3Agb2YgcHJvcGVydGllcyBmcm9tIGBvYmpgLlxuLy8gVGhpcyBhbGxvd3MgZm9yIHJ1ZGltZW50YXJ5IGluaGVyaXRhbmNlLlxuLy8gLSBUaGUgYG9iamAgYXJndW1lbnQgYWN0cyBhcyBwYXJlbnQuXG4vLyAtIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBhbGwgYG9iamAgcHJvcGVydGllcyBhbmQgYWRkcy9yZXBsYWNlcyB0aG9zZSB0aGF0IGFyZSBwcmVzZW50IGluIGFyZ3VtZW50cy5cbi8vIC0gQSBoaWdoLWxldmVsIGV4YW1wbGU6IGNhbGxpbmcgYGV4dGVuZChWZWhpY2xlLCBDYXIpYCB3b3VsZCBiZSBha2luIHRvIGRlY2xhcmluZyBgY2xhc3MgQ2FyIGV4dGVuZHMgVmVoaWNsZWAuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaikge1xuICAgIC8vIEluIEphdmFTY3JpcHQsIHRoZSBjb21iaW5hdGlvbiBvZiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIChlLmcuIGBnLkxpbmUgPSBmdW5jdGlvbiguLi4pIHsuLi59YCkgYW5kIHByb3RvdHlwZSAoZS5nLiBgZy5MaW5lLnByb3RvdHlwZSA9IHsuLi59KSBpcyBha2luIHRvIGEgQysrIGNsYXNzLlxuICAgIC8vIC0gV2hlbiBpbmhlcml0YW5jZSBpcyBub3QgbmVjZXNzYXJ5LCB3ZSBjYW4gbGVhdmUgaXQgYXQgdGhhdC4gKFRoaXMgd291bGQgYmUgYWtpbiB0byBjYWxsaW5nIGV4dGVuZCB3aXRoIG9ubHkgYG9iamAuKVxuICAgIC8vIC0gQnV0LCB3aGF0IGlmIHdlIHdhbnRlZCB0aGUgYGcuTGluZWAgcXVhc2ljbGFzcyB0byBpbmhlcml0IGZyb20gYW5vdGhlciBxdWFzaWNsYXNzIChsZXQncyBjYWxsIGl0IGBnLkdlb21ldHJ5T2JqZWN0YCkgaW4gSmF2YVNjcmlwdD9cbiAgICAvLyAtIEZpcnN0LCByZWFsaXplIHRoYXQgYm90aCBvZiB0aG9zZSBxdWFzaWNsYXNzZXMgd291bGQgc3RpbGwgaGF2ZSB0aGVpciBvd24gc2VwYXJhdGUgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgLy8gLSBTbyB3aGF0IHdlIGFyZSBhY3R1YWxseSBzYXlpbmcgaXMgdGhhdCB3ZSB3YW50IHRoZSBgZy5MaW5lYCBwcm90b3R5cGUgdG8gaW5oZXJpdCBmcm9tIGBnLkdlb21ldHJ5T2JqZWN0YCBwcm90b3R5cGUuXG4gICAgLy8gLSBUaGlzIG1ldGhvZCBwcm92aWRlcyBhIHdheSB0byBkbyBleGFjdGx5IHRoYXQuXG4gICAgLy8gLSBJdCBjb3BpZXMgcGFyZW50IHByb3RvdHlwZSdzIHByb3BlcnRpZXMsIHRoZW4gYWRkcyBleHRyYSBvbmVzIGZyb20gY2hpbGQgcHJvdG90eXBlL292ZXJyaWRlcyBwYXJlbnQgcHJvdG90eXBlIHByb3BlcnRpZXMgd2l0aCBjaGlsZCBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAgICAvLyAtIFRoZXJlZm9yZSwgdG8gY29udGludWUgd2l0aCB0aGUgZXhhbXBsZSBhYm92ZTpcbiAgICAvLyAgIC0gYGcuTGluZS5wcm90b3R5cGUgPSBleHRlbmQoZy5HZW9tZXRyeU9iamVjdC5wcm90b3R5cGUsIGxpbmVQcm90b3R5cGUpYFxuICAgIC8vICAgLSBXaGVyZSBgbGluZVByb3RvdHlwZWAgaXMgYSBwcm9wZXJ0aWVzIG9iamVjdCB0aGF0IGxvb2tzIGp1c3QgbGlrZSBgZy5MaW5lLnByb3RvdHlwZWAgZG9lcyByaWdodCBub3cuXG4gICAgLy8gICAtIFRoZW4sIGBnLkxpbmVgIHdvdWxkIGFsbG93IHRoZSBwcm9ncmFtbWVyIHRvIGFjY2VzcyB0byBhbGwgbWV0aG9kcyBjdXJyZW50bHkgaW4gYGcuTGluZS5Qcm90b3R5cGVgLCBwbHVzIGFueSBub24tb3ZlcnJpZGRlbiBtZXRob2RzIGZyb20gYGcuR2VvbWV0cnlPYmplY3QucHJvdG90eXBlYC5cbiAgICAvLyAgIC0gSW4gdGhhdCBhc3BlY3QsIGBnLkdlb21ldHJ5T2JqZWN0YCB3b3VsZCB0aGVuIGFjdCBsaWtlIHRoZSBwYXJlbnQgb2YgYGcuTGluZWAuXG4gICAgLy8gLSBNdWx0aXBsZSBpbmhlcml0YW5jZSBpcyBhbHNvIHBvc3NpYmxlLCBpZiBtdWx0aXBsZSBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLlxuICAgIC8vIC0gV2hhdCBpZiB3ZSB3YW50ZWQgdG8gYWRkIGFub3RoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24gYmV0d2VlbiBgZy5HZW9tZXRyeU9iamVjdGAgYW5kIGBnLkxpbmVgIChsZXQncyBjYWxsIGl0IGBnLkxpbmVhck9iamVjdGApP1xuICAgIC8vICAgLSBgZy5MaW5lLnByb3RvdHlwZSA9IGV4dGVuZChnLkdlb21ldHJ5T2JqZWN0LnByb3RvdHlwZSwgZy5MaW5lYXJPYmplY3QucHJvdG90eXBlLCBsaW5lUHJvdG90eXBlKWBcbiAgICAvLyAgIC0gVGhlIGFuY2VzdG9ycyBhcmUgYXBwbGllZCBpbiBvcmRlciBvZiBhcHBlYXJhbmNlLlxuICAgIC8vICAgLSBUaGF0IG1lYW5zIHRoYXQgYGcuTGluZWAgd291bGQgaGF2ZSBpbmhlcml0ZWQgZnJvbSBgZy5MaW5lYXJPYmplY3RgIHRoYXQgd291bGQgaGF2ZSBpbmhlcml0ZWQgZnJvbSBgZy5HZW9tZXRyeU9iamVjdGAuXG4gICAgLy8gICAtIEFueSBudW1iZXIgb2YgYW5jZXN0b3JzIG1heSBiZSBwcm92aWRlZC5cbiAgICAvLyAtIE5vdGUgdGhhdCBuZWl0aGVyIGBvYmpgIG5vciBhbnkgb2YgdGhlIGFyZ3VtZW50cyBuZWVkIHRvIGFjdHVhbGx5IGJlIHByb3RvdHlwZXMgb2YgYW55IEphdmFTY3JpcHQgcXVhc2ljbGFzcywgdGhhdCB3YXMganVzdCBhIHNpbXBsaWZpZWQgZXhwbGFuYXRpb24uXG4gICAgLy8gLSBXZSBjYW4gY3JlYXRlIGEgbmV3IG9iamVjdCBjb21wb3NlZCBmcm9tIHRoZSBwcm9wZXJ0aWVzIG9mIGFueSBudW1iZXIgb2Ygb3RoZXIgb2JqZWN0cyAoc2luY2UgdGhleSBkbyBub3QgaGF2ZSBhIGNvbnN0cnVjdG9yLCB3ZSBjYW4gdGhpbmsgb2YgdGhvc2UgYXMgaW50ZXJmYWNlcykuXG4gICAgLy8gICAtIGBleHRlbmQoeyBhOiAxLCBiOiAyIH0sIHsgYjogMTAsIGM6IDIwIH0sIHsgYzogMTAwLCBkOiAyMDAgfSlgIGdpdmVzIGB7IGE6IDEsIGI6IDEwLCBjOiAxMDAsIGQ6IDIwMCB9YC5cbiAgICAvLyAgIC0gQmFzaWNhbGx5LCB3aXRoIHRoaXMgZnVuY3Rpb24sIHdlIGNhbiBlbXVsYXRlIHRoZSBgZXh0ZW5kc2Aga2V5d29yZCBhcyB3ZWxsIGFzIHRoZSBgaW1wbGVtZW50c2Aga2V5d29yZC5cbiAgICAvLyAtIFRoZXJlZm9yZSwgYm90aCBvZiB0aGUgZm9sbG93aW5nIGFyZSB2YWxpZDpcbiAgICAvLyAgIC0gYExpbmV0by5wcm90b3R5cGUgPSBleHRlbmQoTGluZS5wcm90b3R5cGUsIHNlZ21lbnRQcm90b3R5cGUsIGxpbmV0b1Byb3RvdHlwZSlgXG4gICAgLy8gICAtIGBNb3ZldG8ucHJvdG90eXBlID0gZXh0ZW5kKHNlZ21lbnRQcm90b3R5cGUsIG1vdmV0b1Byb3RvdHlwZSlgXG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbjtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yIChpID0gMTsgaSA8IG47IGkrKykgeyAvLyBza2lwIG92ZXIgb2JqXG4gICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGlmICghb2JqKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgYSBwYXJlbnQgb2JqZWN0LicpO1xuICAgIHZhciBjaGlsZCA9IE9iamVjdC5jcmVhdGUob2JqKTtcblxuICAgIG4gPSBhcmdzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG5cbiAgICAgICAgdmFyIHNyYyA9IGFyZ3NbaV07XG5cbiAgICAgICAgdmFyIGluaGVyaXRlZFByb3BlcnR5O1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGtleSBpbiBzcmMpIHtcblxuICAgICAgICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNoaWxkW2tleV07IC8vIGRlbGV0ZSBwcm9wZXJ0eSBpbmhlcml0ZWQgZnJvbSBwYXJlbnRcbiAgICAgICAgICAgICAgICBpbmhlcml0ZWRQcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3JjLCBrZXkpOyAvLyBnZXQgbmV3IGRlZmluaXRpb24gb2YgcHJvcGVydHkgZnJvbSBzcmNcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIGtleSwgaW5oZXJpdGVkUHJvcGVydHkpOyAvLyByZS1hZGQgcHJvcGVydHkgd2l0aCBuZXcgZGVmaW5pdGlvbiAoaW5jbHVkZXMgZ2V0dGVyL3NldHRlciBtZXRob2RzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xufVxuIl0sIm5hbWVzIjpbImV4dGVuZCIsIm9iaiIsImkiLCJuIiwiYXJncyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInB1c2giLCJFcnJvciIsImNoaWxkIiwiT2JqZWN0IiwiY3JlYXRlIiwic3JjIiwiaW5oZXJpdGVkUHJvcGVydHkiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/extend.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/jointjs/src/g/geometry.helpers.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeAngle: () => (/* binding */ normalizeAngle),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   snapToGrid: () => (/* binding */ snapToGrid),\n/* harmony export */   toDeg: () => (/* binding */ toDeg),\n/* harmony export */   toRad: () => (/* binding */ toRad)\n/* harmony export */ });\n// Declare shorthands to the most used math functions.\nconst { round, floor, PI } = Math;\nconst scale = {\n    // Return the `value` from the `domain` interval scaled to the `range` interval.\n    linear: function(domain, range, value) {\n        var domainSpan = domain[1] - domain[0];\n        var rangeSpan = range[1] - range[0];\n        return (value - domain[0]) / domainSpan * rangeSpan + range[0] || 0;\n    }\n};\nconst normalizeAngle = function(angle) {\n    return angle % 360 + (angle < 0 ? 360 : 0);\n};\nconst snapToGrid = function(value, gridSize) {\n    return gridSize * round(value / gridSize);\n};\nconst toDeg = function(rad) {\n    return 180 * rad / PI % 360;\n};\nconst toRad = function(deg, over360) {\n    over360 = over360 || false;\n    deg = over360 ? deg : deg % 360;\n    return deg * PI / 180;\n};\n// Return a random integer from the interval [min,max], inclusive.\nconst random = function(min, max) {\n    if (max === undefined) {\n        // use first argument as max, min is 0\n        max = min === undefined ? 1 : min;\n        min = 0;\n    } else if (max < min) {\n        // switch max and min\n        const temp = min;\n        min = max;\n        max = temp;\n    }\n    return floor(Math.random() * (max - min + 1) + min);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9nZW9tZXRyeS5oZWxwZXJzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxzREFBc0Q7QUFDdEQsTUFBTSxFQUNGQSxLQUFLLEVBQ0xDLEtBQUssRUFDTEMsRUFBRSxFQUNMLEdBQUdDO0FBRUcsTUFBTUMsUUFBUTtJQUVqQixnRkFBZ0Y7SUFDaEZDLFFBQVEsU0FBU0MsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUs7UUFFakMsSUFBSUMsYUFBYUgsTUFBTSxDQUFDLEVBQUUsR0FBR0EsTUFBTSxDQUFDLEVBQUU7UUFDdEMsSUFBSUksWUFBWUgsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUU7UUFDbkMsT0FBTyxDQUFHQyxRQUFRRixNQUFNLENBQUMsRUFBRSxJQUFJRyxhQUFjQyxZQUFZSCxLQUFLLENBQUMsRUFBRSxJQUFLO0lBQzFFO0FBQ0osRUFBRTtBQUVLLE1BQU1JLGlCQUFpQixTQUFTQyxLQUFLO0lBRXhDLE9BQU8sUUFBUyxNQUFRQSxDQUFBQSxRQUFRLElBQUksTUFBTTtBQUM5QyxFQUFFO0FBRUssTUFBTUMsYUFBYSxTQUFTTCxLQUFLLEVBQUVNLFFBQVE7SUFFOUMsT0FBT0EsV0FBV2QsTUFBTVEsUUFBUU07QUFDcEMsRUFBRTtBQUVLLE1BQU1DLFFBQVEsU0FBU0MsR0FBRztJQUU3QixPQUFPLE1BQU9BLE1BQU1kLEtBQU07QUFDOUIsRUFBRTtBQUVLLE1BQU1lLFFBQVEsU0FBU0MsR0FBRyxFQUFFQyxPQUFPO0lBRXRDQSxVQUFVQSxXQUFXO0lBQ3JCRCxNQUFNQyxVQUFVRCxNQUFPQSxNQUFNO0lBQzdCLE9BQU9BLE1BQU1oQixLQUFLO0FBQ3RCLEVBQUU7QUFFRixrRUFBa0U7QUFDM0QsTUFBTWtCLFNBQVMsU0FBU0MsR0FBRyxFQUFFQyxHQUFHO0lBRW5DLElBQUlBLFFBQVFDLFdBQVc7UUFDbkIsc0NBQXNDO1FBQ3RDRCxNQUFNLFFBQVNDLFlBQWEsSUFBSUY7UUFDaENBLE1BQU07SUFFVixPQUFPLElBQUlDLE1BQU1ELEtBQUs7UUFDbEIscUJBQXFCO1FBQ3JCLE1BQU1HLE9BQU9IO1FBQ2JBLE1BQU1DO1FBQ05BLE1BQU1FO0lBQ1Y7SUFFQSxPQUFPdkIsTUFBTSxLQUFNbUIsTUFBTSxLQUFNRSxDQUFBQSxNQUFNRCxNQUFNLEtBQU1BO0FBQ3JELEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9nL2dlb21ldHJ5LmhlbHBlcnMubWpzPzdhMGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRGVjbGFyZSBzaG9ydGhhbmRzIHRvIHRoZSBtb3N0IHVzZWQgbWF0aCBmdW5jdGlvbnMuXG5jb25zdCB7XG4gICAgcm91bmQsXG4gICAgZmxvb3IsXG4gICAgUElcbn0gPSBNYXRoO1xuXG5leHBvcnQgY29uc3Qgc2NhbGUgPSB7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGB2YWx1ZWAgZnJvbSB0aGUgYGRvbWFpbmAgaW50ZXJ2YWwgc2NhbGVkIHRvIHRoZSBgcmFuZ2VgIGludGVydmFsLlxuICAgIGxpbmVhcjogZnVuY3Rpb24oZG9tYWluLCByYW5nZSwgdmFsdWUpIHtcblxuICAgICAgICB2YXIgZG9tYWluU3BhbiA9IGRvbWFpblsxXSAtIGRvbWFpblswXTtcbiAgICAgICAgdmFyIHJhbmdlU3BhbiA9IHJhbmdlWzFdIC0gcmFuZ2VbMF07XG4gICAgICAgIHJldHVybiAoKCh2YWx1ZSAtIGRvbWFpblswXSkgLyBkb21haW5TcGFuKSAqIHJhbmdlU3BhbiArIHJhbmdlWzBdKSB8fCAwO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVBbmdsZSA9IGZ1bmN0aW9uKGFuZ2xlKSB7XG5cbiAgICByZXR1cm4gKGFuZ2xlICUgMzYwKSArIChhbmdsZSA8IDAgPyAzNjAgOiAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzbmFwVG9HcmlkID0gZnVuY3Rpb24odmFsdWUsIGdyaWRTaXplKSB7XG5cbiAgICByZXR1cm4gZ3JpZFNpemUgKiByb3VuZCh2YWx1ZSAvIGdyaWRTaXplKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0b0RlZyA9IGZ1bmN0aW9uKHJhZCkge1xuXG4gICAgcmV0dXJuICgxODAgKiByYWQgLyBQSSkgJSAzNjA7XG59O1xuXG5leHBvcnQgY29uc3QgdG9SYWQgPSBmdW5jdGlvbihkZWcsIG92ZXIzNjApIHtcblxuICAgIG92ZXIzNjAgPSBvdmVyMzYwIHx8IGZhbHNlO1xuICAgIGRlZyA9IG92ZXIzNjAgPyBkZWcgOiAoZGVnICUgMzYwKTtcbiAgICByZXR1cm4gZGVnICogUEkgLyAxODA7XG59O1xuXG4vLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBmcm9tIHRoZSBpbnRlcnZhbCBbbWluLG1heF0sIGluY2x1c2l2ZS5cbmV4cG9ydCBjb25zdCByYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuXG4gICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHVzZSBmaXJzdCBhcmd1bWVudCBhcyBtYXgsIG1pbiBpcyAwXG4gICAgICAgIG1heCA9IChtaW4gPT09IHVuZGVmaW5lZCkgPyAxIDogbWluO1xuICAgICAgICBtaW4gPSAwO1xuXG4gICAgfSBlbHNlIGlmIChtYXggPCBtaW4pIHtcbiAgICAgICAgLy8gc3dpdGNoIG1heCBhbmQgbWluXG4gICAgICAgIGNvbnN0IHRlbXAgPSBtaW47XG4gICAgICAgIG1pbiA9IG1heDtcbiAgICAgICAgbWF4ID0gdGVtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluKTtcbn07XG5cbiJdLCJuYW1lcyI6WyJyb3VuZCIsImZsb29yIiwiUEkiLCJNYXRoIiwic2NhbGUiLCJsaW5lYXIiLCJkb21haW4iLCJyYW5nZSIsInZhbHVlIiwiZG9tYWluU3BhbiIsInJhbmdlU3BhbiIsIm5vcm1hbGl6ZUFuZ2xlIiwiYW5nbGUiLCJzbmFwVG9HcmlkIiwiZ3JpZFNpemUiLCJ0b0RlZyIsInJhZCIsInRvUmFkIiwiZGVnIiwib3ZlcjM2MCIsInJhbmRvbSIsIm1pbiIsIm1heCIsInVuZGVmaW5lZCIsInRlbXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/jointjs/src/g/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Curve: () => (/* reexport safe */ _curve_mjs__WEBPACK_IMPORTED_MODULE_2__.Curve),\n/* harmony export */   Ellipse: () => (/* reexport safe */ _ellipse_mjs__WEBPACK_IMPORTED_MODULE_3__.Ellipse),\n/* harmony export */   Line: () => (/* reexport safe */ _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line),\n/* harmony export */   Path: () => (/* reexport safe */ _path_mjs__WEBPACK_IMPORTED_MODULE_5__.Path),\n/* harmony export */   Point: () => (/* reexport safe */ _point_mjs__WEBPACK_IMPORTED_MODULE_6__.Point),\n/* harmony export */   Polygon: () => (/* reexport safe */ _polygon_mjs__WEBPACK_IMPORTED_MODULE_8__.Polygon),\n/* harmony export */   Polyline: () => (/* reexport safe */ _polyline_mjs__WEBPACK_IMPORTED_MODULE_7__.Polyline),\n/* harmony export */   Rect: () => (/* reexport safe */ _rect_mjs__WEBPACK_IMPORTED_MODULE_9__.Rect),\n/* harmony export */   bezier: () => (/* reexport safe */ _bezier_mjs__WEBPACK_IMPORTED_MODULE_1__.bezier),\n/* harmony export */   ellipse: () => (/* reexport safe */ _ellipse_mjs__WEBPACK_IMPORTED_MODULE_3__.ellipse),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   line: () => (/* reexport safe */ _line_mjs__WEBPACK_IMPORTED_MODULE_4__.line),\n/* harmony export */   normalizeAngle: () => (/* reexport safe */ _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.normalizeAngle),\n/* harmony export */   point: () => (/* reexport safe */ _point_mjs__WEBPACK_IMPORTED_MODULE_6__.point),\n/* harmony export */   random: () => (/* reexport safe */ _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.random),\n/* harmony export */   rect: () => (/* reexport safe */ _rect_mjs__WEBPACK_IMPORTED_MODULE_9__.rect),\n/* harmony export */   scale: () => (/* reexport safe */ _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.scale),\n/* harmony export */   snapToGrid: () => (/* reexport safe */ _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.snapToGrid),\n/* harmony export */   toDeg: () => (/* reexport safe */ _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toDeg),\n/* harmony export */   toRad: () => (/* reexport safe */ _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad),\n/* harmony export */   types: () => (/* reexport safe */ _types_mjs__WEBPACK_IMPORTED_MODULE_10__.types)\n/* harmony export */ });\n/* harmony import */ var _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometry.helpers.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _bezier_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bezier.mjs */ \"(ssr)/./node_modules/jointjs/src/g/bezier.mjs\");\n/* harmony import */ var _curve_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./curve.mjs */ \"(ssr)/./node_modules/jointjs/src/g/curve.mjs\");\n/* harmony import */ var _ellipse_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ellipse.mjs */ \"(ssr)/./node_modules/jointjs/src/g/ellipse.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./line.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./path.mjs */ \"(ssr)/./node_modules/jointjs/src/g/path.mjs\");\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _polyline_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./polyline.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _polygon_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./polygon.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polygon.mjs\");\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n/* harmony import */ var _intersection_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./intersection.mjs */ \"(ssr)/./node_modules/jointjs/src/g/intersection.mjs\");\n// Geometry library.\n// -----------------\n\n\n\n\n\n\n\n\n\n\n\n\nconst intersection = _intersection_mjs__WEBPACK_IMPORTED_MODULE_11__;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUVtQjtBQUNWO0FBQ0Q7QUFDRTtBQUNIO0FBQ0E7QUFDQztBQUNHO0FBQ0Q7QUFDSDtBQUNDO0FBRXdCO0FBQzdDLE1BQU1DLGVBQWVELCtDQUFhQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9pbmRleC5tanM/OGVmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW9tZXRyeSBsaWJyYXJ5LlxuLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0ICogZnJvbSAnLi9nZW9tZXRyeS5oZWxwZXJzLm1qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Jlemllci5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jdXJ2ZS5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbGxpcHNlLm1qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpbmUubWpzJztcbmV4cG9ydCAqIGZyb20gJy4vcGF0aC5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wb2ludC5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wb2x5bGluZS5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wb2x5Z29uLm1qcyc7XG5leHBvcnQgKiBmcm9tICcuL3JlY3QubWpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMubWpzJztcblxuaW1wb3J0ICogYXMgX2ludGVyc2VjdGlvbiBmcm9tICcuL2ludGVyc2VjdGlvbi5tanMnO1xuZXhwb3J0IGNvbnN0IGludGVyc2VjdGlvbiA9IF9pbnRlcnNlY3Rpb247XG4iXSwibmFtZXMiOlsiX2ludGVyc2VjdGlvbiIsImludGVyc2VjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/intersection.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/jointjs/src/g/intersection.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ellipseWithEllipse: () => (/* binding */ ellipseWithEllipse),\n/* harmony export */   ellipseWithLine: () => (/* binding */ ellipseWithLine),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   lineWithLine: () => (/* binding */ lineWithLine),\n/* harmony export */   pathWithEllipse: () => (/* binding */ pathWithEllipse),\n/* harmony export */   pathWithLine: () => (/* binding */ pathWithLine),\n/* harmony export */   pathWithPath: () => (/* binding */ pathWithPath),\n/* harmony export */   pathWithPolygon: () => (/* binding */ pathWithPolygon),\n/* harmony export */   pathWithPolyline: () => (/* binding */ pathWithPolyline),\n/* harmony export */   pathWithRect: () => (/* binding */ pathWithRect),\n/* harmony export */   polygonWithEllipse: () => (/* binding */ polygonWithEllipse),\n/* harmony export */   polygonWithLine: () => (/* binding */ polygonWithLine),\n/* harmony export */   polygonWithPolygon: () => (/* binding */ polygonWithPolygon),\n/* harmony export */   polygonWithPolyline: () => (/* binding */ polygonWithPolyline),\n/* harmony export */   polygonWithRect: () => (/* binding */ polygonWithRect),\n/* harmony export */   polylineWithEllipse: () => (/* binding */ polylineWithEllipse),\n/* harmony export */   polylineWithLine: () => (/* binding */ polylineWithLine),\n/* harmony export */   polylineWithPolyline: () => (/* binding */ polylineWithPolyline),\n/* harmony export */   polylineWithRect: () => (/* binding */ polylineWithRect),\n/* harmony export */   rectWithEllipse: () => (/* binding */ rectWithEllipse),\n/* harmony export */   rectWithLine: () => (/* binding */ rectWithLine),\n/* harmony export */   rectWithRect: () => (/* binding */ rectWithRect)\n/* harmony export */ });\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./line.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _polygon_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polygon.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polygon.mjs\");\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n\n\n\n\nfunction exists(shape1, shape2, shape1opt, shape2opt) {\n    switch(shape1.type){\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n            {\n                switch(shape2.type){\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n                        {\n                            return lineWithLine(shape1, shape2);\n                        }\n                }\n                break;\n            }\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n            {\n                switch(shape2.type){\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n                        {\n                            return ellipseWithLine(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n                        {\n                            return ellipseWithEllipse(shape1, shape2);\n                        }\n                }\n                break;\n            }\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Rect:\n            {\n                switch(shape2.type){\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n                        {\n                            return rectWithLine(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n                        {\n                            return rectWithEllipse(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Rect:\n                        {\n                            return rectWithRect(shape1, shape2);\n                        }\n                }\n                break;\n            }\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polyline:\n            {\n                switch(shape2.type){\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n                        {\n                            return polylineWithLine(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n                        {\n                            return polylineWithEllipse(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Rect:\n                        {\n                            return polylineWithRect(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polyline:\n                        {\n                            return polylineWithPolyline(shape1, shape2);\n                        }\n                }\n                break;\n            }\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polygon:\n            {\n                switch(shape2.type){\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n                        {\n                            return polygonWithLine(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n                        {\n                            return polygonWithEllipse(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Rect:\n                        {\n                            return polygonWithRect(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polyline:\n                        {\n                            return polygonWithPolyline(shape1, shape2);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polygon:\n                        {\n                            return polygonWithPolygon(shape1, shape2);\n                        }\n                }\n                break;\n            }\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Path:\n            {\n                switch(shape2.type){\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Line:\n                        {\n                            return pathWithLine(shape1, shape2, shape1opt);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n                        {\n                            return pathWithEllipse(shape1, shape2, shape1opt);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Rect:\n                        {\n                            return pathWithRect(shape1, shape2, shape1opt);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polyline:\n                        {\n                            return pathWithPolyline(shape1, shape2, shape1opt);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polygon:\n                        {\n                            return pathWithPolygon(shape1, shape2, shape1opt);\n                        }\n                    case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Path:\n                        {\n                            return pathWithPath(shape1, shape2, shape1opt, shape2opt);\n                        }\n                }\n                break;\n            }\n    }\n    // None of the cases above\n    switch(shape2.type){\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Ellipse:\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Rect:\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polyline:\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Polygon:\n        case _types_mjs__WEBPACK_IMPORTED_MODULE_0__.types.Path:\n            {\n                return exists(shape2, shape1, shape2opt, shape1opt);\n            }\n        default:\n            {\n                throw Error(`The intersection for ${shape1} and ${shape2} could not be found.`);\n            }\n    }\n}\n/* Line */ function lineWithLine(line1, line2) {\n    const x1 = line1.start.x;\n    const y1 = line1.start.y;\n    const x2 = line1.end.x;\n    const y2 = line1.end.y;\n    const x3 = line2.start.x;\n    const y3 = line2.start.y;\n    const x4 = line2.end.x;\n    const y4 = line2.end.y;\n    const s1x = x2 - x1;\n    const s1y = y2 - y1;\n    const s2x = x4 - x3;\n    const s2y = y4 - y3;\n    const s3x = x1 - x3;\n    const s3y = y1 - y3;\n    const p = s1x * s2y - s2x * s1y;\n    const s = (s1x * s3y - s1y * s3x) / p;\n    const t = (s2x * s3y - s2y * s3x) / p;\n    return s >= 0 && s <= 1 && t >= 0 && t <= 1;\n}\n/* Ellipse */ function ellipseWithLine(ellipse, line) {\n    const rex = ellipse.a;\n    const rey = ellipse.b;\n    const xe = ellipse.x;\n    const ye = ellipse.y;\n    const x1 = line.start.x - xe;\n    const x2 = line.end.x - xe;\n    const y1 = line.start.y - ye;\n    const y2 = line.end.y - ye;\n    const rex_2 = rex * rex;\n    const rey_2 = rey * rey;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const A = dx * dx / rex_2 + dy * dy / rey_2;\n    const B = 2 * x1 * dx / rex_2 + 2 * y1 * dy / rey_2;\n    const C = x1 * x1 / rex_2 + y1 * y1 / rey_2 - 1;\n    const D = B * B - 4 * A * C;\n    if (D === 0) {\n        const t = -B / 2 / A;\n        return t >= 0 && t <= 1;\n    } else if (D > 0) {\n        const sqrt = Math.sqrt(D);\n        const t1 = (-B + sqrt) / 2 / A;\n        const t2 = (-B - sqrt) / 2 / A;\n        return t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1;\n    }\n    return false;\n}\nfunction ellipseWithEllipse(ellipse1, ellipse2) {\n    return _ellipsesIntersection(ellipse1, 0, ellipse2, 0);\n}\n/* Rect */ function rectWithLine(rect, line) {\n    const { start, end } = line;\n    const { x, y, width, height } = rect;\n    if (start.x > x + width && end.x > x + width || start.x < x && end.x < x || start.y > y + height && end.y > y + height || start.y < y && end.y < y) {\n        return false;\n    }\n    if (rect.containsPoint(line.start) || rect.containsPoint(line.end)) {\n        return true;\n    }\n    return lineWithLine(rect.topLine(), line) || lineWithLine(rect.rightLine(), line) || lineWithLine(rect.bottomLine(), line) || lineWithLine(rect.leftLine(), line);\n}\nfunction rectWithEllipse(rect, ellipse) {\n    if (!rectWithRect(rect, _rect_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect.fromEllipse(ellipse))) return false;\n    return polygonWithEllipse(_polygon_mjs__WEBPACK_IMPORTED_MODULE_2__.Polygon.fromRect(rect), ellipse);\n}\nfunction rectWithRect(rect1, rect2) {\n    return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;\n}\n/* Polyline */ function polylineWithLine(polyline, line) {\n    return _polylineWithLine(polyline, line, {\n        interior: false\n    });\n}\nfunction polylineWithEllipse(polyline, ellipse) {\n    return _polylineWithEllipse(polyline, ellipse, {\n        interior: false\n    });\n}\nfunction polylineWithRect(polyline, rect) {\n    return _polylineWithRect(polyline, rect, {\n        interior: false\n    });\n}\nfunction polylineWithPolyline(polyline1, polyline2) {\n    return _polylineWithPolyline(polyline1, polyline2, {\n        interior: false\n    });\n}\n/* Polygon */ function polygonWithLine(polygon, line) {\n    return _polylineWithLine(polygon, line, {\n        interior: true\n    });\n}\nfunction polygonWithEllipse(polygon, ellipse) {\n    return _polylineWithEllipse(polygon, ellipse, {\n        interior: true\n    });\n}\nfunction polygonWithRect(polygon, rect) {\n    return _polylineWithRect(polygon, rect, {\n        interior: true\n    });\n}\nfunction polygonWithPolyline(polygon, polyline) {\n    return _polylineWithPolyline(polygon, polyline, {\n        interior: true\n    });\n}\nfunction polygonWithPolygon(polygon1, polygon2) {\n    return _polylineWithPolygon(polygon1, polygon2, {\n        interior: true\n    });\n}\n/* Path */ function pathWithLine(path, line, pathOpt) {\n    return path.getSubpaths().some((subpath)=>{\n        const [polyline] = subpath.toPolylines(pathOpt);\n        const { type } = subpath.getSegment(-1);\n        if (type === \"Z\") {\n            return polygonWithLine(polyline, line);\n        } else {\n            return polylineWithLine(polyline, line);\n        }\n    });\n}\nfunction pathWithEllipse(path, ellipse, pathOpt) {\n    return path.getSubpaths().some((subpath)=>{\n        const [polyline] = subpath.toPolylines(pathOpt);\n        const { type } = subpath.getSegment(-1);\n        if (type === \"Z\") {\n            return polygonWithEllipse(polyline, ellipse);\n        } else {\n            return polylineWithEllipse(polyline, ellipse);\n        }\n    });\n}\nfunction pathWithRect(path, rect, pathOpt) {\n    return pathWithPolygon(path, _polygon_mjs__WEBPACK_IMPORTED_MODULE_2__.Polygon.fromRect(rect), pathOpt);\n}\nfunction pathWithPolyline(path, polyline, pathOpt) {\n    return _pathWithPolyline(path, polyline, pathOpt, {\n        interior: false\n    });\n}\nfunction pathWithPolygon(path, polygon, pathOpt) {\n    return _pathWithPolyline(path, polygon, pathOpt, {\n        interior: true\n    });\n}\nfunction pathWithPath(path1, path2, pathOpt1, pathOpt2) {\n    return path1.getSubpaths().some((subpath)=>{\n        const [polyline1] = subpath.toPolylines(pathOpt1);\n        const { type } = subpath.getSegment(-1);\n        if (type === \"Z\") {\n            return pathWithPolygon(path2, polyline1, pathOpt2);\n        } else {\n            return pathWithPolyline(path2, polyline1, pathOpt2);\n        }\n    });\n}\nfunction _polylineWithLine(polyline, line, opt = {}) {\n    const { interior = false } = opt;\n    let thisPoints;\n    if (interior) {\n        if (polyline.containsPoint(line.start)) {\n            // If any point of the polyline lies inside this polygon (interior = true)\n            // there is an intersection (we've chosen the start point)\n            return true;\n        }\n        const { start, end, points } = polyline;\n        thisPoints = end.equals(start) ? points : [\n            ...points,\n            start\n        ];\n    } else {\n        thisPoints = polyline.points;\n    }\n    const { length } = thisPoints;\n    const segment = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line();\n    for(let i = 0; i < length - 1; i++){\n        segment.start = thisPoints[i];\n        segment.end = thisPoints[i + 1];\n        if (lineWithLine(line, segment)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction _polylineWithEllipse(polyline, ellipse, opt = {}) {\n    const { start, end, points } = polyline;\n    if (ellipse.containsPoint(start)) {\n        return true;\n    }\n    let thisPoints;\n    const { interior = false } = opt;\n    if (interior) {\n        if (polyline.containsPoint(ellipse.center())) {\n            // If any point of the ellipse lies inside this polygon (interior = true)\n            // there is an intersection (we've chosen the center point)\n            return true;\n        }\n        thisPoints = end.equals(start) ? points : [\n            ...points,\n            start\n        ];\n    } else {\n        thisPoints = points;\n    }\n    const { length } = thisPoints;\n    const segment = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line();\n    for(let i = 0; i < length - 1; i++){\n        segment.start = thisPoints[i];\n        segment.end = thisPoints[i + 1];\n        if (ellipseWithLine(ellipse, segment)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction _polylineWithRect(polyline, rect, opt) {\n    const polygon = _polygon_mjs__WEBPACK_IMPORTED_MODULE_2__.Polygon.fromRect(rect);\n    return _polylineWithPolygon(polyline, polygon, opt);\n}\nfunction _pathWithPolyline(path, polyline1, pathOpt, opt) {\n    return path.getSubpaths().some((subpath)=>{\n        const [polyline2] = subpath.toPolylines(pathOpt);\n        const { type } = subpath.getSegment(-1);\n        if (type === \"Z\") {\n            return _polylineWithPolygon(polyline1, polyline2, opt);\n        } else {\n            return _polylineWithPolyline(polyline1, polyline2, opt);\n        }\n    });\n}\nfunction _polylineWithPolyline(polyline1, polyline2, opt = {}) {\n    const { interior = false } = opt;\n    let thisPolyline;\n    if (interior) {\n        const { start } = polyline2;\n        if (polyline1.containsPoint(start)) {\n            // If any point of the polyline lies inside this polygon (interior = true)\n            // there is an intersection (we've chosen the start point)\n            return true;\n        }\n        thisPolyline = polyline1.clone().close();\n    } else {\n        thisPolyline = polyline1;\n    }\n    const otherPoints = polyline2.points;\n    const { length } = otherPoints;\n    const segment = new _line_mjs__WEBPACK_IMPORTED_MODULE_3__.Line();\n    for(let i = 0; i < length - 1; i++){\n        segment.start = otherPoints[i];\n        segment.end = otherPoints[i + 1];\n        if (polylineWithLine(thisPolyline, segment)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction _polylineWithPolygon(polyline, polygon, opt) {\n    return polygon.containsPoint(polyline.start) || _polylineWithPolyline(polyline, polygon.clone().close(), opt);\n}\nfunction _ellipsesIntersection(e1, w1, e2, w2) {\n    const { cos, sin } = Math;\n    const sinW1 = sin(w1);\n    const cosW1 = cos(w1);\n    const sinW2 = sin(w2);\n    const cosW2 = cos(w2);\n    const sinW1s = sinW1 * sinW1;\n    const cosW1s = cosW1 * cosW1;\n    const sinCos1 = sinW1 * cosW1;\n    const sinW2s = sinW2 * sinW2;\n    const cosW2s = cosW2 * cosW2;\n    const sinCos2 = sinW2 * cosW2;\n    const a1s = e1.a * e1.a;\n    const b1s = e1.b * e1.b;\n    const a2s = e2.a * e2.a;\n    const b2s = e2.b * e2.b;\n    const A1 = a1s * sinW1s + b1s * cosW1s;\n    const A2 = a2s * sinW2s + b2s * cosW2s;\n    const B1 = a1s * cosW1s + b1s * sinW1s;\n    const B2 = a2s * cosW2s + b2s * sinW2s;\n    let C1 = 2 * (b1s - a1s) * sinCos1;\n    let C2 = 2 * (b2s - a2s) * sinCos2;\n    let D1 = -2 * A1 * e1.x - C1 * e1.y;\n    let D2 = -2 * A2 * e2.x - C2 * e2.y;\n    let E1 = -C1 * e1.x - 2 * B1 * e1.y;\n    let E2 = -C2 * e2.x - 2 * B2 * e2.y;\n    const F1 = A1 * e1.x * e1.x + B1 * e1.y * e1.y + C1 * e1.x * e1.y - a1s * b1s;\n    const F2 = A2 * e2.x * e2.x + B2 * e2.y * e2.y + C2 * e2.x * e2.y - a2s * b2s;\n    C1 = C1 / 2;\n    C2 = C2 / 2;\n    D1 = D1 / 2;\n    D2 = D2 / 2;\n    E1 = E1 / 2;\n    E2 = E2 / 2;\n    const l3 = det3([\n        [\n            A1,\n            C1,\n            D1\n        ],\n        [\n            C1,\n            B1,\n            E1\n        ],\n        [\n            D1,\n            E1,\n            F1\n        ]\n    ]);\n    const l0 = det3([\n        [\n            A2,\n            C2,\n            D2\n        ],\n        [\n            C2,\n            B2,\n            E2\n        ],\n        [\n            D2,\n            E2,\n            F2\n        ]\n    ]);\n    const l2 = 0.33333333 * (det3([\n        [\n            A2,\n            C1,\n            D1\n        ],\n        [\n            C2,\n            B1,\n            E1\n        ],\n        [\n            D2,\n            E1,\n            F1\n        ]\n    ]) + det3([\n        [\n            A1,\n            C2,\n            D1\n        ],\n        [\n            C1,\n            B2,\n            E1\n        ],\n        [\n            D1,\n            E2,\n            F1\n        ]\n    ]) + det3([\n        [\n            A1,\n            C1,\n            D2\n        ],\n        [\n            C1,\n            B1,\n            E2\n        ],\n        [\n            D1,\n            E1,\n            F2\n        ]\n    ]));\n    const l1 = 0.33333333 * (det3([\n        [\n            A1,\n            C2,\n            D2\n        ],\n        [\n            C1,\n            B2,\n            E2\n        ],\n        [\n            D1,\n            E2,\n            F2\n        ]\n    ]) + det3([\n        [\n            A2,\n            C1,\n            D2\n        ],\n        [\n            C2,\n            B1,\n            E2\n        ],\n        [\n            D2,\n            E1,\n            F2\n        ]\n    ]) + det3([\n        [\n            A2,\n            C2,\n            D1\n        ],\n        [\n            C2,\n            B2,\n            E1\n        ],\n        [\n            D2,\n            E2,\n            F1\n        ]\n    ]));\n    const delta1 = det2([\n        [\n            l3,\n            l2\n        ],\n        [\n            l2,\n            l1\n        ]\n    ]);\n    const delta2 = det2([\n        [\n            l3,\n            l1\n        ],\n        [\n            l2,\n            l0\n        ]\n    ]);\n    const delta3 = det2([\n        [\n            l2,\n            l1\n        ],\n        [\n            l1,\n            l0\n        ]\n    ]);\n    const dP = det2([\n        [\n            2 * delta1,\n            delta2\n        ],\n        [\n            delta2,\n            2 * delta3\n        ]\n    ]);\n    if (dP > 0 && (l1 > 0 || l2 > 0)) {\n        return false;\n    }\n    return true;\n}\nfunction det2(m) {\n    return m[0][0] * m[1][1] - m[0][1] * m[1][0];\n}\nfunction det3(m) {\n    return m[0][0] * m[1][1] * m[2][2] - m[0][0] * m[1][2] * m[2][1] - m[0][1] * m[1][0] * m[2][2] + m[0][1] * m[1][2] * m[2][0] + m[0][2] * m[1][0] * m[2][1] - m[0][2] * m[1][1] * m[2][0];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/intersection.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/line.bearing.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/jointjs/src/g/line.bearing.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bearing: () => (/* binding */ bearing)\n/* harmony export */ });\n/* harmony import */ var _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometry.helpers.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n// @return the bearing (cardinal direction) of the line. For example N, W, or SE.\n// @returns {String} One of the following bearings : NE, E, SE, S, SW, W, NW, N.\n\nconst { cos, sin, atan2 } = Math;\nconst bearing = function(p, q) {\n    var lat1 = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad)(p.y);\n    var lat2 = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad)(q.y);\n    var lon1 = p.x;\n    var lon2 = q.x;\n    var dLon = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad)(lon2 - lon1);\n    var y = sin(dLon) * cos(lat2);\n    var x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dLon);\n    var brng = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toDeg)(atan2(y, x));\n    var bearings = [\n        \"NE\",\n        \"E\",\n        \"SE\",\n        \"S\",\n        \"SW\",\n        \"W\",\n        \"NW\",\n        \"N\"\n    ];\n    var index = brng - 22.5;\n    if (index < 0) index += 360;\n    index = parseInt(index / 45);\n    return bearings[index];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9saW5lLmJlYXJpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaUZBQWlGO0FBQ2pGLGdGQUFnRjtBQUMxQjtBQUV0RCxNQUFNLEVBQ0ZFLEdBQUcsRUFDSEMsR0FBRyxFQUNIQyxLQUFLLEVBQ1IsR0FBR0M7QUFFRyxNQUFNQyxVQUFVLFNBQVNDLENBQUMsRUFBRUMsQ0FBQztJQUVoQyxJQUFJQyxPQUFPUiw0REFBS0EsQ0FBQ00sRUFBRUcsQ0FBQztJQUNwQixJQUFJQyxPQUFPViw0REFBS0EsQ0FBQ08sRUFBRUUsQ0FBQztJQUNwQixJQUFJRSxPQUFPTCxFQUFFTSxDQUFDO0lBQ2QsSUFBSUMsT0FBT04sRUFBRUssQ0FBQztJQUNkLElBQUlFLE9BQU9kLDREQUFLQSxDQUFDYSxPQUFPRjtJQUN4QixJQUFJRixJQUFJUCxJQUFJWSxRQUFRYixJQUFJUztJQUN4QixJQUFJRSxJQUFJWCxJQUFJTyxRQUFRTixJQUFJUSxRQUFRUixJQUFJTSxRQUFRUCxJQUFJUyxRQUFRVCxJQUFJYTtJQUM1RCxJQUFJQyxPQUFPaEIsNERBQUtBLENBQUNJLE1BQU1NLEdBQUdHO0lBRTFCLElBQUlJLFdBQVc7UUFBQztRQUFNO1FBQUs7UUFBTTtRQUFLO1FBQU07UUFBSztRQUFNO0tBQUk7SUFFM0QsSUFBSUMsUUFBUUYsT0FBTztJQUNuQixJQUFJRSxRQUFRLEdBQ1JBLFNBQVM7SUFDYkEsUUFBUUMsU0FBU0QsUUFBUTtJQUV6QixPQUFPRCxRQUFRLENBQUNDLE1BQU07QUFDMUIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL2cvbGluZS5iZWFyaW5nLm1qcz80NzdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEByZXR1cm4gdGhlIGJlYXJpbmcgKGNhcmRpbmFsIGRpcmVjdGlvbikgb2YgdGhlIGxpbmUuIEZvciBleGFtcGxlIE4sIFcsIG9yIFNFLlxuLy8gQHJldHVybnMge1N0cmluZ30gT25lIG9mIHRoZSBmb2xsb3dpbmcgYmVhcmluZ3MgOiBORSwgRSwgU0UsIFMsIFNXLCBXLCBOVywgTi5cbmltcG9ydCB7IHRvRGVnLCB0b1JhZCB9IGZyb20gJy4vZ2VvbWV0cnkuaGVscGVycy5tanMnO1xuXG5jb25zdCB7XG4gICAgY29zLFxuICAgIHNpbixcbiAgICBhdGFuMlxufSA9IE1hdGg7XG5cbmV4cG9ydCBjb25zdCBiZWFyaW5nID0gZnVuY3Rpb24ocCwgcSkge1xuXG4gICAgdmFyIGxhdDEgPSB0b1JhZChwLnkpO1xuICAgIHZhciBsYXQyID0gdG9SYWQocS55KTtcbiAgICB2YXIgbG9uMSA9IHAueDtcbiAgICB2YXIgbG9uMiA9IHEueDtcbiAgICB2YXIgZExvbiA9IHRvUmFkKGxvbjIgLSBsb24xKTtcbiAgICB2YXIgeSA9IHNpbihkTG9uKSAqIGNvcyhsYXQyKTtcbiAgICB2YXIgeCA9IGNvcyhsYXQxKSAqIHNpbihsYXQyKSAtIHNpbihsYXQxKSAqIGNvcyhsYXQyKSAqIGNvcyhkTG9uKTtcbiAgICB2YXIgYnJuZyA9IHRvRGVnKGF0YW4yKHksIHgpKTtcblxuICAgIHZhciBiZWFyaW5ncyA9IFsnTkUnLCAnRScsICdTRScsICdTJywgJ1NXJywgJ1cnLCAnTlcnLCAnTiddO1xuXG4gICAgdmFyIGluZGV4ID0gYnJuZyAtIDIyLjU7XG4gICAgaWYgKGluZGV4IDwgMClcbiAgICAgICAgaW5kZXggKz0gMzYwO1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXggLyA0NSk7XG5cbiAgICByZXR1cm4gYmVhcmluZ3NbaW5kZXhdO1xufTtcbiJdLCJuYW1lcyI6WyJ0b0RlZyIsInRvUmFkIiwiY29zIiwic2luIiwiYXRhbjIiLCJNYXRoIiwiYmVhcmluZyIsInAiLCJxIiwibGF0MSIsInkiLCJsYXQyIiwibG9uMSIsIngiLCJsb24yIiwiZExvbiIsImJybmciLCJiZWFyaW5ncyIsImluZGV4IiwicGFyc2VJbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/line.bearing.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/line.length.mjs":
/*!****************************************************!*\
  !*** ./node_modules/jointjs/src/g/line.length.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   length: () => (/* binding */ length)\n/* harmony export */ });\n/* harmony import */ var _line_squaredLength_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./line.squaredLength.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.squaredLength.mjs\");\n\nconst length = function(start, end) {\n    return Math.sqrt((0,_line_squaredLength_mjs__WEBPACK_IMPORTED_MODULE_0__.squaredLength)(start, end));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9saW5lLmxlbmd0aC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUQ7QUFFbEQsTUFBTUMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLEdBQUc7SUFDckMsT0FBT0MsS0FBS0MsSUFBSSxDQUFDTCxzRUFBYUEsQ0FBQ0UsT0FBT0M7QUFDMUMsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL2cvbGluZS5sZW5ndGgubWpzP2Y4YmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3F1YXJlZExlbmd0aCB9IGZyb20gJy4vbGluZS5zcXVhcmVkTGVuZ3RoLm1qcyc7XG5cbmV4cG9ydCBjb25zdCBsZW5ndGggPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydChzcXVhcmVkTGVuZ3RoKHN0YXJ0LCBlbmQpKTtcbn07XG4iXSwibmFtZXMiOlsic3F1YXJlZExlbmd0aCIsImxlbmd0aCIsInN0YXJ0IiwiZW5kIiwiTWF0aCIsInNxcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/line.length.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/line.mjs":
/*!*********************************************!*\
  !*** ./node_modules/jointjs/src/g/line.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Line: () => (/* binding */ Line),\n/* harmony export */   line: () => (/* binding */ line)\n/* harmony export */ });\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _line_bearing_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./line.bearing.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.bearing.mjs\");\n/* harmony import */ var _line_squaredLength_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./line.squaredLength.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.squaredLength.mjs\");\n/* harmony import */ var _line_length_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./line.length.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.length.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n\n\n\n\n\n\nconst { max, min } = Math;\nconst Line = function(p1, p2) {\n    if (!(this instanceof Line)) {\n        return new Line(p1, p2);\n    }\n    if (p1 instanceof Line) {\n        return new Line(p1.start, p1.end);\n    }\n    this.start = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p1);\n    this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p2);\n};\nLine.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_1__.types.Line,\n    // @returns the angle of incline of the line.\n    angle: function() {\n        var horizontalPoint = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.start.x + 1, this.start.y);\n        return this.start.angleBetween(this.end, horizontalPoint);\n    },\n    bbox: function() {\n        var left = min(this.start.x, this.end.x);\n        var top = min(this.start.y, this.end.y);\n        var right = max(this.start.x, this.end.x);\n        var bottom = max(this.start.y, this.end.y);\n        return new _rect_mjs__WEBPACK_IMPORTED_MODULE_2__.Rect(left, top, right - left, bottom - top);\n    },\n    // @return the bearing (cardinal direction) of the line. For example N, W, or SE.\n    // @returns {String} One of the following bearings : NE, E, SE, S, SW, W, NW, N.\n    bearing: function() {\n        return (0,_line_bearing_mjs__WEBPACK_IMPORTED_MODULE_3__.bearing)(this.start, this.end);\n    },\n    clone: function() {\n        return new Line(this.start, this.end);\n    },\n    // @return {point} the closest point on the line to point `p`\n    closestPoint: function(p) {\n        return this.pointAt(this.closestPointNormalizedLength(p));\n    },\n    closestPointLength: function(p) {\n        return this.closestPointNormalizedLength(p) * this.length();\n    },\n    // @return {number} the normalized length of the closest point on the line to point `p`\n    closestPointNormalizedLength: function(p) {\n        var product = this.vector().dot(new Line(this.start, p).vector());\n        var cpNormalizedLength = min(1, max(0, product / this.squaredLength()));\n        // cpNormalizedLength returns `NaN` if this line has zero length\n        // we can work with that - if `NaN`, return 0\n        if (cpNormalizedLength !== cpNormalizedLength) return 0; // condition evaluates to `true` if and only if cpNormalizedLength is `NaN`\n        // (`NaN` is the only value that is not equal to itself)\n        return cpNormalizedLength;\n    },\n    closestPointTangent: function(p) {\n        return this.tangentAt(this.closestPointNormalizedLength(p));\n    },\n    // Returns `true` if the point lies on the line.\n    containsPoint: function(p) {\n        var start = this.start;\n        var end = this.end;\n        if (start.cross(p, end) !== 0) return false;\n        // else: cross product of 0 indicates that this line and the vector to `p` are collinear\n        var length = this.length();\n        if (new Line(start, p).length() > length) return false;\n        if (new Line(p, end).length() > length) return false;\n        // else: `p` lies between start and end of the line\n        return true;\n    },\n    // Divides the line into two at requested `ratio` between 0 and 1.\n    divideAt: function(ratio) {\n        var dividerPoint = this.pointAt(ratio);\n        // return array with two lines\n        return [\n            new Line(this.start, dividerPoint),\n            new Line(dividerPoint, this.end)\n        ];\n    },\n    // Divides the line into two at requested `length`.\n    divideAtLength: function(length) {\n        var dividerPoint = this.pointAtLength(length);\n        // return array with two new lines\n        return [\n            new Line(this.start, dividerPoint),\n            new Line(dividerPoint, this.end)\n        ];\n    },\n    equals: function(l) {\n        return !!l && this.start.x === l.start.x && this.start.y === l.start.y && this.end.x === l.end.x && this.end.y === l.end.y;\n    },\n    // @return {point} Point where I'm intersecting a line.\n    // @return [point] Points where I'm intersecting a rectangle.\n    // @see Squeak Smalltalk, LineSegment>>intersectionWith:\n    intersect: function(shape, opt) {\n        if (shape && shape.intersectionWithLine) {\n            var intersection = shape.intersectionWithLine(this, opt);\n            // Backwards compatibility\n            if (intersection && shape instanceof Line) {\n                intersection = intersection[0];\n            }\n            return intersection;\n        }\n        return null;\n    },\n    intersectionWithLine: function(line) {\n        var pt1Dir = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.end.x - this.start.x, this.end.y - this.start.y);\n        var pt2Dir = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(line.end.x - line.start.x, line.end.y - line.start.y);\n        var det = pt1Dir.x * pt2Dir.y - pt1Dir.y * pt2Dir.x;\n        var deltaPt = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(line.start.x - this.start.x, line.start.y - this.start.y);\n        var alpha = deltaPt.x * pt2Dir.y - deltaPt.y * pt2Dir.x;\n        var beta = deltaPt.x * pt1Dir.y - deltaPt.y * pt1Dir.x;\n        if (det === 0 || alpha * det < 0 || beta * det < 0) {\n            // No intersection found.\n            return null;\n        }\n        if (det > 0) {\n            if (alpha > det || beta > det) {\n                return null;\n            }\n        } else {\n            if (alpha < det || beta < det) {\n                return null;\n            }\n        }\n        return [\n            new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.start.x + alpha * pt1Dir.x / det, this.start.y + alpha * pt1Dir.y / det)\n        ];\n    },\n    isDifferentiable: function() {\n        return !this.start.equals(this.end);\n    },\n    // @return {double} length of the line\n    length: function() {\n        return (0,_line_length_mjs__WEBPACK_IMPORTED_MODULE_4__.length)(this.start, this.end);\n    },\n    // @return {point} my midpoint\n    midpoint: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\n    },\n    parallel: function(distance) {\n        const l = this.clone();\n        if (!this.isDifferentiable()) return l;\n        const { start, end } = l;\n        const eRef = start.clone().rotate(end, 270);\n        const sRef = end.clone().rotate(start, 90);\n        start.move(sRef, distance);\n        end.move(eRef, distance);\n        return l;\n    },\n    // @return {point} my point at 't' <0,1>\n    pointAt: function(t) {\n        var start = this.start;\n        var end = this.end;\n        if (t <= 0) return start.clone();\n        if (t >= 1) return end.clone();\n        return start.lerp(end, t);\n    },\n    pointAtLength: function(length) {\n        var start = this.start;\n        var end = this.end;\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        var lineLength = this.length();\n        if (length >= lineLength) return fromStart ? end.clone() : start.clone();\n        return this.pointAt((fromStart ? length : lineLength - length) / lineLength);\n    },\n    // @return {number} the offset of the point `p` from the line. + if the point `p` is on the right side of the line, - if on the left and 0 if on the line.\n    pointOffset: function(p) {\n        // Find the sign of the determinant of vectors (start,end), where p is the query point.\n        p = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p);\n        var start = this.start;\n        var end = this.end;\n        var determinant = (end.x - start.x) * (p.y - start.y) - (end.y - start.y) * (p.x - start.x);\n        return determinant / this.length();\n    },\n    rotate: function(origin, angle) {\n        this.start.rotate(origin, angle);\n        this.end.rotate(origin, angle);\n        return this;\n    },\n    round: function(precision) {\n        this.start.round(precision);\n        this.end.round(precision);\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        this.start.scale(sx, sy, origin);\n        this.end.scale(sx, sy, origin);\n        return this;\n    },\n    // @return {number} scale the line so that it has the requested length\n    setLength: function(length) {\n        var currentLength = this.length();\n        if (!currentLength) return this;\n        var scaleFactor = length / currentLength;\n        return this.scale(scaleFactor, scaleFactor, this.start);\n    },\n    // @return {integer} length without sqrt\n    // @note for applications where the exact length is not necessary (e.g. compare only)\n    squaredLength: function() {\n        return (0,_line_squaredLength_mjs__WEBPACK_IMPORTED_MODULE_5__.squaredLength)(this.start, this.end);\n    },\n    tangentAt: function(t) {\n        if (!this.isDifferentiable()) return null;\n        var start = this.start;\n        var end = this.end;\n        var tangentStart = this.pointAt(t); // constrains `t` between 0 and 1\n        var tangentLine = new Line(start, end);\n        tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y); // move so that tangent line starts at the point requested\n        return tangentLine;\n    },\n    tangentAtLength: function(length) {\n        if (!this.isDifferentiable()) return null;\n        var start = this.start;\n        var end = this.end;\n        var tangentStart = this.pointAtLength(length);\n        var tangentLine = new Line(start, end);\n        tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y); // move so that tangent line starts at the point requested\n        return tangentLine;\n    },\n    toString: function() {\n        return this.start.toString() + \" \" + this.end.toString();\n    },\n    serialize: function() {\n        return this.start.serialize() + \" \" + this.end.serialize();\n    },\n    translate: function(tx, ty) {\n        this.start.translate(tx, ty);\n        this.end.translate(tx, ty);\n        return this;\n    },\n    // @return vector {point} of the line\n    vector: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(this.end.x - this.start.x, this.end.y - this.start.y);\n    }\n};\n// For backwards compatibility:\nLine.prototype.intersection = Line.prototype.intersect;\n// For backwards compatibility:\nconst line = Line;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/line.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/line.squaredLength.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/jointjs/src/g/line.squaredLength.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength)\n/* harmony export */ });\n// @return {integer} length without sqrt\n// @note for applications where the exact length is not necessary (e.g. compare only)\nconst squaredLength = function(start, end) {\n    var x0 = start.x;\n    var y0 = start.y;\n    var x1 = end.x;\n    var y1 = end.y;\n    return (x0 -= x1) * x0 + (y0 -= y1) * y0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9saW5lLnNxdWFyZWRMZW5ndGgubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3Q0FBd0M7QUFDeEMscUZBQXFGO0FBQzlFLE1BQU1BLGdCQUFnQixTQUFTQyxLQUFLLEVBQUVDLEdBQUc7SUFFNUMsSUFBSUMsS0FBS0YsTUFBTUcsQ0FBQztJQUNoQixJQUFJQyxLQUFLSixNQUFNSyxDQUFDO0lBQ2hCLElBQUlDLEtBQUtMLElBQUlFLENBQUM7SUFDZCxJQUFJSSxLQUFLTixJQUFJSSxDQUFDO0lBQ2QsT0FBTyxDQUFDSCxNQUFNSSxFQUFDLElBQUtKLEtBQUssQ0FBQ0UsTUFBTUcsRUFBQyxJQUFLSDtBQUMxQyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9saW5lLnNxdWFyZWRMZW5ndGgubWpzPzlkMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHJldHVybiB7aW50ZWdlcn0gbGVuZ3RoIHdpdGhvdXQgc3FydFxuLy8gQG5vdGUgZm9yIGFwcGxpY2F0aW9ucyB3aGVyZSB0aGUgZXhhY3QgbGVuZ3RoIGlzIG5vdCBuZWNlc3NhcnkgKGUuZy4gY29tcGFyZSBvbmx5KVxuZXhwb3J0IGNvbnN0IHNxdWFyZWRMZW5ndGggPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG5cbiAgICB2YXIgeDAgPSBzdGFydC54O1xuICAgIHZhciB5MCA9IHN0YXJ0Lnk7XG4gICAgdmFyIHgxID0gZW5kLng7XG4gICAgdmFyIHkxID0gZW5kLnk7XG4gICAgcmV0dXJuICh4MCAtPSB4MSkgKiB4MCArICh5MCAtPSB5MSkgKiB5MDtcbn07XG4iXSwibmFtZXMiOlsic3F1YXJlZExlbmd0aCIsInN0YXJ0IiwiZW5kIiwieDAiLCJ4IiwieTAiLCJ5IiwieDEiLCJ5MSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/line.squaredLength.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/path.mjs":
/*!*********************************************!*\
  !*** ./node_modules/jointjs/src/g/path.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Path: () => (/* binding */ Path)\n/* harmony export */ });\n/* harmony import */ var _polyline_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyline.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./line.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _curve_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./curve.mjs */ \"(ssr)/./node_modules/jointjs/src/g/curve.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n/* harmony import */ var _extend_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extend.mjs */ \"(ssr)/./node_modules/jointjs/src/g/extend.mjs\");\n// Accepts path data string, array of segments, array of Curves and/or Lines, or a Polyline.\n// Path created is not guaranteed to be a valid (serializable) path (might not start with an M).\n\n\n\n\n\n\n\nconst Path = function(arg) {\n    if (!(this instanceof Path)) {\n        return new Path(arg);\n    }\n    if (typeof arg === \"string\") {\n        return new Path.parse(arg);\n    }\n    this.segments = [];\n    var i;\n    var n;\n    if (!arg) {\n    // don't do anything\n    } else if (Array.isArray(arg) && arg.length !== 0) {\n        // flatten one level deep\n        // so we can chain arbitrary Path.createSegment results\n        arg = arg.reduce(function(acc, val) {\n            return acc.concat(val);\n        }, []);\n        n = arg.length;\n        if (arg[0].isSegment) {\n            for(i = 0; i < n; i++){\n                var segment = arg[i];\n                this.appendSegment(segment);\n            }\n        } else {\n            var previousObj = null;\n            for(i = 0; i < n; i++){\n                var obj = arg[i];\n                if (!(obj instanceof _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line || obj instanceof _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve)) {\n                    throw new Error(\"Cannot construct a path segment from the provided object.\");\n                }\n                if (i === 0) this.appendSegment(Path.createSegment(\"M\", obj.start));\n                // if objects do not link up, moveto segments are inserted to cover the gaps\n                if (previousObj && !previousObj.end.equals(obj.start)) this.appendSegment(Path.createSegment(\"M\", obj.start));\n                if (obj instanceof _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line) {\n                    this.appendSegment(Path.createSegment(\"L\", obj.end));\n                } else if (obj instanceof _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve) {\n                    this.appendSegment(Path.createSegment(\"C\", obj.controlPoint1, obj.controlPoint2, obj.end));\n                }\n                previousObj = obj;\n            }\n        }\n    } else if (arg.isSegment) {\n        this.appendSegment(arg);\n    } else if (arg instanceof _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line) {\n        this.appendSegment(Path.createSegment(\"M\", arg.start));\n        this.appendSegment(Path.createSegment(\"L\", arg.end));\n    } else if (arg instanceof _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve) {\n        this.appendSegment(Path.createSegment(\"M\", arg.start));\n        this.appendSegment(Path.createSegment(\"C\", arg.controlPoint1, arg.controlPoint2, arg.end));\n    } else if (arg instanceof _polyline_mjs__WEBPACK_IMPORTED_MODULE_2__.Polyline) {\n        if (!(arg.points && arg.points.length !== 0)) return; // if Polyline has no points, leave Path empty\n        n = arg.points.length;\n        for(i = 0; i < n; i++){\n            var point = arg.points[i];\n            if (i === 0) this.appendSegment(Path.createSegment(\"M\", point));\n            else this.appendSegment(Path.createSegment(\"L\", point));\n        }\n    } else {\n        throw new Error(\"Cannot construct a path from the provided object.\");\n    }\n};\n// More permissive than V.normalizePathData and Path.prototype.serialize.\n// Allows path data strings that do not start with a Moveto command (unlike SVG specification).\n// Does not require spaces between elements; commas are allowed, separators may be omitted when unambiguous (e.g. 'ZM10,10', 'L1.6.8', 'M100-200').\n// Allows for command argument chaining.\n// Throws an error if wrong number of arguments is provided with a command.\n// Throws an error if an unrecognized path command is provided (according to Path.segmentTypes). Only a subset of SVG commands is currently supported (L, C, M, Z).\nPath.parse = function(pathData) {\n    if (!pathData) return new Path();\n    var path = new Path();\n    var commandRe = /(?:[a-zA-Z] *)(?:(?:-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)? *,? *)|(?:-?\\.\\d+ *,? *))+|(?:[a-zA-Z] *)(?! |\\d|-|\\.)/g;\n    var commands = pathData.match(commandRe);\n    var numCommands = commands.length;\n    for(var i = 0; i < numCommands; i++){\n        var command = commands[i];\n        var argRe = /(?:[a-zA-Z])|(?:(?:-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?))|(?:(?:-?\\.\\d+))/g;\n        var args = command.match(argRe);\n        var segment = Path.createSegment.apply(this, args); // args = [type, coordinate1, coordinate2...]\n        path.appendSegment(segment);\n    }\n    return path;\n};\n// Create a segment or an array of segments.\n// Accepts unlimited points/coords arguments after `type`.\nPath.createSegment = function(type) {\n    if (!type) throw new Error(\"Type must be provided.\");\n    var segmentConstructor = Path.segmentTypes[type];\n    if (!segmentConstructor) throw new Error(type + \" is not a recognized path segment type.\");\n    var args = [];\n    var n = arguments.length;\n    for(var i = 1; i < n; i++){\n        args.push(arguments[i]);\n    }\n    return applyToNew(segmentConstructor, args);\n};\nPath.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_3__.types.Path,\n    // Accepts one segment or an array of segments as argument.\n    // Throws an error if argument is not a segment or an array of segments.\n    appendSegment: function(arg) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        // works even if path has no segments\n        var currentSegment;\n        var previousSegment = numSegments !== 0 ? segments[numSegments - 1] : null; // if we are appending to an empty path, previousSegment is null\n        var nextSegment = null;\n        if (!Array.isArray(arg)) {\n            if (!arg || !arg.isSegment) throw new Error(\"Segment required.\");\n            currentSegment = this.prepareSegment(arg, previousSegment, nextSegment);\n            segments.push(currentSegment);\n        } else {\n            // flatten one level deep\n            // so we can chain arbitrary Path.createSegment results\n            arg = arg.reduce(function(acc, val) {\n                return acc.concat(val);\n            }, []);\n            if (!arg[0].isSegment) throw new Error(\"Segments required.\");\n            var n = arg.length;\n            for(var i = 0; i < n; i++){\n                var currentArg = arg[i];\n                currentSegment = this.prepareSegment(currentArg, previousSegment, nextSegment);\n                segments.push(currentSegment);\n                previousSegment = currentSegment;\n            }\n        }\n    },\n    // Returns the bbox of the path.\n    // If path has no segments, returns null.\n    // If path has only invisible segments, returns bbox of the end point of last segment.\n    bbox: function() {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        var bbox;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            if (segment.isVisible) {\n                var segmentBBox = segment.bbox();\n                bbox = bbox ? bbox.union(segmentBBox) : segmentBBox;\n            }\n        }\n        if (bbox) return bbox;\n        // if the path has only invisible elements, return end point of last segment\n        var lastSegment = segments[numSegments - 1];\n        return new _rect_mjs__WEBPACK_IMPORTED_MODULE_4__.Rect(lastSegment.end.x, lastSegment.end.y, 0, 0);\n    },\n    // Returns a new path that is a clone of this path.\n    clone: function() {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        // works even if path has no segments\n        var path = new Path();\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i].clone();\n            path.appendSegment(segment);\n        }\n        return path;\n    },\n    closestPoint: function(p, opt) {\n        var t = this.closestPointT(p, opt);\n        if (!t) return null;\n        return this.pointAtT(t);\n    },\n    closestPointLength: function(p, opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var localOpt = {\n            precision: precision,\n            segmentSubdivisions: segmentSubdivisions\n        };\n        var t = this.closestPointT(p, localOpt);\n        if (!t) return 0;\n        return this.lengthAtT(t, localOpt);\n    },\n    closestPointNormalizedLength: function(p, opt) {\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var localOpt = {\n            precision: precision,\n            segmentSubdivisions: segmentSubdivisions\n        };\n        var cpLength = this.closestPointLength(p, localOpt);\n        if (cpLength === 0) return 0; // shortcut\n        var length = this.length(localOpt);\n        if (length === 0) return 0; // prevents division by zero\n        return cpLength / length;\n    },\n    // Private function.\n    closestPointT: function(p, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var closestPointT;\n        var minSquaredDistance = Infinity;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            var subdivisions = segmentSubdivisions[i];\n            if (segment.isVisible) {\n                var segmentClosestPointT = segment.closestPointT(p, {\n                    precision: precision,\n                    subdivisions: subdivisions\n                });\n                var segmentClosestPoint = segment.pointAtT(segmentClosestPointT);\n                var squaredDistance = new _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(segmentClosestPoint, p).squaredLength();\n                if (squaredDistance < minSquaredDistance) {\n                    closestPointT = {\n                        segmentIndex: i,\n                        value: segmentClosestPointT\n                    };\n                    minSquaredDistance = squaredDistance;\n                }\n            }\n        }\n        if (closestPointT) return closestPointT;\n        // if no visible segment, return end of last segment\n        return {\n            segmentIndex: numSegments - 1,\n            value: 1\n        };\n    },\n    closestPointTangent: function(p, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var closestPointTangent;\n        var minSquaredDistance = Infinity;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            var subdivisions = segmentSubdivisions[i];\n            if (segment.isDifferentiable()) {\n                var segmentClosestPointT = segment.closestPointT(p, {\n                    precision: precision,\n                    subdivisions: subdivisions\n                });\n                var segmentClosestPoint = segment.pointAtT(segmentClosestPointT);\n                var squaredDistance = new _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(segmentClosestPoint, p).squaredLength();\n                if (squaredDistance < minSquaredDistance) {\n                    closestPointTangent = segment.tangentAtT(segmentClosestPointT);\n                    minSquaredDistance = squaredDistance;\n                }\n            }\n        }\n        if (closestPointTangent) return closestPointTangent;\n        // if no valid segment, return null\n        return null;\n    },\n    // Returns `true` if the area surrounded by the path contains the point `p`.\n    // Implements the even-odd algorithm (self-intersections are \"outside\").\n    // Closes open paths (always imagines a final closing segment).\n    // Precision may be adjusted by passing an `opt` object.\n    containsPoint: function(p, opt) {\n        var polylines = this.toPolylines(opt);\n        if (!polylines) return false; // shortcut (this path has no polylines)\n        var numPolylines = polylines.length;\n        // how many component polylines does `p` lie within?\n        var numIntersections = 0;\n        for(var i = 0; i < numPolylines; i++){\n            var polyline = polylines[i];\n            if (polyline.containsPoint(p)) {\n                // `p` lies within this polyline\n                numIntersections++;\n            }\n        }\n        // returns `true` for odd numbers of intersections (even-odd algorithm)\n        return numIntersections % 2 === 1;\n    },\n    // Divides the path into two at requested `ratio` between 0 and 1 with precision better than `opt.precision`; optionally using `opt.subdivisions` provided.\n    divideAt: function(ratio, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        if (ratio < 0) ratio = 0;\n        if (ratio > 1) ratio = 1;\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var localOpt = {\n            precision: precision,\n            segmentSubdivisions: segmentSubdivisions\n        };\n        var pathLength = this.length(localOpt);\n        var length = pathLength * ratio;\n        return this.divideAtLength(length, localOpt);\n    },\n    // Divides the path into two at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.\n    divideAtLength: function(length, opt) {\n        var numSegments = this.segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var i;\n        var segment;\n        // identify the segment to divide:\n        var l = 0; // length so far\n        var divided;\n        var dividedSegmentIndex;\n        var lastValidSegment; // visible AND differentiable\n        var lastValidSegmentIndex;\n        var t;\n        for(i = 0; i < numSegments; i++){\n            var index = fromStart ? i : numSegments - 1 - i;\n            segment = this.getSegment(index);\n            var subdivisions = segmentSubdivisions[index];\n            var d = segment.length({\n                precision: precision,\n                subdivisions: subdivisions\n            });\n            if (segment.isDifferentiable()) {\n                lastValidSegment = segment;\n                lastValidSegmentIndex = index;\n                if (length <= l + d) {\n                    dividedSegmentIndex = index;\n                    divided = segment.divideAtLength((fromStart ? 1 : -1) * (length - l), {\n                        precision: precision,\n                        subdivisions: subdivisions\n                    });\n                    break;\n                }\n            }\n            l += d;\n        }\n        if (!lastValidSegment) {\n            return null;\n        }\n        // else: the path contains at least one valid segment\n        if (!divided) {\n            dividedSegmentIndex = lastValidSegmentIndex;\n            t = fromStart ? 1 : 0;\n            divided = lastValidSegment.divideAtT(t);\n        }\n        // create a copy of this path and replace the identified segment with its two divided parts:\n        var pathCopy = this.clone();\n        pathCopy.replaceSegment(dividedSegmentIndex, divided);\n        var divisionStartIndex = dividedSegmentIndex;\n        var divisionMidIndex = dividedSegmentIndex + 1;\n        var divisionEndIndex = dividedSegmentIndex + 2;\n        // do not insert the part if it looks like a point\n        if (!divided[0].isDifferentiable()) {\n            pathCopy.removeSegment(divisionStartIndex);\n            divisionMidIndex -= 1;\n            divisionEndIndex -= 1;\n        }\n        // insert a Moveto segment to ensure secondPath will be valid:\n        var movetoEnd = pathCopy.getSegment(divisionMidIndex).start;\n        pathCopy.insertSegment(divisionMidIndex, Path.createSegment(\"M\", movetoEnd));\n        divisionEndIndex += 1;\n        // do not insert the part if it looks like a point\n        if (!divided[1].isDifferentiable()) {\n            pathCopy.removeSegment(divisionEndIndex - 1);\n            divisionEndIndex -= 1;\n        }\n        // ensure that Closepath segments in secondPath will be assigned correct subpathStartSegment:\n        var secondPathSegmentIndexConversion = divisionEndIndex - divisionStartIndex - 1;\n        for(i = divisionEndIndex; i < pathCopy.segments.length; i++){\n            var originalSegment = this.getSegment(i - secondPathSegmentIndexConversion);\n            segment = pathCopy.getSegment(i);\n            if (segment.type === \"Z\" && !originalSegment.subpathStartSegment.end.equals(segment.subpathStartSegment.end)) {\n                // pathCopy segment's subpathStartSegment is different from original segment's one\n                // convert this Closepath segment to a Lineto and replace it in pathCopy\n                var convertedSegment = Path.createSegment(\"L\", originalSegment.end);\n                pathCopy.replaceSegment(i, convertedSegment);\n            }\n        }\n        // distribute pathCopy segments into two paths and return those:\n        var firstPath = new Path(pathCopy.segments.slice(0, divisionMidIndex));\n        var secondPath = new Path(pathCopy.segments.slice(divisionMidIndex));\n        return [\n            firstPath,\n            secondPath\n        ];\n    },\n    // Checks whether two paths are exactly the same.\n    // If `p` is undefined or null, returns false.\n    equals: function(p) {\n        if (!p) return false;\n        var segments = this.segments;\n        var otherSegments = p.segments;\n        var numSegments = segments.length;\n        if (otherSegments.length !== numSegments) return false; // if the two paths have different number of segments, they cannot be equal\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            var otherSegment = otherSegments[i];\n            // as soon as an inequality is found in segments, return false\n            if (segment.type !== otherSegment.type || !segment.equals(otherSegment)) return false;\n        }\n        // if no inequality found in segments, return true\n        return true;\n    },\n    // Accepts negative indices.\n    // Throws an error if path has no segments.\n    // Throws an error if index is out of range.\n    getSegment: function(index) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) throw new Error(\"Path has no segments.\");\n        if (index < 0) index = numSegments + index; // convert negative indices to positive\n        if (index >= numSegments || index < 0) throw new Error(\"Index out of range.\");\n        return segments[index];\n    },\n    // Returns an array of segment subdivisions, with precision better than requested `opt.precision`.\n    getSegmentSubdivisions: function(opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        // works even if path has no segments\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        // not using opt.segmentSubdivisions\n        // not using localOpt\n        var segmentSubdivisions = [];\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            var subdivisions = segment.getSubdivisions({\n                precision: precision\n            });\n            segmentSubdivisions.push(subdivisions);\n        }\n        return segmentSubdivisions;\n    },\n    // Returns an array of subpaths of this path.\n    // Invalid paths are validated first.\n    // Returns `[]` if path has no segments.\n    getSubpaths: function() {\n        const validatedPath = this.clone().validate();\n        const segments = validatedPath.segments;\n        const numSegments = segments.length;\n        const subpaths = [];\n        for(let i = 0; i < numSegments; i++){\n            const segment = segments[i];\n            if (segment.isSubpathStart) {\n                // we encountered a subpath start segment\n                // create a new path for segment, and push it to list of subpaths\n                subpaths.push(new Path(segment));\n            } else {\n                // append current segment to the last subpath\n                subpaths[subpaths.length - 1].appendSegment(segment);\n            }\n        }\n        return subpaths;\n    },\n    // Insert `arg` at given `index`.\n    // `index = 0` means insert at the beginning.\n    // `index = segments.length` means insert at the end.\n    // Accepts negative indices, from `-1` to `-(segments.length + 1)`.\n    // Accepts one segment or an array of segments as argument.\n    // Throws an error if index is out of range.\n    // Throws an error if argument is not a segment or an array of segments.\n    insertSegment: function(index, arg) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        // works even if path has no segments\n        // note that these are incremented compared to getSegments()\n        // we can insert after last element (note that this changes the meaning of index -1)\n        if (index < 0) index = numSegments + index + 1; // convert negative indices to positive\n        if (index > numSegments || index < 0) throw new Error(\"Index out of range.\");\n        var currentSegment;\n        var previousSegment = null;\n        var nextSegment = null;\n        if (numSegments !== 0) {\n            if (index >= 1) {\n                previousSegment = segments[index - 1];\n                nextSegment = previousSegment.nextSegment; // if we are inserting at end, nextSegment is null\n            } else {\n                // previousSegment is null\n                nextSegment = segments[0];\n            }\n        }\n        if (!Array.isArray(arg)) {\n            if (!arg || !arg.isSegment) throw new Error(\"Segment required.\");\n            currentSegment = this.prepareSegment(arg, previousSegment, nextSegment);\n            segments.splice(index, 0, currentSegment);\n        } else {\n            // flatten one level deep\n            // so we can chain arbitrary Path.createSegment results\n            arg = arg.reduce(function(acc, val) {\n                return acc.concat(val);\n            }, []);\n            if (!arg[0].isSegment) throw new Error(\"Segments required.\");\n            var n = arg.length;\n            for(var i = 0; i < n; i++){\n                var currentArg = arg[i];\n                currentSegment = this.prepareSegment(currentArg, previousSegment, nextSegment);\n                segments.splice(index + i, 0, currentSegment); // incrementing index to insert subsequent segments after inserted segments\n                previousSegment = currentSegment;\n            }\n        }\n    },\n    intersectionWithLine: function(line, opt) {\n        var intersection = null;\n        var polylines = this.toPolylines(opt);\n        if (!polylines) return null;\n        for(var i = 0, n = polylines.length; i < n; i++){\n            var polyline = polylines[i];\n            var polylineIntersection = line.intersect(polyline);\n            if (polylineIntersection) {\n                intersection || (intersection = []);\n                if (Array.isArray(polylineIntersection)) {\n                    Array.prototype.push.apply(intersection, polylineIntersection);\n                } else {\n                    intersection.push(polylineIntersection);\n                }\n            }\n        }\n        return intersection;\n    },\n    isDifferentiable: function() {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            // as soon as a differentiable segment is found in segments, return true\n            if (segment.isDifferentiable()) return true;\n        }\n        // if no differentiable segment is found in segments, return false\n        return false;\n    },\n    // Checks whether current path segments are valid.\n    // Note that d is allowed to be empty - should disable rendering of the path.\n    isValid: function() {\n        var segments = this.segments;\n        var isValid = segments.length === 0 || segments[0].type === \"M\"; // either empty or first segment is a Moveto\n        return isValid;\n    },\n    // Returns length of the path, with precision better than requested `opt.precision`; or using `opt.segmentSubdivisions` provided.\n    // If path has no segments, returns 0.\n    length: function(opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return 0; // if segments is an empty array\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision; // opt.precision only used in getSegmentSubdivisions() call\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var length = 0;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            var subdivisions = segmentSubdivisions[i];\n            length += segment.length({\n                subdivisions: subdivisions\n            });\n        }\n        return length;\n    },\n    // Private function.\n    lengthAtT: function(t, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return 0; // if segments is an empty array\n        var segmentIndex = t.segmentIndex;\n        if (segmentIndex < 0) return 0; // regardless of t.value\n        var tValue = t.value;\n        if (segmentIndex >= numSegments) {\n            segmentIndex = numSegments - 1;\n            tValue = 1;\n        } else if (tValue < 0) tValue = 0;\n        else if (tValue > 1) tValue = 1;\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var subdivisions;\n        var length = 0;\n        for(var i = 0; i < segmentIndex; i++){\n            var segment = segments[i];\n            subdivisions = segmentSubdivisions[i];\n            length += segment.length({\n                precisison: precision,\n                subdivisions: subdivisions\n            });\n        }\n        segment = segments[segmentIndex];\n        subdivisions = segmentSubdivisions[segmentIndex];\n        length += segment.lengthAtT(tValue, {\n            precisison: precision,\n            subdivisions: subdivisions\n        });\n        return length;\n    },\n    // Returns point at requested `ratio` between 0 and 1, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.\n    pointAt: function(ratio, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        if (ratio <= 0) return this.start.clone();\n        if (ratio >= 1) return this.end.clone();\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var localOpt = {\n            precision: precision,\n            segmentSubdivisions: segmentSubdivisions\n        };\n        var pathLength = this.length(localOpt);\n        var length = pathLength * ratio;\n        return this.pointAtLength(length, localOpt);\n    },\n    // Returns point at requested `length`, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.\n    // Accepts negative length.\n    pointAtLength: function(length, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        if (length === 0) return this.start.clone();\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var lastVisibleSegment;\n        var l = 0; // length so far\n        for(var i = 0; i < numSegments; i++){\n            var index = fromStart ? i : numSegments - 1 - i;\n            var segment = segments[index];\n            var subdivisions = segmentSubdivisions[index];\n            var d = segment.length({\n                precision: precision,\n                subdivisions: subdivisions\n            });\n            if (segment.isVisible) {\n                if (length <= l + d) {\n                    return segment.pointAtLength((fromStart ? 1 : -1) * (length - l), {\n                        precision: precision,\n                        subdivisions: subdivisions\n                    });\n                }\n                lastVisibleSegment = segment;\n            }\n            l += d;\n        }\n        // if length requested is higher than the length of the path, return last visible segment endpoint\n        if (lastVisibleSegment) return fromStart ? lastVisibleSegment.end : lastVisibleSegment.start;\n        // if no visible segment, return last segment end point (no matter if fromStart or no)\n        var lastSegment = segments[numSegments - 1];\n        return lastSegment.end.clone();\n    },\n    // Private function.\n    pointAtT: function(t) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        var segmentIndex = t.segmentIndex;\n        if (segmentIndex < 0) return segments[0].pointAtT(0);\n        if (segmentIndex >= numSegments) return segments[numSegments - 1].pointAtT(1);\n        var tValue = t.value;\n        if (tValue < 0) tValue = 0;\n        else if (tValue > 1) tValue = 1;\n        return segments[segmentIndex].pointAtT(tValue);\n    },\n    // Default precision\n    PRECISION: 3,\n    // Helper method for adding segments.\n    prepareSegment: function(segment, previousSegment, nextSegment) {\n        // insert after previous segment and before previous segment's next segment\n        segment.previousSegment = previousSegment;\n        segment.nextSegment = nextSegment;\n        if (previousSegment) previousSegment.nextSegment = segment;\n        if (nextSegment) nextSegment.previousSegment = segment;\n        var updateSubpathStart = segment;\n        if (segment.isSubpathStart) {\n            segment.subpathStartSegment = segment; // assign self as subpath start segment\n            updateSubpathStart = nextSegment; // start updating from next segment\n        }\n        // assign previous segment's subpath start (or self if it is a subpath start) to subsequent segments\n        if (updateSubpathStart) this.updateSubpathStartSegment(updateSubpathStart);\n        return segment;\n    },\n    // Remove the segment at `index`.\n    // Accepts negative indices, from `-1` to `-segments.length`.\n    // Throws an error if path has no segments.\n    // Throws an error if index is out of range.\n    removeSegment: function(index) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) throw new Error(\"Path has no segments.\");\n        if (index < 0) index = numSegments + index; // convert negative indices to positive\n        if (index >= numSegments || index < 0) throw new Error(\"Index out of range.\");\n        var removedSegment = segments.splice(index, 1)[0];\n        var previousSegment = removedSegment.previousSegment;\n        var nextSegment = removedSegment.nextSegment;\n        // link the previous and next segments together (if present)\n        if (previousSegment) previousSegment.nextSegment = nextSegment; // may be null\n        if (nextSegment) nextSegment.previousSegment = previousSegment; // may be null\n        // if removed segment used to start a subpath, update all subsequent segments until another subpath start segment is reached\n        if (removedSegment.isSubpathStart && nextSegment) this.updateSubpathStartSegment(nextSegment);\n    },\n    // Replace the segment at `index` with `arg`.\n    // Accepts negative indices, from `-1` to `-segments.length`.\n    // Accepts one segment or an array of segments as argument.\n    // Throws an error if path has no segments.\n    // Throws an error if index is out of range.\n    // Throws an error if argument is not a segment or an array of segments.\n    replaceSegment: function(index, arg) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) throw new Error(\"Path has no segments.\");\n        if (index < 0) index = numSegments + index; // convert negative indices to positive\n        if (index >= numSegments || index < 0) throw new Error(\"Index out of range.\");\n        var currentSegment;\n        var replacedSegment = segments[index];\n        var previousSegment = replacedSegment.previousSegment;\n        var nextSegment = replacedSegment.nextSegment;\n        var updateSubpathStart = replacedSegment.isSubpathStart; // boolean: is an update of subpath starts necessary?\n        if (!Array.isArray(arg)) {\n            if (!arg || !arg.isSegment) throw new Error(\"Segment required.\");\n            currentSegment = this.prepareSegment(arg, previousSegment, nextSegment);\n            segments.splice(index, 1, currentSegment); // directly replace\n            if (updateSubpathStart && currentSegment.isSubpathStart) updateSubpathStart = false; // already updated by `prepareSegment`\n        } else {\n            // flatten one level deep\n            // so we can chain arbitrary Path.createSegment results\n            arg = arg.reduce(function(acc, val) {\n                return acc.concat(val);\n            }, []);\n            if (!arg[0].isSegment) throw new Error(\"Segments required.\");\n            segments.splice(index, 1);\n            var n = arg.length;\n            for(var i = 0; i < n; i++){\n                var currentArg = arg[i];\n                currentSegment = this.prepareSegment(currentArg, previousSegment, nextSegment);\n                segments.splice(index + i, 0, currentSegment); // incrementing index to insert subsequent segments after inserted segments\n                previousSegment = currentSegment;\n                if (updateSubpathStart && currentSegment.isSubpathStart) updateSubpathStart = false; // already updated by `prepareSegment`\n            }\n        }\n        // if replaced segment used to start a subpath and no new subpath start was added, update all subsequent segments until another subpath start segment is reached\n        if (updateSubpathStart && nextSegment) this.updateSubpathStartSegment(nextSegment);\n    },\n    round: function(precision) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            segment.round(precision);\n        }\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            segment.scale(sx, sy, origin);\n        }\n        return this;\n    },\n    segmentAt: function(ratio, opt) {\n        var index = this.segmentIndexAt(ratio, opt);\n        if (!index) return null;\n        return this.getSegment(index);\n    },\n    // Accepts negative length.\n    segmentAtLength: function(length, opt) {\n        var index = this.segmentIndexAtLength(length, opt);\n        if (!index) return null;\n        return this.getSegment(index);\n    },\n    segmentIndexAt: function(ratio, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        if (ratio < 0) ratio = 0;\n        if (ratio > 1) ratio = 1;\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var localOpt = {\n            precision: precision,\n            segmentSubdivisions: segmentSubdivisions\n        };\n        var pathLength = this.length(localOpt);\n        var length = pathLength * ratio;\n        return this.segmentIndexAtLength(length, localOpt);\n    },\n    // Accepts negative length.\n    segmentIndexAtLength: function(length, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var lastVisibleSegmentIndex = null;\n        var l = 0; // length so far\n        for(var i = 0; i < numSegments; i++){\n            var index = fromStart ? i : numSegments - 1 - i;\n            var segment = segments[index];\n            var subdivisions = segmentSubdivisions[index];\n            var d = segment.length({\n                precision: precision,\n                subdivisions: subdivisions\n            });\n            if (segment.isVisible) {\n                if (length <= l + d) return index;\n                lastVisibleSegmentIndex = index;\n            }\n            l += d;\n        }\n        // if length requested is higher than the length of the path, return last visible segment index\n        // if no visible segment, return null\n        return lastVisibleSegmentIndex;\n    },\n    // Returns a string that can be used to reconstruct the path.\n    // Additional error checking compared to toString (must start with M segment).\n    serialize: function() {\n        if (!this.isValid()) throw new Error(\"Invalid path segments.\");\n        return this.toString();\n    },\n    // Returns tangent line at requested `ratio` between 0 and 1, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.\n    tangentAt: function(ratio, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        if (ratio < 0) ratio = 0;\n        if (ratio > 1) ratio = 1;\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var localOpt = {\n            precision: precision,\n            segmentSubdivisions: segmentSubdivisions\n        };\n        var pathLength = this.length(localOpt);\n        var length = pathLength * ratio;\n        return this.tangentAtLength(length, localOpt);\n    },\n    // Returns tangent line at requested `length`, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.\n    // Accepts negative length.\n    tangentAtLength: function(length, opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        // not using localOpt\n        var lastValidSegment; // visible AND differentiable (with a tangent)\n        var l = 0; // length so far\n        for(var i = 0; i < numSegments; i++){\n            var index = fromStart ? i : numSegments - 1 - i;\n            var segment = segments[index];\n            var subdivisions = segmentSubdivisions[index];\n            var d = segment.length({\n                precision: precision,\n                subdivisions: subdivisions\n            });\n            if (segment.isDifferentiable()) {\n                if (length <= l + d) {\n                    return segment.tangentAtLength((fromStart ? 1 : -1) * (length - l), {\n                        precision: precision,\n                        subdivisions: subdivisions\n                    });\n                }\n                lastValidSegment = segment;\n            }\n            l += d;\n        }\n        // if length requested is higher than the length of the path, return tangent of endpoint of last valid segment\n        if (lastValidSegment) {\n            var t = fromStart ? 1 : 0;\n            return lastValidSegment.tangentAtT(t);\n        }\n        // if no valid segment, return null\n        return null;\n    },\n    // Private function.\n    tangentAtT: function(t) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        var segmentIndex = t.segmentIndex;\n        if (segmentIndex < 0) return segments[0].tangentAtT(0);\n        if (segmentIndex >= numSegments) return segments[numSegments - 1].tangentAtT(1);\n        var tValue = t.value;\n        if (tValue < 0) tValue = 0;\n        else if (tValue > 1) tValue = 1;\n        return segments[segmentIndex].tangentAtT(tValue);\n    },\n    toPoints: function(opt) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null; // if segments is an empty array\n        opt = opt || {};\n        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;\n        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({\n            precision: precision\n        }) : opt.segmentSubdivisions;\n        var points = [];\n        var partialPoints = [];\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            if (segment.isVisible) {\n                var currentSegmentSubdivisions = segmentSubdivisions[i];\n                if (currentSegmentSubdivisions.length > 0) {\n                    var subdivisionPoints = currentSegmentSubdivisions.map(function(curve) {\n                        return curve.start;\n                    });\n                    Array.prototype.push.apply(partialPoints, subdivisionPoints);\n                } else {\n                    partialPoints.push(segment.start);\n                }\n            } else if (partialPoints.length > 0) {\n                partialPoints.push(segments[i - 1].end);\n                points.push(partialPoints);\n                partialPoints = [];\n            }\n        }\n        if (partialPoints.length > 0) {\n            partialPoints.push(this.end);\n            points.push(partialPoints);\n        }\n        return points;\n    },\n    toPolylines: function(opt) {\n        var polylines = [];\n        var points = this.toPoints(opt);\n        if (!points) return null;\n        for(var i = 0, n = points.length; i < n; i++){\n            polylines.push(new _polyline_mjs__WEBPACK_IMPORTED_MODULE_2__.Polyline(points[i]));\n        }\n        return polylines;\n    },\n    toString: function() {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        var pathData = \"\";\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            pathData += segment.serialize() + \" \";\n        }\n        return pathData.trim();\n    },\n    translate: function(tx, ty) {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            segment.translate(tx, ty);\n        }\n        return this;\n    },\n    // Helper method for updating subpath start of segments, starting with the one provided.\n    updateSubpathStartSegment: function(segment) {\n        var previousSegment = segment.previousSegment; // may be null\n        while(segment && !segment.isSubpathStart){\n            // assign previous segment's subpath start segment to this segment\n            if (previousSegment) segment.subpathStartSegment = previousSegment.subpathStartSegment; // may be null\n            else segment.subpathStartSegment = null; // if segment had no previous segment, assign null - creates an invalid path!\n            previousSegment = segment;\n            segment = segment.nextSegment; // move on to the segment after etc.\n        }\n    },\n    // If the path is not valid, insert M 0 0 at the beginning.\n    // Path with no segments is considered valid, so nothing is inserted.\n    validate: function() {\n        if (!this.isValid()) this.insertSegment(0, Path.createSegment(\"M\", 0, 0));\n        return this;\n    }\n};\nObject.defineProperty(Path.prototype, \"start\", {\n    // Getter for the first visible endpoint of the path.\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null;\n        for(var i = 0; i < numSegments; i++){\n            var segment = segments[i];\n            if (segment.isVisible) return segment.start;\n        }\n        // if no visible segment, return last segment end point\n        return segments[numSegments - 1].end;\n    }\n});\nObject.defineProperty(Path.prototype, \"end\", {\n    // Getter for the last visible endpoint of the path.\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        var segments = this.segments;\n        var numSegments = segments.length;\n        if (numSegments === 0) return null;\n        for(var i = numSegments - 1; i >= 0; i--){\n            var segment = segments[i];\n            if (segment.isVisible) return segment.end;\n        }\n        // if no visible segment, return last segment end point\n        return segments[numSegments - 1].end;\n    }\n});\n// Local helper function.\n// Use an array of arguments to call a constructor (function called with `new`).\n// Adapted from https://stackoverflow.com/a/8843181/2263595\n// It is not necessary to use this function if the arguments can be passed separately (i.e. if the number of arguments is limited).\n// - If that is the case, use `new constructor(arg1, arg2)`, for example.\n// It is not necessary to use this function if the function that needs an array of arguments is not supposed to be used as a constructor.\n// - If that is the case, use `f.apply(thisArg, [arg1, arg2...])`, for example.\nfunction applyToNew(constructor, argsArray) {\n    // The `new` keyword can only be applied to functions that take a limited number of arguments.\n    // - We can fake that with .bind().\n    // - It calls a function (`constructor`, here) with the arguments that were provided to it - effectively transforming an unlimited number of arguments into limited.\n    // - So `new (constructor.bind(thisArg, arg1, arg2...))`\n    // - `thisArg` can be anything (e.g. null) because `new` keyword resets context to the constructor object.\n    // We need to pass in a variable number of arguments to the bind() call.\n    // - We can use .apply().\n    // - So `new (constructor.bind.apply(constructor, [thisArg, arg1, arg2...]))`\n    // - `thisArg` can still be anything because `new` overwrites it.\n    // Finally, to make sure that constructor.bind overwriting is not a problem, we switch to `Function.prototype.bind`.\n    // - So, the final version is `new (Function.prototype.bind.apply(constructor, [thisArg, arg1, arg2...]))`\n    // The function expects `argsArray[0]` to be `thisArg`.\n    // - This means that whatever is sent as the first element will be ignored.\n    // - The constructor will only see arguments starting from argsArray[1].\n    // - So, a new dummy element is inserted at the start of the array.\n    argsArray.unshift(null);\n    return new (Function.prototype.bind.apply(constructor, argsArray));\n}\n// Path segment interface:\nvar segmentPrototype = {\n    // virtual\n    bbox: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    clone: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    closestPoint: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    closestPointLength: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    closestPointNormalizedLength: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // Redirect calls to closestPointNormalizedLength() function if closestPointT() is not defined for segment.\n    closestPointT: function(p) {\n        if (this.closestPointNormalizedLength) return this.closestPointNormalizedLength(p);\n        throw new Error(\"Neither closestPointT() nor closestPointNormalizedLength() function is implemented.\");\n    },\n    // virtual\n    closestPointTangent: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    divideAt: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    divideAtLength: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // Redirect calls to divideAt() function if divideAtT() is not defined for segment.\n    divideAtT: function(t) {\n        if (this.divideAt) return this.divideAt(t);\n        throw new Error(\"Neither divideAtT() nor divideAt() function is implemented.\");\n    },\n    // virtual\n    equals: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    getSubdivisions: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    isDifferentiable: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    isSegment: true,\n    isSubpathStart: false,\n    isVisible: true,\n    // virtual\n    length: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // Return a fraction of result of length() function if lengthAtT() is not defined for segment.\n    lengthAtT: function(t) {\n        if (t <= 0) return 0;\n        var length = this.length();\n        if (t >= 1) return length;\n        return length * t;\n    },\n    nextSegment: null,\n    // virtual\n    pointAt: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    pointAtLength: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // Redirect calls to pointAt() function if pointAtT() is not defined for segment.\n    pointAtT: function(t) {\n        if (this.pointAt) return this.pointAt(t);\n        throw new Error(\"Neither pointAtT() nor pointAt() function is implemented.\");\n    },\n    previousSegment: null,\n    // virtual\n    round: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    subpathStartSegment: null,\n    // virtual\n    scale: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    serialize: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    tangentAt: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    tangentAtLength: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // Redirect calls to tangentAt() function if tangentAtT() is not defined for segment.\n    tangentAtT: function(t) {\n        if (this.tangentAt) return this.tangentAt(t);\n        throw new Error(\"Neither tangentAtT() nor tangentAt() function is implemented.\");\n    },\n    // virtual\n    toString: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    },\n    // virtual\n    translate: function() {\n        throw new Error(\"Declaration missing for virtual function.\");\n    }\n};\n// usually directly assigned\n// getter for Closepath\nObject.defineProperty(segmentPrototype, \"end\", {\n    configurable: true,\n    enumerable: true,\n    writable: true\n});\n// always a getter\n// always throws error for Moveto\nObject.defineProperty(segmentPrototype, \"start\", {\n    // get a reference to the end point of previous segment\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        if (!this.previousSegment) throw new Error(\"Missing previous segment. (This segment cannot be the first segment of a path; OR segment has not yet been added to a path.)\");\n        return this.previousSegment.end;\n    }\n});\n// virtual\nObject.defineProperty(segmentPrototype, \"type\", {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        throw new Error(\"Bad segment declaration. No type specified.\");\n    }\n});\n// Path segment implementations:\nvar Lineto = function() {\n    var args = [];\n    var n = arguments.length;\n    for(var i = 0; i < n; i++){\n        args.push(arguments[i]);\n    }\n    if (!(this instanceof Lineto)) {\n        return applyToNew(Lineto, args);\n    }\n    if (n === 0) {\n        throw new Error(\"Lineto constructor expects a line, 1 point, or 2 coordinates (none provided).\");\n    }\n    var outputArray;\n    if (args[0] instanceof _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line) {\n        if (n === 1) {\n            this.end = args[0].end.clone();\n            return this;\n        } else {\n            throw new Error(\"Lineto constructor expects a line, 1 point, or 2 coordinates (\" + n + \" lines provided).\");\n        }\n    } else if (typeof args[0] === \"string\" || typeof args[0] === \"number\") {\n        if (n === 2) {\n            this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(+args[0], +args[1]);\n            return this;\n        } else if (n < 2) {\n            throw new Error(\"Lineto constructor expects a line, 1 point, or 2 coordinates (\" + n + \" coordinates provided).\");\n        } else {\n            var segmentCoords;\n            outputArray = [];\n            for(i = 0; i < n; i += 2){\n                segmentCoords = args.slice(i, i + 2); // will send one coord if args.length not divisible by 2\n                outputArray.push(applyToNew(Lineto, segmentCoords));\n            }\n            return outputArray;\n        }\n    } else {\n        if (n === 1) {\n            this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(args[0]);\n            return this;\n        } else {\n            var segmentPoint;\n            outputArray = [];\n            for(i = 0; i < n; i += 1){\n                segmentPoint = args[i];\n                outputArray.push(new Lineto(segmentPoint));\n            }\n            return outputArray;\n        }\n    }\n};\nvar linetoPrototype = {\n    clone: function() {\n        return new Lineto(this.end);\n    },\n    divideAt: function(ratio) {\n        var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(this.start, this.end);\n        var divided = line.divideAt(ratio);\n        return [\n            new Lineto(divided[0]),\n            new Lineto(divided[1])\n        ];\n    },\n    divideAtLength: function(length) {\n        var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(this.start, this.end);\n        var divided = line.divideAtLength(length);\n        return [\n            new Lineto(divided[0]),\n            new Lineto(divided[1])\n        ];\n    },\n    getSubdivisions: function() {\n        return [];\n    },\n    isDifferentiable: function() {\n        if (!this.previousSegment) return false;\n        return !this.start.equals(this.end);\n    },\n    round: function(precision) {\n        this.end.round(precision);\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        this.end.scale(sx, sy, origin);\n        return this;\n    },\n    serialize: function() {\n        var end = this.end;\n        return this.type + \" \" + end.x + \" \" + end.y;\n    },\n    toString: function() {\n        return this.type + \" \" + this.start + \" \" + this.end;\n    },\n    translate: function(tx, ty) {\n        this.end.translate(tx, ty);\n        return this;\n    }\n};\nObject.defineProperty(linetoPrototype, \"type\", {\n    configurable: true,\n    enumerable: true,\n    value: \"L\"\n});\nLineto.prototype = (0,_extend_mjs__WEBPACK_IMPORTED_MODULE_6__.extend)(segmentPrototype, _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line.prototype, linetoPrototype);\nvar Curveto = function() {\n    var args = [];\n    var n = arguments.length;\n    for(var i = 0; i < n; i++){\n        args.push(arguments[i]);\n    }\n    if (!(this instanceof Curveto)) {\n        return applyToNew(Curveto, args);\n    }\n    if (n === 0) {\n        throw new Error(\"Curveto constructor expects a curve, 3 points, or 6 coordinates (none provided).\");\n    }\n    var outputArray;\n    if (args[0] instanceof _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve) {\n        if (n === 1) {\n            this.controlPoint1 = args[0].controlPoint1.clone();\n            this.controlPoint2 = args[0].controlPoint2.clone();\n            this.end = args[0].end.clone();\n            return this;\n        } else {\n            throw new Error(\"Curveto constructor expects a curve, 3 points, or 6 coordinates (\" + n + \" curves provided).\");\n        }\n    } else if (typeof args[0] === \"string\" || typeof args[0] === \"number\") {\n        if (n === 6) {\n            this.controlPoint1 = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(+args[0], +args[1]);\n            this.controlPoint2 = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(+args[2], +args[3]);\n            this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(+args[4], +args[5]);\n            return this;\n        } else if (n < 6) {\n            throw new Error(\"Curveto constructor expects a curve, 3 points, or 6 coordinates (\" + n + \" coordinates provided).\");\n        } else {\n            var segmentCoords;\n            outputArray = [];\n            for(i = 0; i < n; i += 6){\n                segmentCoords = args.slice(i, i + 6); // will send fewer than six coords if args.length not divisible by 6\n                outputArray.push(applyToNew(Curveto, segmentCoords));\n            }\n            return outputArray;\n        }\n    } else {\n        if (n === 3) {\n            this.controlPoint1 = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(args[0]);\n            this.controlPoint2 = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(args[1]);\n            this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(args[2]);\n            return this;\n        } else if (n < 3) {\n            throw new Error(\"Curveto constructor expects a curve, 3 points, or 6 coordinates (\" + n + \" points provided).\");\n        } else {\n            var segmentPoints;\n            outputArray = [];\n            for(i = 0; i < n; i += 3){\n                segmentPoints = args.slice(i, i + 3); // will send fewer than three points if args.length is not divisible by 3\n                outputArray.push(applyToNew(Curveto, segmentPoints));\n            }\n            return outputArray;\n        }\n    }\n};\nvar curvetoPrototype = {\n    clone: function() {\n        return new Curveto(this.controlPoint1, this.controlPoint2, this.end);\n    },\n    divideAt: function(ratio, opt) {\n        var curve = new _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n        var divided = curve.divideAt(ratio, opt);\n        return [\n            new Curveto(divided[0]),\n            new Curveto(divided[1])\n        ];\n    },\n    divideAtLength: function(length, opt) {\n        var curve = new _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n        var divided = curve.divideAtLength(length, opt);\n        return [\n            new Curveto(divided[0]),\n            new Curveto(divided[1])\n        ];\n    },\n    divideAtT: function(t) {\n        var curve = new _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n        var divided = curve.divideAtT(t);\n        return [\n            new Curveto(divided[0]),\n            new Curveto(divided[1])\n        ];\n    },\n    isDifferentiable: function() {\n        if (!this.previousSegment) return false;\n        var start = this.start;\n        var control1 = this.controlPoint1;\n        var control2 = this.controlPoint2;\n        var end = this.end;\n        return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));\n    },\n    round: function(precision) {\n        this.controlPoint1.round(precision);\n        this.controlPoint2.round(precision);\n        this.end.round(precision);\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        this.controlPoint1.scale(sx, sy, origin);\n        this.controlPoint2.scale(sx, sy, origin);\n        this.end.scale(sx, sy, origin);\n        return this;\n    },\n    serialize: function() {\n        var c1 = this.controlPoint1;\n        var c2 = this.controlPoint2;\n        var end = this.end;\n        return this.type + \" \" + c1.x + \" \" + c1.y + \" \" + c2.x + \" \" + c2.y + \" \" + end.x + \" \" + end.y;\n    },\n    toString: function() {\n        return this.type + \" \" + this.start + \" \" + this.controlPoint1 + \" \" + this.controlPoint2 + \" \" + this.end;\n    },\n    translate: function(tx, ty) {\n        this.controlPoint1.translate(tx, ty);\n        this.controlPoint2.translate(tx, ty);\n        this.end.translate(tx, ty);\n        return this;\n    }\n};\nObject.defineProperty(curvetoPrototype, \"type\", {\n    configurable: true,\n    enumerable: true,\n    value: \"C\"\n});\nCurveto.prototype = (0,_extend_mjs__WEBPACK_IMPORTED_MODULE_6__.extend)(segmentPrototype, _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve.prototype, curvetoPrototype);\nvar Moveto = function() {\n    var args = [];\n    var n = arguments.length;\n    for(var i = 0; i < n; i++){\n        args.push(arguments[i]);\n    }\n    if (!(this instanceof Moveto)) {\n        return applyToNew(Moveto, args);\n    }\n    if (n === 0) {\n        throw new Error(\"Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (none provided).\");\n    }\n    var outputArray;\n    if (args[0] instanceof _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line) {\n        if (n === 1) {\n            this.end = args[0].end.clone();\n            return this;\n        } else {\n            throw new Error(\"Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (\" + n + \" lines provided).\");\n        }\n    } else if (args[0] instanceof _curve_mjs__WEBPACK_IMPORTED_MODULE_1__.Curve) {\n        if (n === 1) {\n            this.end = args[0].end.clone();\n            return this;\n        } else {\n            throw new Error(\"Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (\" + n + \" curves provided).\");\n        }\n    } else if (typeof args[0] === \"string\" || typeof args[0] === \"number\") {\n        if (n === 2) {\n            this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(+args[0], +args[1]);\n            return this;\n        } else if (n < 2) {\n            throw new Error(\"Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (\" + n + \" coordinates provided).\");\n        } else {\n            var segmentCoords;\n            outputArray = [];\n            for(i = 0; i < n; i += 2){\n                segmentCoords = args.slice(i, i + 2); // will send one coord if args.length not divisible by 2\n                if (i === 0) outputArray.push(applyToNew(Moveto, segmentCoords));\n                else outputArray.push(applyToNew(Lineto, segmentCoords));\n            }\n            return outputArray;\n        }\n    } else {\n        if (n === 1) {\n            this.end = new _point_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(args[0]);\n            return this;\n        } else {\n            var segmentPoint;\n            outputArray = [];\n            for(i = 0; i < n; i += 1){\n                segmentPoint = args[i];\n                if (i === 0) outputArray.push(new Moveto(segmentPoint));\n                else outputArray.push(new Lineto(segmentPoint));\n            }\n            return outputArray;\n        }\n    }\n};\nvar movetoPrototype = {\n    bbox: function() {\n        return null;\n    },\n    clone: function() {\n        return new Moveto(this.end);\n    },\n    closestPoint: function() {\n        return this.end.clone();\n    },\n    closestPointNormalizedLength: function() {\n        return 0;\n    },\n    closestPointLength: function() {\n        return 0;\n    },\n    closestPointT: function() {\n        return 1;\n    },\n    closestPointTangent: function() {\n        return null;\n    },\n    divideAt: function() {\n        return [\n            this.clone(),\n            this.clone()\n        ];\n    },\n    divideAtLength: function() {\n        return [\n            this.clone(),\n            this.clone()\n        ];\n    },\n    equals: function(m) {\n        return this.end.equals(m.end);\n    },\n    getSubdivisions: function() {\n        return [];\n    },\n    isDifferentiable: function() {\n        return false;\n    },\n    isSubpathStart: true,\n    isVisible: false,\n    length: function() {\n        return 0;\n    },\n    lengthAtT: function() {\n        return 0;\n    },\n    pointAt: function() {\n        return this.end.clone();\n    },\n    pointAtLength: function() {\n        return this.end.clone();\n    },\n    pointAtT: function() {\n        return this.end.clone();\n    },\n    round: function(precision) {\n        this.end.round(precision);\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        this.end.scale(sx, sy, origin);\n        return this;\n    },\n    serialize: function() {\n        var end = this.end;\n        return this.type + \" \" + end.x + \" \" + end.y;\n    },\n    tangentAt: function() {\n        return null;\n    },\n    tangentAtLength: function() {\n        return null;\n    },\n    tangentAtT: function() {\n        return null;\n    },\n    toString: function() {\n        return this.type + \" \" + this.end;\n    },\n    translate: function(tx, ty) {\n        this.end.translate(tx, ty);\n        return this;\n    }\n};\nObject.defineProperty(movetoPrototype, \"start\", {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        throw new Error(\"Illegal access. Moveto segments should not need a start property.\");\n    }\n});\nObject.defineProperty(movetoPrototype, \"type\", {\n    configurable: true,\n    enumerable: true,\n    value: \"M\"\n});\nMoveto.prototype = (0,_extend_mjs__WEBPACK_IMPORTED_MODULE_6__.extend)(segmentPrototype, movetoPrototype); // does not inherit from any other geometry object\nvar Closepath = function() {\n    var args = [];\n    var n = arguments.length;\n    for(var i = 0; i < n; i++){\n        args.push(arguments[i]);\n    }\n    if (!(this instanceof Closepath)) {\n        return applyToNew(Closepath, args);\n    }\n    if (n > 0) {\n        throw new Error(\"Closepath constructor expects no arguments.\");\n    }\n    return this;\n};\nvar closepathPrototype = {\n    clone: function() {\n        return new Closepath();\n    },\n    divideAt: function(ratio) {\n        var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(this.start, this.end);\n        var divided = line.divideAt(ratio);\n        return [\n            // if we didn't actually cut into the segment, first divided part can stay as Z\n            divided[1].isDifferentiable() ? new Lineto(divided[0]) : this.clone(),\n            new Lineto(divided[1])\n        ];\n    },\n    divideAtLength: function(length) {\n        var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(this.start, this.end);\n        var divided = line.divideAtLength(length);\n        return [\n            // if we didn't actually cut into the segment, first divided part can stay as Z\n            divided[1].isDifferentiable() ? new Lineto(divided[0]) : this.clone(),\n            new Lineto(divided[1])\n        ];\n    },\n    getSubdivisions: function() {\n        return [];\n    },\n    isDifferentiable: function() {\n        if (!this.previousSegment || !this.subpathStartSegment) return false;\n        return !this.start.equals(this.end);\n    },\n    round: function() {\n        return this;\n    },\n    scale: function() {\n        return this;\n    },\n    serialize: function() {\n        return this.type;\n    },\n    toString: function() {\n        return this.type + \" \" + this.start + \" \" + this.end;\n    },\n    translate: function() {\n        return this;\n    }\n};\nObject.defineProperty(closepathPrototype, \"end\", {\n    // get a reference to the end point of subpath start segment\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        if (!this.subpathStartSegment) throw new Error(\"Missing subpath start segment. (This segment needs a subpath start segment (e.g. Moveto); OR segment has not yet been added to a path.)\");\n        return this.subpathStartSegment.end;\n    }\n});\nObject.defineProperty(closepathPrototype, \"type\", {\n    configurable: true,\n    enumerable: true,\n    value: \"Z\"\n});\nClosepath.prototype = (0,_extend_mjs__WEBPACK_IMPORTED_MODULE_6__.extend)(segmentPrototype, _line_mjs__WEBPACK_IMPORTED_MODULE_0__.Line.prototype, closepathPrototype);\nvar segmentTypes = Path.segmentTypes = {\n    L: Lineto,\n    C: Curveto,\n    M: Moveto,\n    Z: Closepath,\n    z: Closepath\n};\nPath.regexSupportedData = new RegExp(\"^[\\\\s\\\\d\" + Object.keys(segmentTypes).join(\"\") + \",.]*$\");\nPath.isDataSupported = function(data) {\n    if (typeof data !== \"string\") return false;\n    return this.regexSupportedData.test(data);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/path.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/point.mjs":
/*!**********************************************!*\
  !*** ./node_modules/jointjs/src/g/point.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   point: () => (/* binding */ point)\n/* harmony export */ });\n/* harmony import */ var _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometry.helpers.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _line_bearing_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line.bearing.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.bearing.mjs\");\n/* harmony import */ var _line_squaredLength_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./line.squaredLength.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.squaredLength.mjs\");\n/* harmony import */ var _line_length_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./line.length.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.length.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n/*\n    Point is the most basic object consisting of x/y coordinate.\n\n    Possible instantiations are:\n    * `Point(10, 20)`\n    * `new Point(10, 20)`\n    * `Point('10 20')`\n    * `Point(Point(10, 20))`\n*/ \n\n\n\n\nconst { abs, cos, sin, sqrt, min, max, atan2, round, pow, PI } = Math;\nconst Point = function(x, y) {\n    if (!(this instanceof Point)) {\n        return new Point(x, y);\n    }\n    if (typeof x === \"string\") {\n        var xy = x.split(x.indexOf(\"@\") === -1 ? \" \" : \"@\");\n        x = parseFloat(xy[0]);\n        y = parseFloat(xy[1]);\n    } else if (Object(x) === x) {\n        y = x.y;\n        x = x.x;\n    }\n    this.x = x === undefined ? 0 : x;\n    this.y = y === undefined ? 0 : y;\n};\n// Alternative constructor, from polar coordinates.\n// @param {number} Distance.\n// @param {number} Angle in radians.\n// @param {point} [optional] Origin.\nPoint.fromPolar = function(distance, angle, origin) {\n    origin = new Point(origin);\n    var x = abs(distance * cos(angle));\n    var y = abs(distance * sin(angle));\n    var deg = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.normalizeAngle)((0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toDeg)(angle));\n    if (deg < 90) {\n        y = -y;\n    } else if (deg < 180) {\n        x = -x;\n        y = -y;\n    } else if (deg < 270) {\n        x = -x;\n    }\n    return new Point(origin.x + x, origin.y + y);\n};\n// Create a point with random coordinates that fall into the range `[x1, x2]` and `[y1, y2]`.\nPoint.random = function(x1, x2, y1, y2) {\n    return new Point((0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.random)(x1, x2), (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.random)(y1, y2));\n};\nPoint.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_1__.types.Point,\n    chooseClosest: function(points) {\n        var n = points.length;\n        if (n === 1) return new Point(points[0]);\n        var closest = null;\n        var minSqrDistance = Infinity;\n        for(var i = 0; i < n; i++){\n            var p = new Point(points[i]);\n            var sqrDistance = this.squaredDistance(p);\n            if (sqrDistance < minSqrDistance) {\n                closest = p;\n                minSqrDistance = sqrDistance;\n            }\n        }\n        return closest;\n    },\n    // If point lies outside rectangle `r`, return the nearest point on the boundary of rect `r`,\n    // otherwise return point itself.\n    // (see Squeak Smalltalk, Point>>adhereTo:)\n    adhereToRect: function(r) {\n        if (r.containsPoint(this)) {\n            return this;\n        }\n        this.x = min(max(this.x, r.x), r.x + r.width);\n        this.y = min(max(this.y, r.y), r.y + r.height);\n        return this;\n    },\n    // Compute the angle between vector from me to p1 and the vector from me to p2.\n    // ordering of points p1 and p2 is important!\n    // theta function's angle convention:\n    // returns angles between 0 and 180 when the angle is counterclockwise\n    // returns angles between 180 and 360 to convert clockwise angles into counterclockwise ones\n    // returns NaN if any of the points p1, p2 is coincident with this point\n    angleBetween: function(p1, p2) {\n        var angleBetween = this.equals(p1) || this.equals(p2) ? NaN : this.theta(p2) - this.theta(p1);\n        if (angleBetween < 0) {\n            angleBetween += 360; // correction to keep angleBetween between 0 and 360\n        }\n        return angleBetween;\n    },\n    // Return the bearing between me and the given point.\n    bearing: function(point) {\n        return (0,_line_bearing_mjs__WEBPACK_IMPORTED_MODULE_2__.bearing)(this, point);\n    },\n    // Returns change in angle from my previous position (-dx, -dy) to my new position\n    // relative to ref point.\n    changeInAngle: function(dx, dy, ref) {\n        // Revert the translation and measure the change in angle around x-axis.\n        return this.clone().offset(-dx, -dy).theta(ref) - this.theta(ref);\n    },\n    clone: function() {\n        return new Point(this);\n    },\n    // Returns the cross product of this point relative to two other points\n    // this point is the common point\n    // point p1 lies on the first vector, point p2 lies on the second vector\n    // watch out for the ordering of points p1 and p2!\n    // positive result indicates a clockwise (\"right\") turn from first to second vector\n    // negative result indicates a counterclockwise (\"left\") turn from first to second vector\n    // zero indicates that the first and second vector are collinear\n    // note that the above directions are reversed from the usual answer on the Internet\n    // that is because we are in a left-handed coord system (because the y-axis points downward)\n    cross: function(p1, p2) {\n        return p1 && p2 ? (p2.x - this.x) * (p1.y - this.y) - (p2.y - this.y) * (p1.x - this.x) : NaN;\n    },\n    difference: function(dx, dy) {\n        if (Object(dx) === dx) {\n            dy = dx.y;\n            dx = dx.x;\n        }\n        return new Point(this.x - (dx || 0), this.y - (dy || 0));\n    },\n    // Returns distance between me and point `p`.\n    distance: function(p) {\n        return (0,_line_length_mjs__WEBPACK_IMPORTED_MODULE_3__.length)(this, p);\n    },\n    // Returns the dot product of this point with given other point\n    dot: function(p) {\n        return p ? this.x * p.x + this.y * p.y : NaN;\n    },\n    equals: function(p) {\n        return !!p && this.x === p.x && this.y === p.y;\n    },\n    // Linear interpolation\n    lerp: function(p, t) {\n        var x = this.x;\n        var y = this.y;\n        return new Point((1 - t) * x + t * p.x, (1 - t) * y + t * p.y);\n    },\n    magnitude: function() {\n        return sqrt(this.x * this.x + this.y * this.y) || 0.01;\n    },\n    // Returns a manhattan (taxi-cab) distance between me and point `p`.\n    manhattanDistance: function(p) {\n        return abs(p.x - this.x) + abs(p.y - this.y);\n    },\n    // Move point on line starting from ref ending at me by\n    // distance distance.\n    move: function(ref, distance) {\n        var theta = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad)(new Point(ref).theta(this));\n        var offset = this.offset(cos(theta) * distance, -sin(theta) * distance);\n        return offset;\n    },\n    // Scales x and y such that the distance between the point and the origin (0,0) is equal to the given length.\n    normalize: function(length) {\n        var scale = (length || 1) / this.magnitude();\n        return this.scale(scale, scale);\n    },\n    // Offset me by the specified amount.\n    offset: function(dx, dy) {\n        if (Object(dx) === dx) {\n            dy = dx.y;\n            dx = dx.x;\n        }\n        this.x += dx || 0;\n        this.y += dy || 0;\n        return this;\n    },\n    // Returns a point that is the reflection of me with\n    // the center of inversion in ref point.\n    reflection: function(ref) {\n        return new Point(ref).move(this, this.distance(ref));\n    },\n    // Rotate point by angle around origin.\n    // Angle is flipped because this is a left-handed coord system (y-axis points downward).\n    rotate: function(origin, angle) {\n        if (angle === 0) return this;\n        origin = origin || new Point(0, 0);\n        angle = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad)((0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.normalizeAngle)(-angle));\n        var cosAngle = cos(angle);\n        var sinAngle = sin(angle);\n        var x = cosAngle * (this.x - origin.x) - sinAngle * (this.y - origin.y) + origin.x;\n        var y = sinAngle * (this.x - origin.x) + cosAngle * (this.y - origin.y) + origin.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n    round: function(precision) {\n        let f = 1; // case 0\n        if (precision) {\n            switch(precision){\n                case 1:\n                    f = 10;\n                    break;\n                case 2:\n                    f = 100;\n                    break;\n                case 3:\n                    f = 1000;\n                    break;\n                default:\n                    f = pow(10, precision);\n                    break;\n            }\n        }\n        this.x = round(this.x * f) / f;\n        this.y = round(this.y * f) / f;\n        return this;\n    },\n    // Scale point with origin.\n    scale: function(sx, sy, origin) {\n        origin = origin && new Point(origin) || new Point(0, 0);\n        this.x = origin.x + sx * (this.x - origin.x);\n        this.y = origin.y + sy * (this.y - origin.y);\n        return this;\n    },\n    snapToGrid: function(gx, gy) {\n        this.x = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.snapToGrid)(this.x, gx);\n        this.y = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.snapToGrid)(this.y, gy || gx);\n        return this;\n    },\n    squaredDistance: function(p) {\n        return (0,_line_squaredLength_mjs__WEBPACK_IMPORTED_MODULE_4__.squaredLength)(this, p);\n    },\n    // Compute the angle between me and `p` and the x axis.\n    // (cartesian-to-polar coordinates conversion)\n    // Return theta angle in degrees.\n    theta: function(p) {\n        p = new Point(p);\n        // Invert the y-axis.\n        var y = -(p.y - this.y);\n        var x = p.x - this.x;\n        var rad = atan2(y, x); // defined for all 0 corner cases\n        // Correction for III. and IV. quadrant.\n        if (rad < 0) {\n            rad = 2 * PI + rad;\n        }\n        return 180 * rad / PI;\n    },\n    toJSON: function() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    },\n    // Converts rectangular to polar coordinates.\n    // An origin can be specified, otherwise it's 0@0.\n    toPolar: function(o) {\n        o = o && new Point(o) || new Point(0, 0);\n        var x = this.x;\n        var y = this.y;\n        this.x = sqrt((x - o.x) * (x - o.x) + (y - o.y) * (y - o.y)); // r\n        this.y = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__.toRad)(o.theta(new Point(x, y)));\n        return this;\n    },\n    toString: function() {\n        return this.x + \"@\" + this.y;\n    },\n    serialize: function() {\n        return this.x + \",\" + this.y;\n    },\n    update: function(x, y) {\n        if (Object(x) === x) {\n            y = x.y;\n            x = x.x;\n        }\n        this.x = x || 0;\n        this.y = y || 0;\n        return this;\n    },\n    // Compute the angle between the vector from 0,0 to me and the vector from 0,0 to p.\n    // Returns NaN if p is at 0,0.\n    vectorAngle: function(p) {\n        var zero = new Point(0, 0);\n        return zero.angleBetween(this, p);\n    }\n};\nPoint.prototype.translate = Point.prototype.offset;\n// For backwards compatibility:\nconst point = Point;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/point.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/points.mjs":
/*!***********************************************!*\
  !*** ./node_modules/jointjs/src/g/points.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clonePoints: () => (/* binding */ clonePoints),\n/* harmony export */   convexHull: () => (/* binding */ convexHull),\n/* harmony export */   parsePoints: () => (/* binding */ parsePoints)\n/* harmony export */ });\nfunction parsePoints(svgString) {\n    // Step 1: Discard surrounding spaces\n    const trimmedString = svgString.trim();\n    if (trimmedString === \"\") return [];\n    const points = [];\n    // Step 2: Split at commas (+ their surrounding spaces) or at multiple spaces\n    // ReDoS mitigation: Have an anchor at the beginning of each alternation\n    // Note: This doesn't simplify double (or more) commas - causes empty coords\n    // This regex is used by `split()`, so it doesn't need to use /g\n    const coords = trimmedString.split(/\\b\\s*,\\s*|,\\s*|\\s+/);\n    const numCoords = coords.length;\n    for(let i = 0; i < numCoords; i += 2){\n        // Step 3: Convert each coord to number\n        // Note: If the coord cannot be converted to a number, it will be `NaN`\n        // Note: If the coord is empty (\"\", e.g. from \",,\" input), it will be `0`\n        // Note: If we end up with an odd number of coords, the last point's second coord will be `NaN`\n        points.push({\n            x: +coords[i],\n            y: +coords[i + 1]\n        });\n    }\n    return points;\n}\nfunction clonePoints(points) {\n    const numPoints = points.length;\n    if (numPoints === 0) return [];\n    const newPoints = [];\n    for(let i = 0; i < numPoints; i++){\n        const point = points[i].clone();\n        newPoints.push(point);\n    }\n    return newPoints;\n}\n// Returns a convex-hull polyline from this polyline.\n// Implements the Graham scan (https://en.wikipedia.org/wiki/Graham_scan).\n// Output polyline starts at the first element of the original polyline that is on the hull, then continues clockwise.\n// Minimal polyline is found (only vertices of the hull are reported, no collinear points).\nfunction convexHull(points) {\n    const { abs } = Math;\n    var i;\n    var n;\n    var numPoints = points.length;\n    if (numPoints === 0) return []; // if points array is empty\n    // step 1: find the starting point - point with the lowest y (if equality, highest x)\n    var startPoint;\n    for(i = 0; i < numPoints; i++){\n        if (startPoint === undefined) {\n            // if this is the first point we see, set it as start point\n            startPoint = points[i];\n        } else if (points[i].y < startPoint.y) {\n            // start point should have lowest y from all points\n            startPoint = points[i];\n        } else if (points[i].y === startPoint.y && points[i].x > startPoint.x) {\n            // if two points have the lowest y, choose the one that has highest x\n            // there are no points to the right of startPoint - no ambiguity about theta 0\n            // if there are several coincident start point candidates, first one is reported\n            startPoint = points[i];\n        }\n    }\n    // step 2: sort the list of points\n    // sorting by angle between line from startPoint to point and the x-axis (theta)\n    // step 2a: create the point records = [point, originalIndex, angle]\n    var sortedPointRecords = [];\n    for(i = 0; i < numPoints; i++){\n        var angle = startPoint.theta(points[i]);\n        if (angle === 0) {\n            angle = 360; // give highest angle to start point\n        // the start point will end up at end of sorted list\n        // the start point will end up at beginning of hull points list\n        }\n        var entry = [\n            points[i],\n            i,\n            angle\n        ];\n        sortedPointRecords.push(entry);\n    }\n    // step 2b: sort the list in place\n    sortedPointRecords.sort(function(record1, record2) {\n        // returning a negative number here sorts record1 before record2\n        // if first angle is smaller than second, first angle should come before second\n        var sortOutput = record1[2] - record2[2]; // negative if first angle smaller\n        if (sortOutput === 0) {\n            // if the two angles are equal, sort by originalIndex\n            sortOutput = record2[1] - record1[1]; // negative if first index larger\n        // coincident points will be sorted in reverse-numerical order\n        // so the coincident points with lower original index will be considered first\n        }\n        return sortOutput;\n    });\n    // step 2c: duplicate start record from the top of the stack to the bottom of the stack\n    if (sortedPointRecords.length > 2) {\n        var startPointRecord = sortedPointRecords[sortedPointRecords.length - 1];\n        sortedPointRecords.unshift(startPointRecord);\n    }\n    // step 3a: go through sorted points in order and find those with right turns\n    // we want to get our results in clockwise order\n    var insidePoints = {}; // dictionary of points with left turns - cannot be on the hull\n    var hullPointRecords = []; // stack of records with right turns - hull point candidates\n    var currentPointRecord;\n    var currentPoint;\n    var lastHullPointRecord;\n    var lastHullPoint;\n    var secondLastHullPointRecord;\n    var secondLastHullPoint;\n    while(sortedPointRecords.length !== 0){\n        currentPointRecord = sortedPointRecords.pop();\n        currentPoint = currentPointRecord[0];\n        // check if point has already been discarded\n        // keys for insidePoints are stored in the form 'point.x@point.y@@originalIndex'\n        if (insidePoints.hasOwnProperty(currentPointRecord[0] + \"@@\" + currentPointRecord[1])) {\n            continue;\n        }\n        var correctTurnFound = false;\n        while(!correctTurnFound){\n            if (hullPointRecords.length < 2) {\n                // not enough points for comparison, just add current point\n                hullPointRecords.push(currentPointRecord);\n                correctTurnFound = true;\n            } else {\n                lastHullPointRecord = hullPointRecords.pop();\n                lastHullPoint = lastHullPointRecord[0];\n                secondLastHullPointRecord = hullPointRecords.pop();\n                secondLastHullPoint = secondLastHullPointRecord[0];\n                var crossProduct = secondLastHullPoint.cross(lastHullPoint, currentPoint);\n                if (crossProduct < 0) {\n                    // found a right turn\n                    hullPointRecords.push(secondLastHullPointRecord);\n                    hullPointRecords.push(lastHullPointRecord);\n                    hullPointRecords.push(currentPointRecord);\n                    correctTurnFound = true;\n                } else if (crossProduct === 0) {\n                    // the three points are collinear\n                    // three options:\n                    // there may be a 180 or 0 degree angle at lastHullPoint\n                    // or two of the three points are coincident\n                    var THRESHOLD = 1e-10; // we have to take rounding errors into account\n                    var angleBetween = lastHullPoint.angleBetween(secondLastHullPoint, currentPoint);\n                    if (abs(angleBetween - 180) < THRESHOLD) {\n                        // if the cross product is 0 because the angle is 180 degrees\n                        // discard last hull point (add to insidePoints)\n                        //insidePoints.unshift(lastHullPoint);\n                        insidePoints[lastHullPointRecord[0] + \"@@\" + lastHullPointRecord[1]] = lastHullPoint;\n                        // reenter second-to-last hull point (will be last at next iter)\n                        hullPointRecords.push(secondLastHullPointRecord);\n                    // do not do anything with current point\n                    // correct turn not found\n                    } else if (lastHullPoint.equals(currentPoint) || secondLastHullPoint.equals(lastHullPoint)) {\n                        // if the cross product is 0 because two points are the same\n                        // discard last hull point (add to insidePoints)\n                        //insidePoints.unshift(lastHullPoint);\n                        insidePoints[lastHullPointRecord[0] + \"@@\" + lastHullPointRecord[1]] = lastHullPoint;\n                        // reenter second-to-last hull point (will be last at next iter)\n                        hullPointRecords.push(secondLastHullPointRecord);\n                    // do not do anything with current point\n                    // correct turn not found\n                    } else if (abs((angleBetween + 1) % 360 - 1) < THRESHOLD) {\n                        // if the cross product is 0 because the angle is 0 degrees\n                        // remove last hull point from hull BUT do not discard it\n                        // reenter second-to-last hull point (will be last at next iter)\n                        hullPointRecords.push(secondLastHullPointRecord);\n                        // put last hull point back into the sorted point records list\n                        sortedPointRecords.push(lastHullPointRecord);\n                    // we are switching the order of the 0deg and 180deg points\n                    // correct turn not found\n                    }\n                } else {\n                    // found a left turn\n                    // discard last hull point (add to insidePoints)\n                    //insidePoints.unshift(lastHullPoint);\n                    insidePoints[lastHullPointRecord[0] + \"@@\" + lastHullPointRecord[1]] = lastHullPoint;\n                    // reenter second-to-last hull point (will be last at next iter of loop)\n                    hullPointRecords.push(secondLastHullPointRecord);\n                // do not do anything with current point\n                // correct turn not found\n                }\n            }\n        }\n    }\n    // at this point, hullPointRecords contains the output points in clockwise order\n    // the points start with lowest-y,highest-x startPoint, and end at the same point\n    // step 3b: remove duplicated startPointRecord from the end of the array\n    if (hullPointRecords.length > 2) {\n        hullPointRecords.pop();\n    }\n    // step 4: find the lowest originalIndex record and put it at the beginning of hull\n    var lowestHullIndex; // the lowest originalIndex on the hull\n    var indexOfLowestHullIndexRecord = -1; // the index of the record with lowestHullIndex\n    n = hullPointRecords.length;\n    for(i = 0; i < n; i++){\n        var currentHullIndex = hullPointRecords[i][1];\n        if (lowestHullIndex === undefined || currentHullIndex < lowestHullIndex) {\n            lowestHullIndex = currentHullIndex;\n            indexOfLowestHullIndexRecord = i;\n        }\n    }\n    var hullPointRecordsReordered = [];\n    if (indexOfLowestHullIndexRecord > 0) {\n        var newFirstChunk = hullPointRecords.slice(indexOfLowestHullIndexRecord);\n        var newSecondChunk = hullPointRecords.slice(0, indexOfLowestHullIndexRecord);\n        hullPointRecordsReordered = newFirstChunk.concat(newSecondChunk);\n    } else {\n        hullPointRecordsReordered = hullPointRecords;\n    }\n    var hullPoints = [];\n    n = hullPointRecordsReordered.length;\n    for(i = 0; i < n; i++){\n        hullPoints.push(hullPointRecordsReordered[i][0]);\n    }\n    return hullPoints;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/points.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/polygon.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/g/polygon.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Polygon: () => (/* binding */ Polygon)\n/* harmony export */ });\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _polyline_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polyline.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _extend_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extend.mjs */ \"(ssr)/./node_modules/jointjs/src/g/extend.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n/* harmony import */ var _points_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./points.mjs */ \"(ssr)/./node_modules/jointjs/src/g/points.mjs\");\n\n\n\n\n\nconst Polygon = function(points) {\n    if (!(this instanceof Polygon)) {\n        return new Polygon(points);\n    }\n    if (typeof points === \"string\") {\n        return new Polygon.parse(points);\n    }\n    this.points = Array.isArray(points) ? points.map(_point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point) : [];\n};\nPolygon.parse = function(svgString) {\n    return new Polygon((0,_points_mjs__WEBPACK_IMPORTED_MODULE_1__.parsePoints)(svgString));\n};\nPolygon.fromRect = function(rect) {\n    return new Polygon([\n        rect.topLeft(),\n        rect.topRight(),\n        rect.bottomRight(),\n        rect.bottomLeft()\n    ]);\n};\nPolygon.prototype = (0,_extend_mjs__WEBPACK_IMPORTED_MODULE_2__.extend)(_polyline_mjs__WEBPACK_IMPORTED_MODULE_3__.Polyline.prototype, {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_4__.types.Polygon,\n    clone: function() {\n        return new Polygon((0,_points_mjs__WEBPACK_IMPORTED_MODULE_1__.clonePoints)(this.points));\n    },\n    convexHull: function() {\n        return new Polygon((0,_points_mjs__WEBPACK_IMPORTED_MODULE_1__.convexHull)(this.points));\n    },\n    lengthPoints: function() {\n        const { start, end, points } = this;\n        if (points.length <= 1 || start.equals(end)) return points;\n        return [\n            ...points,\n            start.clone()\n        ];\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy9wb2x5Z29uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0M7QUFDTTtBQUNKO0FBQ0Y7QUFDZ0M7QUFFN0QsTUFBTU8sVUFBVSxTQUFTQyxNQUFNO0lBRWxDLElBQUksQ0FBRSxLQUFJLFlBQVlELE9BQU0sR0FBSTtRQUM1QixPQUFPLElBQUlBLFFBQVFDO0lBQ3ZCO0lBRUEsSUFBSSxPQUFPQSxXQUFXLFVBQVU7UUFDNUIsT0FBTyxJQUFJRCxRQUFRRSxLQUFLLENBQUNEO0lBQzdCO0lBRUEsSUFBSSxDQUFDQSxNQUFNLEdBQUlFLE1BQU1DLE9BQU8sQ0FBQ0gsVUFBVUEsT0FBT0ksR0FBRyxDQUFDWiw2Q0FBS0EsSUFBSSxFQUFFO0FBQ2pFLEVBQUU7QUFFRk8sUUFBUUUsS0FBSyxHQUFHLFNBQVNJLFNBQVM7SUFDOUIsT0FBTyxJQUFJTixRQUFRRix3REFBV0EsQ0FBQ1E7QUFDbkM7QUFFQU4sUUFBUU8sUUFBUSxHQUFHLFNBQVNDLElBQUk7SUFDNUIsT0FBTyxJQUFJUixRQUFRO1FBQ2ZRLEtBQUtDLE9BQU87UUFDWkQsS0FBS0UsUUFBUTtRQUNiRixLQUFLRyxXQUFXO1FBQ2hCSCxLQUFLSSxVQUFVO0tBQ2xCO0FBQ0w7QUFFQVosUUFBUWEsU0FBUyxHQUFHbEIsbURBQU1BLENBQUNELG1EQUFRQSxDQUFDbUIsU0FBUyxFQUFFO0lBRTNDQyxNQUFNbEIsNkNBQUtBLENBQUNJLE9BQU87SUFFbkJlLE9BQU87UUFDSCxPQUFPLElBQUlmLFFBQVFILHdEQUFXQSxDQUFDLElBQUksQ0FBQ0ksTUFBTTtJQUM5QztJQUVBRixZQUFZO1FBQ1IsT0FBTyxJQUFJQyxRQUFRRCx1REFBVUEsQ0FBQyxJQUFJLENBQUNFLE1BQU07SUFDN0M7SUFFQWUsY0FBYztRQUNWLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVqQixNQUFNLEVBQUUsR0FBRyxJQUFJO1FBQ25DLElBQUlBLE9BQU9rQixNQUFNLElBQUksS0FBS0YsTUFBTUcsTUFBTSxDQUFDRixNQUFNLE9BQU9qQjtRQUNwRCxPQUFPO2VBQUlBO1lBQVFnQixNQUFNRixLQUFLO1NBQUc7SUFDckM7QUFFSiIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL2cvcG9seWdvbi5tanM/ZjkyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vcG9pbnQubWpzJztcbmltcG9ydCB7IFBvbHlsaW5lIH0gZnJvbSAnLi9wb2x5bGluZS5tanMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi9leHRlbmQubWpzJztcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAnLi90eXBlcy5tanMnO1xuaW1wb3J0IHsgY2xvbmVQb2ludHMsIHBhcnNlUG9pbnRzLCBjb252ZXhIdWxsIH0gZnJvbSAnLi9wb2ludHMubWpzJztcblxuZXhwb3J0IGNvbnN0IFBvbHlnb24gPSBmdW5jdGlvbihwb2ludHMpIHtcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQb2x5Z29uKSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvbHlnb24ocG9pbnRzKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBvaW50cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uLnBhcnNlKHBvaW50cyk7XG4gICAgfVxuXG4gICAgdGhpcy5wb2ludHMgPSAoQXJyYXkuaXNBcnJheShwb2ludHMpID8gcG9pbnRzLm1hcChQb2ludCkgOiBbXSk7XG59O1xuXG5Qb2x5Z29uLnBhcnNlID0gZnVuY3Rpb24oc3ZnU3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQb2x5Z29uKHBhcnNlUG9pbnRzKHN2Z1N0cmluZykpO1xufTtcblxuUG9seWdvbi5mcm9tUmVjdCA9IGZ1bmN0aW9uKHJlY3QpIHtcbiAgICByZXR1cm4gbmV3IFBvbHlnb24oW1xuICAgICAgICByZWN0LnRvcExlZnQoKSxcbiAgICAgICAgcmVjdC50b3BSaWdodCgpLFxuICAgICAgICByZWN0LmJvdHRvbVJpZ2h0KCksXG4gICAgICAgIHJlY3QuYm90dG9tTGVmdCgpXG4gICAgXSk7XG59O1xuXG5Qb2x5Z29uLnByb3RvdHlwZSA9IGV4dGVuZChQb2x5bGluZS5wcm90b3R5cGUsIHtcblxuICAgIHR5cGU6IHR5cGVzLlBvbHlnb24sXG5cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9seWdvbihjbG9uZVBvaW50cyh0aGlzLnBvaW50cykpO1xuICAgIH0sXG5cbiAgICBjb252ZXhIdWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uKGNvbnZleEh1bGwodGhpcy5wb2ludHMpKTtcbiAgICB9LFxuXG4gICAgbGVuZ3RoUG9pbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kLCBwb2ludHMgfSA9IHRoaXM7XG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoIDw9IDEgfHwgc3RhcnQuZXF1YWxzKGVuZCkpIHJldHVybiBwb2ludHM7XG4gICAgICAgIHJldHVybiBbLi4ucG9pbnRzLCBzdGFydC5jbG9uZSgpXTtcbiAgICB9XG5cbn0pO1xuIl0sIm5hbWVzIjpbIlBvaW50IiwiUG9seWxpbmUiLCJleHRlbmQiLCJ0eXBlcyIsImNsb25lUG9pbnRzIiwicGFyc2VQb2ludHMiLCJjb252ZXhIdWxsIiwiUG9seWdvbiIsInBvaW50cyIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwic3ZnU3RyaW5nIiwiZnJvbVJlY3QiLCJyZWN0IiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tUmlnaHQiLCJib3R0b21MZWZ0IiwicHJvdG90eXBlIiwidHlwZSIsImNsb25lIiwibGVuZ3RoUG9pbnRzIiwic3RhcnQiLCJlbmQiLCJsZW5ndGgiLCJlcXVhbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/polygon.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/polyline.mjs":
/*!*************************************************!*\
  !*** ./node_modules/jointjs/src/g/polyline.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Polyline: () => (/* binding */ Polyline)\n/* harmony export */ });\n/* harmony import */ var _rect_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rect.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./line.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n/* harmony import */ var _points_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./points.mjs */ \"(ssr)/./node_modules/jointjs/src/g/points.mjs\");\n\n\n\n\n\nconst Polyline = function(points) {\n    if (!(this instanceof Polyline)) {\n        return new Polyline(points);\n    }\n    if (typeof points === \"string\") {\n        return new Polyline.parse(points);\n    }\n    this.points = Array.isArray(points) ? points.map(_point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point) : [];\n};\nPolyline.parse = function(svgString) {\n    return new Polyline((0,_points_mjs__WEBPACK_IMPORTED_MODULE_1__.parsePoints)(svgString));\n};\nPolyline.fromRect = function(rect) {\n    return new Polyline([\n        rect.topLeft(),\n        rect.topRight(),\n        rect.bottomRight(),\n        rect.bottomLeft(),\n        rect.topLeft()\n    ]);\n};\nPolyline.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_2__.types.Polyline,\n    bbox: function() {\n        var x1 = Infinity;\n        var x2 = -Infinity;\n        var y1 = Infinity;\n        var y2 = -Infinity;\n        var points = this.points;\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        for(var i = 0; i < numPoints; i++){\n            var point = points[i];\n            var x = point.x;\n            var y = point.y;\n            if (x < x1) x1 = x;\n            if (x > x2) x2 = x;\n            if (y < y1) y1 = y;\n            if (y > y2) y2 = y;\n        }\n        return new _rect_mjs__WEBPACK_IMPORTED_MODULE_3__.Rect(x1, y1, x2 - x1, y2 - y1);\n    },\n    clone: function() {\n        return new Polyline((0,_points_mjs__WEBPACK_IMPORTED_MODULE_1__.clonePoints)(this.points));\n    },\n    closestPoint: function(p) {\n        var cpLength = this.closestPointLength(p);\n        return this.pointAtLength(cpLength);\n    },\n    closestPointLength: function(p) {\n        var points = this.lengthPoints();\n        var numPoints = points.length;\n        if (numPoints === 0) return 0; // if points array is empty\n        if (numPoints === 1) return 0; // if there is only one point\n        var cpLength;\n        var minSqrDistance = Infinity;\n        var length = 0;\n        var n = numPoints - 1;\n        for(var i = 0; i < n; i++){\n            var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(points[i], points[i + 1]);\n            var lineLength = line.length();\n            var cpNormalizedLength = line.closestPointNormalizedLength(p);\n            var cp = line.pointAt(cpNormalizedLength);\n            var sqrDistance = cp.squaredDistance(p);\n            if (sqrDistance < minSqrDistance) {\n                minSqrDistance = sqrDistance;\n                cpLength = length + cpNormalizedLength * lineLength;\n            }\n            length += lineLength;\n        }\n        return cpLength;\n    },\n    closestPointNormalizedLength: function(p) {\n        var cpLength = this.closestPointLength(p);\n        if (cpLength === 0) return 0; // shortcut\n        var length = this.length();\n        if (length === 0) return 0; // prevents division by zero\n        return cpLength / length;\n    },\n    closestPointTangent: function(p) {\n        var cpLength = this.closestPointLength(p);\n        return this.tangentAtLength(cpLength);\n    },\n    // Returns `true` if the area surrounded by the polyline contains the point `p`.\n    // Implements the even-odd SVG algorithm (self-intersections are \"outside\").\n    // (Uses horizontal rays to the right of `p` to look for intersections.)\n    // Closes open polylines (always imagines a final closing segment).\n    containsPoint: function(p) {\n        var points = this.points;\n        var numPoints = points.length;\n        if (numPoints === 0) return false; // shortcut (this polyline has no points)\n        var x = p.x;\n        var y = p.y;\n        // initialize a final closing segment by creating one from last-first points on polyline\n        var startIndex = numPoints - 1; // start of current polyline segment\n        var endIndex = 0; // end of current polyline segment\n        var numIntersections = 0;\n        var segment = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line();\n        var ray = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line();\n        var rayEnd = new _point_mjs__WEBPACK_IMPORTED_MODULE_0__.Point();\n        for(; endIndex < numPoints; endIndex++){\n            var start = points[startIndex];\n            var end = points[endIndex];\n            if (p.equals(start)) return true; // shortcut (`p` is a point on polyline)\n            // current polyline segment\n            segment.start = start;\n            segment.end = end;\n            if (segment.containsPoint(p)) return true; // shortcut (`p` lies on a polyline segment)\n            // do we have an intersection?\n            if (y <= start.y && y > end.y || y > start.y && y <= end.y) {\n                // this conditional branch IS NOT entered when `segment` is collinear/coincident with `ray`\n                // (when `y === start.y === end.y`)\n                // this conditional branch IS entered when `segment` touches `ray` at only one point\n                // (e.g. when `y === start.y !== end.y`)\n                // since this branch is entered again for the following segment, the two touches cancel out\n                var xDifference = start.x - x > end.x - x ? start.x - x : end.x - x;\n                if (xDifference >= 0) {\n                    // segment lies at least partially to the right of `p`\n                    rayEnd.x = x + xDifference;\n                    rayEnd.y = y; // right\n                    ray.start = p;\n                    ray.end = rayEnd;\n                    if (segment.intersect(ray)) {\n                        // an intersection was detected to the right of `p`\n                        numIntersections++;\n                    }\n                } // else: `segment` lies completely to the left of `p` (i.e. no intersection to the right)\n            }\n            // move to check the next polyline segment\n            startIndex = endIndex;\n        }\n        // returns `true` for odd numbers of intersections (even-odd algorithm)\n        return numIntersections % 2 === 1;\n    },\n    close: function() {\n        const { start, end, points } = this;\n        if (start && end && !start.equals(end)) {\n            points.push(start.clone());\n        }\n        return this;\n    },\n    lengthPoints: function() {\n        return this.points;\n    },\n    convexHull: function() {\n        return new Polyline((0,_points_mjs__WEBPACK_IMPORTED_MODULE_1__.convexHull)(this.points));\n    },\n    // Checks whether two polylines are exactly the same.\n    // If `p` is undefined or null, returns false.\n    equals: function(p) {\n        if (!p) return false;\n        var points = this.points;\n        var otherPoints = p.points;\n        var numPoints = points.length;\n        if (otherPoints.length !== numPoints) return false; // if the two polylines have different number of points, they cannot be equal\n        for(var i = 0; i < numPoints; i++){\n            var point = points[i];\n            var otherPoint = p.points[i];\n            // as soon as an inequality is found in points, return false\n            if (!point.equals(otherPoint)) return false;\n        }\n        // if no inequality found in points, return true\n        return true;\n    },\n    intersectionWithLine: function(l) {\n        var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(l);\n        var intersections = [];\n        var points = this.lengthPoints();\n        var l2 = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line();\n        for(var i = 0, n = points.length - 1; i < n; i++){\n            l2.start = points[i];\n            l2.end = points[i + 1];\n            var int = line.intersectionWithLine(l2);\n            if (int) intersections.push(int[0]);\n        }\n        return intersections.length > 0 ? intersections : null;\n    },\n    isDifferentiable: function() {\n        var points = this.points;\n        var numPoints = points.length;\n        if (numPoints === 0) return false;\n        var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line();\n        var n = numPoints - 1;\n        for(var i = 0; i < n; i++){\n            line.start = points[i];\n            line.end = points[i + 1];\n            // as soon as a differentiable line is found between two points, return true\n            if (line.isDifferentiable()) return true;\n        }\n        // if no differentiable line is found between pairs of points, return false\n        return false;\n    },\n    length: function() {\n        var points = this.lengthPoints();\n        var numPoints = points.length;\n        if (numPoints === 0) return 0; // if points array is empty\n        var length = 0;\n        var n = numPoints - 1;\n        for(var i = 0; i < n; i++){\n            length += points[i].distance(points[i + 1]);\n        }\n        return length;\n    },\n    pointAt: function(ratio) {\n        var points = this.lengthPoints();\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        if (numPoints === 1) return points[0].clone(); // if there is only one point\n        if (ratio <= 0) return points[0].clone();\n        if (ratio >= 1) return points[numPoints - 1].clone();\n        var polylineLength = this.length();\n        var length = polylineLength * ratio;\n        return this.pointAtLength(length);\n    },\n    pointAtLength: function(length) {\n        var points = this.lengthPoints();\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        if (numPoints === 1) return points[0].clone(); // if there is only one point\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        var l = 0;\n        var n = numPoints - 1;\n        for(var i = 0; i < n; i++){\n            var index = fromStart ? i : n - 1 - i;\n            var a = points[index];\n            var b = points[index + 1];\n            var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(a, b);\n            var d = a.distance(b);\n            if (length <= l + d) {\n                return line.pointAtLength((fromStart ? 1 : -1) * (length - l));\n            }\n            l += d;\n        }\n        // if length requested is higher than the length of the polyline, return last endpoint\n        var lastPoint = fromStart ? points[numPoints - 1] : points[0];\n        return lastPoint.clone();\n    },\n    round: function(precision) {\n        var points = this.points;\n        var numPoints = points.length;\n        for(var i = 0; i < numPoints; i++){\n            points[i].round(precision);\n        }\n        return this;\n    },\n    scale: function(sx, sy, origin) {\n        var points = this.points;\n        var numPoints = points.length;\n        for(var i = 0; i < numPoints; i++){\n            points[i].scale(sx, sy, origin);\n        }\n        return this;\n    },\n    simplify: function(opt = {}) {\n        const points = this.points;\n        if (points.length < 3) return this; // we need at least 3 points\n        // TODO: we may also accept startIndex and endIndex to specify where to start and end simplification\n        // Due to the nature of the algorithm, we do not use 0 as the default value for `threshold`\n        // because of the rounding errors that can occur when comparing distances.\n        const threshold = opt.threshold || 1e-10; // = max distance of middle point from chord to be simplified\n        // start at the beginning of the polyline and go forward\n        let currentIndex = 0;\n        // we need at least one intermediate point (3 points) in every iteration\n        // as soon as that stops being true, we know we reached the end of the polyline\n        while(points[currentIndex + 2]){\n            const firstIndex = currentIndex;\n            const middleIndex = currentIndex + 1;\n            const lastIndex = currentIndex + 2;\n            const firstPoint = points[firstIndex];\n            const middlePoint = points[middleIndex];\n            const lastPoint = points[lastIndex];\n            const chord = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(firstPoint, lastPoint); // = connection between first and last point\n            const closestPoint = chord.closestPoint(middlePoint); // = closest point on chord from middle point\n            const closestPointDistance = closestPoint.distance(middlePoint);\n            if (closestPointDistance <= threshold) {\n                // middle point is close enough to the chord = simplify\n                // 1) remove middle point:\n                points.splice(middleIndex, 1);\n            // 2) in next iteration, investigate the newly-created triplet of points\n            //    - do not change `currentIndex`\n            //    = (first point stays, point after removed point becomes middle point)\n            } else {\n                // middle point is far from the chord\n                // 1) preserve middle point\n                // 2) in next iteration, move `currentIndex` by one step:\n                currentIndex += 1;\n            //    = (point after first point becomes first point)\n            }\n        }\n        // `points` array was modified in-place\n        return this;\n    },\n    tangentAt: function(ratio) {\n        var points = this.lengthPoints();\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        if (numPoints === 1) return null; // if there is only one point\n        if (ratio < 0) ratio = 0;\n        if (ratio > 1) ratio = 1;\n        var polylineLength = this.length();\n        var length = polylineLength * ratio;\n        return this.tangentAtLength(length);\n    },\n    tangentAtLength: function(length) {\n        var points = this.lengthPoints();\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        if (numPoints === 1) return null; // if there is only one point\n        var fromStart = true;\n        if (length < 0) {\n            fromStart = false; // negative lengths mean start calculation from end point\n            length = -length; // absolute value\n        }\n        var lastValidLine; // differentiable (with a tangent)\n        var l = 0; // length so far\n        var n = numPoints - 1;\n        for(var i = 0; i < n; i++){\n            var index = fromStart ? i : n - 1 - i;\n            var a = points[index];\n            var b = points[index + 1];\n            var line = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(a, b);\n            var d = a.distance(b);\n            if (line.isDifferentiable()) {\n                if (length <= l + d) {\n                    return line.tangentAtLength((fromStart ? 1 : -1) * (length - l));\n                }\n                lastValidLine = line;\n            }\n            l += d;\n        }\n        // if length requested is higher than the length of the polyline, return last valid endpoint\n        if (lastValidLine) {\n            var ratio = fromStart ? 1 : 0;\n            return lastValidLine.tangentAt(ratio);\n        }\n        // if no valid line, return null\n        return null;\n    },\n    toString: function() {\n        return this.points + \"\";\n    },\n    translate: function(tx, ty) {\n        var points = this.points;\n        var numPoints = points.length;\n        for(var i = 0; i < numPoints; i++){\n            points[i].translate(tx, ty);\n        }\n        return this;\n    },\n    // Return svgString that can be used to recreate this line.\n    serialize: function() {\n        var points = this.points;\n        var numPoints = points.length;\n        if (numPoints === 0) return \"\"; // if points array is empty\n        var output = \"\";\n        for(var i = 0; i < numPoints; i++){\n            var point = points[i];\n            output += point.x + \",\" + point.y + \" \";\n        }\n        return output.trim();\n    }\n};\nObject.defineProperty(Polyline.prototype, \"start\", {\n    // Getter for the first point of the polyline.\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        var points = this.points;\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        return this.points[0];\n    }\n});\nObject.defineProperty(Polyline.prototype, \"end\", {\n    // Getter for the last point of the polyline.\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        var points = this.points;\n        var numPoints = points.length;\n        if (numPoints === 0) return null; // if points array is empty\n        return this.points[numPoints - 1];\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/polyline.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/rect.mjs":
/*!*********************************************!*\
  !*** ./node_modules/jointjs/src/g/rect.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Rect: () => (/* binding */ Rect),\n/* harmony export */   rect: () => (/* binding */ rect)\n/* harmony export */ });\n/* harmony import */ var _geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./geometry.helpers.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./line.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _point_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./point.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _ellipse_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ellipse.mjs */ \"(ssr)/./node_modules/jointjs/src/g/ellipse.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/jointjs/src/g/types.mjs\");\n\n\n\n\n\nconst { abs, cos, sin, min, max, round, pow } = Math;\nconst Rect = function(x, y, w, h) {\n    if (!(this instanceof Rect)) {\n        return new Rect(x, y, w, h);\n    }\n    if (Object(x) === x) {\n        y = x.y;\n        w = x.width;\n        h = x.height;\n        x = x.x;\n    }\n    this.x = x === undefined ? 0 : x;\n    this.y = y === undefined ? 0 : y;\n    this.width = w === undefined ? 0 : w;\n    this.height = h === undefined ? 0 : h;\n};\nRect.fromEllipse = function(e) {\n    e = new _ellipse_mjs__WEBPACK_IMPORTED_MODULE_0__.Ellipse(e);\n    return new Rect(e.x - e.a, e.y - e.b, 2 * e.a, 2 * e.b);\n};\nRect.fromPointUnion = function(...points) {\n    if (points.length === 0) return null;\n    const p = new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point();\n    let minX, minY, maxX, maxY;\n    minX = minY = Infinity;\n    maxX = maxY = -Infinity;\n    for(let i = 0; i < points.length; i++){\n        p.update(points[i]);\n        const x = p.x;\n        const y = p.y;\n        if (x < minX) minX = x;\n        if (x > maxX) maxX = x;\n        if (y < minY) minY = y;\n        if (y > maxY) maxY = y;\n    }\n    return new Rect(minX, minY, maxX - minX, maxY - minY);\n};\nRect.fromRectUnion = function(...rects) {\n    if (rects.length === 0) return null;\n    const r = new Rect();\n    let minX, minY, maxX, maxY;\n    minX = minY = Infinity;\n    maxX = maxY = -Infinity;\n    for(let i = 0; i < rects.length; i++){\n        r.update(rects[i]);\n        const x = r.x;\n        const y = r.y;\n        const mX = x + r.width;\n        const mY = y + r.height;\n        if (x < minX) minX = x;\n        if (mX > maxX) maxX = mX;\n        if (y < minY) minY = y;\n        if (mY > maxY) maxY = mY;\n    }\n    return new Rect(minX, minY, maxX - minX, maxY - minY);\n};\nRect.prototype = {\n    type: _types_mjs__WEBPACK_IMPORTED_MODULE_2__.types.Rect,\n    // Find my bounding box when I'm rotated with the center of rotation in the center of me.\n    // @return r {rectangle} representing a bounding box\n    bbox: function(angle) {\n        return this.clone().rotateAroundCenter(angle);\n    },\n    rotateAroundCenter: function(angle) {\n        if (!angle) return this;\n        const { width, height } = this;\n        const theta = (0,_geometry_helpers_mjs__WEBPACK_IMPORTED_MODULE_3__.toRad)(angle);\n        const st = abs(sin(theta));\n        const ct = abs(cos(theta));\n        const w = width * ct + height * st;\n        const h = width * st + height * ct;\n        this.x += (width - w) / 2;\n        this.y += (height - h) / 2;\n        this.width = w;\n        this.height = h;\n        return this;\n    },\n    bottomLeft: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x, this.y + this.height);\n    },\n    bottomLine: function() {\n        return new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(this.bottomLeft(), this.bottomRight());\n    },\n    bottomMiddle: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width / 2, this.y + this.height);\n    },\n    center: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width / 2, this.y + this.height / 2);\n    },\n    clone: function() {\n        return new Rect(this);\n    },\n    // @return {bool} true if point p is inside me.\n    containsPoint: function(p) {\n        if (!(p instanceof _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point)) {\n            p = new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(p);\n        }\n        return p.x >= this.x && p.x <= this.x + this.width && p.y >= this.y && p.y <= this.y + this.height;\n    },\n    // @return {bool} true if rectangle `r` is inside me.\n    containsRect: function(r) {\n        var r0 = new Rect(this).normalize();\n        var r1 = new Rect(r).normalize();\n        var w0 = r0.width;\n        var h0 = r0.height;\n        var w1 = r1.width;\n        var h1 = r1.height;\n        if (!w0 || !h0 || !w1 || !h1) {\n            // At least one of the dimensions is 0\n            return false;\n        }\n        var x0 = r0.x;\n        var y0 = r0.y;\n        var x1 = r1.x;\n        var y1 = r1.y;\n        w1 += x1;\n        w0 += x0;\n        h1 += y1;\n        h0 += y0;\n        return x0 <= x1 && w1 <= w0 && y0 <= y1 && h1 <= h0;\n    },\n    corner: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width, this.y + this.height);\n    },\n    // @return {boolean} true if rectangles are equal.\n    equals: function(r) {\n        var mr = new Rect(this).normalize();\n        var nr = new Rect(r).normalize();\n        return mr.x === nr.x && mr.y === nr.y && mr.width === nr.width && mr.height === nr.height;\n    },\n    // inflate by dx and dy, recompute origin [x, y]\n    // @param dx {delta_x} representing additional size to x\n    // @param dy {delta_y} representing additional size to y -\n    // dy param is not required -> in that case y is sized by dx\n    inflate: function(dx, dy) {\n        if (dx === undefined) {\n            dx = 0;\n        }\n        if (dy === undefined) {\n            dy = dx;\n        }\n        this.x -= dx;\n        this.y -= dy;\n        this.width += 2 * dx;\n        this.height += 2 * dy;\n        return this;\n    },\n    // @return {rect} if rectangles intersect, {null} if not.\n    intersect: function(r) {\n        var myOrigin = this.origin();\n        var myCorner = this.corner();\n        var rOrigin = r.origin();\n        var rCorner = r.corner();\n        // No intersection found\n        if (rCorner.x <= myOrigin.x || rCorner.y <= myOrigin.y || rOrigin.x >= myCorner.x || rOrigin.y >= myCorner.y) return null;\n        var x = max(myOrigin.x, rOrigin.x);\n        var y = max(myOrigin.y, rOrigin.y);\n        return new Rect(x, y, min(myCorner.x, rCorner.x) - x, min(myCorner.y, rCorner.y) - y);\n    },\n    intersectionWithLine: function(line) {\n        var r = this;\n        var rectLines = [\n            r.topLine(),\n            r.rightLine(),\n            r.bottomLine(),\n            r.leftLine()\n        ];\n        var points = [];\n        var dedupeArr = [];\n        var pt, i;\n        var n = rectLines.length;\n        for(i = 0; i < n; i++){\n            pt = line.intersect(rectLines[i]);\n            if (pt !== null && dedupeArr.indexOf(pt.toString()) < 0) {\n                points.push(pt);\n                dedupeArr.push(pt.toString());\n            }\n        }\n        return points.length > 0 ? points : null;\n    },\n    // Find point on my boundary where line starting\n    // from my center ending in point p intersects me.\n    // @param {number} angle If angle is specified, intersection with rotated rectangle is computed.\n    intersectionWithLineFromCenterToPoint: function(p, angle) {\n        p = new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(p);\n        var center = new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width / 2, this.y + this.height / 2);\n        var result;\n        if (angle) p.rotate(center, angle);\n        // (clockwise, starting from the top side)\n        var sides = [\n            this.topLine(),\n            this.rightLine(),\n            this.bottomLine(),\n            this.leftLine()\n        ];\n        var connector = new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(center, p);\n        for(var i = sides.length - 1; i >= 0; --i){\n            var intersection = sides[i].intersection(connector);\n            if (intersection !== null) {\n                result = intersection;\n                break;\n            }\n        }\n        if (result && angle) result.rotate(center, -angle);\n        return result;\n    },\n    leftLine: function() {\n        return new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(this.topLeft(), this.bottomLeft());\n    },\n    leftMiddle: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x, this.y + this.height / 2);\n    },\n    maxRectScaleToFit: function(rect, origin) {\n        rect = new Rect(rect);\n        origin || (origin = rect.center());\n        var sx1, sx2, sx3, sx4, sy1, sy2, sy3, sy4;\n        var ox = origin.x;\n        var oy = origin.y;\n        // Here we find the maximal possible scale for all corner points (for x and y axis) of the rectangle,\n        // so when the scale is applied the point is still inside the rectangle.\n        sx1 = sx2 = sx3 = sx4 = sy1 = sy2 = sy3 = sy4 = Infinity;\n        // Top Left\n        var p1 = rect.topLeft();\n        if (p1.x < ox) {\n            sx1 = (this.x - ox) / (p1.x - ox);\n        }\n        if (p1.y < oy) {\n            sy1 = (this.y - oy) / (p1.y - oy);\n        }\n        // Bottom Right\n        var p2 = rect.bottomRight();\n        if (p2.x > ox) {\n            sx2 = (this.x + this.width - ox) / (p2.x - ox);\n        }\n        if (p2.y > oy) {\n            sy2 = (this.y + this.height - oy) / (p2.y - oy);\n        }\n        // Top Right\n        var p3 = rect.topRight();\n        if (p3.x > ox) {\n            sx3 = (this.x + this.width - ox) / (p3.x - ox);\n        }\n        if (p3.y < oy) {\n            sy3 = (this.y - oy) / (p3.y - oy);\n        }\n        // Bottom Left\n        var p4 = rect.bottomLeft();\n        if (p4.x < ox) {\n            sx4 = (this.x - ox) / (p4.x - ox);\n        }\n        if (p4.y > oy) {\n            sy4 = (this.y + this.height - oy) / (p4.y - oy);\n        }\n        return {\n            sx: min(sx1, sx2, sx3, sx4),\n            sy: min(sy1, sy2, sy3, sy4)\n        };\n    },\n    maxRectUniformScaleToFit: function(rect, origin) {\n        var scale = this.maxRectScaleToFit(rect, origin);\n        return min(scale.sx, scale.sy);\n    },\n    // Move and expand me.\n    // @param r {rectangle} representing deltas\n    moveAndExpand: function(r) {\n        this.x += r.x || 0;\n        this.y += r.y || 0;\n        this.width += r.width || 0;\n        this.height += r.height || 0;\n        return this;\n    },\n    // Normalize the rectangle; i.e., make it so that it has a non-negative width and height.\n    // If width < 0 the function swaps the left and right corners,\n    // and it swaps the top and bottom corners if height < 0\n    // like in http://qt-project.org/doc/qt-4.8/qrectf.html#normalized\n    normalize: function() {\n        var newx = this.x;\n        var newy = this.y;\n        var newwidth = this.width;\n        var newheight = this.height;\n        if (this.width < 0) {\n            newx = this.x + this.width;\n            newwidth = -this.width;\n        }\n        if (this.height < 0) {\n            newy = this.y + this.height;\n            newheight = -this.height;\n        }\n        this.x = newx;\n        this.y = newy;\n        this.width = newwidth;\n        this.height = newheight;\n        return this;\n    },\n    // Offset me by the specified amount.\n    offset: function(dx, dy) {\n        // pretend that this is a point and call offset()\n        // rewrites x and y according to dx and dy\n        return _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point.prototype.offset.call(this, dx, dy);\n    },\n    origin: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x, this.y);\n    },\n    // @return {point} a point on my boundary nearest to the given point.\n    // @see Squeak Smalltalk, Rectangle>>pointNearestTo:\n    pointNearestToPoint: function(point) {\n        point = new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(point);\n        if (this.containsPoint(point)) {\n            var side = this.sideNearestToPoint(point);\n            switch(side){\n                case \"right\":\n                    return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width, point.y);\n                case \"left\":\n                    return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x, point.y);\n                case \"bottom\":\n                    return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(point.x, this.y + this.height);\n                case \"top\":\n                    return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(point.x, this.y);\n            }\n        }\n        return point.adhereToRect(this);\n    },\n    rightLine: function() {\n        return new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(this.topRight(), this.bottomRight());\n    },\n    rightMiddle: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width, this.y + this.height / 2);\n    },\n    round: function(precision) {\n        let f = 1; // case 0\n        if (precision) {\n            switch(precision){\n                case 1:\n                    f = 10;\n                    break;\n                case 2:\n                    f = 100;\n                    break;\n                case 3:\n                    f = 1000;\n                    break;\n                default:\n                    f = pow(10, precision);\n                    break;\n            }\n        }\n        this.x = round(this.x * f) / f;\n        this.y = round(this.y * f) / f;\n        this.width = round(this.width * f) / f;\n        this.height = round(this.height * f) / f;\n        return this;\n    },\n    // Scale rectangle with origin.\n    scale: function(sx, sy, origin) {\n        origin = this.origin().scale(sx, sy, origin);\n        this.x = origin.x;\n        this.y = origin.y;\n        this.width *= sx;\n        this.height *= sy;\n        return this;\n    },\n    // @return {string} (left|right|top|bottom) side which is nearest to point\n    // @see Squeak Smalltalk, Rectangle>>sideNearestTo:\n    sideNearestToPoint: function(point) {\n        point = new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(point);\n        var distToLeft = point.x - this.x;\n        var distToRight = this.x + this.width - point.x;\n        var distToTop = point.y - this.y;\n        var distToBottom = this.y + this.height - point.y;\n        var closest = distToLeft;\n        var side = \"left\";\n        if (distToRight < closest) {\n            closest = distToRight;\n            side = \"right\";\n        }\n        if (distToTop < closest) {\n            closest = distToTop;\n            side = \"top\";\n        }\n        if (distToBottom < closest) {\n            // closest = distToBottom;\n            side = \"bottom\";\n        }\n        return side;\n    },\n    snapToGrid: function(gx, gy) {\n        var origin = this.origin().snapToGrid(gx, gy);\n        var corner = this.corner().snapToGrid(gx, gy);\n        this.x = origin.x;\n        this.y = origin.y;\n        this.width = corner.x - origin.x;\n        this.height = corner.y - origin.y;\n        return this;\n    },\n    toJSON: function() {\n        return {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height\n        };\n    },\n    topLine: function() {\n        return new _line_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(this.topLeft(), this.topRight());\n    },\n    topMiddle: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width / 2, this.y);\n    },\n    topRight: function() {\n        return new _point_mjs__WEBPACK_IMPORTED_MODULE_1__.Point(this.x + this.width, this.y);\n    },\n    toString: function() {\n        return this.origin().toString() + \" \" + this.corner().toString();\n    },\n    // @return {rect} representing the union of both rectangles.\n    union: function(rect) {\n        return Rect.fromRectUnion(this, rect);\n    },\n    update: function(x, y, w, h) {\n        if (Object(x) === x) {\n            y = x.y;\n            w = x.width;\n            h = x.height;\n            x = x.x;\n        }\n        this.x = x || 0;\n        this.y = y || 0;\n        this.width = w || 0;\n        this.height = h || 0;\n        return this;\n    }\n};\nRect.prototype.bottomRight = Rect.prototype.corner;\nRect.prototype.topLeft = Rect.prototype.origin;\nRect.prototype.translate = Rect.prototype.offset;\n// For backwards compatibility:\nconst rect = Rect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/rect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/g/types.mjs":
/*!**********************************************!*\
  !*** ./node_modules/jointjs/src/g/types.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\nconst types = {\n    Point: 1,\n    Line: 2,\n    Ellipse: 3,\n    Rect: 4,\n    Polyline: 5,\n    Polygon: 6,\n    Curve: 7,\n    Path: 8\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvZy90eXBlcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFFBQVE7SUFDakJDLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLE9BQU87SUFDUEMsTUFBTTtBQUNWLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9nL3R5cGVzLm1qcz8yYTA4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB0eXBlcyA9IHtcbiAgICBQb2ludDogMSxcbiAgICBMaW5lOiAyLFxuICAgIEVsbGlwc2U6IDMsXG4gICAgUmVjdDogNCxcbiAgICBQb2x5bGluZTogNSxcbiAgICBQb2x5Z29uOiA2LFxuICAgIEN1cnZlOiA3LFxuICAgIFBhdGg6IDhcbn07XG4iXSwibmFtZXMiOlsidHlwZXMiLCJQb2ludCIsIkxpbmUiLCJFbGxpcHNlIiwiUmVjdCIsIlBvbHlsaW5lIiwiUG9seWdvbiIsIkN1cnZlIiwiUGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/g/types.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/highlighters/addClass.mjs":
/*!************************************************************!*\
  !*** ./node_modules/jointjs/src/highlighters/addClass.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClass: () => (/* binding */ addClass)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dia/HighlighterView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\");\n\n\n\nconst className = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.addClassNamePrefix(\"highlighted\");\nconst addClass = _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_1__.HighlighterView.extend({\n    UPDATABLE: false,\n    MOUNTABLE: false,\n    options: {\n        className\n    },\n    highlight: function(_cellView, node) {\n        (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node).addClass(this.options.className);\n    },\n    unhighlight: function(_cellView, node) {\n        (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node).removeClass(this.options.className);\n    }\n}, {\n    // Backwards Compatibility\n    className\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvaGlnaGxpZ2h0ZXJzL2FkZENsYXNzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ1g7QUFDOEI7QUFFN0QsTUFBTUcsWUFBWUgsK0RBQXVCLENBQUM7QUFFbkMsTUFBTUssV0FBV0gscUVBQWVBLENBQUNJLE1BQU0sQ0FBQztJQUUzQ0MsV0FBVztJQUNYQyxXQUFXO0lBRVhDLFNBQVM7UUFDTE47SUFDSjtJQUVBTyxXQUFXLFNBQVNDLFNBQVMsRUFBRUMsSUFBSTtRQUMvQlgsd0RBQUNBLENBQUNXLE1BQU1QLFFBQVEsQ0FBQyxJQUFJLENBQUNJLE9BQU8sQ0FBQ04sU0FBUztJQUMzQztJQUVBVSxhQUFhLFNBQVNGLFNBQVMsRUFBRUMsSUFBSTtRQUNqQ1gsd0RBQUNBLENBQUNXLE1BQU1FLFdBQVcsQ0FBQyxJQUFJLENBQUNMLE9BQU8sQ0FBQ04sU0FBUztJQUM5QztBQUVKLEdBQUc7SUFDQywwQkFBMEI7SUFDMUJBO0FBQ0osR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL2hpZ2hsaWdodGVycy9hZGRDbGFzcy5tanM/YTY1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwvaW5kZXgubWpzJztcbmltcG9ydCBWIGZyb20gJy4uL1YvaW5kZXgubWpzJztcbmltcG9ydCB7IEhpZ2hsaWdodGVyVmlldyB9IGZyb20gJy4uL2RpYS9IaWdobGlnaHRlclZpZXcubWpzJztcblxuY29uc3QgY2xhc3NOYW1lID0gdXRpbC5hZGRDbGFzc05hbWVQcmVmaXgoJ2hpZ2hsaWdodGVkJyk7XG5cbmV4cG9ydCBjb25zdCBhZGRDbGFzcyA9IEhpZ2hsaWdodGVyVmlldy5leHRlbmQoe1xuXG4gICAgVVBEQVRBQkxFOiBmYWxzZSxcbiAgICBNT1VOVEFCTEU6IGZhbHNlLFxuXG4gICAgb3B0aW9uczoge1xuICAgICAgICBjbGFzc05hbWVcbiAgICB9LFxuXG4gICAgaGlnaGxpZ2h0OiBmdW5jdGlvbihfY2VsbFZpZXcsIG5vZGUpIHtcbiAgICAgICAgVihub2RlKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICB9LFxuXG4gICAgdW5oaWdobGlnaHQ6IGZ1bmN0aW9uKF9jZWxsVmlldywgbm9kZSkge1xuICAgICAgICBWKG5vZGUpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpO1xuICAgIH1cblxufSwge1xuICAgIC8vIEJhY2t3YXJkcyBDb21wYXRpYmlsaXR5XG4gICAgY2xhc3NOYW1lXG59KTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwiViIsIkhpZ2hsaWdodGVyVmlldyIsImNsYXNzTmFtZSIsImFkZENsYXNzTmFtZVByZWZpeCIsImFkZENsYXNzIiwiZXh0ZW5kIiwiVVBEQVRBQkxFIiwiTU9VTlRBQkxFIiwib3B0aW9ucyIsImhpZ2hsaWdodCIsIl9jZWxsVmlldyIsIm5vZGUiLCJ1bmhpZ2hsaWdodCIsInJlbW92ZUNsYXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/highlighters/addClass.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/highlighters/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/jointjs/src/highlighters/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClass: () => (/* reexport safe */ _addClass_mjs__WEBPACK_IMPORTED_MODULE_3__.addClass),\n/* harmony export */   list: () => (/* reexport safe */ _list_mjs__WEBPACK_IMPORTED_MODULE_4__.list),\n/* harmony export */   mask: () => (/* reexport safe */ _mask_mjs__WEBPACK_IMPORTED_MODULE_1__.mask),\n/* harmony export */   opacity: () => (/* reexport safe */ _opacity_mjs__WEBPACK_IMPORTED_MODULE_2__.opacity),\n/* harmony export */   stroke: () => (/* reexport safe */ _stroke_mjs__WEBPACK_IMPORTED_MODULE_0__.stroke)\n/* harmony export */ });\n/* harmony import */ var _stroke_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stroke.mjs */ \"(ssr)/./node_modules/jointjs/src/highlighters/stroke.mjs\");\n/* harmony import */ var _mask_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mask.mjs */ \"(ssr)/./node_modules/jointjs/src/highlighters/mask.mjs\");\n/* harmony import */ var _opacity_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opacity.mjs */ \"(ssr)/./node_modules/jointjs/src/highlighters/opacity.mjs\");\n/* harmony import */ var _addClass_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addClass.mjs */ \"(ssr)/./node_modules/jointjs/src/highlighters/addClass.mjs\");\n/* harmony import */ var _list_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list.mjs */ \"(ssr)/./node_modules/jointjs/src/highlighters/list.mjs\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvaGlnaGxpZ2h0ZXJzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ0Y7QUFDRztBQUNDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9oaWdobGlnaHRlcnMvaW5kZXgubWpzP2JjZGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9zdHJva2UubWpzJztcbmV4cG9ydCAqIGZyb20gJy4vbWFzay5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9vcGFjaXR5Lm1qcyc7XG5leHBvcnQgKiBmcm9tICcuL2FkZENsYXNzLm1qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpc3QubWpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/highlighters/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/highlighters/list.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/highlighters/list.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   list: () => (/* binding */ list)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dia/HighlighterView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/getRectPoint.mjs */ \"(ssr)/./node_modules/jointjs/src/util/getRectPoint.mjs\");\n\n\n\n\nconst Directions = {\n    ROW: \"row\",\n    COLUMN: \"column\"\n};\nconst list = _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__.HighlighterView.extend({\n    tagName: \"g\",\n    MOUNTABLE: true,\n    UPDATE_ATTRIBUTES: function() {\n        return [\n            this.options.attribute\n        ];\n    },\n    _prevItems: null,\n    highlight (elementView, node) {\n        const element = elementView.model;\n        const { attribute, size = 20, gap = 5, direction = Directions.ROW } = this.options;\n        if (!attribute) throw new Error(\"List: attribute is required\");\n        const normalizedSize = typeof size === \"number\" ? {\n            width: size,\n            height: size\n        } : size;\n        const isRowDirection = direction === Directions.ROW;\n        const itemWidth = isRowDirection ? normalizedSize.width : normalizedSize.height;\n        let items = element.get(attribute);\n        if (!Array.isArray(items)) items = [];\n        const prevItems = this._prevItems || [];\n        const comparison = items.map((item, index)=>(0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.isEqual)(prevItems[index], items[index]));\n        if (prevItems.length !== items.length || comparison.some((unchanged)=>!unchanged)) {\n            const prevEls = this.vel.children();\n            const itemsEls = items.map((item, index)=>{\n                const prevEl = index in prevEls ? prevEls[index].node : null;\n                if (comparison[index]) return prevEl;\n                const itemEl = this.createListItem(item, normalizedSize, prevEl);\n                if (!itemEl) return null;\n                if (!(itemEl instanceof SVGElement)) throw new Error(\"List: item must be an SVGElement\");\n                itemEl.dataset.index = index;\n                itemEl.dataset.attribute = attribute;\n                const offset = index * (itemWidth + gap);\n                itemEl.setAttribute(\"transform\", isRowDirection ? `translate(${offset}, 0)` : `translate(0, ${offset})`);\n                return itemEl;\n            });\n            this.vel.empty().append(itemsEls);\n            this._prevItems = items;\n        }\n        const itemsCount = items.length;\n        const length = itemsCount === 0 ? 0 : itemsCount * itemWidth + (itemsCount - 1) * gap;\n        const listSize = isRowDirection ? {\n            width: length,\n            height: normalizedSize.height\n        } : {\n            width: normalizedSize.width,\n            height: length\n        };\n        this.position(element, listSize);\n    },\n    position (element, listSize) {\n        const { vel, options } = this;\n        const { margin = 5, position = \"top-left\" } = options;\n        const { width, height } = element.size();\n        const { left, right, top, bottom } = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.normalizeSides)(margin);\n        const bbox = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Rect(left, top, width - (left + right), height - (top + bottom));\n        let { x, y } = (0,_util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.getRectPoint)(bbox, position);\n        // x\n        switch(position){\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.CENTER:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.TOP:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.BOTTOM:\n                {\n                    x -= listSize.width / 2;\n                    break;\n                }\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.RIGHT:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.BOTTOM_RIGHT:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.TOP_RIGHT:\n                {\n                    x -= listSize.width;\n                    break;\n                }\n        }\n        // y\n        switch(position){\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.CENTER:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.RIGHT:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.LEFT:\n                {\n                    y -= listSize.height / 2;\n                    break;\n                }\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.BOTTOM:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.BOTTOM_RIGHT:\n            case _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions.BOTTOM_LEFT:\n                {\n                    y -= listSize.height;\n                    break;\n                }\n        }\n        vel.attr(\"transform\", `translate(${x}, ${y})`);\n    }\n}, {\n    Directions,\n    Positions: _util_getRectPoint_mjs__WEBPACK_IMPORTED_MODULE_4__.Positions\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/highlighters/list.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/highlighters/mask.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/highlighters/mask.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mask: () => (/* binding */ mask)\n/* harmony export */ });\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dia/HighlighterView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\");\n\n\nconst MASK_CLIP = 20;\nfunction forEachDescendant(vel, fn) {\n    const descendants = vel.children();\n    while(descendants.length > 0){\n        const descendant = descendants.shift();\n        if (fn(descendant)) {\n            descendants.push(...descendant.children());\n        }\n    }\n}\nconst mask = _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__.HighlighterView.extend({\n    tagName: \"rect\",\n    className: \"highlight-mask\",\n    attributes: {\n        \"pointer-events\": \"none\"\n    },\n    options: {\n        padding: 3,\n        maskClip: MASK_CLIP,\n        deep: false,\n        attrs: {\n            \"stroke\": \"#FEB663\",\n            \"stroke-width\": 3,\n            \"stroke-linecap\": \"butt\",\n            \"stroke-linejoin\": \"miter\"\n        }\n    },\n    VISIBLE: \"white\",\n    INVISIBLE: \"black\",\n    MASK_ROOT_ATTRIBUTE_BLACKLIST: [\n        \"marker-start\",\n        \"marker-end\",\n        \"marker-mid\",\n        \"transform\",\n        \"stroke-dasharray\",\n        \"class\"\n    ],\n    MASK_CHILD_ATTRIBUTE_BLACKLIST: [\n        \"stroke\",\n        \"fill\",\n        \"stroke-width\",\n        \"stroke-opacity\",\n        \"stroke-dasharray\",\n        \"fill-opacity\",\n        \"marker-start\",\n        \"marker-end\",\n        \"marker-mid\",\n        \"class\"\n    ],\n    // TODO: change the list to a function callback\n    MASK_REPLACE_TAGS: [\n        \"FOREIGNOBJECT\",\n        \"IMAGE\",\n        \"USE\",\n        \"TEXT\",\n        \"TSPAN\",\n        \"TEXTPATH\"\n    ],\n    // TODO: change the list to a function callback\n    MASK_REMOVE_TAGS: [\n        \"TEXT\",\n        \"TSPAN\",\n        \"TEXTPATH\"\n    ],\n    transformMaskChild (cellView, childEl) {\n        const { MASK_CHILD_ATTRIBUTE_BLACKLIST, MASK_REPLACE_TAGS, MASK_REMOVE_TAGS } = this;\n        const childTagName = childEl.tagName();\n        // Do not include the element in the mask's image\n        if (!_V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isSVGGraphicsElement(childEl) || MASK_REMOVE_TAGS.includes(childTagName)) {\n            childEl.remove();\n            return false;\n        }\n        // Replace the element with a rectangle\n        if (MASK_REPLACE_TAGS.includes(childTagName)) {\n            // Note: clone() method does not change the children ids\n            const originalChild = cellView.vel.findOne(`#${childEl.id}`);\n            if (originalChild) {\n                const { node: originalNode } = originalChild;\n                let childBBox = cellView.getNodeBoundingRect(originalNode);\n                if (cellView.model.isElement()) {\n                    childBBox = _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].transformRect(childBBox, cellView.getNodeMatrix(originalNode));\n                }\n                const replacement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"rect\", childBBox.toJSON());\n                const { x: ox, y: oy } = childBBox.center();\n                const { angle, cx = ox, cy = oy } = originalChild.rotate();\n                if (angle) replacement.rotate(angle, cx, cy);\n                // Note: it's not important to keep the same sibling index since all subnodes are filled\n                childEl.parent().append(replacement);\n            }\n            childEl.remove();\n            return false;\n        }\n        // Keep the element, but clean it from certain attributes\n        MASK_CHILD_ATTRIBUTE_BLACKLIST.forEach((attrName)=>{\n            if (attrName === \"fill\" && childEl.attr(\"fill\") === \"none\") return;\n            childEl.removeAttr(attrName);\n        });\n        return true;\n    },\n    transformMaskRoot (_cellView, rootEl) {\n        const { MASK_ROOT_ATTRIBUTE_BLACKLIST } = this;\n        MASK_ROOT_ATTRIBUTE_BLACKLIST.forEach((attrName)=>{\n            rootEl.removeAttr(attrName);\n        });\n    },\n    getMaskShape (cellView, vel) {\n        const { options, MASK_REPLACE_TAGS } = this;\n        const { deep } = options;\n        const tagName = vel.tagName();\n        let maskRoot;\n        if (tagName === \"G\") {\n            if (!deep) return null;\n            maskRoot = vel.clone();\n            forEachDescendant(maskRoot, (maskChild)=>this.transformMaskChild(cellView, maskChild));\n        } else {\n            if (MASK_REPLACE_TAGS.includes(tagName)) return null;\n            maskRoot = vel.clone();\n        }\n        this.transformMaskRoot(cellView, maskRoot);\n        return maskRoot;\n    },\n    getMaskId () {\n        return `highlight-mask-${this.cid}`;\n    },\n    getMask (cellView, vNode) {\n        const { VISIBLE, INVISIBLE, options } = this;\n        const { padding, attrs } = options;\n        const strokeWidth = \"stroke-width\" in attrs ? attrs[\"stroke-width\"] : 1;\n        const hasNodeFill = vNode.attr(\"fill\") !== \"none\";\n        let magnetStrokeWidth = parseFloat(vNode.attr(\"stroke-width\"));\n        if (isNaN(magnetStrokeWidth)) magnetStrokeWidth = 1;\n        // stroke of the invisible shape\n        const minStrokeWidth = magnetStrokeWidth + padding * 2;\n        // stroke of the visible shape\n        const maxStrokeWidth = minStrokeWidth + strokeWidth * 2;\n        let maskEl = this.getMaskShape(cellView, vNode);\n        if (!maskEl) {\n            const nodeBBox = cellView.getNodeBoundingRect(vNode.node);\n            // Make sure the rect is visible\n            nodeBBox.inflate(nodeBBox.width ? 0 : 0.5, nodeBBox.height ? 0 : 0.5);\n            maskEl = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"rect\", nodeBBox.toJSON());\n        }\n        maskEl.attr(attrs);\n        return (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"mask\", {\n            \"id\": this.getMaskId()\n        }).append([\n            maskEl.clone().attr({\n                \"fill\": hasNodeFill ? VISIBLE : \"none\",\n                \"stroke\": VISIBLE,\n                \"stroke-width\": maxStrokeWidth\n            }),\n            maskEl.clone().attr({\n                \"fill\": hasNodeFill ? INVISIBLE : \"none\",\n                \"stroke\": INVISIBLE,\n                \"stroke-width\": minStrokeWidth\n            })\n        ]);\n    },\n    removeMask (paper) {\n        const maskNode = paper.svg.getElementById(this.getMaskId());\n        if (maskNode) {\n            paper.defs.removeChild(maskNode);\n        }\n    },\n    addMask (paper, maskEl) {\n        paper.defs.appendChild(maskEl.node);\n    },\n    highlight (cellView, node) {\n        const { options, vel } = this;\n        const { padding, attrs, maskClip = MASK_CLIP, layer } = options;\n        const color = \"stroke\" in attrs ? attrs[\"stroke\"] : \"#000000\";\n        if (!layer && node === cellView.el) {\n            // If the highlighter is appended to the cellView\n            // and we measure the size of the cellView wrapping group\n            // it's necessary to remove the highlighter first\n            vel.remove();\n        }\n        const highlighterBBox = cellView.getNodeBoundingRect(node).inflate(padding + maskClip);\n        const highlightMatrix = this.getNodeMatrix(cellView, node);\n        const maskEl = this.getMask(cellView, (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node));\n        this.addMask(cellView.paper, maskEl);\n        vel.attr(highlighterBBox.toJSON());\n        vel.attr({\n            \"transform\": _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].matrixToTransformString(highlightMatrix),\n            \"mask\": `url(#${maskEl.id})`,\n            \"fill\": color\n        });\n    },\n    unhighlight (cellView) {\n        this.removeMask(cellView.paper);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/highlighters/mask.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/highlighters/opacity.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/jointjs/src/highlighters/opacity.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   opacity: () => (/* binding */ opacity)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dia/HighlighterView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\");\n\n\n\nconst opacity = _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__.HighlighterView.extend({\n    UPDATABLE: false,\n    MOUNTABLE: false,\n    opacityClassName: _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__.addClassNamePrefix(\"highlight-opacity\"),\n    highlight: function(_cellView, node) {\n        (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node).addClass(this.opacityClassName);\n    },\n    unhighlight: function(_cellView, node) {\n        (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node).removeClass(this.opacityClassName);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvaGlnaGxpZ2h0ZXJzL29wYWNpdHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEM7QUFDWDtBQUM4QjtBQUV0RCxNQUFNRyxVQUFVRCxxRUFBZUEsQ0FBQ0UsTUFBTSxDQUFDO0lBRTFDQyxXQUFXO0lBQ1hDLFdBQVc7SUFFWEMsa0JBQWtCUCwrREFBdUIsQ0FBQztJQUUxQ1MsV0FBVyxTQUFTQyxTQUFTLEVBQUVDLElBQUk7UUFDL0JWLHdEQUFDQSxDQUFDVSxNQUFNQyxRQUFRLENBQUMsSUFBSSxDQUFDTCxnQkFBZ0I7SUFDMUM7SUFFQU0sYUFBYSxTQUFTSCxTQUFTLEVBQUVDLElBQUk7UUFDakNWLHdEQUFDQSxDQUFDVSxNQUFNRyxXQUFXLENBQUMsSUFBSSxDQUFDUCxnQkFBZ0I7SUFDN0M7QUFFSixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvaGlnaGxpZ2h0ZXJzL29wYWNpdHkubWpzPzRmZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsL2luZGV4Lm1qcyc7XG5pbXBvcnQgViBmcm9tICcuLi9WL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBIaWdobGlnaHRlclZpZXcgfSBmcm9tICcuLi9kaWEvSGlnaGxpZ2h0ZXJWaWV3Lm1qcyc7XG5cbmV4cG9ydCBjb25zdCBvcGFjaXR5ID0gSGlnaGxpZ2h0ZXJWaWV3LmV4dGVuZCh7XG5cbiAgICBVUERBVEFCTEU6IGZhbHNlLFxuICAgIE1PVU5UQUJMRTogZmFsc2UsXG5cbiAgICBvcGFjaXR5Q2xhc3NOYW1lOiB1dGlsLmFkZENsYXNzTmFtZVByZWZpeCgnaGlnaGxpZ2h0LW9wYWNpdHknKSxcblxuICAgIGhpZ2hsaWdodDogZnVuY3Rpb24oX2NlbGxWaWV3LCBub2RlKSB7XG4gICAgICAgIFYobm9kZSkuYWRkQ2xhc3ModGhpcy5vcGFjaXR5Q2xhc3NOYW1lKTtcbiAgICB9LFxuXG4gICAgdW5oaWdobGlnaHQ6IGZ1bmN0aW9uKF9jZWxsVmlldywgbm9kZSkge1xuICAgICAgICBWKG5vZGUpLnJlbW92ZUNsYXNzKHRoaXMub3BhY2l0eUNsYXNzTmFtZSk7XG4gICAgfVxuXG59KTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwiViIsIkhpZ2hsaWdodGVyVmlldyIsIm9wYWNpdHkiLCJleHRlbmQiLCJVUERBVEFCTEUiLCJNT1VOVEFCTEUiLCJvcGFjaXR5Q2xhc3NOYW1lIiwiYWRkQ2xhc3NOYW1lUHJlZml4IiwiaGlnaGxpZ2h0IiwiX2NlbGxWaWV3Iiwibm9kZSIsImFkZENsYXNzIiwidW5oaWdobGlnaHQiLCJyZW1vdmVDbGFzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/highlighters/opacity.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/highlighters/stroke.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/jointjs/src/highlighters/stroke.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stroke: () => (/* binding */ stroke)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dia/HighlighterView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/HighlighterView.mjs\");\n\n\n\nconst stroke = _dia_HighlighterView_mjs__WEBPACK_IMPORTED_MODULE_0__.HighlighterView.extend({\n    tagName: \"path\",\n    className: \"highlight-stroke\",\n    attributes: {\n        \"pointer-events\": \"none\",\n        \"vector-effect\": \"non-scaling-stroke\",\n        \"fill\": \"none\"\n    },\n    options: {\n        padding: 3,\n        rx: 0,\n        ry: 0,\n        useFirstSubpath: false,\n        attrs: {\n            \"stroke-width\": 3,\n            \"stroke\": \"#FEB663\"\n        }\n    },\n    getPathData (cellView, node) {\n        const { options } = this;\n        const { useFirstSubpath } = options;\n        let d;\n        try {\n            const vNode = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node);\n            d = vNode.convertToPathData().trim();\n            if (vNode.tagName() === \"PATH\" && useFirstSubpath) {\n                const secondSubpathIndex = d.search(/.M/i) + 1;\n                if (secondSubpathIndex > 0) {\n                    d = d.substr(0, secondSubpathIndex);\n                }\n            }\n        } catch (error) {\n            // Failed to get path data from magnet element.\n            // Draw a rectangle around the node instead.\n            const nodeBBox = cellView.getNodeBoundingRect(node);\n            d = _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rectToPath((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.assign)({}, options, nodeBBox.toJSON()));\n        }\n        return d;\n    },\n    highlightConnection (cellView) {\n        this.vel.attr(\"d\", cellView.getSerializedConnection());\n    },\n    highlightNode (cellView, node) {\n        const { vel, options } = this;\n        const { padding, layer } = options;\n        let highlightMatrix = this.getNodeMatrix(cellView, node);\n        // Add padding to the highlight element.\n        if (padding) {\n            if (!layer && node === cellView.el) {\n                // If the highlighter is appended to the cellView\n                // and we measure the size of the cellView wrapping group\n                // it's necessary to remove the highlighter first\n                vel.remove();\n            }\n            let nodeBBox = cellView.getNodeBoundingRect(node);\n            const cx = nodeBBox.x + nodeBBox.width / 2;\n            const cy = nodeBBox.y + nodeBBox.height / 2;\n            nodeBBox = _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].transformRect(nodeBBox, highlightMatrix);\n            const width = Math.max(nodeBBox.width, 1);\n            const height = Math.max(nodeBBox.height, 1);\n            const sx = (width + padding) / width;\n            const sy = (height + padding) / height;\n            const paddingMatrix = _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createSVGMatrix({\n                a: sx,\n                b: 0,\n                c: 0,\n                d: sy,\n                e: cx - sx * cx,\n                f: cy - sy * cy\n            });\n            highlightMatrix = highlightMatrix.multiply(paddingMatrix);\n        }\n        vel.attr({\n            \"d\": this.getPathData(cellView, node),\n            \"transform\": _V_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].matrixToTransformString(highlightMatrix)\n        });\n    },\n    highlight (cellView, node) {\n        const { vel, options } = this;\n        vel.attr(options.attrs);\n        if (cellView.isNodeConnection(node)) {\n            this.highlightConnection(cellView);\n        } else {\n            this.highlightNode(cellView, node);\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/highlighters/stroke.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/layout/ports/port.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/layout/ports/port.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   absolute: () => (/* binding */ absolute),\n/* harmony export */   bottom: () => (/* binding */ bottom),\n/* harmony export */   ellipse: () => (/* binding */ ellipse),\n/* harmony export */   ellipseSpread: () => (/* binding */ ellipseSpread),\n/* harmony export */   fn: () => (/* binding */ fn),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   line: () => (/* binding */ line),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   top: () => (/* binding */ top)\n/* harmony export */ });\n/* harmony import */ var _dia_attributes_calc_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../dia/attributes/calc.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/attributes/calc.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/ellipse.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n\n\n\nfunction portTransformAttrs(point, angle, opt) {\n    var trans = point.toJSON();\n    trans.angle = angle || 0;\n    return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.defaults({}, opt, trans);\n}\nfunction lineLayout(ports, p1, p2, elBBox) {\n    return ports.map(function(port, index, ports) {\n        var p = this.pointAt((index + 0.5) / ports.length);\n        // `dx`,`dy` per port offset option\n        if (port.dx || port.dy) {\n            p.offset(port.dx || 0, port.dy || 0);\n        }\n        return portTransformAttrs(p.round(), 0, argTransform(elBBox, port));\n    }, _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.line(p1, p2));\n}\nfunction ellipseLayout(ports, elBBox, startAngle, stepFn) {\n    var center = elBBox.center();\n    var ratio = elBBox.width / elBBox.height;\n    var p1 = elBBox.topMiddle();\n    var ellipse = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Ellipse.fromRect(elBBox);\n    return ports.map(function(port, index, ports) {\n        var angle = startAngle + stepFn(index, ports.length);\n        var p2 = p1.clone().rotate(center, -angle).scale(ratio, 1, center);\n        var theta = port.compensateRotation ? -ellipse.tangentTheta(p2) : 0;\n        // `dx`,`dy` per port offset option\n        if (port.dx || port.dy) {\n            p2.offset(port.dx || 0, port.dy || 0);\n        }\n        // `dr` delta radius option\n        if (port.dr) {\n            p2.move(center, port.dr);\n        }\n        return portTransformAttrs(p2.round(), theta, argTransform(elBBox, port));\n    });\n}\nfunction argTransform(bbox, args) {\n    let { x, y, angle } = args;\n    if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.isPercentage(x)) {\n        x = parseFloat(x) / 100 * bbox.width;\n    } else if ((0,_dia_attributes_calc_mjs__WEBPACK_IMPORTED_MODULE_4__.isCalcAttribute)(x)) {\n        x = Number((0,_dia_attributes_calc_mjs__WEBPACK_IMPORTED_MODULE_4__.evalCalcAttribute)(x, bbox));\n    }\n    if (_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.isPercentage(y)) {\n        y = parseFloat(y) / 100 * bbox.height;\n    } else if ((0,_dia_attributes_calc_mjs__WEBPACK_IMPORTED_MODULE_4__.isCalcAttribute)(y)) {\n        y = Number((0,_dia_attributes_calc_mjs__WEBPACK_IMPORTED_MODULE_4__.evalCalcAttribute)(y, bbox));\n    }\n    return {\n        x,\n        y,\n        angle\n    };\n}\n// Creates a point stored in arguments\nfunction argPoint(bbox, args) {\n    const { x, y } = argTransform(bbox, args);\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Point(x || 0, y || 0);\n}\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const absolute = function(ports, elBBox) {\n    return ports.map((port)=>{\n        const transformation = argPoint(elBBox, port).round().toJSON();\n        transformation.angle = port.angle || 0;\n        return transformation;\n    });\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const fn = function(ports, elBBox, opt) {\n    return opt.fn(ports, elBBox, opt);\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const line = function(ports, elBBox, opt) {\n    var start = argPoint(elBBox, opt.start || elBBox.origin());\n    var end = argPoint(elBBox, opt.end || elBBox.corner());\n    return lineLayout(ports, start, end, elBBox);\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const left = function(ports, elBBox, opt) {\n    return lineLayout(ports, elBBox.origin(), elBBox.bottomLeft(), elBBox);\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const right = function(ports, elBBox, opt) {\n    return lineLayout(ports, elBBox.topRight(), elBBox.corner(), elBBox);\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const top = function(ports, elBBox, opt) {\n    return lineLayout(ports, elBBox.origin(), elBBox.topRight(), elBBox);\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt opt Group options\n * @returns {Array<g.Point>}\n */ const bottom = function(ports, elBBox, opt) {\n    return lineLayout(ports, elBBox.bottomLeft(), elBBox.corner(), elBBox);\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt Group options\n * @returns {Array<g.Point>}\n */ const ellipseSpread = function(ports, elBBox, opt) {\n    var startAngle = opt.startAngle || 0;\n    var stepAngle = opt.step || 360 / ports.length;\n    return ellipseLayout(ports, elBBox, startAngle, function(index) {\n        return index * stepAngle;\n    });\n};\n/**\n * @param {Array<Object>} ports\n * @param {g.Rect} elBBox\n * @param {Object=} opt Group options\n * @returns {Array<g.Point>}\n */ const ellipse = function(ports, elBBox, opt) {\n    var startAngle = opt.startAngle || 0;\n    var stepAngle = opt.step || 20;\n    return ellipseLayout(ports, elBBox, startAngle, function(index, count) {\n        return (index + 0.5 - count / 2) * stepAngle;\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/layout/ports/port.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/layout/ports/portLabel.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/jointjs/src/layout/ports/portLabel.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bottom: () => (/* binding */ bottom),\n/* harmony export */   inside: () => (/* binding */ inside),\n/* harmony export */   insideOriented: () => (/* binding */ insideOriented),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   manual: () => (/* binding */ manual),\n/* harmony export */   outside: () => (/* binding */ outside),\n/* harmony export */   outsideOriented: () => (/* binding */ outsideOriented),\n/* harmony export */   radial: () => (/* binding */ radial),\n/* harmony export */   radialOriented: () => (/* binding */ radialOriented),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   top: () => (/* binding */ top)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\n\nfunction labelAttributes(opt1, opt2) {\n    // use value from `opt2` if it is missing in `opt1`\n    // use value from this object if it is missing in `opt2` as well\n    return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.defaultsDeep({}, opt1, opt2, {\n        x: 0,\n        y: 0,\n        angle: 0,\n        attrs: {}\n    });\n}\nfunction getBBoxAngles(elBBox) {\n    var center = elBBox.center();\n    var tl = center.theta(elBBox.origin());\n    var bl = center.theta(elBBox.bottomLeft());\n    var br = center.theta(elBBox.corner());\n    var tr = center.theta(elBBox.topRight());\n    return [\n        tl,\n        tr,\n        br,\n        bl\n    ];\n}\nfunction outsideLayout(portPosition, elBBox, autoOrient, opt) {\n    opt = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.defaults({}, opt, {\n        offset: 15\n    });\n    var angle = elBBox.center().theta(portPosition);\n    var tx, ty, y, textAnchor;\n    var offset = opt.offset;\n    var orientAngle = 0;\n    const [topLeftAngle, bottomLeftAngle, bottomRightAngle, topRightAngle] = getBBoxAngles(elBBox);\n    if (angle < bottomLeftAngle || angle > bottomRightAngle) {\n        y = \".3em\";\n        tx = offset;\n        ty = 0;\n        textAnchor = \"start\";\n    } else if (angle < topLeftAngle) {\n        tx = 0;\n        ty = -offset;\n        if (autoOrient) {\n            orientAngle = -90;\n            textAnchor = \"start\";\n            y = \".3em\";\n        } else {\n            textAnchor = \"middle\";\n            y = \"0\";\n        }\n    } else if (angle < topRightAngle) {\n        y = \".3em\";\n        tx = -offset;\n        ty = 0;\n        textAnchor = \"end\";\n    } else {\n        tx = 0;\n        ty = offset;\n        if (autoOrient) {\n            orientAngle = 90;\n            textAnchor = \"start\";\n            y = \".3em\";\n        } else {\n            textAnchor = \"middle\";\n            y = \".6em\";\n        }\n    }\n    var round = Math.round;\n    return labelAttributes(opt, {\n        x: round(tx),\n        y: round(ty),\n        angle: orientAngle,\n        attrs: {\n            labelText: {\n                y,\n                textAnchor\n            }\n        }\n    });\n}\nfunction insideLayout(portPosition, elBBox, autoOrient, opt) {\n    opt = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.defaults({}, opt, {\n        offset: 15\n    });\n    var angle = elBBox.center().theta(portPosition);\n    var tx, ty, y, textAnchor;\n    var offset = opt.offset;\n    var orientAngle = 0;\n    const [topLeftAngle, bottomLeftAngle, bottomRightAngle, topRightAngle] = getBBoxAngles(elBBox);\n    if (angle < bottomLeftAngle || angle > bottomRightAngle) {\n        y = \".3em\";\n        tx = -offset;\n        ty = 0;\n        textAnchor = \"end\";\n    } else if (angle < topLeftAngle) {\n        tx = 0;\n        ty = offset;\n        if (autoOrient) {\n            orientAngle = 90;\n            textAnchor = \"start\";\n            y = \".3em\";\n        } else {\n            textAnchor = \"middle\";\n            y = \".6em\";\n        }\n    } else if (angle < topRightAngle) {\n        y = \".3em\";\n        tx = offset;\n        ty = 0;\n        textAnchor = \"start\";\n    } else {\n        tx = 0;\n        ty = -offset;\n        if (autoOrient) {\n            orientAngle = -90;\n            textAnchor = \"start\";\n            y = \".3em\";\n        } else {\n            textAnchor = \"middle\";\n            y = \"0\";\n        }\n    }\n    var round = Math.round;\n    return labelAttributes(opt, {\n        x: round(tx),\n        y: round(ty),\n        angle: orientAngle,\n        attrs: {\n            labelText: {\n                y,\n                textAnchor\n            }\n        }\n    });\n}\nfunction radialLayout(portCenterOffset, autoOrient, opt) {\n    opt = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.defaults({}, opt, {\n        offset: 20\n    });\n    var origin = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.point(0, 0);\n    var angle = -portCenterOffset.theta(origin);\n    var orientAngle = angle;\n    var offset = portCenterOffset.clone().move(origin, opt.offset).difference(portCenterOffset).round();\n    var y = \".3em\";\n    var textAnchor;\n    if ((angle + 90) % 180 === 0) {\n        textAnchor = autoOrient ? \"end\" : \"middle\";\n        if (!autoOrient && angle === -270) {\n            y = \"0em\";\n        }\n    } else if (angle > -270 && angle < -90) {\n        textAnchor = \"start\";\n        orientAngle = angle - 180;\n    } else {\n        textAnchor = \"end\";\n    }\n    var round = Math.round;\n    return labelAttributes(opt, {\n        x: round(offset.x),\n        y: round(offset.y),\n        angle: autoOrient ? orientAngle : 0,\n        attrs: {\n            labelText: {\n                y,\n                textAnchor\n            }\n        }\n    });\n}\nconst manual = function(_portPosition, _elBBox, opt) {\n    return labelAttributes(opt);\n};\nconst left = function(portPosition, elBBox, opt) {\n    return labelAttributes(opt, {\n        x: -15,\n        attrs: {\n            labelText: {\n                y: \".3em\",\n                textAnchor: \"end\"\n            }\n        }\n    });\n};\nconst right = function(portPosition, elBBox, opt) {\n    return labelAttributes(opt, {\n        x: 15,\n        attrs: {\n            labelText: {\n                y: \".3em\",\n                textAnchor: \"start\"\n            }\n        }\n    });\n};\nconst top = function(portPosition, elBBox, opt) {\n    return labelAttributes(opt, {\n        y: -15,\n        attrs: {\n            labelText: {\n                y: \"0\",\n                textAnchor: \"middle\"\n            }\n        }\n    });\n};\nconst bottom = function(portPosition, elBBox, opt) {\n    return labelAttributes(opt, {\n        y: 15,\n        attrs: {\n            labelText: {\n                y: \".6em\",\n                textAnchor: \"middle\"\n            }\n        }\n    });\n};\nconst outsideOriented = function(portPosition, elBBox, opt) {\n    return outsideLayout(portPosition, elBBox, true, opt);\n};\nconst outside = function(portPosition, elBBox, opt) {\n    return outsideLayout(portPosition, elBBox, false, opt);\n};\nconst insideOriented = function(portPosition, elBBox, opt) {\n    return insideLayout(portPosition, elBBox, true, opt);\n};\nconst inside = function(portPosition, elBBox, opt) {\n    return insideLayout(portPosition, elBBox, false, opt);\n};\nconst radial = function(portPosition, elBBox, opt) {\n    return radialLayout(portPosition.difference(elBBox.center()), false, opt);\n};\nconst radialOriented = function(portPosition, elBBox, opt) {\n    return radialLayout(portPosition.difference(elBBox.center()), true, opt);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/layout/ports/portLabel.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/linkAnchors/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/linkAnchors/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectionClosest: () => (/* binding */ connectionClosest),\n/* harmony export */   connectionLength: () => (/* binding */ connectionLength),\n/* harmony export */   connectionPerpendicular: () => (/* binding */ connectionPerpendicular),\n/* harmony export */   connectionRatio: () => (/* binding */ connectionRatio),\n/* harmony export */   resolveRef: () => (/* binding */ resolveRef)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n\n\nfunction connectionRatio(view, _magnet, _refPoint, opt) {\n    var ratio = \"ratio\" in opt ? opt.ratio : 0.5;\n    return view.getPointAtRatio(ratio);\n}\nfunction connectionLength(view, _magnet, _refPoint, opt) {\n    var length = \"length\" in opt ? opt.length : 20;\n    return view.getPointAtLength(length);\n}\nfunction _connectionPerpendicular(view, _magnet, refPoint, opt) {\n    var OFFSET = 1e6;\n    var path = view.getConnection();\n    var segmentSubdivisions = view.getConnectionSubdivisions();\n    var verticalLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(refPoint.clone().offset(0, OFFSET), refPoint.clone().offset(0, -OFFSET));\n    var horizontalLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(refPoint.clone().offset(OFFSET, 0), refPoint.clone().offset(-OFFSET, 0));\n    var verticalIntersections = verticalLine.intersect(path, {\n        segmentSubdivisions: segmentSubdivisions\n    });\n    var horizontalIntersections = horizontalLine.intersect(path, {\n        segmentSubdivisions: segmentSubdivisions\n    });\n    var intersections = [];\n    if (verticalIntersections) Array.prototype.push.apply(intersections, verticalIntersections);\n    if (horizontalIntersections) Array.prototype.push.apply(intersections, horizontalIntersections);\n    if (intersections.length > 0) return refPoint.chooseClosest(intersections);\n    if (\"fallbackAt\" in opt) {\n        return getPointAtLink(view, opt.fallbackAt);\n    }\n    return connectionClosest(view, _magnet, refPoint, opt);\n}\nfunction _connectionClosest(view, _magnet, refPoint, _opt) {\n    var closestPoint = view.getClosestPoint(refPoint);\n    if (!closestPoint) return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point();\n    return closestPoint;\n}\nfunction resolveRef(fn) {\n    return function(view, magnet, ref, opt) {\n        if (ref instanceof Element) {\n            var refView = this.paper.findView(ref);\n            var refPoint;\n            if (refView) {\n                if (refView.isNodeConnection(ref)) {\n                    var distance = \"fixedAt\" in opt ? opt.fixedAt : \"50%\";\n                    refPoint = getPointAtLink(refView, distance);\n                } else {\n                    refPoint = refView.getNodeBBox(ref).center();\n                }\n            } else {\n                // Something went wrong\n                refPoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point();\n            }\n            return fn.call(this, view, magnet, refPoint, opt);\n        }\n        return fn.apply(this, arguments);\n    };\n}\nfunction getPointAtLink(view, value) {\n    var parsedValue = parseFloat(value);\n    if ((0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.isPercentage)(value)) {\n        return view.getPointAtRatio(parsedValue / 100);\n    } else {\n        return view.getPointAtLength(parsedValue);\n    }\n}\n// joint.linkAnchors\n\nconst connectionPerpendicular = resolveRef(_connectionPerpendicular);\nconst connectionClosest = resolveRef(_connectionClosest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/linkAnchors/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/mvc/View.mjs":
/*!***********************************************!*\
  !*** ./node_modules/jointjs/src/mvc/View.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   View: () => (/* binding */ View),\n/* harmony export */   views: () => (/* binding */ views)\n/* harmony export */ });\n/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ \"(ssr)/./node_modules/backbone/backbone.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _config_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/index.mjs */ \"(ssr)/./node_modules/jointjs/src/config/index.mjs\");\n\n\n\n\n\nconst views = {};\nconst View = backbone__WEBPACK_IMPORTED_MODULE_0__.View.extend({\n    options: {},\n    theme: null,\n    themeClassNamePrefix: _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.addClassNamePrefix(\"theme-\"),\n    requireSetThemeOverride: false,\n    defaultTheme: _config_index_mjs__WEBPACK_IMPORTED_MODULE_3__.config.defaultTheme,\n    children: null,\n    childNodes: null,\n    DETACHABLE: true,\n    UPDATE_PRIORITY: 2,\n    FLAG_INSERT: 1 << 30,\n    FLAG_REMOVE: 1 << 29,\n    FLAG_INIT: 1 << 28,\n    constructor: function(options) {\n        this.requireSetThemeOverride = options && !!options.theme;\n        this.options = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign({}, this.options, options);\n        backbone__WEBPACK_IMPORTED_MODULE_0__.View.call(this, options);\n    },\n    initialize: function() {\n        views[this.cid] = this;\n        this.setTheme(this.options.theme || this.defaultTheme);\n        this.init();\n    },\n    unmount: function() {\n        if (this.svgElement) {\n            this.vel.remove();\n        } else {\n            this.$el.remove();\n        }\n    },\n    isMounted: function() {\n        return this.el.parentNode !== null;\n    },\n    renderChildren: function(children) {\n        children || (children = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"children\"));\n        if (children) {\n            var isSVG = this.svgElement;\n            var namespace = _V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].namespace[isSVG ? \"svg\" : \"xhtml\"];\n            var doc = _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.parseDOMJSON(children, namespace);\n            (isSVG ? this.vel : this.$el).empty().append(doc.fragment);\n            this.childNodes = doc.selectors;\n        }\n        return this;\n    },\n    findAttribute: function(attributeName, node) {\n        var currentNode = node;\n        while(currentNode && currentNode.nodeType === 1){\n            var attributeValue = currentNode.getAttribute(attributeName);\n            // attribute found\n            if (attributeValue) return attributeValue;\n            // do not climb up the DOM\n            if (currentNode === this.el) return null;\n            // try parent node\n            currentNode = currentNode.parentNode;\n        }\n        return null;\n    },\n    // Override the Backbone `_ensureElement()` method in order to create an\n    // svg element (e.g., `<g>`) node that wraps all the nodes of the Cell view.\n    // Expose class name setter as a separate method.\n    _ensureElement: function() {\n        if (!this.el) {\n            var tagName = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"tagName\");\n            var attrs = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign({}, _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"attributes\"));\n            var style = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign({}, _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"style\"));\n            if (this.id) attrs.id = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"id\");\n            this.setElement(this._createElement(tagName));\n            this._setAttributes(attrs);\n            this._setStyle(style);\n        } else {\n            this.setElement(_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"el\"));\n        }\n        this._ensureElClassName();\n    },\n    _setAttributes: function(attrs) {\n        if (this.svgElement) {\n            this.vel.attr(attrs);\n        } else {\n            this.$el.attr(attrs);\n        }\n    },\n    _setStyle: function(style) {\n        this.$el.css(style);\n    },\n    _createElement: function(tagName) {\n        if (this.svgElement) {\n            return document.createElementNS(_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"].namespace.svg, tagName);\n        } else {\n            return document.createElement(tagName);\n        }\n    },\n    // Utilize an alternative DOM manipulation API by\n    // adding an element reference wrapped in Vectorizer.\n    _setElement: function(el) {\n        this.$el = el instanceof backbone__WEBPACK_IMPORTED_MODULE_0__.$ ? el : backbone__WEBPACK_IMPORTED_MODULE_0__.$(el);\n        this.el = this.$el[0];\n        if (this.svgElement) this.vel = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.el);\n    },\n    _ensureElClassName: function() {\n        var className = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"className\");\n        if (!className) return;\n        var prefixedClassName = _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.addClassNamePrefix(className);\n        // Note: className removal here kept for backwards compatibility only\n        if (this.svgElement) {\n            this.vel.removeClass(className).addClass(prefixedClassName);\n        } else {\n            this.$el.removeClass(className).addClass(prefixedClassName);\n        }\n    },\n    init: function() {\n    // Intentionally empty.\n    // This method is meant to be overridden.\n    },\n    onRender: function() {\n    // Intentionally empty.\n    // This method is meant to be overridden.\n    },\n    confirmUpdate: function() {\n        // Intentionally empty.\n        // This method is meant to be overridden.\n        return 0;\n    },\n    setTheme: function(theme, opt) {\n        opt = opt || {};\n        // Theme is already set, override is required, and override has not been set.\n        // Don't set the theme.\n        if (this.theme && this.requireSetThemeOverride && !opt.override) {\n            return this;\n        }\n        this.removeThemeClassName();\n        this.addThemeClassName(theme);\n        this.onSetTheme(this.theme /* oldTheme */ , theme /* newTheme */ );\n        this.theme = theme;\n        return this;\n    },\n    addThemeClassName: function(theme) {\n        theme = theme || this.theme;\n        if (!theme) return this;\n        var className = this.themeClassNamePrefix + theme;\n        if (this.svgElement) {\n            this.vel.addClass(className);\n        } else {\n            this.$el.addClass(className);\n        }\n        return this;\n    },\n    removeThemeClassName: function(theme) {\n        theme = theme || this.theme;\n        var className = this.themeClassNamePrefix + theme;\n        if (this.svgElement) {\n            this.vel.removeClass(className);\n        } else {\n            this.$el.removeClass(className);\n        }\n        return this;\n    },\n    onSetTheme: function(oldTheme, newTheme) {\n    // Intentionally empty.\n    // This method is meant to be overridden.\n    },\n    remove: function() {\n        this.onRemove();\n        this.undelegateDocumentEvents();\n        views[this.cid] = null;\n        backbone__WEBPACK_IMPORTED_MODULE_0__.View.prototype.remove.apply(this, arguments);\n        return this;\n    },\n    onRemove: function() {\n    // Intentionally empty.\n    // This method is meant to be overridden.\n    },\n    getEventNamespace: function() {\n        // Returns a per-session unique namespace\n        return \".joint-event-ns-\" + this.cid;\n    },\n    delegateElementEvents: function(element, events, data) {\n        if (!events) return this;\n        data || (data = {});\n        var eventNS = this.getEventNamespace();\n        for(var eventName in events){\n            var method = events[eventName];\n            if (typeof method !== \"function\") method = this[method];\n            if (!method) continue;\n            jquery__WEBPACK_IMPORTED_MODULE_1__(element).on(eventName + eventNS, data, method.bind(this));\n        }\n        return this;\n    },\n    undelegateElementEvents: function(element) {\n        jquery__WEBPACK_IMPORTED_MODULE_1__(element).off(this.getEventNamespace());\n        return this;\n    },\n    delegateDocumentEvents: function(events, data) {\n        events || (events = _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.result(this, \"documentEvents\"));\n        return this.delegateElementEvents(document, events, data);\n    },\n    undelegateDocumentEvents: function() {\n        return this.undelegateElementEvents(document);\n    },\n    eventData: function(evt, data) {\n        if (!evt) throw new Error(\"eventData(): event object required.\");\n        var currentData = evt.data;\n        var key = \"__\" + this.cid + \"__\";\n        if (data === undefined) {\n            if (!currentData) return {};\n            return currentData[key] || {};\n        }\n        currentData || (currentData = evt.data = {});\n        currentData[key] || (currentData[key] = {});\n        _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign(currentData[key], data);\n        return this;\n    },\n    stopPropagation: function(evt) {\n        this.eventData(evt, {\n            propagationStopped: true\n        });\n        return this;\n    },\n    isPropagationStopped: function(evt) {\n        return !!this.eventData(evt).propagationStopped;\n    }\n}, {\n    extend: function() {\n        var args = Array.from(arguments);\n        // Deep clone the prototype and static properties objects.\n        // This prevents unexpected behavior where some properties are overwritten outside of this function.\n        var protoProps = args[0] && _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign({}, args[0]) || {};\n        var staticProps = args[1] && _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.assign({}, args[1]) || {};\n        // Need the real render method so that we can wrap it and call it later.\n        var renderFn = protoProps.render || this.prototype && this.prototype.render || null;\n        /*\n            Wrap the real render method so that:\n                .. `onRender` is always called.\n                .. `this` is always returned.\n        */ protoProps.render = function() {\n            if (typeof renderFn === \"function\") {\n                // Call the original render method.\n                renderFn.apply(this, arguments);\n            }\n            if (this.render.__render__ === renderFn) {\n                // Should always call onRender() method.\n                // Should call it only once when renderFn is actual prototype method i.e. not the wrapper\n                this.onRender();\n            }\n            // Should always return itself.\n            return this;\n        };\n        protoProps.render.__render__ = renderFn;\n        return backbone__WEBPACK_IMPORTED_MODULE_0__.View.extend.call(this, protoProps, staticProps);\n    }\n});\nconst DoubleTapEventName = \"dbltap\";\nif (jquery__WEBPACK_IMPORTED_MODULE_1__.event && !(DoubleTapEventName in jquery__WEBPACK_IMPORTED_MODULE_1__.event.special)) {\n    const maxDelay = _config_index_mjs__WEBPACK_IMPORTED_MODULE_3__.config.doubleTapInterval;\n    const minDelay = 30;\n    jquery__WEBPACK_IMPORTED_MODULE_1__.event.special[DoubleTapEventName] = {\n        bindType: \"touchend\",\n        delegateType: \"touchend\",\n        handle: function(event, ...args) {\n            const { handleObj, target } = event;\n            const targetData = jquery__WEBPACK_IMPORTED_MODULE_1__.data(target);\n            const now = new Date().getTime();\n            const delta = \"lastTouch\" in targetData ? now - targetData.lastTouch : 0;\n            if (delta < maxDelay && delta > minDelay) {\n                targetData.lastTouch = null;\n                event.type = handleObj.origType;\n                // let jQuery handle the triggering of \"dbltap\" event handlers\n                handleObj.handler.call(this, event, ...args);\n            } else {\n                targetData.lastTouch = now;\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/mvc/View.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/jointjs/src/routers/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   manhattan: () => (/* reexport safe */ _manhattan_mjs__WEBPACK_IMPORTED_MODULE_3__.manhattan),\n/* harmony export */   metro: () => (/* reexport safe */ _metro_mjs__WEBPACK_IMPORTED_MODULE_4__.metro),\n/* harmony export */   normal: () => (/* reexport safe */ _normal_mjs__WEBPACK_IMPORTED_MODULE_0__.normal),\n/* harmony export */   oneSide: () => (/* reexport safe */ _oneSide_mjs__WEBPACK_IMPORTED_MODULE_1__.oneSide),\n/* harmony export */   orthogonal: () => (/* reexport safe */ _orthogonal_mjs__WEBPACK_IMPORTED_MODULE_2__.orthogonal),\n/* harmony export */   rightAngle: () => (/* reexport safe */ _rightAngle_mjs__WEBPACK_IMPORTED_MODULE_5__.rightAngle)\n/* harmony export */ });\n/* harmony import */ var _normal_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normal.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/normal.mjs\");\n/* harmony import */ var _oneSide_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./oneSide.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/oneSide.mjs\");\n/* harmony import */ var _orthogonal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./orthogonal.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/orthogonal.mjs\");\n/* harmony import */ var _manhattan_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./manhattan.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/manhattan.mjs\");\n/* harmony import */ var _metro_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metro.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/metro.mjs\");\n/* harmony import */ var _rightAngle_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rightAngle.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/rightAngle.mjs\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ0M7QUFDRztBQUNEO0FBQ0o7QUFDSyIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL3JvdXRlcnMvaW5kZXgubWpzP2VlMjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9ub3JtYWwubWpzJztcbmV4cG9ydCAqIGZyb20gJy4vb25lU2lkZS5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9vcnRob2dvbmFsLm1qcyc7XG5leHBvcnQgKiBmcm9tICcuL21hbmhhdHRhbi5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tZXRyby5tanMnO1xuZXhwb3J0ICogZnJvbSAnLi9yaWdodEFuZ2xlLm1qcyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/manhattan.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/routers/manhattan.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   manhattan: () => (/* binding */ manhattan)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _orthogonal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orthogonal.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/orthogonal.mjs\");\n\n\n\nvar config = {\n    // size of the step to find a route (the grid of the manhattan pathfinder)\n    step: 10,\n    // the number of route finding loops that cause the router to abort\n    // returns fallback route instead\n    maximumLoops: 2000,\n    // the number of decimal places to round floating point coordinates\n    precision: 1,\n    // maximum change of direction\n    maxAllowedDirectionChange: 90,\n    // should the router use perpendicular linkView option?\n    // does not connect anchor of element but rather a point close-by that is orthogonal\n    // this looks much better\n    perpendicular: true,\n    // should the source and/or target not be considered as obstacles?\n    excludeEnds: [],\n    // should certain types of elements not be considered as obstacles?\n    excludeTypes: [\n        \"basic.Text\"\n    ],\n    // possible starting directions from an element\n    startDirections: [\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ],\n    // possible ending directions to an element\n    endDirections: [\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ],\n    // specify the directions used above and what they mean\n    directionMap: {\n        top: {\n            x: 0,\n            y: -1\n        },\n        right: {\n            x: 1,\n            y: 0\n        },\n        bottom: {\n            x: 0,\n            y: 1\n        },\n        left: {\n            x: -1,\n            y: 0\n        }\n    },\n    // cost of an orthogonal step\n    cost: function() {\n        return this.step;\n    },\n    // an array of directions to find next points on the route\n    // different from start/end directions\n    directions: function() {\n        var step = this.step;\n        var cost = this.cost();\n        return [\n            {\n                offsetX: step,\n                offsetY: 0,\n                cost: cost\n            },\n            {\n                offsetX: -step,\n                offsetY: 0,\n                cost: cost\n            },\n            {\n                offsetX: 0,\n                offsetY: step,\n                cost: cost\n            },\n            {\n                offsetX: 0,\n                offsetY: -step,\n                cost: cost\n            }\n        ];\n    },\n    // a penalty received for direction change\n    penalties: function() {\n        return {\n            0: 0,\n            45: this.step / 2,\n            90: this.step / 2\n        };\n    },\n    // padding applied on the element bounding boxes\n    paddingBox: function() {\n        var step = this.step;\n        return {\n            x: -step,\n            y: -step,\n            width: 2 * step,\n            height: 2 * step\n        };\n    },\n    // A function that determines whether a given point is an obstacle or not.\n    // If used, the `padding`, `excludeEnds`and `excludeTypes` options are ignored.\n    // (point: dia.Point) => boolean;\n    isPointObstacle: null,\n    // a router to use when the manhattan router fails\n    // (one of the partial routes returns null)\n    fallbackRouter: function(vertices, opt, linkView) {\n        if (!_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction(_orthogonal_mjs__WEBPACK_IMPORTED_MODULE_1__.orthogonal)) {\n            throw new Error(\"Manhattan requires the orthogonal router as default fallback.\");\n        }\n        return (0,_orthogonal_mjs__WEBPACK_IMPORTED_MODULE_1__.orthogonal)(vertices, _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign({}, config, opt), linkView);\n    },\n    /* Deprecated */ // a simple route used in situations when main routing method fails\n    // (exceed max number of loop iterations, inaccessible)\n    fallbackRoute: function(from, to, opt) {\n        return null; // null result will trigger the fallbackRouter\n    // left for reference:\n    /*// Find an orthogonal route ignoring obstacles.\n\n        var point = ((opt.previousDirAngle || 0) % 180 === 0)\n                ? new g.Point(from.x, to.y)\n                : new g.Point(to.x, from.y);\n\n        return [point];*/ },\n    // if a function is provided, it's used to route the link while dragging an end\n    // i.e. function(from, to, opt) { return []; }\n    draggingRoute: null\n};\n// HELPER CLASSES //\n// Map of obstacles\n// Helper structure to identify whether a point lies inside an obstacle.\nfunction ObstacleMap(opt) {\n    this.map = {};\n    this.options = opt;\n    // tells how to divide the paper when creating the elements map\n    this.mapGridSize = 100;\n}\nObstacleMap.prototype.build = function(graph, link) {\n    var opt = this.options;\n    // source or target element could be excluded from set of obstacles\n    var excludedEnds = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(opt.excludeEnds).reduce(function(res, item) {\n        var end = link.get(item);\n        if (end) {\n            var cell = graph.getCell(end.id);\n            if (cell) {\n                res.push(cell);\n            }\n        }\n        return res;\n    }, []);\n    // Exclude any embedded elements from the source and the target element.\n    var excludedAncestors = [];\n    var source = graph.getCell(link.get(\"source\").id);\n    if (source) {\n        excludedAncestors = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.union(excludedAncestors, source.getAncestors().map(function(cell) {\n            return cell.id;\n        }));\n    }\n    var target = graph.getCell(link.get(\"target\").id);\n    if (target) {\n        excludedAncestors = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.union(excludedAncestors, target.getAncestors().map(function(cell) {\n            return cell.id;\n        }));\n    }\n    // Builds a map of all elements for quicker obstacle queries (i.e. is a point contained\n    // in any obstacle?) (a simplified grid search).\n    // The paper is divided into smaller cells, where each holds information about which\n    // elements belong to it. When we query whether a point lies inside an obstacle we\n    // don't need to go through all obstacles, we check only those in a particular cell.\n    var mapGridSize = this.mapGridSize;\n    graph.getElements().reduce(function(map, element) {\n        var isExcludedType = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(opt.excludeTypes).includes(element.get(\"type\"));\n        var isExcludedEnd = excludedEnds.find(function(excluded) {\n            return excluded.id === element.id;\n        });\n        var isExcludedAncestor = excludedAncestors.includes(element.id);\n        var isExcluded = isExcludedType || isExcludedEnd || isExcludedAncestor;\n        if (!isExcluded) {\n            var bbox = element.getBBox().moveAndExpand(opt.paddingBox);\n            var origin = bbox.origin().snapToGrid(mapGridSize);\n            var corner = bbox.corner().snapToGrid(mapGridSize);\n            for(var x = origin.x; x <= corner.x; x += mapGridSize){\n                for(var y = origin.y; y <= corner.y; y += mapGridSize){\n                    var gridKey = x + \"@\" + y;\n                    map[gridKey] = map[gridKey] || [];\n                    map[gridKey].push(bbox);\n                }\n            }\n        }\n        return map;\n    }, this.map);\n    return this;\n};\nObstacleMap.prototype.isPointAccessible = function(point) {\n    var mapKey = point.clone().snapToGrid(this.mapGridSize).toString();\n    return _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(this.map[mapKey]).every(function(obstacle) {\n        return !obstacle.containsPoint(point);\n    });\n};\n// Sorted Set\n// Set of items sorted by given value.\nfunction SortedSet() {\n    this.items = [];\n    this.hash = {};\n    this.values = {};\n    this.OPEN = 1;\n    this.CLOSE = 2;\n}\nSortedSet.prototype.add = function(item, value) {\n    if (this.hash[item]) {\n        // item removal\n        this.items.splice(this.items.indexOf(item), 1);\n    } else {\n        this.hash[item] = this.OPEN;\n    }\n    this.values[item] = value;\n    var index = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.sortedIndex(this.items, item, (function(i) {\n        return this.values[i];\n    }).bind(this));\n    this.items.splice(index, 0, item);\n};\nSortedSet.prototype.remove = function(item) {\n    this.hash[item] = this.CLOSE;\n};\nSortedSet.prototype.isOpen = function(item) {\n    return this.hash[item] === this.OPEN;\n};\nSortedSet.prototype.isClose = function(item) {\n    return this.hash[item] === this.CLOSE;\n};\nSortedSet.prototype.isEmpty = function() {\n    return this.items.length === 0;\n};\nSortedSet.prototype.pop = function() {\n    var item = this.items.shift();\n    this.remove(item);\n    return item;\n};\n// HELPERS //\n// return source bbox\nfunction getSourceBBox(linkView, opt) {\n    // expand by padding box\n    if (opt && opt.paddingBox) return linkView.sourceBBox.clone().moveAndExpand(opt.paddingBox);\n    return linkView.sourceBBox.clone();\n}\n// return target bbox\nfunction getTargetBBox(linkView, opt) {\n    // expand by padding box\n    if (opt && opt.paddingBox) return linkView.targetBBox.clone().moveAndExpand(opt.paddingBox);\n    return linkView.targetBBox.clone();\n}\n// return source anchor\nfunction getSourceAnchor(linkView, opt) {\n    if (linkView.sourceAnchor) return linkView.sourceAnchor;\n    // fallback: center of bbox\n    var sourceBBox = getSourceBBox(linkView, opt);\n    return sourceBBox.center();\n}\n// return target anchor\nfunction getTargetAnchor(linkView, opt) {\n    if (linkView.targetAnchor) return linkView.targetAnchor;\n    // fallback: center of bbox\n    var targetBBox = getTargetBBox(linkView, opt);\n    return targetBBox.center(); // default\n}\n// returns a direction index from start point to end point\n// corrects for grid deformation between start and end\nfunction getDirectionAngle(start, end, numDirections, grid, opt) {\n    var quadrant = 360 / numDirections;\n    var angleTheta = start.theta(fixAngleEnd(start, end, grid, opt));\n    var normalizedAngle = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.normalizeAngle(angleTheta + quadrant / 2);\n    return quadrant * Math.floor(normalizedAngle / quadrant);\n}\n// helper function for getDirectionAngle()\n// corrects for grid deformation\n// (if a point is one grid steps away from another in both dimensions,\n// it is considered to be 45 degrees away, even if the real angle is different)\n// this causes visible angle discrepancies if `opt.step` is much larger than `paper.gridSize`\nfunction fixAngleEnd(start, end, grid, opt) {\n    var step = opt.step;\n    var diffX = end.x - start.x;\n    var diffY = end.y - start.y;\n    var gridStepsX = diffX / grid.x;\n    var gridStepsY = diffY / grid.y;\n    var distanceX = gridStepsX * step;\n    var distanceY = gridStepsY * step;\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point(start.x + distanceX, start.y + distanceY);\n}\n// return the change in direction between two direction angles\nfunction getDirectionChange(angle1, angle2) {\n    var directionChange = Math.abs(angle1 - angle2);\n    return directionChange > 180 ? 360 - directionChange : directionChange;\n}\n// fix direction offsets according to current grid\nfunction getGridOffsets(directions, grid, opt) {\n    var step = opt.step;\n    _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(opt.directions).forEach(function(direction) {\n        direction.gridOffsetX = direction.offsetX / step * grid.x;\n        direction.gridOffsetY = direction.offsetY / step * grid.y;\n    });\n}\n// get grid size in x and y dimensions, adapted to source and target positions\nfunction getGrid(step, source, target) {\n    return {\n        source: source.clone(),\n        x: getGridDimension(target.x - source.x, step),\n        y: getGridDimension(target.y - source.y, step)\n    };\n}\n// helper function for getGrid()\nfunction getGridDimension(diff, step) {\n    // return step if diff = 0\n    if (!diff) return step;\n    var absDiff = Math.abs(diff);\n    var numSteps = Math.round(absDiff / step);\n    // return absDiff if less than one step apart\n    if (!numSteps) return absDiff;\n    // otherwise, return corrected step\n    var roundedDiff = numSteps * step;\n    var remainder = absDiff - roundedDiff;\n    var stepCorrection = remainder / numSteps;\n    return step + stepCorrection;\n}\n// return a clone of point snapped to grid\nfunction snapToGrid(point, grid) {\n    var source = grid.source;\n    var snappedX = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.snapToGrid(point.x - source.x, grid.x) + source.x;\n    var snappedY = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.snapToGrid(point.y - source.y, grid.y) + source.y;\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point(snappedX, snappedY);\n}\n// round the point to opt.precision\nfunction round(point, precision) {\n    return point.round(precision);\n}\n// snap to grid and then round the point\nfunction align(point, grid, precision) {\n    return round(snapToGrid(point.clone(), grid), precision);\n}\n// return a string representing the point\n// string is rounded in both dimensions\nfunction getKey(point) {\n    return point.clone().toString();\n}\n// return a normalized vector from given point\n// used to determine the direction of a difference of two points\nfunction normalizePoint(point) {\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point(point.x === 0 ? 0 : Math.abs(point.x) / point.x, point.y === 0 ? 0 : Math.abs(point.y) / point.y);\n}\n// PATHFINDING //\n// reconstructs a route by concatenating points with their parents\nfunction reconstructRoute(parents, points, tailPoint, from, to, grid, opt) {\n    var route = [];\n    var prevDiff = normalizePoint(to.difference(tailPoint));\n    // tailPoint is assumed to be aligned already\n    var currentKey = getKey(tailPoint);\n    var parent = parents[currentKey];\n    var point;\n    while(parent){\n        // point is assumed to be aligned already\n        point = points[currentKey];\n        var diff = normalizePoint(point.difference(parent));\n        if (!diff.equals(prevDiff)) {\n            route.unshift(point);\n            prevDiff = diff;\n        }\n        // parent is assumed to be aligned already\n        currentKey = getKey(parent);\n        parent = parents[currentKey];\n    }\n    // leadPoint is assumed to be aligned already\n    var leadPoint = points[currentKey];\n    var fromDiff = normalizePoint(leadPoint.difference(from));\n    if (!fromDiff.equals(prevDiff)) {\n        route.unshift(leadPoint);\n    }\n    return route;\n}\n// heuristic method to determine the distance between two points\nfunction estimateCost(from, endPoints) {\n    var min = Infinity;\n    for(var i = 0, len = endPoints.length; i < len; i++){\n        var cost = from.manhattanDistance(endPoints[i]);\n        if (cost < min) min = cost;\n    }\n    return min;\n}\n// find points around the bbox taking given directions into account\n// lines are drawn from anchor in given directions, intersections recorded\n// if anchor is outside bbox, only those directions that intersect get a rect point\n// the anchor itself is returned as rect point (representing some directions)\n// (since those directions are unobstructed by the bbox)\nfunction getRectPoints(anchor, bbox, directionList, grid, opt) {\n    var precision = opt.precision;\n    var directionMap = opt.directionMap;\n    var anchorCenterVector = anchor.difference(bbox.center());\n    var keys = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject(directionMap) ? Object.keys(directionMap) : [];\n    var dirList = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(directionList);\n    var rectPoints = keys.reduce(function(res, key) {\n        if (dirList.includes(key)) {\n            var direction = directionMap[key];\n            // create a line that is guaranteed to intersect the bbox if bbox is in the direction\n            // even if anchor lies outside of bbox\n            var endpoint = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point(anchor.x + direction.x * (Math.abs(anchorCenterVector.x) + bbox.width), anchor.y + direction.y * (Math.abs(anchorCenterVector.y) + bbox.height));\n            var intersectionLine = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(anchor, endpoint);\n            // get the farther intersection, in case there are two\n            // (that happens if anchor lies next to bbox)\n            var intersections = intersectionLine.intersect(bbox) || [];\n            var numIntersections = intersections.length;\n            var farthestIntersectionDistance;\n            var farthestIntersection = null;\n            for(var i = 0; i < numIntersections; i++){\n                var currentIntersection = intersections[i];\n                var distance = anchor.squaredDistance(currentIntersection);\n                if (farthestIntersectionDistance === undefined || distance > farthestIntersectionDistance) {\n                    farthestIntersectionDistance = distance;\n                    farthestIntersection = currentIntersection;\n                }\n            }\n            // if an intersection was found in this direction, it is our rectPoint\n            if (farthestIntersection) {\n                var point = align(farthestIntersection, grid, precision);\n                // if the rectPoint lies inside the bbox, offset it by one more step\n                if (bbox.containsPoint(point)) {\n                    point = align(point.offset(direction.x * grid.x, direction.y * grid.y), grid, precision);\n                }\n                // then add the point to the result array\n                // aligned\n                res.push(point);\n            }\n        }\n        return res;\n    }, []);\n    // if anchor lies outside of bbox, add it to the array of points\n    if (!bbox.containsPoint(anchor)) {\n        // aligned\n        rectPoints.push(align(anchor, grid, precision));\n    }\n    return rectPoints;\n}\n// finds the route between two points/rectangles (`from`, `to`) implementing A* algorithm\n// rectangles get rect points assigned by getRectPoints()\nfunction findRoute(from, to, isPointObstacle, opt) {\n    var precision = opt.precision;\n    // Get grid for this route.\n    var sourceAnchor, targetAnchor;\n    if (from instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect) {\n        sourceAnchor = round(getSourceAnchor(this, opt).clone(), precision);\n    } else {\n        sourceAnchor = round(from.clone(), precision);\n    }\n    if (to instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect) {\n        targetAnchor = round(getTargetAnchor(this, opt).clone(), precision);\n    } else {\n        targetAnchor = round(to.clone(), precision);\n    }\n    var grid = getGrid(opt.step, sourceAnchor, targetAnchor);\n    // Get pathfinding points.\n    var start, end; // aligned with grid by definition\n    var startPoints, endPoints; // assumed to be aligned with grid already\n    // set of points we start pathfinding from\n    if (from instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect) {\n        start = sourceAnchor;\n        startPoints = getRectPoints(start, from, opt.startDirections, grid, opt);\n    } else {\n        start = sourceAnchor;\n        startPoints = [\n            start\n        ];\n    }\n    // set of points we want the pathfinding to finish at\n    if (to instanceof _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Rect) {\n        end = targetAnchor;\n        endPoints = getRectPoints(targetAnchor, to, opt.endDirections, grid, opt);\n    } else {\n        end = targetAnchor;\n        endPoints = [\n            end\n        ];\n    }\n    // take into account only accessible rect points (those not under obstacles)\n    startPoints = startPoints.filter((p)=>!isPointObstacle(p));\n    endPoints = endPoints.filter((p)=>!isPointObstacle(p));\n    // Check that there is an accessible route point on both sides.\n    // Otherwise, use fallbackRoute().\n    if (startPoints.length > 0 && endPoints.length > 0) {\n        // The set of tentative points to be evaluated, initially containing the start points.\n        // Rounded to nearest integer for simplicity.\n        var openSet = new SortedSet();\n        // Keeps reference to actual points for given elements of the open set.\n        var points = {};\n        // Keeps reference to a point that is immediate predecessor of given element.\n        var parents = {};\n        // Cost from start to a point along best known path.\n        var costs = {};\n        for(var i = 0, n = startPoints.length; i < n; i++){\n            // startPoint is assumed to be aligned already\n            var startPoint = startPoints[i];\n            var key = getKey(startPoint);\n            openSet.add(key, estimateCost(startPoint, endPoints));\n            points[key] = startPoint;\n            costs[key] = 0;\n        }\n        var previousRouteDirectionAngle = opt.previousDirectionAngle; // undefined for first route\n        var isPathBeginning = previousRouteDirectionAngle === undefined;\n        // directions\n        var direction, directionChange;\n        var directions = opt.directions;\n        getGridOffsets(directions, grid, opt);\n        var numDirections = directions.length;\n        var endPointsKeys = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(endPoints).reduce(function(res, endPoint) {\n            // endPoint is assumed to be aligned already\n            var key = getKey(endPoint);\n            res.push(key);\n            return res;\n        }, []);\n        // main route finding loop\n        var loopsRemaining = opt.maximumLoops;\n        while(!openSet.isEmpty() && loopsRemaining > 0){\n            // remove current from the open list\n            var currentKey = openSet.pop();\n            var currentPoint = points[currentKey];\n            var currentParent = parents[currentKey];\n            var currentCost = costs[currentKey];\n            var isRouteBeginning = currentParent === undefined; // undefined for route starts\n            var isStart = currentPoint.equals(start); // (is source anchor or `from` point) = can leave in any direction\n            var previousDirectionAngle;\n            if (!isRouteBeginning) previousDirectionAngle = getDirectionAngle(currentParent, currentPoint, numDirections, grid, opt); // a vertex on the route\n            else if (!isPathBeginning) previousDirectionAngle = previousRouteDirectionAngle; // beginning of route on the path\n            else if (!isStart) previousDirectionAngle = getDirectionAngle(start, currentPoint, numDirections, grid, opt); // beginning of path, start rect point\n            else previousDirectionAngle = null; // beginning of path, source anchor or `from` point\n            // check if we reached any endpoint\n            var samePoints = startPoints.length === endPoints.length;\n            if (samePoints) {\n                for(var j = 0; j < startPoints.length; j++){\n                    if (!startPoints[j].equals(endPoints[j])) {\n                        samePoints = false;\n                        break;\n                    }\n                }\n            }\n            var skipEndCheck = isRouteBeginning && samePoints;\n            if (!skipEndCheck && endPointsKeys.indexOf(currentKey) >= 0) {\n                opt.previousDirectionAngle = previousDirectionAngle;\n                return reconstructRoute(parents, points, currentPoint, start, end, grid, opt);\n            }\n            // go over all possible directions and find neighbors\n            for(i = 0; i < numDirections; i++){\n                direction = directions[i];\n                var directionAngle = direction.angle;\n                directionChange = getDirectionChange(previousDirectionAngle, directionAngle);\n                // if the direction changed rapidly, don't use this point\n                // any direction is allowed for starting points\n                if (!(isPathBeginning && isStart) && directionChange > opt.maxAllowedDirectionChange) continue;\n                var neighborPoint = align(currentPoint.clone().offset(direction.gridOffsetX, direction.gridOffsetY), grid, precision);\n                var neighborKey = getKey(neighborPoint);\n                // Closed points from the openSet were already evaluated.\n                if (openSet.isClose(neighborKey) || isPointObstacle(neighborPoint)) continue;\n                // We can only enter end points at an acceptable angle.\n                if (endPointsKeys.indexOf(neighborKey) >= 0) {\n                    var isNeighborEnd = neighborPoint.equals(end); // (is target anchor or `to` point) = can be entered in any direction\n                    if (!isNeighborEnd) {\n                        var endDirectionAngle = getDirectionAngle(neighborPoint, end, numDirections, grid, opt);\n                        var endDirectionChange = getDirectionChange(directionAngle, endDirectionAngle);\n                        if (endDirectionChange > opt.maxAllowedDirectionChange) continue;\n                    }\n                }\n                // The current direction is ok.\n                var neighborCost = direction.cost;\n                var neighborPenalty = isStart ? 0 : opt.penalties[directionChange]; // no penalties for start point\n                var costFromStart = currentCost + neighborCost + neighborPenalty;\n                if (!openSet.isOpen(neighborKey) || costFromStart < costs[neighborKey]) {\n                    // neighbor point has not been processed yet\n                    // or the cost of the path from start is lower than previously calculated\n                    points[neighborKey] = neighborPoint;\n                    parents[neighborKey] = currentPoint;\n                    costs[neighborKey] = costFromStart;\n                    openSet.add(neighborKey, costFromStart + estimateCost(neighborPoint, endPoints));\n                }\n            }\n            loopsRemaining--;\n        }\n    }\n    // no route found (`to` point either wasn't accessible or finding route took\n    // way too much calculation)\n    return opt.fallbackRoute.call(this, start, end, opt);\n}\n// resolve some of the options\nfunction resolveOptions(opt) {\n    opt.directions = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.result(opt, \"directions\");\n    opt.penalties = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.result(opt, \"penalties\");\n    opt.paddingBox = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.result(opt, \"paddingBox\");\n    opt.padding = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.result(opt, \"padding\");\n    if (opt.padding) {\n        // if both provided, opt.padding wins over opt.paddingBox\n        var sides = _util_index_mjs__WEBPACK_IMPORTED_MODULE_6__.normalizeSides(opt.padding);\n        opt.paddingBox = {\n            x: -sides.left,\n            y: -sides.top,\n            width: sides.left + sides.right,\n            height: sides.top + sides.bottom\n        };\n    }\n    _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(opt.directions).forEach(function(direction) {\n        var point1 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point(0, 0);\n        var point2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point(direction.offsetX, direction.offsetY);\n        direction.angle = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.normalizeAngle(point1.theta(point2));\n    });\n}\n// initialization of the route finding\nfunction router(vertices, opt, linkView) {\n    resolveOptions(opt);\n    // enable/disable linkView perpendicular option\n    linkView.options.perpendicular = !!opt.perpendicular;\n    var sourceBBox = getSourceBBox(linkView, opt);\n    var targetBBox = getTargetBBox(linkView, opt);\n    var sourceAnchor = getSourceAnchor(linkView, opt);\n    //var targetAnchor = getTargetAnchor(linkView, opt);\n    // pathfinding\n    let isPointObstacle;\n    if (typeof opt.isPointObstacle === \"function\") {\n        isPointObstacle = opt.isPointObstacle;\n    } else {\n        const map = new ObstacleMap(opt);\n        map.build(linkView.paper.model, linkView.model);\n        isPointObstacle = (point)=>!map.isPointAccessible(point);\n    }\n    var oldVertices = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray(vertices).map(_g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Point);\n    var newVertices = [];\n    var tailPoint = sourceAnchor; // the origin of first route's grid, does not need snapping\n    // find a route by concatenating all partial routes (routes need to pass through vertices)\n    // source -> vertex[1] -> ... -> vertex[n] -> target\n    var to, from;\n    for(var i = 0, len = oldVertices.length; i <= len; i++){\n        var partialRoute = null;\n        from = to || sourceBBox;\n        to = oldVertices[i];\n        if (!to) {\n            // this is the last iteration\n            // we ran through all vertices in oldVertices\n            // 'to' is not a vertex.\n            to = targetBBox;\n            // If the target is a point (i.e. it's not an element), we\n            // should use dragging route instead of main routing method if it has been provided.\n            var isEndingAtPoint = !linkView.model.get(\"source\").id || !linkView.model.get(\"target\").id;\n            if (isEndingAtPoint && _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction(opt.draggingRoute)) {\n                // Make sure we are passing points only (not rects).\n                var dragFrom = from === sourceBBox ? sourceAnchor : from;\n                var dragTo = to.origin();\n                partialRoute = opt.draggingRoute.call(linkView, dragFrom, dragTo, opt);\n            }\n        }\n        // if partial route has not been calculated yet use the main routing method to find one\n        partialRoute = partialRoute || findRoute.call(linkView, from, to, isPointObstacle, opt);\n        if (partialRoute === null) {\n            return opt.fallbackRouter(vertices, opt, linkView);\n        }\n        var leadPoint = partialRoute[0];\n        // remove the first point if the previous partial route had the same point as last\n        if (leadPoint && leadPoint.equals(tailPoint)) partialRoute.shift();\n        // save tailPoint for next iteration\n        tailPoint = partialRoute[partialRoute.length - 1] || tailPoint;\n        Array.prototype.push.apply(newVertices, partialRoute);\n    }\n    return newVertices;\n}\n// public function\nconst manhattan = function(vertices, opt, linkView) {\n    return router(vertices, _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.assign({}, config, opt), linkView);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/manhattan.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/metro.mjs":
/*!****************************************************!*\
  !*** ./node_modules/jointjs/src/routers/metro.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   metro: () => (/* binding */ metro)\n/* harmony export */ });\n/* harmony import */ var _manhattan_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./manhattan.mjs */ \"(ssr)/./node_modules/jointjs/src/routers/manhattan.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n\n\n\nvar config = {\n    maxAllowedDirectionChange: 45,\n    // cost of a diagonal step\n    diagonalCost: function() {\n        var step = this.step;\n        return Math.ceil(Math.sqrt(step * step << 1));\n    },\n    // an array of directions to find next points on the route\n    // different from start/end directions\n    directions: function() {\n        var step = this.step;\n        var cost = this.cost();\n        var diagonalCost = this.diagonalCost();\n        return [\n            {\n                offsetX: step,\n                offsetY: 0,\n                cost: cost\n            },\n            {\n                offsetX: step,\n                offsetY: step,\n                cost: diagonalCost\n            },\n            {\n                offsetX: 0,\n                offsetY: step,\n                cost: cost\n            },\n            {\n                offsetX: -step,\n                offsetY: step,\n                cost: diagonalCost\n            },\n            {\n                offsetX: -step,\n                offsetY: 0,\n                cost: cost\n            },\n            {\n                offsetX: -step,\n                offsetY: -step,\n                cost: diagonalCost\n            },\n            {\n                offsetX: 0,\n                offsetY: -step,\n                cost: cost\n            },\n            {\n                offsetX: step,\n                offsetY: -step,\n                cost: diagonalCost\n            }\n        ];\n    },\n    // a simple route used in situations when main routing method fails\n    // (exceed max number of loop iterations, inaccessible)\n    fallbackRoute: function(from, to, opt) {\n        // Find a route which breaks by 45 degrees ignoring all obstacles.\n        var theta = from.theta(to);\n        var route = [];\n        var a = {\n            x: to.x,\n            y: from.y\n        };\n        var b = {\n            x: from.x,\n            y: to.y\n        };\n        if (theta % 180 > 90) {\n            var t = a;\n            a = b;\n            b = t;\n        }\n        var p1 = theta % 90 < 45 ? a : b;\n        var l1 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(from, p1);\n        var alpha = 90 * Math.ceil(theta / 90);\n        var p2 = _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Point.fromPolar(l1.squaredLength(), _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.toRad(alpha + 135), p1);\n        var l2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Line(to, p2);\n        var intersectionPoint = l1.intersection(l2);\n        var point = intersectionPoint ? intersectionPoint : to;\n        var directionFrom = intersectionPoint ? point : from;\n        var quadrant = 360 / opt.directions.length;\n        var angleTheta = directionFrom.theta(to);\n        var normalizedAngle = _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.normalizeAngle(angleTheta + quadrant / 2);\n        var directionAngle = quadrant * Math.floor(normalizedAngle / quadrant);\n        opt.previousDirectionAngle = directionAngle;\n        if (point) route.push(point.round());\n        route.push(to);\n        return route;\n    }\n};\n// public function\nconst metro = function(vertices, opt, linkView) {\n    if (!_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.isFunction(_manhattan_mjs__WEBPACK_IMPORTED_MODULE_4__.manhattan)) {\n        throw new Error(\"Metro requires the manhattan router.\");\n    }\n    return (0,_manhattan_mjs__WEBPACK_IMPORTED_MODULE_4__.manhattan)(vertices, _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.assign({}, config, opt), linkView);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9tZXRyby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRDO0FBQ0Y7QUFDTjtBQUVwQyxJQUFJRyxTQUFTO0lBRVRDLDJCQUEyQjtJQUUzQiwwQkFBMEI7SUFDMUJDLGNBQWM7UUFFVixJQUFJQyxPQUFPLElBQUksQ0FBQ0EsSUFBSTtRQUNwQixPQUFPQyxLQUFLQyxJQUFJLENBQUNELEtBQUtFLElBQUksQ0FBQ0gsT0FBT0EsUUFBUTtJQUM5QztJQUVBLDBEQUEwRDtJQUMxRCxzQ0FBc0M7SUFDdENJLFlBQVk7UUFFUixJQUFJSixPQUFPLElBQUksQ0FBQ0EsSUFBSTtRQUNwQixJQUFJSyxPQUFPLElBQUksQ0FBQ0EsSUFBSTtRQUNwQixJQUFJTixlQUFlLElBQUksQ0FBQ0EsWUFBWTtRQUVwQyxPQUFPO1lBQ0g7Z0JBQUVPLFNBQVNOO2dCQUFNTyxTQUFTO2dCQUFHRixNQUFNQTtZQUFLO1lBQ3hDO2dCQUFFQyxTQUFTTjtnQkFBTU8sU0FBU1A7Z0JBQU1LLE1BQU1OO1lBQWE7WUFDbkQ7Z0JBQUVPLFNBQVM7Z0JBQUdDLFNBQVNQO2dCQUFNSyxNQUFNQTtZQUFLO1lBQ3hDO2dCQUFFQyxTQUFTLENBQUNOO2dCQUFNTyxTQUFTUDtnQkFBTUssTUFBTU47WUFBYTtZQUNwRDtnQkFBRU8sU0FBUyxDQUFDTjtnQkFBTU8sU0FBUztnQkFBR0YsTUFBTUE7WUFBSztZQUN6QztnQkFBRUMsU0FBUyxDQUFDTjtnQkFBTU8sU0FBUyxDQUFDUDtnQkFBTUssTUFBTU47WUFBYTtZQUNyRDtnQkFBRU8sU0FBUztnQkFBR0MsU0FBUyxDQUFDUDtnQkFBTUssTUFBTUE7WUFBSztZQUN6QztnQkFBRUMsU0FBU047Z0JBQU1PLFNBQVMsQ0FBQ1A7Z0JBQU1LLE1BQU1OO1lBQWE7U0FDdkQ7SUFDTDtJQUVBLG1FQUFtRTtJQUNuRSx1REFBdUQ7SUFDdkRTLGVBQWUsU0FBU0MsSUFBSSxFQUFFQyxFQUFFLEVBQUVDLEdBQUc7UUFFakMsa0VBQWtFO1FBRWxFLElBQUlDLFFBQVFILEtBQUtHLEtBQUssQ0FBQ0Y7UUFFdkIsSUFBSUcsUUFBUSxFQUFFO1FBRWQsSUFBSUMsSUFBSTtZQUFFQyxHQUFHTCxHQUFHSyxDQUFDO1lBQUVDLEdBQUdQLEtBQUtPLENBQUM7UUFBQztRQUM3QixJQUFJQyxJQUFJO1lBQUVGLEdBQUdOLEtBQUtNLENBQUM7WUFBRUMsR0FBR04sR0FBR00sQ0FBQztRQUFDO1FBRTdCLElBQUlKLFFBQVEsTUFBTSxJQUFJO1lBQ2xCLElBQUlNLElBQUlKO1lBQ1JBLElBQUlHO1lBQ0pBLElBQUlDO1FBQ1I7UUFFQSxJQUFJQyxLQUFLLFFBQVMsS0FBTSxLQUFLTCxJQUFJRztRQUNqQyxJQUFJRyxLQUFLLElBQUl4Qiw4Q0FBTSxDQUFDYSxNQUFNVTtRQUUxQixJQUFJRyxRQUFRLEtBQUtyQixLQUFLQyxJQUFJLENBQUNVLFFBQVE7UUFFbkMsSUFBSVcsS0FBSzNCLCtDQUFPLENBQUM2QixTQUFTLENBQUNMLEdBQUdNLGFBQWEsSUFBSTlCLCtDQUFPLENBQUMwQixRQUFRLE1BQU1IO1FBQ3JFLElBQUlTLEtBQUssSUFBSWhDLDhDQUFNLENBQUNjLElBQUlhO1FBRXhCLElBQUlNLG9CQUFvQlQsR0FBR1UsWUFBWSxDQUFDRjtRQUN4QyxJQUFJRyxRQUFRRixvQkFBb0JBLG9CQUFvQm5CO1FBRXBELElBQUlzQixnQkFBZ0JILG9CQUFvQkUsUUFBUXRCO1FBRWhELElBQUl3QixXQUFXLE1BQU10QixJQUFJUCxVQUFVLENBQUM4QixNQUFNO1FBQzFDLElBQUlDLGFBQWFILGNBQWNwQixLQUFLLENBQUNGO1FBQ3JDLElBQUkwQixrQkFBa0J4Qyx3REFBZ0IsQ0FBQ3VDLGFBQWNGLFdBQVc7UUFDaEUsSUFBSUssaUJBQWlCTCxXQUFXaEMsS0FBS3NDLEtBQUssQ0FBQ0gsa0JBQWtCSDtRQUU3RHRCLElBQUk2QixzQkFBc0IsR0FBR0Y7UUFFN0IsSUFBSVAsT0FBT2xCLE1BQU00QixJQUFJLENBQUNWLE1BQU1XLEtBQUs7UUFDakM3QixNQUFNNEIsSUFBSSxDQUFDL0I7UUFFWCxPQUFPRztJQUNYO0FBQ0o7QUFFQSxrQkFBa0I7QUFDWCxNQUFNOEIsUUFBUSxTQUFTQyxRQUFRLEVBQUVqQyxHQUFHLEVBQUVrQyxRQUFRO0lBRWpELElBQUksQ0FBQ2xELHVEQUFlLENBQUNELHFEQUFTQSxHQUFHO1FBQzdCLE1BQU0sSUFBSXFELE1BQU07SUFDcEI7SUFFQSxPQUFPckQseURBQVNBLENBQUNrRCxVQUFVakQsbURBQVcsQ0FBQyxDQUFDLEdBQUdFLFFBQVFjLE1BQU1rQztBQUM3RCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9tZXRyby5tanM/ZGQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYW5oYXR0YW4gfSBmcm9tICcuL21hbmhhdHRhbi5tanMnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsL2luZGV4Lm1qcyc7XG5pbXBvcnQgKiBhcyBnIGZyb20gJy4uL2cvaW5kZXgubWpzJztcblxudmFyIGNvbmZpZyA9IHtcblxuICAgIG1heEFsbG93ZWREaXJlY3Rpb25DaGFuZ2U6IDQ1LFxuXG4gICAgLy8gY29zdCBvZiBhIGRpYWdvbmFsIHN0ZXBcbiAgICBkaWFnb25hbENvc3Q6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBzdGVwID0gdGhpcy5zdGVwO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKE1hdGguc3FydChzdGVwICogc3RlcCA8PCAxKSk7XG4gICAgfSxcblxuICAgIC8vIGFuIGFycmF5IG9mIGRpcmVjdGlvbnMgdG8gZmluZCBuZXh0IHBvaW50cyBvbiB0aGUgcm91dGVcbiAgICAvLyBkaWZmZXJlbnQgZnJvbSBzdGFydC9lbmQgZGlyZWN0aW9uc1xuICAgIGRpcmVjdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBzdGVwID0gdGhpcy5zdGVwO1xuICAgICAgICB2YXIgY29zdCA9IHRoaXMuY29zdCgpO1xuICAgICAgICB2YXIgZGlhZ29uYWxDb3N0ID0gdGhpcy5kaWFnb25hbENvc3QoKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBvZmZzZXRYOiBzdGVwLCBvZmZzZXRZOiAwLCBjb3N0OiBjb3N0IH0sXG4gICAgICAgICAgICB7IG9mZnNldFg6IHN0ZXAsIG9mZnNldFk6IHN0ZXAsIGNvc3Q6IGRpYWdvbmFsQ29zdCB9LFxuICAgICAgICAgICAgeyBvZmZzZXRYOiAwLCBvZmZzZXRZOiBzdGVwLCBjb3N0OiBjb3N0IH0sXG4gICAgICAgICAgICB7IG9mZnNldFg6IC1zdGVwLCBvZmZzZXRZOiBzdGVwLCBjb3N0OiBkaWFnb25hbENvc3QgfSxcbiAgICAgICAgICAgIHsgb2Zmc2V0WDogLXN0ZXAsIG9mZnNldFk6IDAsIGNvc3Q6IGNvc3QgfSxcbiAgICAgICAgICAgIHsgb2Zmc2V0WDogLXN0ZXAsIG9mZnNldFk6IC1zdGVwLCBjb3N0OiBkaWFnb25hbENvc3QgfSxcbiAgICAgICAgICAgIHsgb2Zmc2V0WDogMCwgb2Zmc2V0WTogLXN0ZXAsIGNvc3Q6IGNvc3QgfSxcbiAgICAgICAgICAgIHsgb2Zmc2V0WDogc3RlcCwgb2Zmc2V0WTogLXN0ZXAsIGNvc3Q6IGRpYWdvbmFsQ29zdCB9XG4gICAgICAgIF07XG4gICAgfSxcblxuICAgIC8vIGEgc2ltcGxlIHJvdXRlIHVzZWQgaW4gc2l0dWF0aW9ucyB3aGVuIG1haW4gcm91dGluZyBtZXRob2QgZmFpbHNcbiAgICAvLyAoZXhjZWVkIG1heCBudW1iZXIgb2YgbG9vcCBpdGVyYXRpb25zLCBpbmFjY2Vzc2libGUpXG4gICAgZmFsbGJhY2tSb3V0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIG9wdCkge1xuXG4gICAgICAgIC8vIEZpbmQgYSByb3V0ZSB3aGljaCBicmVha3MgYnkgNDUgZGVncmVlcyBpZ25vcmluZyBhbGwgb2JzdGFjbGVzLlxuXG4gICAgICAgIHZhciB0aGV0YSA9IGZyb20udGhldGEodG8pO1xuXG4gICAgICAgIHZhciByb3V0ZSA9IFtdO1xuXG4gICAgICAgIHZhciBhID0geyB4OiB0by54LCB5OiBmcm9tLnkgfTtcbiAgICAgICAgdmFyIGIgPSB7IHg6IGZyb20ueCwgeTogdG8ueSB9O1xuXG4gICAgICAgIGlmICh0aGV0YSAlIDE4MCA+IDkwKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgICAgICBhID0gYjtcbiAgICAgICAgICAgIGIgPSB0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHAxID0gKHRoZXRhICUgOTApIDwgNDUgPyBhIDogYjtcbiAgICAgICAgdmFyIGwxID0gbmV3IGcuTGluZShmcm9tLCBwMSk7XG5cbiAgICAgICAgdmFyIGFscGhhID0gOTAgKiBNYXRoLmNlaWwodGhldGEgLyA5MCk7XG5cbiAgICAgICAgdmFyIHAyID0gZy5Qb2ludC5mcm9tUG9sYXIobDEuc3F1YXJlZExlbmd0aCgpLCBnLnRvUmFkKGFscGhhICsgMTM1KSwgcDEpO1xuICAgICAgICB2YXIgbDIgPSBuZXcgZy5MaW5lKHRvLCBwMik7XG5cbiAgICAgICAgdmFyIGludGVyc2VjdGlvblBvaW50ID0gbDEuaW50ZXJzZWN0aW9uKGwyKTtcbiAgICAgICAgdmFyIHBvaW50ID0gaW50ZXJzZWN0aW9uUG9pbnQgPyBpbnRlcnNlY3Rpb25Qb2ludCA6IHRvO1xuXG4gICAgICAgIHZhciBkaXJlY3Rpb25Gcm9tID0gaW50ZXJzZWN0aW9uUG9pbnQgPyBwb2ludCA6IGZyb207XG5cbiAgICAgICAgdmFyIHF1YWRyYW50ID0gMzYwIC8gb3B0LmRpcmVjdGlvbnMubGVuZ3RoO1xuICAgICAgICB2YXIgYW5nbGVUaGV0YSA9IGRpcmVjdGlvbkZyb20udGhldGEodG8pO1xuICAgICAgICB2YXIgbm9ybWFsaXplZEFuZ2xlID0gZy5ub3JtYWxpemVBbmdsZShhbmdsZVRoZXRhICsgKHF1YWRyYW50IC8gMikpO1xuICAgICAgICB2YXIgZGlyZWN0aW9uQW5nbGUgPSBxdWFkcmFudCAqIE1hdGguZmxvb3Iobm9ybWFsaXplZEFuZ2xlIC8gcXVhZHJhbnQpO1xuXG4gICAgICAgIG9wdC5wcmV2aW91c0RpcmVjdGlvbkFuZ2xlID0gZGlyZWN0aW9uQW5nbGU7XG5cbiAgICAgICAgaWYgKHBvaW50KSByb3V0ZS5wdXNoKHBvaW50LnJvdW5kKCkpO1xuICAgICAgICByb3V0ZS5wdXNoKHRvKTtcblxuICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgfVxufTtcblxuLy8gcHVibGljIGZ1bmN0aW9uXG5leHBvcnQgY29uc3QgbWV0cm8gPSBmdW5jdGlvbih2ZXJ0aWNlcywgb3B0LCBsaW5rVmlldykge1xuXG4gICAgaWYgKCF1dGlsLmlzRnVuY3Rpb24obWFuaGF0dGFuKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldHJvIHJlcXVpcmVzIHRoZSBtYW5oYXR0YW4gcm91dGVyLicpO1xuICAgIH1cblxuICAgIHJldHVybiBtYW5oYXR0YW4odmVydGljZXMsIHV0aWwuYXNzaWduKHt9LCBjb25maWcsIG9wdCksIGxpbmtWaWV3KTtcbn07XG5cbiJdLCJuYW1lcyI6WyJtYW5oYXR0YW4iLCJ1dGlsIiwiZyIsImNvbmZpZyIsIm1heEFsbG93ZWREaXJlY3Rpb25DaGFuZ2UiLCJkaWFnb25hbENvc3QiLCJzdGVwIiwiTWF0aCIsImNlaWwiLCJzcXJ0IiwiZGlyZWN0aW9ucyIsImNvc3QiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImZhbGxiYWNrUm91dGUiLCJmcm9tIiwidG8iLCJvcHQiLCJ0aGV0YSIsInJvdXRlIiwiYSIsIngiLCJ5IiwiYiIsInQiLCJwMSIsImwxIiwiTGluZSIsImFscGhhIiwicDIiLCJQb2ludCIsImZyb21Qb2xhciIsInNxdWFyZWRMZW5ndGgiLCJ0b1JhZCIsImwyIiwiaW50ZXJzZWN0aW9uUG9pbnQiLCJpbnRlcnNlY3Rpb24iLCJwb2ludCIsImRpcmVjdGlvbkZyb20iLCJxdWFkcmFudCIsImxlbmd0aCIsImFuZ2xlVGhldGEiLCJub3JtYWxpemVkQW5nbGUiLCJub3JtYWxpemVBbmdsZSIsImRpcmVjdGlvbkFuZ2xlIiwiZmxvb3IiLCJwcmV2aW91c0RpcmVjdGlvbkFuZ2xlIiwicHVzaCIsInJvdW5kIiwibWV0cm8iLCJ2ZXJ0aWNlcyIsImxpbmtWaWV3IiwiaXNGdW5jdGlvbiIsIkVycm9yIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/metro.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/normal.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/jointjs/src/routers/normal.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normal: () => (/* binding */ normal)\n/* harmony export */ });\n// Does not make any changes to vertices.\n// Returns the arguments that are passed to it, unchanged.\nconst normal = function(vertices, opt, linkView) {\n    return vertices;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9ub3JtYWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx5Q0FBeUM7QUFDekMsMERBQTBEO0FBQ25ELE1BQU1BLFNBQVMsU0FBU0MsUUFBUSxFQUFFQyxHQUFHLEVBQUVDLFFBQVE7SUFFbEQsT0FBT0Y7QUFDWCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9ub3JtYWwubWpzPzg0ZTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRG9lcyBub3QgbWFrZSBhbnkgY2hhbmdlcyB0byB2ZXJ0aWNlcy5cbi8vIFJldHVybnMgdGhlIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gaXQsIHVuY2hhbmdlZC5cbmV4cG9ydCBjb25zdCBub3JtYWwgPSBmdW5jdGlvbih2ZXJ0aWNlcywgb3B0LCBsaW5rVmlldykge1xuXG4gICAgcmV0dXJuIHZlcnRpY2VzO1xufTtcbiJdLCJuYW1lcyI6WyJub3JtYWwiLCJ2ZXJ0aWNlcyIsIm9wdCIsImxpbmtWaWV3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/normal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/oneSide.mjs":
/*!******************************************************!*\
  !*** ./node_modules/jointjs/src/routers/oneSide.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   oneSide: () => (/* binding */ oneSide)\n/* harmony export */ });\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n\n// Routes the link always to/from a certain side\n//\n// Arguments:\n//   padding ... gap between the element and the first vertex. :: Default 40.\n//   side ... 'left' | 'right' | 'top' | 'bottom' :: Default 'bottom'.\n//\nconst oneSide = function(vertices, opt, linkView) {\n    var side = opt.side || \"bottom\";\n    var padding = _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__.normalizeSides(opt.padding || 40);\n    // LinkView contains cached source an target bboxes.\n    // Note that those are Geometry rectangle objects.\n    var sourceBBox = linkView.sourceBBox;\n    var targetBBox = linkView.targetBBox;\n    var sourcePoint = sourceBBox.center();\n    var targetPoint = targetBBox.center();\n    var coordinate, dimension, direction;\n    switch(side){\n        case \"bottom\":\n            direction = 1;\n            coordinate = \"y\";\n            dimension = \"height\";\n            break;\n        case \"top\":\n            direction = -1;\n            coordinate = \"y\";\n            dimension = \"height\";\n            break;\n        case \"left\":\n            direction = -1;\n            coordinate = \"x\";\n            dimension = \"width\";\n            break;\n        case \"right\":\n            direction = 1;\n            coordinate = \"x\";\n            dimension = \"width\";\n            break;\n        default:\n            throw new Error(\"Router: invalid side\");\n    }\n    // move the points from the center of the element to outside of it.\n    sourcePoint[coordinate] += direction * (sourceBBox[dimension] / 2 + padding[side]);\n    targetPoint[coordinate] += direction * (targetBBox[dimension] / 2 + padding[side]);\n    // make link orthogonal (at least the first and last vertex).\n    if (direction * (sourcePoint[coordinate] - targetPoint[coordinate]) > 0) {\n        targetPoint[coordinate] = sourcePoint[coordinate];\n    } else {\n        sourcePoint[coordinate] = targetPoint[coordinate];\n    }\n    return [\n        sourcePoint\n    ].concat(vertices, targetPoint);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9vbmVTaWRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUUxQyxnREFBZ0Q7QUFDaEQsRUFBRTtBQUNGLGFBQWE7QUFDYiw2RUFBNkU7QUFDN0Usc0VBQXNFO0FBQ3RFLEVBQUU7QUFDSyxNQUFNQyxVQUFVLFNBQVNDLFFBQVEsRUFBRUMsR0FBRyxFQUFFQyxRQUFRO0lBRW5ELElBQUlDLE9BQU9GLElBQUlFLElBQUksSUFBSTtJQUN2QixJQUFJQyxVQUFVTiwyREFBbUIsQ0FBQ0csSUFBSUcsT0FBTyxJQUFJO0lBRWpELG9EQUFvRDtJQUNwRCxrREFBa0Q7SUFDbEQsSUFBSUUsYUFBYUosU0FBU0ksVUFBVTtJQUNwQyxJQUFJQyxhQUFhTCxTQUFTSyxVQUFVO0lBQ3BDLElBQUlDLGNBQWNGLFdBQVdHLE1BQU07SUFDbkMsSUFBSUMsY0FBY0gsV0FBV0UsTUFBTTtJQUVuQyxJQUFJRSxZQUFZQyxXQUFXQztJQUUzQixPQUFRVjtRQUNKLEtBQUs7WUFDRFUsWUFBWTtZQUNaRixhQUFhO1lBQ2JDLFlBQVk7WUFDWjtRQUNKLEtBQUs7WUFDREMsWUFBWSxDQUFDO1lBQ2JGLGFBQWE7WUFDYkMsWUFBWTtZQUNaO1FBQ0osS0FBSztZQUNEQyxZQUFZLENBQUM7WUFDYkYsYUFBYTtZQUNiQyxZQUFZO1lBQ1o7UUFDSixLQUFLO1lBQ0RDLFlBQVk7WUFDWkYsYUFBYTtZQUNiQyxZQUFZO1lBQ1o7UUFDSjtZQUNJLE1BQU0sSUFBSUUsTUFBTTtJQUN4QjtJQUVBLG1FQUFtRTtJQUNuRU4sV0FBVyxDQUFDRyxXQUFXLElBQUlFLFlBQWFQLENBQUFBLFVBQVUsQ0FBQ00sVUFBVSxHQUFHLElBQUlSLE9BQU8sQ0FBQ0QsS0FBSztJQUNqRk8sV0FBVyxDQUFDQyxXQUFXLElBQUlFLFlBQWFOLENBQUFBLFVBQVUsQ0FBQ0ssVUFBVSxHQUFHLElBQUlSLE9BQU8sQ0FBQ0QsS0FBSztJQUVqRiw2REFBNkQ7SUFDN0QsSUFBSSxZQUFjSyxDQUFBQSxXQUFXLENBQUNHLFdBQVcsR0FBR0QsV0FBVyxDQUFDQyxXQUFXLElBQUssR0FBRztRQUN2RUQsV0FBVyxDQUFDQyxXQUFXLEdBQUdILFdBQVcsQ0FBQ0csV0FBVztJQUNyRCxPQUFPO1FBQ0hILFdBQVcsQ0FBQ0csV0FBVyxHQUFHRCxXQUFXLENBQUNDLFdBQVc7SUFDckQ7SUFFQSxPQUFPO1FBQUNIO0tBQVksQ0FBQ08sTUFBTSxDQUFDZixVQUFVVTtBQUMxQyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvcm91dGVycy9vbmVTaWRlLm1qcz9hYTAzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbC9pbmRleC5tanMnO1xuXG4vLyBSb3V0ZXMgdGhlIGxpbmsgYWx3YXlzIHRvL2Zyb20gYSBjZXJ0YWluIHNpZGVcbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAgIHBhZGRpbmcgLi4uIGdhcCBiZXR3ZWVuIHRoZSBlbGVtZW50IGFuZCB0aGUgZmlyc3QgdmVydGV4LiA6OiBEZWZhdWx0IDQwLlxuLy8gICBzaWRlIC4uLiAnbGVmdCcgfCAncmlnaHQnIHwgJ3RvcCcgfCAnYm90dG9tJyA6OiBEZWZhdWx0ICdib3R0b20nLlxuLy9cbmV4cG9ydCBjb25zdCBvbmVTaWRlID0gZnVuY3Rpb24odmVydGljZXMsIG9wdCwgbGlua1ZpZXcpIHtcblxuICAgIHZhciBzaWRlID0gb3B0LnNpZGUgfHwgJ2JvdHRvbSc7XG4gICAgdmFyIHBhZGRpbmcgPSB1dGlsLm5vcm1hbGl6ZVNpZGVzKG9wdC5wYWRkaW5nIHx8IDQwKTtcblxuICAgIC8vIExpbmtWaWV3IGNvbnRhaW5zIGNhY2hlZCBzb3VyY2UgYW4gdGFyZ2V0IGJib3hlcy5cbiAgICAvLyBOb3RlIHRoYXQgdGhvc2UgYXJlIEdlb21ldHJ5IHJlY3RhbmdsZSBvYmplY3RzLlxuICAgIHZhciBzb3VyY2VCQm94ID0gbGlua1ZpZXcuc291cmNlQkJveDtcbiAgICB2YXIgdGFyZ2V0QkJveCA9IGxpbmtWaWV3LnRhcmdldEJCb3g7XG4gICAgdmFyIHNvdXJjZVBvaW50ID0gc291cmNlQkJveC5jZW50ZXIoKTtcbiAgICB2YXIgdGFyZ2V0UG9pbnQgPSB0YXJnZXRCQm94LmNlbnRlcigpO1xuXG4gICAgdmFyIGNvb3JkaW5hdGUsIGRpbWVuc2lvbiwgZGlyZWN0aW9uO1xuXG4gICAgc3dpdGNoIChzaWRlKSB7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9ICd5JztcbiAgICAgICAgICAgIGRpbWVuc2lvbiA9ICdoZWlnaHQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSAtMTtcbiAgICAgICAgICAgIGNvb3JkaW5hdGUgPSAneSc7XG4gICAgICAgICAgICBkaW1lbnNpb24gPSAnaGVpZ2h0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IC0xO1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9ICd4JztcbiAgICAgICAgICAgIGRpbWVuc2lvbiA9ICd3aWR0aCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgZGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgIGNvb3JkaW5hdGUgPSAneCc7XG4gICAgICAgICAgICBkaW1lbnNpb24gPSAnd2lkdGgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JvdXRlcjogaW52YWxpZCBzaWRlJyk7XG4gICAgfVxuXG4gICAgLy8gbW92ZSB0aGUgcG9pbnRzIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgZWxlbWVudCB0byBvdXRzaWRlIG9mIGl0LlxuICAgIHNvdXJjZVBvaW50W2Nvb3JkaW5hdGVdICs9IGRpcmVjdGlvbiAqIChzb3VyY2VCQm94W2RpbWVuc2lvbl0gLyAyICsgcGFkZGluZ1tzaWRlXSk7XG4gICAgdGFyZ2V0UG9pbnRbY29vcmRpbmF0ZV0gKz0gZGlyZWN0aW9uICogKHRhcmdldEJCb3hbZGltZW5zaW9uXSAvIDIgKyBwYWRkaW5nW3NpZGVdKTtcblxuICAgIC8vIG1ha2UgbGluayBvcnRob2dvbmFsIChhdCBsZWFzdCB0aGUgZmlyc3QgYW5kIGxhc3QgdmVydGV4KS5cbiAgICBpZiAoKGRpcmVjdGlvbiAqIChzb3VyY2VQb2ludFtjb29yZGluYXRlXSAtIHRhcmdldFBvaW50W2Nvb3JkaW5hdGVdKSkgPiAwKSB7XG4gICAgICAgIHRhcmdldFBvaW50W2Nvb3JkaW5hdGVdID0gc291cmNlUG9pbnRbY29vcmRpbmF0ZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc291cmNlUG9pbnRbY29vcmRpbmF0ZV0gPSB0YXJnZXRQb2ludFtjb29yZGluYXRlXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3NvdXJjZVBvaW50XS5jb25jYXQodmVydGljZXMsIHRhcmdldFBvaW50KTtcbn07XG4iXSwibmFtZXMiOlsidXRpbCIsIm9uZVNpZGUiLCJ2ZXJ0aWNlcyIsIm9wdCIsImxpbmtWaWV3Iiwic2lkZSIsInBhZGRpbmciLCJub3JtYWxpemVTaWRlcyIsInNvdXJjZUJCb3giLCJ0YXJnZXRCQm94Iiwic291cmNlUG9pbnQiLCJjZW50ZXIiLCJ0YXJnZXRQb2ludCIsImNvb3JkaW5hdGUiLCJkaW1lbnNpb24iLCJkaXJlY3Rpb24iLCJFcnJvciIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/oneSide.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/orthogonal.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/jointjs/src/routers/orthogonal.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   orthogonal: () => (/* binding */ orthogonal)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\n\n// bearing -> opposite bearing\nvar opposites = {\n    N: \"S\",\n    S: \"N\",\n    E: \"W\",\n    W: \"E\"\n};\n// bearing -> radians\nvar radians = {\n    N: -Math.PI / 2 * 3,\n    S: -Math.PI / 2,\n    E: 0,\n    W: Math.PI\n};\n// HELPERS //\n// returns a point `p` where lines p,p1 and p,p2 are perpendicular and p is not contained\n// in the given box\nfunction freeJoin(p1, p2, bbox) {\n    var p = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p1.x, p2.y);\n    if (bbox.containsPoint(p)) p = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(p2.x, p1.y);\n    // kept for reference\n    // if (bbox.containsPoint(p)) p = null;\n    return p;\n}\n// returns either width or height of a bbox based on the given bearing\nfunction getBBoxSize(bbox, bearing) {\n    return bbox[bearing === \"W\" || bearing === \"E\" ? \"width\" : \"height\"];\n}\n// simple bearing method (calculates only orthogonal cardinals)\nfunction getBearing(from, to) {\n    if (from.x === to.x) return from.y > to.y ? \"N\" : \"S\";\n    if (from.y === to.y) return from.x > to.x ? \"W\" : \"E\";\n    return null;\n}\n// transform point to a rect\nfunction getPointBox(p) {\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect(p.x, p.y, 0, 0);\n}\nfunction getPaddingBox(opt) {\n    // if both provided, opt.padding wins over opt.elementPadding\n    var sides = _util_index_mjs__WEBPACK_IMPORTED_MODULE_2__.normalizeSides(opt.padding || opt.elementPadding || 20);\n    return {\n        x: -sides.left,\n        y: -sides.top,\n        width: sides.left + sides.right,\n        height: sides.top + sides.bottom\n    };\n}\n// return source bbox\nfunction getSourceBBox(linkView, opt) {\n    return linkView.sourceBBox.clone().moveAndExpand(getPaddingBox(opt));\n}\n// return target bbox\nfunction getTargetBBox(linkView, opt) {\n    return linkView.targetBBox.clone().moveAndExpand(getPaddingBox(opt));\n}\n// return source anchor\nfunction getSourceAnchor(linkView, opt) {\n    if (linkView.sourceAnchor) return linkView.sourceAnchor;\n    // fallback: center of bbox\n    var sourceBBox = getSourceBBox(linkView, opt);\n    return sourceBBox.center();\n}\n// return target anchor\nfunction getTargetAnchor(linkView, opt) {\n    if (linkView.targetAnchor) return linkView.targetAnchor;\n    // fallback: center of bbox\n    var targetBBox = getTargetBBox(linkView, opt);\n    return targetBBox.center(); // default\n}\n// PARTIAL ROUTERS //\nfunction vertexVertex(from, to, bearing) {\n    var p1 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(from.x, to.y);\n    var p2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(to.x, from.y);\n    var d1 = getBearing(from, p1);\n    var d2 = getBearing(from, p2);\n    var opposite = opposites[bearing];\n    var p = d1 === bearing || d1 !== opposite && (d2 === opposite || d2 !== bearing) ? p1 : p2;\n    return {\n        points: [\n            p\n        ],\n        direction: getBearing(p, to)\n    };\n}\nfunction elementVertex(from, to, fromBBox) {\n    var p = freeJoin(from, to, fromBBox);\n    return {\n        points: [\n            p\n        ],\n        direction: getBearing(p, to)\n    };\n}\nfunction vertexElement(from, to, toBBox, bearing) {\n    var route = {};\n    var points = [\n        new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(from.x, to.y),\n        new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(to.x, from.y)\n    ];\n    var freePoints = points.filter(function(pt) {\n        return !toBBox.containsPoint(pt);\n    });\n    var freeBearingPoints = freePoints.filter(function(pt) {\n        return getBearing(pt, from) !== bearing;\n    });\n    var p;\n    if (freeBearingPoints.length > 0) {\n        // Try to pick a point which bears the same direction as the previous segment.\n        p = freeBearingPoints.filter(function(pt) {\n            return getBearing(from, pt) === bearing;\n        }).pop();\n        p = p || freeBearingPoints[0];\n        route.points = [\n            p\n        ];\n        route.direction = getBearing(p, to);\n    } else {\n        // Here we found only points which are either contained in the element or they would create\n        // a link segment going in opposite direction from the previous one.\n        // We take the point inside element and move it outside the element in the direction the\n        // route is going. Now we can join this point with the current end (using freeJoin).\n        p = _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.difference(points, freePoints)[0];\n        var p2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(to).move(p, -getBBoxSize(toBBox, bearing) / 2);\n        var p1 = freeJoin(p2, from, toBBox);\n        route.points = [\n            p1,\n            p2\n        ];\n        route.direction = getBearing(p2, to);\n    }\n    return route;\n}\nfunction elementElement(from, to, fromBBox, toBBox) {\n    var route = elementVertex(to, from, toBBox);\n    var p1 = route.points[0];\n    if (fromBBox.containsPoint(p1)) {\n        route = elementVertex(from, to, fromBBox);\n        var p2 = route.points[0];\n        if (toBBox.containsPoint(p2)) {\n            var fromBorder = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(from).move(p2, -getBBoxSize(fromBBox, getBearing(from, p2)) / 2);\n            var toBorder = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point(to).move(p1, -getBBoxSize(toBBox, getBearing(to, p1)) / 2);\n            var mid = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Line(fromBorder, toBorder).midpoint();\n            var startRoute = elementVertex(from, mid, fromBBox);\n            var endRoute = vertexVertex(mid, to, startRoute.direction);\n            route.points = [\n                startRoute.points[0],\n                endRoute.points[0]\n            ];\n            route.direction = endRoute.direction;\n        }\n    }\n    return route;\n}\n// Finds route for situations where one element is inside the other.\n// Typically the route is directed outside the outer element first and\n// then back towards the inner element.\nfunction insideElement(from, to, fromBBox, toBBox, bearing) {\n    var route = {};\n    var boundary = fromBBox.union(toBBox).inflate(1);\n    // start from the point which is closer to the boundary\n    var reversed = boundary.center().distance(to) > boundary.center().distance(from);\n    var start = reversed ? to : from;\n    var end = reversed ? from : to;\n    var p1, p2, p3;\n    if (bearing) {\n        // Points on circle with radius equals 'W + H` are always outside the rectangle\n        // with width W and height H if the center of that circle is the center of that rectangle.\n        p1 = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point.fromPolar(boundary.width + boundary.height, radians[bearing], start);\n        p1 = boundary.pointNearestToPoint(p1).move(p1, -1);\n    } else {\n        p1 = boundary.pointNearestToPoint(start).move(start, 1);\n    }\n    p2 = freeJoin(p1, end, boundary);\n    if (p1.round().equals(p2.round())) {\n        p2 = _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point.fromPolar(boundary.width + boundary.height, _g_index_mjs__WEBPACK_IMPORTED_MODULE_5__.toRad(p1.theta(start)) + Math.PI / 2, end);\n        p2 = boundary.pointNearestToPoint(p2).move(end, 1).round();\n        p3 = freeJoin(p1, p2, boundary);\n        route.points = reversed ? [\n            p2,\n            p3,\n            p1\n        ] : [\n            p1,\n            p3,\n            p2\n        ];\n    } else {\n        route.points = reversed ? [\n            p2,\n            p1\n        ] : [\n            p1,\n            p2\n        ];\n    }\n    route.direction = reversed ? getBearing(p1, to) : getBearing(p2, to);\n    return route;\n}\n// MAIN ROUTER //\n// Return points through which a connection needs to be drawn in order to obtain an orthogonal link\n// routing from source to target going through `vertices`.\nfunction orthogonal(vertices, opt, linkView) {\n    var sourceBBox = getSourceBBox(linkView, opt);\n    var targetBBox = getTargetBBox(linkView, opt);\n    var sourceAnchor = getSourceAnchor(linkView, opt);\n    var targetAnchor = getTargetAnchor(linkView, opt);\n    // if anchor lies outside of bbox, the bbox expands to include it\n    sourceBBox = sourceBBox.union(getPointBox(sourceAnchor));\n    targetBBox = targetBBox.union(getPointBox(targetAnchor));\n    vertices = _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.toArray(vertices).map(_g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Point);\n    vertices.unshift(sourceAnchor);\n    vertices.push(targetAnchor);\n    var bearing; // bearing of previous route segment\n    var orthogonalVertices = []; // the array of found orthogonal vertices to be returned\n    for(var i = 0, max = vertices.length - 1; i < max; i++){\n        var route = null;\n        var from = vertices[i];\n        var to = vertices[i + 1];\n        var isOrthogonal = !!getBearing(from, to);\n        if (i === 0) {\n            if (i + 1 === max) {\n                // Expand one of the elements by 1px to detect situations when the two\n                // elements are positioned next to each other with no gap in between.\n                if (sourceBBox.intersect(targetBBox.clone().inflate(1))) {\n                    route = insideElement(from, to, sourceBBox, targetBBox);\n                } else if (!isOrthogonal) {\n                    route = elementElement(from, to, sourceBBox, targetBBox);\n                }\n            } else {\n                if (sourceBBox.containsPoint(to)) {\n                    route = insideElement(from, to, sourceBBox, getPointBox(to).moveAndExpand(getPaddingBox(opt)));\n                } else if (!isOrthogonal) {\n                    route = elementVertex(from, to, sourceBBox);\n                }\n            }\n        } else if (i + 1 === max) {\n            // prevent overlaps with previous line segment\n            var isOrthogonalLoop = isOrthogonal && getBearing(to, from) === bearing;\n            if (targetBBox.containsPoint(from) || isOrthogonalLoop) {\n                route = insideElement(from, to, getPointBox(from).moveAndExpand(getPaddingBox(opt)), targetBBox, bearing);\n            } else if (!isOrthogonal) {\n                route = vertexElement(from, to, targetBBox, bearing);\n            }\n        } else if (!isOrthogonal) {\n            route = vertexVertex(from, to, bearing);\n        }\n        // applicable to all routes:\n        // set bearing for next iteration\n        if (route) {\n            Array.prototype.push.apply(orthogonalVertices, route.points);\n            bearing = route.direction;\n        } else {\n            // orthogonal route and not looped\n            bearing = getBearing(from, to);\n        }\n        // push `to` point to identified orthogonal vertices array\n        if (i + 1 < max) {\n            orthogonalVertices.push(to);\n        }\n    }\n    return orthogonalVertices;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/orthogonal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/routers/rightAngle.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/jointjs/src/routers/rightAngle.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rightAngle: () => (/* binding */ rightAngle)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/polyline.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/point.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/line.mjs\");\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/geometry.helpers.mjs\");\n\nconst Directions = {\n    AUTO: \"auto\",\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    TOP: \"top\",\n    BOTTOM: \"bottom\",\n    ANCHOR_SIDE: \"anchor-side\",\n    MAGNET_SIDE: \"magnet-side\"\n};\nconst DEFINED_DIRECTIONS = [\n    Directions.LEFT,\n    Directions.RIGHT,\n    Directions.TOP,\n    Directions.BOTTOM\n];\nconst OPPOSITE_DIRECTIONS = {\n    [Directions.LEFT]: Directions.RIGHT,\n    [Directions.RIGHT]: Directions.LEFT,\n    [Directions.TOP]: Directions.BOTTOM,\n    [Directions.BOTTOM]: Directions.TOP\n};\nconst VERTICAL_DIRECTIONS = [\n    Directions.TOP,\n    Directions.BOTTOM\n];\nconst ANGLE_DIRECTION_MAP = {\n    0: Directions.RIGHT,\n    180: Directions.LEFT,\n    270: Directions.TOP,\n    90: Directions.BOTTOM\n};\nfunction getSegmentAngle(line) {\n    // TODO: the angle() method is general and therefore unnecessarily heavy for orthogonal links\n    return line.angle();\n}\nfunction simplifyPoints(points) {\n    // TODO: use own more efficient implementation (filter points that do not change direction).\n    // To simplify segments that are almost aligned (start and end points differ by e.g. 0.5px), use a threshold of 1.\n    return new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Polyline(points).simplify({\n        threshold: 1\n    }).points;\n}\nfunction resolveSides(source, target) {\n    const { point: sourcePoint, x0: sx0, y0: sy0, view: sourceView, bbox: sourceBBox, direction: sourceDirection } = source;\n    const { point: targetPoint, x0: tx0, y0: ty0, view: targetView, bbox: targetBBox, direction: targetDirection } = target;\n    let sourceSide;\n    if (!sourceView) {\n        const sourceLinkAnchorBBox = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect(sx0, sy0, 0, 0);\n        sourceSide = DEFINED_DIRECTIONS.includes(sourceDirection) ? sourceDirection : sourceLinkAnchorBBox.sideNearestToPoint(targetPoint);\n    } else if (sourceView.model.isLink()) {\n        sourceSide = getDirectionForLinkConnection(targetPoint, sourcePoint, sourceView);\n    } else if (sourceDirection === Directions.ANCHOR_SIDE) {\n        sourceSide = sourceBBox.sideNearestToPoint(sourcePoint);\n    } else if (sourceDirection === Directions.MAGNET_SIDE) {\n        sourceSide = sourceView.model.getBBox().sideNearestToPoint(sourcePoint);\n    } else {\n        sourceSide = sourceDirection;\n    }\n    let targetSide;\n    if (!targetView) {\n        const targetLinkAnchorBBox = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect(tx0, ty0, 0, 0);\n        targetSide = DEFINED_DIRECTIONS.includes(targetDirection) ? targetDirection : targetLinkAnchorBBox.sideNearestToPoint(sourcePoint);\n    } else if (targetView.model.isLink()) {\n        targetSide = getDirectionForLinkConnection(sourcePoint, targetPoint, targetView);\n    } else if (targetDirection === Directions.ANCHOR_SIDE) {\n        targetSide = targetBBox.sideNearestToPoint(targetPoint);\n    } else if (targetDirection === Directions.MAGNET_SIDE) {\n        targetSide = targetView.model.getBBox().sideNearestToPoint(targetPoint);\n    } else {\n        targetSide = targetDirection;\n    }\n    return [\n        sourceSide,\n        targetSide\n    ];\n}\nfunction resolveForTopSourceSide(source, target, nextInLine) {\n    const { x0: sx0, y0: sy0, width, height, point: anchor, margin } = source;\n    const sx1 = sx0 + width;\n    const sy1 = sy0 + height;\n    const smx0 = sx0 - margin;\n    const smx1 = sx1 + margin;\n    const smy0 = sy0 - margin;\n    const { x: ax } = anchor;\n    const { x0: tx, y0: ty } = target;\n    if (tx === ax && ty < sy0) return Directions.BOTTOM;\n    if (tx < ax && ty < smy0) return Directions.RIGHT;\n    if (tx > ax && ty < smy0) return Directions.LEFT;\n    if (tx < smx0 && ty >= sy0) return Directions.TOP;\n    if (tx > smx1 && ty >= sy0) return Directions.TOP;\n    if (tx >= smx0 && tx <= ax && ty > sy1) {\n        if (nextInLine.point.x < tx) {\n            return Directions.RIGHT;\n        }\n        return Directions.LEFT;\n    }\n    if (tx <= smx1 && tx >= ax && ty > sy1) {\n        if (nextInLine.point.x < tx) {\n            return Directions.RIGHT;\n        }\n        return Directions.LEFT;\n    }\n    return Directions.TOP;\n}\nfunction resolveForBottomSourceSide(source, target, nextInLine) {\n    const { x0: sx0, y0: sy0, width, height, point: anchor, margin } = source;\n    const sx1 = sx0 + width;\n    const sy1 = sy0 + height;\n    const smx0 = sx0 - margin;\n    const smx1 = sx1 + margin;\n    const smy1 = sy1 + margin;\n    const { x: ax } = anchor;\n    const { x0: tx, y0: ty } = target;\n    if (tx === ax && ty > sy1) return Directions.TOP;\n    if (tx < ax && ty > smy1) return Directions.RIGHT;\n    if (tx > ax && ty > smy1) return Directions.LEFT;\n    if (tx < smx0 && ty <= sy1) return Directions.BOTTOM;\n    if (tx > smx1 && ty <= sy1) return Directions.BOTTOM;\n    if (tx >= smx0 && tx <= ax && ty < sy0) {\n        if (nextInLine.point.x < tx) {\n            return Directions.RIGHT;\n        }\n        return Directions.LEFT;\n    }\n    if (tx <= smx1 && tx >= ax && ty < sy0) {\n        if (nextInLine.point.x < tx) {\n            return Directions.RIGHT;\n        }\n        return Directions.LEFT;\n    }\n    return Directions.BOTTOM;\n}\nfunction resolveForLeftSourceSide(source, target, nextInLine) {\n    const { y0: sy0, x0: sx0, width, height, point: anchor, margin } = source;\n    const sx1 = sx0 + width;\n    const sy1 = sy0 + height;\n    const smx0 = sx0 - margin;\n    const smy0 = sy0 - margin;\n    const smy1 = sy1 + margin;\n    const { x: ax, y: ay } = anchor;\n    const { x0: tx, y0: ty } = target;\n    if (tx < ax && ty === ay) return Directions.RIGHT;\n    if (tx <= smx0 && ty < ay) return Directions.BOTTOM;\n    if (tx <= smx0 && ty > ay) return Directions.TOP;\n    if (tx >= sx0 && ty <= smy0) return Directions.LEFT;\n    if (tx >= sx0 && ty >= smy1) return Directions.LEFT;\n    if (tx > sx1 && ty >= smy0 && ty <= ay) {\n        if (nextInLine.point.y < ty) {\n            return Directions.BOTTOM;\n        }\n        return Directions.TOP;\n    }\n    if (tx > sx1 && ty <= smy1 && ty >= ay) {\n        if (nextInLine.point.y < ty) {\n            return Directions.BOTTOM;\n        }\n        return Directions.TOP;\n    }\n    return Directions.LEFT;\n}\nfunction resolveForRightSourceSide(source, target, nextInLine) {\n    const { y0: sy0, x0: sx0, width, height, point: anchor, margin } = source;\n    const sx1 = sx0 + width;\n    const sy1 = sy0 + height;\n    const smx1 = sx1 + margin;\n    const smy0 = sy0 - margin;\n    const smy1 = sy1 + margin;\n    const { x: ax, y: ay } = anchor;\n    const { x0: tx, y0: ty } = target;\n    if (tx > ax && ty === ay) return Directions.LEFT;\n    if (tx >= smx1 && ty < ay) return Directions.BOTTOM;\n    if (tx >= smx1 && ty > ay) return Directions.TOP;\n    if (tx <= sx1 && ty <= smy0) return Directions.RIGHT;\n    if (tx <= sx1 && ty >= smy1) return Directions.RIGHT;\n    if (tx < sx0 && ty >= smy0 && ty <= ay) {\n        if (nextInLine.point.y < ty) {\n            return Directions.BOTTOM;\n        }\n        return Directions.TOP;\n    }\n    if (tx < sx0 && ty <= smy1 && ty >= ay) {\n        if (nextInLine.point.y < ty) {\n            return Directions.BOTTOM;\n        }\n        return Directions.TOP;\n    }\n    return Directions.RIGHT;\n}\nfunction resolveInitialDirection(source, target, nextInLine) {\n    const [sourceSide] = resolveSides(source, target);\n    switch(sourceSide){\n        case Directions.TOP:\n            return resolveForTopSourceSide(source, target, nextInLine);\n        case Directions.RIGHT:\n            return resolveForRightSourceSide(source, target, nextInLine);\n        case Directions.BOTTOM:\n            return resolveForBottomSourceSide(source, target, nextInLine);\n        case Directions.LEFT:\n            return resolveForLeftSourceSide(source, target, nextInLine);\n    }\n}\nfunction getDirectionForLinkConnection(linkOrigin, connectionPoint, linkView) {\n    const tangent = linkView.getTangentAtLength(linkView.getClosestPointLength(connectionPoint));\n    const roundedAngle = Math.round(getSegmentAngle(tangent) / 90) * 90;\n    if (roundedAngle % 180 === 0 && linkOrigin.y === connectionPoint.y) {\n        return linkOrigin.x < connectionPoint.x ? Directions.LEFT : Directions.RIGHT;\n    } else if (linkOrigin.x === connectionPoint.x) {\n        return linkOrigin.y < connectionPoint.y ? Directions.TOP : Directions.BOTTOM;\n    }\n    switch(roundedAngle){\n        case 0:\n        case 180:\n        case 360:\n            return linkOrigin.y < connectionPoint.y ? Directions.TOP : Directions.BOTTOM;\n        case 90:\n        case 270:\n            return linkOrigin.x < connectionPoint.x ? Directions.LEFT : Directions.RIGHT;\n    }\n}\nfunction pointDataFromAnchor(view, point, bbox, direction, isPort, fallBackAnchor, margin) {\n    if (direction === Directions.AUTO) {\n        direction = isPort ? Directions.MAGNET_SIDE : Directions.ANCHOR_SIDE;\n    }\n    const isElement = view && view.model.isElement();\n    const { x: x0, y: y0, width = 0, height = 0 } = isElement ? _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect.fromRectUnion(bbox, view.model.getBBox()) : fallBackAnchor;\n    return {\n        point,\n        x0,\n        y0,\n        view,\n        bbox,\n        width,\n        height,\n        direction,\n        margin: isElement ? margin : 0\n    };\n}\nfunction pointDataFromVertex({ x, y }) {\n    const point = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Point(x, y);\n    return {\n        point,\n        x0: point.x,\n        y0: point.y,\n        view: null,\n        bbox: new _g_index_mjs__WEBPACK_IMPORTED_MODULE_1__.Rect(x, y, 0, 0),\n        width: 0,\n        height: 0,\n        direction: null,\n        margin: 0\n    };\n}\nfunction getOutsidePoint(side, pointData, margin) {\n    const outsidePoint = pointData.point.clone();\n    const { x0, y0, width, height } = pointData;\n    switch(side){\n        case \"left\":\n            outsidePoint.x = x0 - margin;\n            break;\n        case \"right\":\n            outsidePoint.x = x0 + width + margin;\n            break;\n        case \"top\":\n            outsidePoint.y = y0 - margin;\n            break;\n        case \"bottom\":\n            outsidePoint.y = y0 + height + margin;\n            break;\n    }\n    return outsidePoint;\n}\nfunction routeBetweenPoints(source, target) {\n    const { point: sourcePoint, x0: sx0, y0: sy0, view: sourceView, width: sourceWidth, height: sourceHeight, margin: sourceMargin } = source;\n    const { point: targetPoint, x0: tx0, y0: ty0, width: targetWidth, height: targetHeight, margin: targetMargin } = target;\n    const tx1 = tx0 + targetWidth;\n    const ty1 = ty0 + targetHeight;\n    const sx1 = sx0 + sourceWidth;\n    const sy1 = sy0 + sourceHeight;\n    const isSourceEl = sourceView && sourceView.model.isElement();\n    // Key coordinates including the margin\n    const smx0 = sx0 - sourceMargin;\n    const smx1 = sx1 + sourceMargin;\n    const smy0 = sy0 - sourceMargin;\n    const smy1 = sy1 + sourceMargin;\n    const tmx0 = tx0 - targetMargin;\n    const tmx1 = tx1 + targetMargin;\n    const tmy0 = ty0 - targetMargin;\n    const tmy1 = ty1 + targetMargin;\n    const [sourceSide, targetSide] = resolveSides(source, target);\n    const sourceOutsidePoint = getOutsidePoint(sourceSide, {\n        point: sourcePoint,\n        x0: sx0,\n        y0: sy0,\n        width: sourceWidth,\n        height: sourceHeight\n    }, sourceMargin);\n    const targetOutsidePoint = getOutsidePoint(targetSide, {\n        point: targetPoint,\n        x0: tx0,\n        y0: ty0,\n        width: targetWidth,\n        height: targetHeight\n    }, targetMargin);\n    const { x: sox, y: soy } = sourceOutsidePoint;\n    const { x: tox, y: toy } = targetOutsidePoint;\n    const tcx = (tx0 + tx1) / 2;\n    const tcy = (ty0 + ty1) / 2;\n    const scx = (sx0 + sx1) / 2;\n    const scy = (sy0 + sy1) / 2;\n    const middleOfVerticalSides = (scx < tcx ? sx1 + tx0 : tx1 + sx0) / 2;\n    const middleOfHorizontalSides = (scy < tcy ? sy1 + ty0 : ty1 + sy0) / 2;\n    if (sourceSide === \"left\" && targetSide === \"right\") {\n        if (smx0 <= tmx1) {\n            let y = middleOfHorizontalSides;\n            if (sx1 <= tx0) {\n                if (ty1 >= smy0 && toy < soy) {\n                    y = Math.min(tmy0, smy0);\n                } else if (ty0 <= smy1 && toy >= soy) {\n                    y = Math.max(tmy1, smy1);\n                }\n            }\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x: tox,\n                    y\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        const x = (sox + tox) / 2;\n        return [\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"right\" && targetSide === \"left\") {\n        if (smx1 >= tmx0) {\n            let y = middleOfHorizontalSides;\n            if (sox > tx1) {\n                if (ty1 >= smy0 && toy < soy) {\n                    y = Math.min(tmy0, smy0);\n                } else if (ty0 <= smy1 && toy >= soy) {\n                    y = Math.max(tmy1, smy1);\n                }\n            }\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x: tox,\n                    y\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        const x = (sox + tox) / 2;\n        return [\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"top\" && targetSide === \"bottom\") {\n        if (soy < toy) {\n            let x = middleOfVerticalSides;\n            let y = soy;\n            if (soy < ty0) {\n                if (tx1 >= smx0 && tox < sox) {\n                    x = Math.min(tmx0, smx0);\n                } else if (tx0 <= smx1 && tox >= sox) {\n                    x = Math.max(tmx1, smx1);\n                }\n            }\n            return [\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x,\n                    y\n                },\n                {\n                    x,\n                    y: toy\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        const y = (soy + toy) / 2;\n        return [\n            {\n                x: sox,\n                y\n            },\n            {\n                x: tox,\n                y\n            }\n        ];\n    } else if (sourceSide === \"bottom\" && targetSide === \"top\") {\n        if (soy - sourceMargin > toy) {\n            let x = middleOfVerticalSides;\n            let y = soy;\n            if (soy > ty1) {\n                if (tx1 >= smx0 && tox < sox) {\n                    x = Math.min(tmx0, smx0);\n                } else if (tx0 <= smx1 && tox >= sox) {\n                    x = Math.max(tmx1, smx1);\n                }\n            }\n            return [\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x,\n                    y\n                },\n                {\n                    x,\n                    y: toy\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        const y = (soy + toy) / 2;\n        return [\n            {\n                x: sox,\n                y\n            },\n            {\n                x: tox,\n                y\n            }\n        ];\n    } else if (sourceSide === \"top\" && targetSide === \"top\") {\n        let x;\n        let y1 = Math.min((sy1 + ty0) / 2, toy);\n        let y2 = Math.min((sy0 + ty1) / 2, soy);\n        if (toy < soy) {\n            if (sox >= tmx1 || sox <= tmx0) {\n                return [\n                    {\n                        x: sox,\n                        y: Math.min(soy, toy)\n                    },\n                    {\n                        x: tox,\n                        y: Math.min(soy, toy)\n                    }\n                ];\n            } else if (tox > sox) {\n                x = Math.min(sox, tmx0);\n            } else {\n                x = Math.max(sox, tmx1);\n            }\n        } else {\n            if (tox >= smx1 || tox <= smx0) {\n                return [\n                    {\n                        x: sox,\n                        y: Math.min(soy, toy)\n                    },\n                    {\n                        x: tox,\n                        y: Math.min(soy, toy)\n                    }\n                ];\n            } else if (tox >= sox) {\n                x = Math.max(tox, smx1);\n            } else {\n                x = Math.min(tox, smx0);\n            }\n        }\n        return [\n            {\n                x: sox,\n                y: y2\n            },\n            {\n                x,\n                y: y2\n            },\n            {\n                x,\n                y: y1\n            },\n            {\n                x: tox,\n                y: y1\n            }\n        ];\n    } else if (sourceSide === \"bottom\" && targetSide === \"bottom\") {\n        let x;\n        let y1 = Math.max((sy0 + ty1) / 2, toy);\n        let y2 = Math.max((sy1 + ty0) / 2, soy);\n        if (toy > soy) {\n            if (sox >= tmx1 || sox <= tmx0) {\n                return [\n                    {\n                        x: sox,\n                        y: Math.max(soy, toy)\n                    },\n                    {\n                        x: tox,\n                        y: Math.max(soy, toy)\n                    }\n                ];\n            } else if (tox > sox) {\n                x = Math.min(sox, tmx0);\n            } else {\n                x = Math.max(sox, tmx1);\n            }\n        } else {\n            if (tox >= smx1 || tox <= smx0) {\n                return [\n                    {\n                        x: sox,\n                        y: Math.max(soy, toy)\n                    },\n                    {\n                        x: tox,\n                        y: Math.max(soy, toy)\n                    }\n                ];\n            } else if (tox >= sox) {\n                x = Math.max(tox, smx1);\n            } else {\n                x = Math.min(tox, smx0);\n            }\n        }\n        return [\n            {\n                x: sox,\n                y: y2\n            },\n            {\n                x,\n                y: y2\n            },\n            {\n                x,\n                y: y1\n            },\n            {\n                x: tox,\n                y: y1\n            }\n        ];\n    } else if (sourceSide === \"left\" && targetSide === \"left\") {\n        let y;\n        let x1 = Math.min((sx1 + tx0) / 2, tox);\n        let x2 = Math.min((sx0 + tx1) / 2, sox);\n        if (tox > sox) {\n            if (toy <= soy) {\n                y = Math.min(smy0, toy);\n            } else {\n                y = Math.max(smy1, toy);\n            }\n        } else {\n            if (toy >= soy) {\n                y = Math.min(tmy0, soy);\n            } else {\n                y = Math.max(tmy1, soy);\n            }\n        }\n        return [\n            {\n                x: x2,\n                y: soy\n            },\n            {\n                x: x2,\n                y\n            },\n            {\n                x: x1,\n                y\n            },\n            {\n                x: x1,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"right\" && targetSide === \"right\") {\n        let y;\n        let x1 = Math.max((sx0 + tx1) / 2, tox);\n        let x2 = Math.max((sx1 + tx0) / 2, sox);\n        if (tox < sox) {\n            if (toy <= soy) {\n                y = Math.min(smy0, toy);\n            } else {\n                y = Math.max(smy1, toy);\n            }\n        } else {\n            if (toy >= soy) {\n                y = Math.min(tmy0, soy);\n            } else {\n                y = Math.max(tmy1, soy);\n            }\n        }\n        return [\n            {\n                x: x2,\n                y: soy\n            },\n            {\n                x: x2,\n                y\n            },\n            {\n                x: x1,\n                y\n            },\n            {\n                x: x1,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"top\" && targetSide === \"right\") {\n        if (soy > toy) {\n            if (sox < tox) {\n                let y = middleOfHorizontalSides;\n                if ((y > tcy || !isSourceEl) && y < tmy1 && sox < tx0) {\n                    y = tmy0;\n                }\n                return [\n                    {\n                        x: sox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y: toy\n                    }\n                ];\n            }\n            return [\n                {\n                    x: sox,\n                    y: toy\n                }\n            ];\n        }\n        const x = Math.max(middleOfVerticalSides, tmx1);\n        if (tox < sox && toy > sy0 && toy < sy1) {\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: x,\n                    y: soy\n                },\n                {\n                    x: x,\n                    y: toy\n                }\n            ];\n        }\n        if (x > smx0 && toy > sy0 || tx0 > sx1) {\n            const y = Math.min(sy0 - sourceMargin, ty0 - targetMargin);\n            const x = Math.max(sx1 + sourceMargin, tx1 + targetMargin);\n            return [\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x,\n                    y\n                },\n                {\n                    x,\n                    y: toy\n                }\n            ];\n        }\n        return [\n            {\n                x: sox,\n                y: soy\n            },\n            {\n                x: Math.max(x, tox),\n                y: soy\n            },\n            {\n                x: Math.max(x, tox),\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"top\" && targetSide === \"left\") {\n        if (soy > toy) {\n            if (sox > tox) {\n                let y = middleOfHorizontalSides;\n                if ((y > tcy || !isSourceEl) && y < tmy1 && sox > tx1) {\n                    y = tmy0;\n                }\n                return [\n                    {\n                        x: sox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y: toy\n                    }\n                ];\n            }\n            return [\n                {\n                    x: sox,\n                    y: toy\n                }\n            ];\n        }\n        const x = Math.min(tmx0, middleOfVerticalSides);\n        if (sox < tox && sy1 >= toy) {\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x,\n                    y: soy\n                },\n                {\n                    x,\n                    y: toy\n                }\n            ];\n        }\n        if (x < smx1 && soy < ty1) {\n            const y = Math.min(smy0, tmy0);\n            const x = Math.min(smx0, tmx0);\n            return [\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x,\n                    y\n                },\n                {\n                    x,\n                    y: toy\n                }\n            ];\n        }\n        return [\n            {\n                x: sox,\n                y: soy\n            },\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"bottom\" && targetSide === \"right\") {\n        if (soy < toy) {\n            if (sox < tox) {\n                let y = middleOfHorizontalSides;\n                if ((y < tcy || !isSourceEl) && y > tmy0 && sox < tx0) {\n                    y = tmy1;\n                }\n                return [\n                    {\n                        x: sox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y: toy\n                    }\n                ];\n            }\n            return [\n                {\n                    x: sox,\n                    y: toy\n                }\n            ];\n        } else {\n            if (sx0 < tox) {\n                const y = Math.max(smy1, tmy1);\n                const x = Math.max(smx1, tmx1);\n                return [\n                    {\n                        x: sox,\n                        y\n                    },\n                    {\n                        x,\n                        y\n                    },\n                    {\n                        x,\n                        y: toy\n                    }\n                ];\n            }\n        }\n        const x = middleOfVerticalSides;\n        return [\n            {\n                x: sox,\n                y: soy\n            },\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"bottom\" && targetSide === \"left\") {\n        if (soy < toy) {\n            if (sox > tox) {\n                let y = middleOfHorizontalSides;\n                if ((y < tcy || !isSourceEl) && y > tmy0 && sox > tx1) {\n                    y = tmy1;\n                }\n                return [\n                    {\n                        x: sox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y\n                    },\n                    {\n                        x: tox,\n                        y: toy\n                    }\n                ];\n            }\n            return [\n                {\n                    x: sox,\n                    y: toy\n                }\n            ];\n        } else {\n            if (sx1 > tox) {\n                const y = Math.max(smy1, tmy1);\n                const x = Math.min(smx0, tmx0);\n                return [\n                    {\n                        x: sox,\n                        y\n                    },\n                    {\n                        x,\n                        y\n                    },\n                    {\n                        x,\n                        y: toy\n                    }\n                ];\n            }\n        }\n        const x = middleOfVerticalSides;\n        return [\n            {\n                x: sox,\n                y: soy\n            },\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y: toy\n            }\n        ];\n    } else if (sourceSide === \"left\" && targetSide === \"bottom\") {\n        if (sox >= tox && soy >= tmy1) {\n            return [\n                {\n                    x: tox,\n                    y: soy\n                }\n            ];\n        }\n        if (sox >= tx1 && soy < toy) {\n            const x = middleOfVerticalSides;\n            return [\n                {\n                    x,\n                    y: soy\n                },\n                {\n                    x,\n                    y: toy\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        if (tox < sx1 && ty1 <= sy0) {\n            const y = middleOfHorizontalSides;\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x: tox,\n                    y\n                }\n            ];\n        }\n        const x = Math.min(tmx0, sox);\n        const y = Math.max(smy1, tmy1);\n        return [\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y\n            },\n            {\n                x: tox,\n                y\n            }\n        ];\n    } else if (sourceSide === \"left\" && targetSide === \"top\") {\n        if (sox > tox && soy < tmy0) {\n            return [\n                {\n                    x: tox,\n                    y: soy\n                }\n            ];\n        }\n        if (sox >= tx1) {\n            if (soy > toy) {\n                const x = middleOfVerticalSides;\n                return [\n                    {\n                        x,\n                        y: soy\n                    },\n                    {\n                        x,\n                        y: toy\n                    },\n                    {\n                        x: tox,\n                        y: toy\n                    }\n                ];\n            }\n        }\n        if (tox <= sx1 && toy > soy) {\n            const y = middleOfHorizontalSides;\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x: tox,\n                    y\n                }\n            ];\n        }\n        const x = toy < soy ? Math.min(smx0, tmx0) : smx0;\n        const y = Math.min(smy0, tmy0);\n        return [\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y\n            },\n            {\n                x: tox,\n                y\n            }\n        ];\n    } else if (sourceSide === \"right\" && targetSide === \"top\") {\n        if (sox <= tox && soy < tmy0) {\n            return [\n                {\n                    x: tox,\n                    y: soy\n                }\n            ];\n        }\n        if (sx1 < tx0 && soy > toy) {\n            let x = middleOfVerticalSides;\n            return [\n                {\n                    x,\n                    y: soy\n                },\n                {\n                    x,\n                    y: toy\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        if (tox < sox && ty0 > sy1) {\n            const y = middleOfHorizontalSides;\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x: tox,\n                    y\n                }\n            ];\n        }\n        const x = Math.max(smx1, tmx1);\n        const y = Math.min(smy0, tmy0);\n        return [\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y\n            },\n            {\n                x: tox,\n                y\n            }\n        ];\n    } else if (sourceSide === \"right\" && targetSide === \"bottom\") {\n        if (sox <= tox && soy >= tmy1) {\n            return [\n                {\n                    x: tox,\n                    y: soy\n                }\n            ];\n        }\n        if (sox <= tmx0 && soy < toy) {\n            const x = middleOfVerticalSides;\n            return [\n                {\n                    x,\n                    y: soy\n                },\n                {\n                    x,\n                    y: toy\n                },\n                {\n                    x: tox,\n                    y: toy\n                }\n            ];\n        }\n        if (tox > sx0 && ty1 < sy0) {\n            const y = middleOfHorizontalSides;\n            return [\n                {\n                    x: sox,\n                    y: soy\n                },\n                {\n                    x: sox,\n                    y\n                },\n                {\n                    x: tox,\n                    y\n                }\n            ];\n        }\n        const x = Math.max(tmx1, sox);\n        const y = Math.max(smy1, tmy1);\n        return [\n            {\n                x,\n                y: soy\n            },\n            {\n                x,\n                y\n            },\n            {\n                x: tox,\n                y\n            }\n        ];\n    }\n}\nfunction rightAngleRouter(vertices, opt, linkView) {\n    const { sourceDirection = Directions.AUTO, targetDirection = Directions.AUTO } = opt;\n    const margin = opt.margin || 20;\n    const useVertices = opt.useVertices || false;\n    const isSourcePort = !!linkView.model.source().port;\n    const sourcePoint = pointDataFromAnchor(linkView.sourceView, linkView.sourceAnchor, linkView.sourceBBox, sourceDirection, isSourcePort, linkView.sourceAnchor, margin);\n    const isTargetPort = !!linkView.model.target().port;\n    const targetPoint = pointDataFromAnchor(linkView.targetView, linkView.targetAnchor, linkView.targetBBox, targetDirection, isTargetPort, linkView.targetAnchor, margin);\n    let resultVertices = [];\n    if (!useVertices || vertices.length === 0) {\n        return simplifyPoints(routeBetweenPoints(sourcePoint, targetPoint));\n    }\n    const verticesData = vertices.map((v)=>pointDataFromVertex(v));\n    const [firstVertex] = verticesData;\n    if (sourcePoint.view && sourcePoint.view.model.isElement() && sourcePoint.view.model.getBBox().inflate(margin).containsPoint(firstVertex.point)) {\n        const [fromDirection] = resolveSides(sourcePoint, firstVertex);\n        const toDirection = fromDirection;\n        const dummySource = pointDataFromVertex(sourcePoint.point);\n        // Points do not usually have margin. Here we create a point with a margin.\n        dummySource.margin = margin;\n        dummySource.direction = fromDirection;\n        firstVertex.direction = toDirection;\n        resultVertices.push(...routeBetweenPoints(dummySource, firstVertex), firstVertex.point);\n    } else {\n        // The first point responsible for the initial direction of the route\n        const next = verticesData[1] || targetPoint;\n        const direction = resolveInitialDirection(sourcePoint, firstVertex, next);\n        firstVertex.direction = direction;\n        resultVertices.push(...routeBetweenPoints(sourcePoint, firstVertex), firstVertex.point);\n    }\n    for(let i = 0; i < verticesData.length - 1; i++){\n        const from = verticesData[i];\n        const to = verticesData[i + 1];\n        const segment = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(from.point, to.point);\n        const segmentAngle = getSegmentAngle(segment);\n        if (segmentAngle % 90 === 0) {\n            // Since the segment is horizontal or vertical, we can skip the routing and just connect them with a straight line\n            const toDirection = ANGLE_DIRECTION_MAP[segmentAngle];\n            const accessDirection = OPPOSITE_DIRECTIONS[toDirection];\n            if (toDirection !== from.direction) {\n                resultVertices.push(from.point, to.point);\n                to.direction = accessDirection;\n            } else {\n                const angle = _g_index_mjs__WEBPACK_IMPORTED_MODULE_4__.normalizeAngle(segmentAngle - 90);\n                let dx = 0;\n                let dy = 0;\n                if (angle === 90) {\n                    dy = -margin;\n                } else if (angle === 180) {\n                    dx = -margin;\n                } else if (angle === 270) {\n                    dy = margin;\n                } else if (angle === 0) {\n                    dx = margin;\n                }\n                const p1 = {\n                    x: from.point.x + dx,\n                    y: from.point.y + dy\n                };\n                const p2 = {\n                    x: to.point.x + dx,\n                    y: to.point.y + dy\n                };\n                const segment2 = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(to.point, p2);\n                to.direction = ANGLE_DIRECTION_MAP[getSegmentAngle(segment2)];\n                // Constructing a loop\n                resultVertices.push(from.point, p1, p2, to.point);\n            }\n            continue;\n        }\n        const [fromDirection, toDirection] = resolveDirection(from, to);\n        from.direction = fromDirection;\n        to.direction = toDirection;\n        resultVertices.push(...routeBetweenPoints(from, to), to.point);\n    }\n    const lastVertex = verticesData[verticesData.length - 1];\n    if (targetPoint.view && targetPoint.view.model.isElement()) {\n        if (targetPoint.view.model.getBBox().inflate(margin).containsPoint(lastVertex.point)) {\n            const [fromDirection] = resolveDirection(lastVertex, targetPoint);\n            const dummyTarget = pointDataFromVertex(targetPoint.point);\n            const [, toDirection] = resolveSides(lastVertex, targetPoint);\n            // we are creating a point that has a margin\n            dummyTarget.margin = margin;\n            dummyTarget.direction = toDirection;\n            lastVertex.direction = fromDirection;\n            resultVertices.push(...routeBetweenPoints(lastVertex, dummyTarget));\n        } else {\n            // the last point of `simplified` array is the last defined vertex\n            // grab the penultimate point and construct a line segment from it to the last vertex\n            // this will ensure that the last segment continues in a straight line\n            const simplified = simplifyPoints(resultVertices);\n            const segment = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(simplified[simplified.length - 2], lastVertex.point);\n            const definedDirection = ANGLE_DIRECTION_MAP[Math.round(getSegmentAngle(segment))];\n            lastVertex.direction = definedDirection;\n            let lastSegmentRoute = routeBetweenPoints(lastVertex, targetPoint);\n            const [p1, p2] = simplifyPoints([\n                ...lastSegmentRoute,\n                targetPoint.point\n            ]);\n            const lastSegment = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Line(p1, p2);\n            const roundedLastSegmentAngle = Math.round(getSegmentAngle(lastSegment));\n            const lastSegmentDirection = ANGLE_DIRECTION_MAP[roundedLastSegmentAngle];\n            if (lastSegmentDirection !== definedDirection && definedDirection === OPPOSITE_DIRECTIONS[lastSegmentDirection]) {\n                lastVertex.margin = margin;\n                lastSegmentRoute = routeBetweenPoints(lastVertex, targetPoint);\n            }\n            resultVertices.push(...lastSegmentRoute);\n        }\n    } else {\n        // since the target is only a point we can apply the same logic as if we connected two verticesData\n        const [vertexDirection] = resolveDirection(lastVertex, targetPoint);\n        lastVertex.direction = vertexDirection;\n        resultVertices.push(...routeBetweenPoints(lastVertex, targetPoint));\n    }\n    return simplifyPoints(resultVertices);\n}\nfunction resolveDirection(from, to) {\n    const accessDirection = from.direction;\n    const isDirectionVertical = VERTICAL_DIRECTIONS.includes(accessDirection);\n    let sourceDirection = from.direction;\n    let targetDirection = to.direction;\n    if (isDirectionVertical) {\n        const isToAbove = from.point.y > to.point.y;\n        const dx = to.point.x - from.point.x;\n        if (accessDirection === Directions.BOTTOM) {\n            // If isToAbove === false and we need figure out if to go left or right\n            sourceDirection = isToAbove ? OPPOSITE_DIRECTIONS[accessDirection] : dx >= 0 ? Directions.RIGHT : Directions.LEFT;\n            if (dx > 0) {\n                targetDirection = isToAbove ? Directions.LEFT : Directions.TOP;\n            } else if (dx < 0) {\n                targetDirection = isToAbove ? Directions.RIGHT : Directions.TOP;\n            }\n        } else {\n            // If isToAbove === true and we need figure out if to go left or right\n            sourceDirection = isToAbove ? dx >= 0 ? Directions.RIGHT : Directions.LEFT : OPPOSITE_DIRECTIONS[accessDirection];\n            if (dx > 0) {\n                targetDirection = isToAbove ? Directions.BOTTOM : Directions.LEFT;\n            } else if (dx < 0) {\n                targetDirection = isToAbove ? Directions.BOTTOM : Directions.RIGHT;\n            }\n        }\n    } else {\n        const isToLeft = from.point.x > to.point.x;\n        const dy = to.point.y - from.point.y;\n        if (accessDirection === Directions.RIGHT) {\n            sourceDirection = isToLeft ? OPPOSITE_DIRECTIONS[accessDirection] : dy >= 0 ? Directions.BOTTOM : Directions.TOP;\n            if (dy > 0) {\n                targetDirection = isToLeft ? Directions.TOP : Directions.LEFT;\n            } else if (dy < 0) {\n                targetDirection = isToLeft ? Directions.BOTTOM : Directions.LEFT;\n            }\n        } else {\n            sourceDirection = isToLeft ? dy >= 0 ? Directions.BOTTOM : Directions.TOP : OPPOSITE_DIRECTIONS[accessDirection];\n            if (dy > 0) {\n                targetDirection = isToLeft ? Directions.RIGHT : Directions.TOP;\n            } else if (dy < 0) {\n                targetDirection = isToLeft ? Directions.RIGHT : Directions.BOTTOM;\n            }\n        }\n    }\n    return [\n        sourceDirection,\n        targetDirection\n    ];\n}\nrightAngleRouter.Directions = Directions;\nconst rightAngle = rightAngleRouter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/routers/rightAngle.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/shapes/basic.mjs":
/*!***************************************************!*\
  !*** ./node_modules/jointjs/src/shapes/basic.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Circle: () => (/* binding */ Circle),\n/* harmony export */   Ellipse: () => (/* binding */ Ellipse),\n/* harmony export */   Generic: () => (/* binding */ Generic),\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   Polygon: () => (/* binding */ Polygon),\n/* harmony export */   Polyline: () => (/* binding */ Polyline),\n/* harmony export */   Rect: () => (/* binding */ Rect),\n/* harmony export */   Rhombus: () => (/* binding */ Rhombus),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextBlock: () => (/* binding */ TextBlock),\n/* harmony export */   TextBlockView: () => (/* binding */ TextBlockView),\n/* harmony export */   TextView: () => (/* binding */ TextView)\n/* harmony export */ });\n/* harmony import */ var _dia_Element_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dia/Element.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Element.mjs\");\n/* harmony import */ var _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dia/ElementView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/ElementView.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/index.mjs */ \"(ssr)/./node_modules/jointjs/src/util/util.mjs\");\n/* harmony import */ var _env_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../env/index.mjs */ \"(ssr)/./node_modules/jointjs/src/env/index.mjs\");\n\n\n\n\nconst Generic = _dia_Element_mjs__WEBPACK_IMPORTED_MODULE_0__.Element.define(\"basic.Generic\", {\n    attrs: {\n        \".\": {\n            fill: \"#ffffff\",\n            stroke: \"none\"\n        }\n    }\n});\nconst Rect = Generic.define(\"basic.Rect\", {\n    attrs: {\n        \"rect\": {\n            fill: \"#ffffff\",\n            stroke: \"#000000\",\n            width: 100,\n            height: 60\n        },\n        \"text\": {\n            fill: \"#000000\",\n            text: \"\",\n            \"font-size\": 14,\n            \"ref-x\": .5,\n            \"ref-y\": .5,\n            \"text-anchor\": \"middle\",\n            \"y-alignment\": \"middle\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><rect/></g><text/></g>'\n});\nconst TextView = _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.extend({\n    presentationAttributes: _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.addPresentationAttributes({\n        // The element view is not automatically re-scaled to fit the model size\n        // when the attribute 'attrs' is changed.\n        attrs: [\n            \"SCALE\"\n        ]\n    }),\n    confirmUpdate: function() {\n        var flags = _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.confirmUpdate.apply(this, arguments);\n        if (this.hasFlag(flags, \"SCALE\")) {\n            this.resize();\n            flags = this.removeFlag(flags, \"SCALE\");\n        }\n        return flags;\n    }\n});\nconst Text = Generic.define(\"basic.Text\", {\n    attrs: {\n        \"text\": {\n            \"font-size\": 18,\n            fill: \"#000000\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><text/></g></g>'\n});\nconst Circle = Generic.define(\"basic.Circle\", {\n    size: {\n        width: 60,\n        height: 60\n    },\n    attrs: {\n        \"circle\": {\n            fill: \"#ffffff\",\n            stroke: \"#000000\",\n            r: 30,\n            cx: 30,\n            cy: 30\n        },\n        \"text\": {\n            \"font-size\": 14,\n            text: \"\",\n            \"text-anchor\": \"middle\",\n            \"ref-x\": .5,\n            \"ref-y\": .5,\n            \"y-alignment\": \"middle\",\n            fill: \"#000000\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><circle/></g><text/></g>'\n});\nconst Ellipse = Generic.define(\"basic.Ellipse\", {\n    size: {\n        width: 60,\n        height: 40\n    },\n    attrs: {\n        \"ellipse\": {\n            fill: \"#ffffff\",\n            stroke: \"#000000\",\n            rx: 30,\n            ry: 20,\n            cx: 30,\n            cy: 20\n        },\n        \"text\": {\n            \"font-size\": 14,\n            text: \"\",\n            \"text-anchor\": \"middle\",\n            \"ref-x\": .5,\n            \"ref-y\": .5,\n            \"y-alignment\": \"middle\",\n            fill: \"#000000\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><ellipse/></g><text/></g>'\n});\nconst Polygon = Generic.define(\"basic.Polygon\", {\n    size: {\n        width: 60,\n        height: 40\n    },\n    attrs: {\n        \"polygon\": {\n            fill: \"#ffffff\",\n            stroke: \"#000000\"\n        },\n        \"text\": {\n            \"font-size\": 14,\n            text: \"\",\n            \"text-anchor\": \"middle\",\n            \"ref-x\": .5,\n            \"ref-dy\": 20,\n            \"y-alignment\": \"middle\",\n            fill: \"#000000\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><polygon/></g><text/></g>'\n});\nconst Polyline = Generic.define(\"basic.Polyline\", {\n    size: {\n        width: 60,\n        height: 40\n    },\n    attrs: {\n        \"polyline\": {\n            fill: \"#ffffff\",\n            stroke: \"#000000\"\n        },\n        \"text\": {\n            \"font-size\": 14,\n            text: \"\",\n            \"text-anchor\": \"middle\",\n            \"ref-x\": .5,\n            \"ref-dy\": 20,\n            \"y-alignment\": \"middle\",\n            fill: \"#000000\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><polyline/></g><text/></g>'\n});\nconst Image = Generic.define(\"basic.Image\", {\n    attrs: {\n        \"text\": {\n            \"font-size\": 14,\n            text: \"\",\n            \"text-anchor\": \"middle\",\n            \"ref-x\": .5,\n            \"ref-dy\": 20,\n            \"y-alignment\": \"middle\",\n            fill: \"#000000\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><image/></g><text/></g>'\n});\nconst Path = Generic.define(\"basic.Path\", {\n    size: {\n        width: 60,\n        height: 60\n    },\n    attrs: {\n        \"path\": {\n            fill: \"#ffffff\",\n            stroke: \"#000000\"\n        },\n        \"text\": {\n            \"font-size\": 14,\n            text: \"\",\n            \"text-anchor\": \"middle\",\n            \"ref\": \"path\",\n            \"ref-x\": .5,\n            \"ref-dy\": 10,\n            fill: \"#000000\",\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><path/></g><text/></g>'\n});\nconst Rhombus = Path.define(\"basic.Rhombus\", {\n    attrs: {\n        \"path\": {\n            d: \"M 30 0 L 60 30 30 60 0 30 z\"\n        },\n        \"text\": {\n            \"ref-y\": .5,\n            \"ref-dy\": null,\n            \"y-alignment\": \"middle\"\n        }\n    }\n});\nconst svgForeignObjectSupported = _env_index_mjs__WEBPACK_IMPORTED_MODULE_2__.env.test(\"svgforeignobject\");\nconst TextBlock = Generic.define(\"basic.TextBlock\", {\n    // see joint.css for more element styles\n    attrs: {\n        rect: {\n            fill: \"#ffffff\",\n            stroke: \"#000000\",\n            width: 80,\n            height: 100\n        },\n        text: {\n            fill: \"#000000\",\n            \"font-size\": 14,\n            \"font-family\": \"Arial, helvetica, sans-serif\"\n        },\n        \".content\": {\n            text: \"\",\n            \"ref-x\": .5,\n            \"ref-y\": .5,\n            \"y-alignment\": \"middle\",\n            \"x-alignment\": \"middle\"\n        }\n    },\n    content: \"\"\n}, {\n    markup: [\n        '<g class=\"rotatable\">',\n        '<g class=\"scalable\"><rect/></g>',\n        svgForeignObjectSupported ? '<foreignObject class=\"fobj\"><body xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"content\"/></body></foreignObject>' : '<text class=\"content\"/>',\n        \"</g>\"\n    ].join(\"\"),\n    initialize: function() {\n        this.listenTo(this, \"change:size\", this.updateSize);\n        this.listenTo(this, \"change:content\", this.updateContent);\n        this.updateSize(this, this.get(\"size\"));\n        this.updateContent(this, this.get(\"content\"));\n        Generic.prototype.initialize.apply(this, arguments);\n    },\n    updateSize: function(cell, size) {\n        // Selector `foreignObject' doesn't work across all browsers, we're using class selector instead.\n        // We have to clone size as we don't want attributes.div.style to be same object as attributes.size.\n        this.attr({\n            \".fobj\": (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.assign)({}, size),\n            div: {\n                style: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.assign)({}, size)\n            }\n        });\n    },\n    updateContent: function(cell, content) {\n        if (svgForeignObjectSupported) {\n            // Content element is a <div> element.\n            this.attr({\n                \".content\": {\n                    html: (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeHTML)(content)\n                }\n            });\n        } else {\n            // Content element is a <text> element.\n            // SVG elements don't have innerHTML attribute.\n            this.attr({\n                \".content\": {\n                    text: content\n                }\n            });\n        }\n    },\n    // Here for backwards compatibility:\n    setForeignObjectSize: function() {\n        this.updateSize.apply(this, arguments);\n    },\n    // Here for backwards compatibility:\n    setDivContent: function() {\n        this.updateContent.apply(this, arguments);\n    }\n});\n// TextBlockView implements the fallback for IE when no foreignObject exists and\n// the text needs to be manually broken.\nconst TextBlockView = _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.extend({\n    presentationAttributes: svgForeignObjectSupported ? _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.presentationAttributes : _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.addPresentationAttributes({\n        content: [\n            \"CONTENT\"\n        ],\n        size: [\n            \"CONTENT\"\n        ]\n    }),\n    initFlag: [\n        \"RENDER\",\n        \"CONTENT\"\n    ],\n    confirmUpdate: function() {\n        var flags = _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.confirmUpdate.apply(this, arguments);\n        if (this.hasFlag(flags, \"CONTENT\")) {\n            this.updateContent(this.model);\n            flags = this.removeFlag(flags, \"CONTENT\");\n        }\n        return flags;\n    },\n    update: function(_, renderingOnlyAttrs) {\n        var model = this.model;\n        if (!svgForeignObjectSupported) {\n            // Update everything but the content first.\n            var noTextAttrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.omit)(renderingOnlyAttrs || model.get(\"attrs\"), \".content\");\n            _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.update.call(this, model, noTextAttrs);\n            if (!renderingOnlyAttrs || (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.has)(renderingOnlyAttrs, \".content\")) {\n                // Update the content itself.\n                this.updateContent(model, renderingOnlyAttrs);\n            }\n        } else {\n            _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.update.call(this, model, renderingOnlyAttrs);\n        }\n    },\n    updateContent: function(cell, renderingOnlyAttrs) {\n        // Create copy of the text attributes\n        var textAttrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.merge)({}, (renderingOnlyAttrs || cell.get(\"attrs\"))[\".content\"]);\n        textAttrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_3__.omit)(textAttrs, \"text\");\n        // Break the content to fit the element size taking into account the attributes\n        // set on the model.\n        var text = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.breakText)(cell.get(\"content\"), cell.get(\"size\"), textAttrs, {\n            // measuring sandbox svg document\n            svgDocument: this.paper.svg\n        });\n        // Create a new attrs with same structure as the model attrs { text: { *textAttributes* }}\n        var attrs = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_4__.setByPath)({}, \".content\", textAttrs, \"/\");\n        // Replace text attribute with the one we just processed.\n        attrs[\".content\"].text = text;\n        // Update the view using renderingOnlyAttributes parameter.\n        _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.update.call(this, cell, attrs);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/shapes/basic.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/shapes/uml.mjs":
/*!*************************************************!*\
  !*** ./node_modules/jointjs/src/shapes/uml.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Abstract: () => (/* binding */ Abstract),\n/* harmony export */   AbstractView: () => (/* binding */ AbstractView),\n/* harmony export */   Aggregation: () => (/* binding */ Aggregation),\n/* harmony export */   Association: () => (/* binding */ Association),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   ClassView: () => (/* binding */ ClassView),\n/* harmony export */   Composition: () => (/* binding */ Composition),\n/* harmony export */   EndState: () => (/* binding */ EndState),\n/* harmony export */   Generalization: () => (/* binding */ Generalization),\n/* harmony export */   Implementation: () => (/* binding */ Implementation),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   InterfaceView: () => (/* binding */ InterfaceView),\n/* harmony export */   StartState: () => (/* binding */ StartState),\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   Transition: () => (/* binding */ Transition)\n/* harmony export */ });\n/* harmony import */ var _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dia/ElementView.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/ElementView.mjs\");\n/* harmony import */ var _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dia/Link.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Link.mjs\");\n/* harmony import */ var _basic_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basic.mjs */ \"(ssr)/./node_modules/jointjs/src/shapes/basic.mjs\");\n\n\n\nconst Class = _basic_mjs__WEBPACK_IMPORTED_MODULE_0__.Generic.define(\"uml.Class\", {\n    attrs: {\n        rect: {\n            \"width\": 200\n        },\n        \".uml-class-name-rect\": {\n            \"stroke\": \"black\",\n            \"stroke-width\": 2,\n            \"fill\": \"#3498db\"\n        },\n        \".uml-class-attrs-rect\": {\n            \"stroke\": \"black\",\n            \"stroke-width\": 2,\n            \"fill\": \"#2980b9\"\n        },\n        \".uml-class-methods-rect\": {\n            \"stroke\": \"black\",\n            \"stroke-width\": 2,\n            \"fill\": \"#2980b9\"\n        },\n        \".uml-class-name-text\": {\n            \"ref\": \".uml-class-name-rect\",\n            \"ref-y\": .5,\n            \"ref-x\": .5,\n            \"text-anchor\": \"middle\",\n            \"y-alignment\": \"middle\",\n            \"font-weight\": \"bold\",\n            \"fill\": \"black\",\n            \"font-size\": 12,\n            \"font-family\": \"Times New Roman\"\n        },\n        \".uml-class-attrs-text\": {\n            \"ref\": \".uml-class-attrs-rect\",\n            \"ref-y\": 5,\n            \"ref-x\": 5,\n            \"fill\": \"black\",\n            \"font-size\": 12,\n            \"font-family\": \"Times New Roman\"\n        },\n        \".uml-class-methods-text\": {\n            \"ref\": \".uml-class-methods-rect\",\n            \"ref-y\": 5,\n            \"ref-x\": 5,\n            \"fill\": \"black\",\n            \"font-size\": 12,\n            \"font-family\": \"Times New Roman\"\n        }\n    },\n    name: [],\n    attributes: [],\n    methods: []\n}, {\n    markup: [\n        '<g class=\"rotatable\">',\n        '<g class=\"scalable\">',\n        '<rect class=\"uml-class-name-rect\"/><rect class=\"uml-class-attrs-rect\"/><rect class=\"uml-class-methods-rect\"/>',\n        \"</g>\",\n        '<text class=\"uml-class-name-text\"/><text class=\"uml-class-attrs-text\"/><text class=\"uml-class-methods-text\"/>',\n        \"</g>\"\n    ].join(\"\"),\n    initialize: function() {\n        this.on(\"change:name change:attributes change:methods\", function() {\n            this.updateRectangles();\n            this.trigger(\"uml-update\");\n        }, this);\n        this.updateRectangles();\n        _basic_mjs__WEBPACK_IMPORTED_MODULE_0__.Generic.prototype.initialize.apply(this, arguments);\n    },\n    getClassName: function() {\n        return this.get(\"name\");\n    },\n    updateRectangles: function() {\n        var attrs = this.get(\"attrs\");\n        var rects = [\n            {\n                type: \"name\",\n                text: this.getClassName()\n            },\n            {\n                type: \"attrs\",\n                text: this.get(\"attributes\")\n            },\n            {\n                type: \"methods\",\n                text: this.get(\"methods\")\n            }\n        ];\n        var offsetY = 0;\n        rects.forEach(function(rect) {\n            var lines = Array.isArray(rect.text) ? rect.text : [\n                rect.text\n            ];\n            var rectHeight = lines.length * 20 + 20;\n            attrs[\".uml-class-\" + rect.type + \"-text\"].text = lines.join(\"\\n\");\n            attrs[\".uml-class-\" + rect.type + \"-rect\"].height = rectHeight;\n            attrs[\".uml-class-\" + rect.type + \"-rect\"].transform = \"translate(0,\" + offsetY + \")\";\n            offsetY += rectHeight;\n        });\n    }\n});\nconst ClassView = _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.extend({\n    initialize: function() {\n        _dia_ElementView_mjs__WEBPACK_IMPORTED_MODULE_1__.ElementView.prototype.initialize.apply(this, arguments);\n        this.listenTo(this.model, \"uml-update\", function() {\n            this.update();\n            this.resize();\n        });\n    }\n});\nconst Abstract = Class.define(\"uml.Abstract\", {\n    attrs: {\n        \".uml-class-name-rect\": {\n            fill: \"#e74c3c\"\n        },\n        \".uml-class-attrs-rect\": {\n            fill: \"#c0392b\"\n        },\n        \".uml-class-methods-rect\": {\n            fill: \"#c0392b\"\n        }\n    }\n}, {\n    getClassName: function() {\n        return [\n            \"<<Abstract>>\",\n            this.get(\"name\")\n        ];\n    }\n});\nconst AbstractView = ClassView;\nconst Interface = Class.define(\"uml.Interface\", {\n    attrs: {\n        \".uml-class-name-rect\": {\n            fill: \"#f1c40f\"\n        },\n        \".uml-class-attrs-rect\": {\n            fill: \"#f39c12\"\n        },\n        \".uml-class-methods-rect\": {\n            fill: \"#f39c12\"\n        }\n    }\n}, {\n    getClassName: function() {\n        return [\n            \"<<Interface>>\",\n            this.get(\"name\")\n        ];\n    }\n});\nconst InterfaceView = ClassView;\nconst Generalization = _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.define(\"uml.Generalization\", {\n    attrs: {\n        \".marker-target\": {\n            d: \"M 20 0 L 0 10 L 20 20 z\",\n            fill: \"white\"\n        }\n    }\n});\nconst Implementation = _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.define(\"uml.Implementation\", {\n    attrs: {\n        \".marker-target\": {\n            d: \"M 20 0 L 0 10 L 20 20 z\",\n            fill: \"white\"\n        },\n        \".connection\": {\n            \"stroke-dasharray\": \"3,3\"\n        }\n    }\n});\nconst Aggregation = _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.define(\"uml.Aggregation\", {\n    attrs: {\n        \".marker-target\": {\n            d: \"M 40 10 L 20 20 L 0 10 L 20 0 z\",\n            fill: \"white\"\n        }\n    }\n});\nconst Composition = _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.define(\"uml.Composition\", {\n    attrs: {\n        \".marker-target\": {\n            d: \"M 40 10 L 20 20 L 0 10 L 20 0 z\",\n            fill: \"black\"\n        }\n    }\n});\nconst Association = _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.define(\"uml.Association\");\n// Statechart\nconst State = _basic_mjs__WEBPACK_IMPORTED_MODULE_0__.Generic.define(\"uml.State\", {\n    attrs: {\n        \".uml-state-body\": {\n            \"width\": 200,\n            \"height\": 200,\n            \"rx\": 10,\n            \"ry\": 10,\n            \"fill\": \"#ecf0f1\",\n            \"stroke\": \"#bdc3c7\",\n            \"stroke-width\": 3\n        },\n        \".uml-state-separator\": {\n            \"stroke\": \"#bdc3c7\",\n            \"stroke-width\": 2\n        },\n        \".uml-state-name\": {\n            \"ref\": \".uml-state-body\",\n            \"ref-x\": .5,\n            \"ref-y\": 5,\n            \"text-anchor\": \"middle\",\n            \"fill\": \"#000000\",\n            \"font-family\": \"Courier New\",\n            \"font-size\": 14\n        },\n        \".uml-state-events\": {\n            \"ref\": \".uml-state-separator\",\n            \"ref-x\": 5,\n            \"ref-y\": 5,\n            \"fill\": \"#000000\",\n            \"font-family\": \"Courier New\",\n            \"font-size\": 14\n        }\n    },\n    name: \"State\",\n    events: []\n}, {\n    markup: [\n        '<g class=\"rotatable\">',\n        '<g class=\"scalable\">',\n        '<rect class=\"uml-state-body\"/>',\n        \"</g>\",\n        '<path class=\"uml-state-separator\"/>',\n        '<text class=\"uml-state-name\"/>',\n        '<text class=\"uml-state-events\"/>',\n        \"</g>\"\n    ].join(\"\"),\n    initialize: function() {\n        this.on({\n            \"change:name\": this.updateName,\n            \"change:events\": this.updateEvents,\n            \"change:size\": this.updatePath\n        }, this);\n        this.updateName();\n        this.updateEvents();\n        this.updatePath();\n        _basic_mjs__WEBPACK_IMPORTED_MODULE_0__.Generic.prototype.initialize.apply(this, arguments);\n    },\n    updateName: function() {\n        this.attr(\".uml-state-name/text\", this.get(\"name\"));\n    },\n    updateEvents: function() {\n        this.attr(\".uml-state-events/text\", this.get(\"events\").join(\"\\n\"));\n    },\n    updatePath: function() {\n        var d = \"M 0 20 L \" + this.get(\"size\").width + \" 20\";\n        // We are using `silent: true` here because updatePath() is meant to be called\n        // on resize and there's no need to to update the element twice (`change:size`\n        // triggers also an update).\n        this.attr(\".uml-state-separator/d\", d, {\n            silent: true\n        });\n    }\n});\nconst StartState = _basic_mjs__WEBPACK_IMPORTED_MODULE_0__.Circle.define(\"uml.StartState\", {\n    type: \"uml.StartState\",\n    attrs: {\n        circle: {\n            \"fill\": \"#34495e\",\n            \"stroke\": \"#2c3e50\",\n            \"stroke-width\": 2,\n            \"rx\": 1\n        }\n    }\n});\nconst EndState = _basic_mjs__WEBPACK_IMPORTED_MODULE_0__.Generic.define(\"uml.EndState\", {\n    size: {\n        width: 20,\n        height: 20\n    },\n    attrs: {\n        \"circle.outer\": {\n            transform: \"translate(10, 10)\",\n            r: 10,\n            fill: \"#ffffff\",\n            stroke: \"#2c3e50\"\n        },\n        \"circle.inner\": {\n            transform: \"translate(10, 10)\",\n            r: 6,\n            fill: \"#34495e\"\n        }\n    }\n}, {\n    markup: '<g class=\"rotatable\"><g class=\"scalable\"><circle class=\"outer\"/><circle class=\"inner\"/></g></g>'\n});\nconst Transition = _dia_Link_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.define(\"uml.Transition\", {\n    attrs: {\n        \".marker-target\": {\n            d: \"M 10 0 L 0 5 L 10 10 z\",\n            fill: \"#34495e\",\n            stroke: \"#2c3e50\"\n        },\n        \".connection\": {\n            stroke: \"#2c3e50\"\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvc2hhcGVzL3VtbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFEO0FBQ2Q7QUFDTztBQUV2QyxNQUFNSSxRQUFRRiwrQ0FBT0EsQ0FBQ0csTUFBTSxDQUFDLGFBQWE7SUFDN0NDLE9BQU87UUFDSEMsTUFBTTtZQUFFLFNBQVM7UUFBSTtRQUVyQix3QkFBd0I7WUFBRSxVQUFVO1lBQVMsZ0JBQWdCO1lBQUcsUUFBUTtRQUFVO1FBQ2xGLHlCQUF5QjtZQUFFLFVBQVU7WUFBUyxnQkFBZ0I7WUFBRyxRQUFRO1FBQVU7UUFDbkYsMkJBQTJCO1lBQUUsVUFBVTtZQUFTLGdCQUFnQjtZQUFHLFFBQVE7UUFBVTtRQUVyRix3QkFBd0I7WUFDcEIsT0FBTztZQUNQLFNBQVM7WUFDVCxTQUFTO1lBQ1QsZUFBZTtZQUNmLGVBQWU7WUFDZixlQUFlO1lBQ2YsUUFBUTtZQUNSLGFBQWE7WUFDYixlQUFlO1FBQ25CO1FBQ0EseUJBQXlCO1lBQ3JCLE9BQU87WUFBeUIsU0FBUztZQUFHLFNBQVM7WUFDckQsUUFBUTtZQUFTLGFBQWE7WUFBSSxlQUFlO1FBQ3JEO1FBQ0EsMkJBQTJCO1lBQ3ZCLE9BQU87WUFBMkIsU0FBUztZQUFHLFNBQVM7WUFDdkQsUUFBUTtZQUFTLGFBQWE7WUFBSSxlQUFlO1FBQ3JEO0lBQ0o7SUFFQUMsTUFBTSxFQUFFO0lBQ1JDLFlBQVksRUFBRTtJQUNkQyxTQUFTLEVBQUU7QUFDZixHQUFHO0lBQ0NDLFFBQVE7UUFDSjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSCxDQUFDQyxJQUFJLENBQUM7SUFFUEMsWUFBWTtRQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLGdEQUFnRDtZQUNwRCxJQUFJLENBQUNDLGdCQUFnQjtZQUNyQixJQUFJLENBQUNDLE9BQU8sQ0FBQztRQUNqQixHQUFHLElBQUk7UUFFUCxJQUFJLENBQUNELGdCQUFnQjtRQUVyQmIsK0NBQU9BLENB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K0NBQUlBLENBQUNJLE1BQU0sQ0FBQyxrQkFBa0I7SUFDcERDLE9BQU87UUFDSCxrQkFBa0I7WUFBRXdDLEdBQUc7WUFBMEJMLE1BQU07WUFBV3VCLFFBQVE7UUFBVTtRQUNwRixlQUFlO1lBQUVBLFFBQVE7UUFBVTtJQUN2QztBQUNKLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy9zaGFwZXMvdW1sLm1qcz8yNzFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRWaWV3IH0gZnJvbSAnLi4vZGlhL0VsZW1lbnRWaWV3Lm1qcyc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAnLi4vZGlhL0xpbmsubWpzJztcbmltcG9ydCB7IEdlbmVyaWMsIENpcmNsZSB9IGZyb20gJy4vYmFzaWMubWpzJztcblxuZXhwb3J0IGNvbnN0IENsYXNzID0gR2VuZXJpYy5kZWZpbmUoJ3VtbC5DbGFzcycsIHtcbiAgICBhdHRyczoge1xuICAgICAgICByZWN0OiB7ICd3aWR0aCc6IDIwMCB9LFxuXG4gICAgICAgICcudW1sLWNsYXNzLW5hbWUtcmVjdCc6IHsgJ3N0cm9rZSc6ICdibGFjaycsICdzdHJva2Utd2lkdGgnOiAyLCAnZmlsbCc6ICcjMzQ5OGRiJyB9LFxuICAgICAgICAnLnVtbC1jbGFzcy1hdHRycy1yZWN0JzogeyAnc3Ryb2tlJzogJ2JsYWNrJywgJ3N0cm9rZS13aWR0aCc6IDIsICdmaWxsJzogJyMyOTgwYjknIH0sXG4gICAgICAgICcudW1sLWNsYXNzLW1ldGhvZHMtcmVjdCc6IHsgJ3N0cm9rZSc6ICdibGFjaycsICdzdHJva2Utd2lkdGgnOiAyLCAnZmlsbCc6ICcjMjk4MGI5JyB9LFxuXG4gICAgICAgICcudW1sLWNsYXNzLW5hbWUtdGV4dCc6IHtcbiAgICAgICAgICAgICdyZWYnOiAnLnVtbC1jbGFzcy1uYW1lLXJlY3QnLFxuICAgICAgICAgICAgJ3JlZi15JzogLjUsXG4gICAgICAgICAgICAncmVmLXgnOiAuNSxcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLFxuICAgICAgICAgICAgJ3ktYWxpZ25tZW50JzogJ21pZGRsZScsXG4gICAgICAgICAgICAnZm9udC13ZWlnaHQnOiAnYm9sZCcsXG4gICAgICAgICAgICAnZmlsbCc6ICdibGFjaycsXG4gICAgICAgICAgICAnZm9udC1zaXplJzogMTIsXG4gICAgICAgICAgICAnZm9udC1mYW1pbHknOiAnVGltZXMgTmV3IFJvbWFuJ1xuICAgICAgICB9LFxuICAgICAgICAnLnVtbC1jbGFzcy1hdHRycy10ZXh0Jzoge1xuICAgICAgICAgICAgJ3JlZic6ICcudW1sLWNsYXNzLWF0dHJzLXJlY3QnLCAncmVmLXknOiA1LCAncmVmLXgnOiA1LFxuICAgICAgICAgICAgJ2ZpbGwnOiAnYmxhY2snLCAnZm9udC1zaXplJzogMTIsICdmb250LWZhbWlseSc6ICdUaW1lcyBOZXcgUm9tYW4nXG4gICAgICAgIH0sXG4gICAgICAgICcudW1sLWNsYXNzLW1ldGhvZHMtdGV4dCc6IHtcbiAgICAgICAgICAgICdyZWYnOiAnLnVtbC1jbGFzcy1tZXRob2RzLXJlY3QnLCAncmVmLXknOiA1LCAncmVmLXgnOiA1LFxuICAgICAgICAgICAgJ2ZpbGwnOiAnYmxhY2snLCAnZm9udC1zaXplJzogMTIsICdmb250LWZhbWlseSc6ICdUaW1lcyBOZXcgUm9tYW4nXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbmFtZTogW10sXG4gICAgYXR0cmlidXRlczogW10sXG4gICAgbWV0aG9kczogW11cbn0sIHtcbiAgICBtYXJrdXA6IFtcbiAgICAgICAgJzxnIGNsYXNzPVwicm90YXRhYmxlXCI+JyxcbiAgICAgICAgJzxnIGNsYXNzPVwic2NhbGFibGVcIj4nLFxuICAgICAgICAnPHJlY3QgY2xhc3M9XCJ1bWwtY2xhc3MtbmFtZS1yZWN0XCIvPjxyZWN0IGNsYXNzPVwidW1sLWNsYXNzLWF0dHJzLXJlY3RcIi8+PHJlY3QgY2xhc3M9XCJ1bWwtY2xhc3MtbWV0aG9kcy1yZWN0XCIvPicsXG4gICAgICAgICc8L2c+JyxcbiAgICAgICAgJzx0ZXh0IGNsYXNzPVwidW1sLWNsYXNzLW5hbWUtdGV4dFwiLz48dGV4dCBjbGFzcz1cInVtbC1jbGFzcy1hdHRycy10ZXh0XCIvPjx0ZXh0IGNsYXNzPVwidW1sLWNsYXNzLW1ldGhvZHMtdGV4dFwiLz4nLFxuICAgICAgICAnPC9nPidcbiAgICBdLmpvaW4oJycpLFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdGhpcy5vbignY2hhbmdlOm5hbWUgY2hhbmdlOmF0dHJpYnV0ZXMgY2hhbmdlOm1ldGhvZHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVjdGFuZ2xlcygpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd1bWwtdXBkYXRlJyk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlUmVjdGFuZ2xlcygpO1xuXG4gICAgICAgIEdlbmVyaWMucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgZ2V0Q2xhc3NOYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCduYW1lJyk7XG4gICAgfSxcblxuICAgIHVwZGF0ZVJlY3RhbmdsZXM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBhdHRycyA9IHRoaXMuZ2V0KCdhdHRycycpO1xuXG4gICAgICAgIHZhciByZWN0cyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogJ25hbWUnLCB0ZXh0OiB0aGlzLmdldENsYXNzTmFtZSgpIH0sXG4gICAgICAgICAgICB7IHR5cGU6ICdhdHRycycsIHRleHQ6IHRoaXMuZ2V0KCdhdHRyaWJ1dGVzJykgfSxcbiAgICAgICAgICAgIHsgdHlwZTogJ21ldGhvZHMnLCB0ZXh0OiB0aGlzLmdldCgnbWV0aG9kcycpIH1cbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgb2Zmc2V0WSA9IDA7XG5cbiAgICAgICAgcmVjdHMuZm9yRWFjaChmdW5jdGlvbihyZWN0KSB7XG5cbiAgICAgICAgICAgIHZhciBsaW5lcyA9IEFycmF5LmlzQXJyYXkocmVjdC50ZXh0KSA/IHJlY3QudGV4dCA6IFtyZWN0LnRleHRdO1xuICAgICAgICAgICAgdmFyIHJlY3RIZWlnaHQgPSBsaW5lcy5sZW5ndGggKiAyMCArIDIwO1xuXG4gICAgICAgICAgICBhdHRyc1snLnVtbC1jbGFzcy0nICsgcmVjdC50eXBlICsgJy10ZXh0J10udGV4dCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgYXR0cnNbJy51bWwtY2xhc3MtJyArIHJlY3QudHlwZSArICctcmVjdCddLmhlaWdodCA9IHJlY3RIZWlnaHQ7XG4gICAgICAgICAgICBhdHRyc1snLnVtbC1jbGFzcy0nICsgcmVjdC50eXBlICsgJy1yZWN0J10udHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBvZmZzZXRZICsgJyknO1xuXG4gICAgICAgICAgICBvZmZzZXRZICs9IHJlY3RIZWlnaHQ7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSk7XG5cbmV4cG9ydCBjb25zdCBDbGFzc1ZpZXcgPSBFbGVtZW50Vmlldy5leHRlbmQoe1xuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgRWxlbWVudFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICd1bWwtdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBBYnN0cmFjdCA9IENsYXNzLmRlZmluZSgndW1sLkFic3RyYWN0Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICAgICcudW1sLWNsYXNzLW5hbWUtcmVjdCc6IHsgZmlsbDogJyNlNzRjM2MnIH0sXG4gICAgICAgICcudW1sLWNsYXNzLWF0dHJzLXJlY3QnOiB7IGZpbGw6ICcjYzAzOTJiJyB9LFxuICAgICAgICAnLnVtbC1jbGFzcy1tZXRob2RzLXJlY3QnOiB7IGZpbGw6ICcjYzAzOTJiJyB9XG4gICAgfVxufSwge1xuXG4gICAgZ2V0Q2xhc3NOYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFsnPDxBYnN0cmFjdD4+JywgdGhpcy5nZXQoJ25hbWUnKV07XG4gICAgfVxuXG59KTtcbmV4cG9ydCBjb25zdCBBYnN0cmFjdFZpZXcgPSBDbGFzc1ZpZXc7XG5cbmV4cG9ydCBjb25zdCBJbnRlcmZhY2UgPSBDbGFzcy5kZWZpbmUoJ3VtbC5JbnRlcmZhY2UnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgICAgJy51bWwtY2xhc3MtbmFtZS1yZWN0JzogeyBmaWxsOiAnI2YxYzQwZicgfSxcbiAgICAgICAgJy51bWwtY2xhc3MtYXR0cnMtcmVjdCc6IHsgZmlsbDogJyNmMzljMTInIH0sXG4gICAgICAgICcudW1sLWNsYXNzLW1ldGhvZHMtcmVjdCc6IHsgZmlsbDogJyNmMzljMTInIH1cbiAgICB9XG59LCB7XG4gICAgZ2V0Q2xhc3NOYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFsnPDxJbnRlcmZhY2U+PicsIHRoaXMuZ2V0KCduYW1lJyldO1xuICAgIH1cbn0pO1xuZXhwb3J0IGNvbnN0IEludGVyZmFjZVZpZXcgPSBDbGFzc1ZpZXc7XG5cbmV4cG9ydCBjb25zdCBHZW5lcmFsaXphdGlvbiA9IExpbmsuZGVmaW5lKCd1bWwuR2VuZXJhbGl6YXRpb24nLCB7XG4gICAgYXR0cnM6IHsgJy5tYXJrZXItdGFyZ2V0JzogeyBkOiAnTSAyMCAwIEwgMCAxMCBMIDIwIDIwIHonLCBmaWxsOiAnd2hpdGUnIH19XG59KTtcblxuZXhwb3J0IGNvbnN0IEltcGxlbWVudGF0aW9uID0gTGluay5kZWZpbmUoJ3VtbC5JbXBsZW1lbnRhdGlvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgICAnLm1hcmtlci10YXJnZXQnOiB7IGQ6ICdNIDIwIDAgTCAwIDEwIEwgMjAgMjAgeicsIGZpbGw6ICd3aGl0ZScgfSxcbiAgICAgICAgJy5jb25uZWN0aW9uJzogeyAnc3Ryb2tlLWRhc2hhcnJheSc6ICczLDMnIH1cbiAgICB9XG59KTtcblxuZXhwb3J0IGNvbnN0IEFnZ3JlZ2F0aW9uID0gTGluay5kZWZpbmUoJ3VtbC5BZ2dyZWdhdGlvbicsIHtcbiAgICBhdHRyczogeyAnLm1hcmtlci10YXJnZXQnOiB7IGQ6ICdNIDQwIDEwIEwgMjAgMjAgTCAwIDEwIEwgMjAgMCB6JywgZmlsbDogJ3doaXRlJyB9fVxufSk7XG5cbmV4cG9ydCBjb25zdCBDb21wb3NpdGlvbiA9IExpbmsuZGVmaW5lKCd1bWwuQ29tcG9zaXRpb24nLCB7XG4gICAgYXR0cnM6IHsgJy5tYXJrZXItdGFyZ2V0JzogeyBkOiAnTSA0MCAxMCBMIDIwIDIwIEwgMCAxMCBMIDIwIDAgeicsIGZpbGw6ICdibGFjaycgfX1cbn0pO1xuXG5leHBvcnQgY29uc3QgQXNzb2NpYXRpb24gPSBMaW5rLmRlZmluZSgndW1sLkFzc29jaWF0aW9uJyk7XG5cbi8vIFN0YXRlY2hhcnRcblxuZXhwb3J0IGNvbnN0IFN0YXRlID0gR2VuZXJpYy5kZWZpbmUoJ3VtbC5TdGF0ZScsIHtcbiAgICBhdHRyczoge1xuICAgICAgICAnLnVtbC1zdGF0ZS1ib2R5Jzoge1xuICAgICAgICAgICAgJ3dpZHRoJzogMjAwLCAnaGVpZ2h0JzogMjAwLCAncngnOiAxMCwgJ3J5JzogMTAsXG4gICAgICAgICAgICAnZmlsbCc6ICcjZWNmMGYxJywgJ3N0cm9rZSc6ICcjYmRjM2M3JywgJ3N0cm9rZS13aWR0aCc6IDNcbiAgICAgICAgfSxcbiAgICAgICAgJy51bWwtc3RhdGUtc2VwYXJhdG9yJzoge1xuICAgICAgICAgICAgJ3N0cm9rZSc6ICcjYmRjM2M3JywgJ3N0cm9rZS13aWR0aCc6IDJcbiAgICAgICAgfSxcbiAgICAgICAgJy51bWwtc3RhdGUtbmFtZSc6IHtcbiAgICAgICAgICAgICdyZWYnOiAnLnVtbC1zdGF0ZS1ib2R5JywgJ3JlZi14JzogLjUsICdyZWYteSc6IDUsICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLFxuICAgICAgICAgICAgJ2ZpbGwnOiAnIzAwMDAwMCcsICdmb250LWZhbWlseSc6ICdDb3VyaWVyIE5ldycsICdmb250LXNpemUnOiAxNFxuICAgICAgICB9LFxuICAgICAgICAnLnVtbC1zdGF0ZS1ldmVudHMnOiB7XG4gICAgICAgICAgICAncmVmJzogJy51bWwtc3RhdGUtc2VwYXJhdG9yJywgJ3JlZi14JzogNSwgJ3JlZi15JzogNSxcbiAgICAgICAgICAgICdmaWxsJzogJyMwMDAwMDAnLCAnZm9udC1mYW1pbHknOiAnQ291cmllciBOZXcnLCAnZm9udC1zaXplJzogMTRcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBuYW1lOiAnU3RhdGUnLFxuICAgIGV2ZW50czogW11cblxufSwge1xuICAgIG1hcmt1cDogW1xuICAgICAgICAnPGcgY2xhc3M9XCJyb3RhdGFibGVcIj4nLFxuICAgICAgICAnPGcgY2xhc3M9XCJzY2FsYWJsZVwiPicsXG4gICAgICAgICc8cmVjdCBjbGFzcz1cInVtbC1zdGF0ZS1ib2R5XCIvPicsXG4gICAgICAgICc8L2c+JyxcbiAgICAgICAgJzxwYXRoIGNsYXNzPVwidW1sLXN0YXRlLXNlcGFyYXRvclwiLz4nLFxuICAgICAgICAnPHRleHQgY2xhc3M9XCJ1bWwtc3RhdGUtbmFtZVwiLz4nLFxuICAgICAgICAnPHRleHQgY2xhc3M9XCJ1bWwtc3RhdGUtZXZlbnRzXCIvPicsXG4gICAgICAgICc8L2c+J1xuICAgIF0uam9pbignJyksXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB0aGlzLm9uKHtcbiAgICAgICAgICAgICdjaGFuZ2U6bmFtZSc6IHRoaXMudXBkYXRlTmFtZSxcbiAgICAgICAgICAgICdjaGFuZ2U6ZXZlbnRzJzogdGhpcy51cGRhdGVFdmVudHMsXG4gICAgICAgICAgICAnY2hhbmdlOnNpemUnOiB0aGlzLnVwZGF0ZVBhdGhcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVOYW1lKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRXZlbnRzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlUGF0aCgpO1xuXG4gICAgICAgIEdlbmVyaWMucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlTmFtZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdGhpcy5hdHRyKCcudW1sLXN0YXRlLW5hbWUvdGV4dCcsIHRoaXMuZ2V0KCduYW1lJykpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVFdmVudHM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHRoaXMuYXR0cignLnVtbC1zdGF0ZS1ldmVudHMvdGV4dCcsIHRoaXMuZ2V0KCdldmVudHMnKS5qb2luKCdcXG4nKSk7XG4gICAgfSxcblxuICAgIHVwZGF0ZVBhdGg6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBkID0gJ00gMCAyMCBMICcgKyB0aGlzLmdldCgnc2l6ZScpLndpZHRoICsgJyAyMCc7XG5cbiAgICAgICAgLy8gV2UgYXJlIHVzaW5nIGBzaWxlbnQ6IHRydWVgIGhlcmUgYmVjYXVzZSB1cGRhdGVQYXRoKCkgaXMgbWVhbnQgdG8gYmUgY2FsbGVkXG4gICAgICAgIC8vIG9uIHJlc2l6ZSBhbmQgdGhlcmUncyBubyBuZWVkIHRvIHRvIHVwZGF0ZSB0aGUgZWxlbWVudCB0d2ljZSAoYGNoYW5nZTpzaXplYFxuICAgICAgICAvLyB0cmlnZ2VycyBhbHNvIGFuIHVwZGF0ZSkuXG4gICAgICAgIHRoaXMuYXR0cignLnVtbC1zdGF0ZS1zZXBhcmF0b3IvZCcsIGQsIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgU3RhcnRTdGF0ZSA9IENpcmNsZS5kZWZpbmUoJ3VtbC5TdGFydFN0YXRlJywge1xuICAgIHR5cGU6ICd1bWwuU3RhcnRTdGF0ZScsXG4gICAgYXR0cnM6IHsgY2lyY2xlOiB7ICdmaWxsJzogJyMzNDQ5NWUnLCAnc3Ryb2tlJzogJyMyYzNlNTAnLCAnc3Ryb2tlLXdpZHRoJzogMiwgJ3J4JzogMSB9fVxufSk7XG5cbmV4cG9ydCBjb25zdCBFbmRTdGF0ZSA9IEdlbmVyaWMuZGVmaW5lKCd1bWwuRW5kU3RhdGUnLCB7XG4gICAgc2l6ZTogeyB3aWR0aDogMjAsIGhlaWdodDogMjAgfSxcbiAgICBhdHRyczoge1xuICAgICAgICAnY2lyY2xlLm91dGVyJzoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEwLCAxMCknLFxuICAgICAgICAgICAgcjogMTAsXG4gICAgICAgICAgICBmaWxsOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICBzdHJva2U6ICcjMmMzZTUwJ1xuICAgICAgICB9LFxuXG4gICAgICAgICdjaXJjbGUuaW5uZXInOiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTAsIDEwKScsXG4gICAgICAgICAgICByOiA2LFxuICAgICAgICAgICAgZmlsbDogJyMzNDQ5NWUnXG4gICAgICAgIH1cbiAgICB9XG59LCB7XG4gICAgbWFya3VwOiAnPGcgY2xhc3M9XCJyb3RhdGFibGVcIj48ZyBjbGFzcz1cInNjYWxhYmxlXCI+PGNpcmNsZSBjbGFzcz1cIm91dGVyXCIvPjxjaXJjbGUgY2xhc3M9XCJpbm5lclwiLz48L2c+PC9nPicsXG59KTtcblxuZXhwb3J0IGNvbnN0IFRyYW5zaXRpb24gPSBMaW5rLmRlZmluZSgndW1sLlRyYW5zaXRpb24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgICAgJy5tYXJrZXItdGFyZ2V0JzogeyBkOiAnTSAxMCAwIEwgMCA1IEwgMTAgMTAgeicsIGZpbGw6ICcjMzQ0OTVlJywgc3Ryb2tlOiAnIzJjM2U1MCcgfSxcbiAgICAgICAgJy5jb25uZWN0aW9uJzogeyBzdHJva2U6ICcjMmMzZTUwJyB9XG4gICAgfVxufSk7XG4iXSwibmFtZXMiOlsiRWxlbWVudFZpZXciLCJMaW5rIiwiR2VuZXJpYyIsIkNpcmNsZSIsIkNsYXNzIiwiZGVmaW5lIiwiYXR0cnMiLCJyZWN0IiwibmFtZSIsImF0dHJpYnV0ZXMiLCJtZXRob2RzIiwibWFya3VwIiwiam9pbiIsImluaXRpYWxpemUiLCJvbiIsInVwZGF0ZVJlY3RhbmdsZXMiLCJ0cmlnZ2VyIiwicHJvdG90eXBlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRDbGFzc05hbWUiLCJnZXQiLCJyZWN0cyIsInR5cGUiLCJ0ZXh0Iiwib2Zmc2V0WSIsImZvckVhY2giLCJsaW5lcyIsIkFycmF5IiwiaXNBcnJheSIsInJlY3RIZWlnaHQiLCJsZW5ndGgiLCJoZWlnaHQiLCJ0cmFuc2Zvcm0iLCJDbGFzc1ZpZXciLCJleHRlbmQiLCJsaXN0ZW5UbyIsIm1vZGVsIiwidXBkYXRlIiwicmVzaXplIiwiQWJzdHJhY3QiLCJmaWxsIiwiQWJzdHJhY3RWaWV3IiwiSW50ZXJmYWNlIiwiSW50ZXJmYWNlVmlldyIsIkdlbmVyYWxpemF0aW9uIiwiZCIsIkltcGxlbWVudGF0aW9uIiwiQWdncmVnYXRpb24iLCJDb21wb3NpdGlvbiIsIkFzc29jaWF0aW9uIiwiU3RhdGUiLCJldmVudHMiLCJ1cGRhdGVOYW1lIiwidXBkYXRlRXZlbnRzIiwidXBkYXRlUGF0aCIsImF0dHIiLCJ3aWR0aCIsInNpbGVudCIsIlN0YXJ0U3RhdGUiLCJjaXJjbGUiLCJFbmRTdGF0ZSIsInNpemUiLCJyIiwic3Ryb2tlIiwiVHJhbnNpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/shapes/uml.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/util/cloneCells.mjs":
/*!******************************************************!*\
  !*** ./node_modules/jointjs/src/util/cloneCells.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneCells: () => (/* binding */ cloneCells)\n/* harmony export */ });\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\n// Clone `cells` returning an object that maps the original cell ID to the clone. The number\n// of clones is exactly the same as the `cells.length`.\n// This function simply clones all the `cells`. However, it also reconstructs\n// all the `source/target` and `parent/embed` references within the `cells`.\n// This is the main difference from the `cell.clone()` method. The\n// `cell.clone()` method works on one single cell only.\n// For example, for a graph: `A --- L ---> B`, `cloneCells([A, L, B])`\n// returns `[A2, L2, B2]` resulting to a graph: `A2 --- L2 ---> B2`, i.e.\n// the source and target of the link `L2` is changed to point to `A2` and `B2`.\nfunction cloneCells(cells) {\n    cells = (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.uniq)(cells);\n    // A map of the form [original cell ID] -> [clone] helping\n    // us to reconstruct references for source/target and parent/embeds.\n    // This is also the returned value.\n    const cloneMap = (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray)(cells).reduce(function(map, cell) {\n        map[cell.id] = cell.clone();\n        return map;\n    }, {});\n    (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray)(cells).forEach(function(cell) {\n        const clone = cloneMap[cell.id];\n        // assert(clone exists)\n        if (clone.isLink()) {\n            const source = clone.source();\n            const target = clone.target();\n            if (source.id && cloneMap[source.id]) {\n                // Source points to an element and the element is among the clones.\n                // => Update the source of the cloned link.\n                clone.prop(\"source/id\", cloneMap[source.id].id);\n            }\n            if (target.id && cloneMap[target.id]) {\n                // Target points to an element and the element is among the clones.\n                // => Update the target of the cloned link.\n                clone.prop(\"target/id\", cloneMap[target.id].id);\n            }\n        }\n        // Find the parent of the original cell\n        const parent = cell.get(\"parent\");\n        if (parent && cloneMap[parent]) {\n            clone.set(\"parent\", cloneMap[parent].id);\n        }\n        // Find the embeds of the original cell\n        const embeds = (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray)(cell.get(\"embeds\")).reduce(function(newEmbeds, embed) {\n            // Embedded cells that are not being cloned can not be carried\n            // over with other embedded cells.\n            if (cloneMap[embed]) {\n                newEmbeds.push(cloneMap[embed].id);\n            }\n            return newEmbeds;\n        }, []);\n        if (!(0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(embeds)) {\n            clone.set(\"embeds\", embeds);\n        }\n    });\n    return cloneMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvdXRpbC9jbG9uZUNlbGxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRDtBQUVwRCw0RkFBNEY7QUFDNUYsdURBQXVEO0FBQ3ZELDZFQUE2RTtBQUM3RSw0RUFBNEU7QUFDNUUsa0VBQWtFO0FBQ2xFLHVEQUF1RDtBQUN2RCxzRUFBc0U7QUFDdEUseUVBQXlFO0FBQ3pFLCtFQUErRTtBQUN4RSxTQUFTRyxXQUFXQyxLQUFLO0lBRTVCQSxRQUFRSiwrQ0FBSUEsQ0FBQ0k7SUFFYiwwREFBMEQ7SUFDMUQsb0VBQW9FO0lBQ3BFLG1DQUFtQztJQUNuQyxNQUFNQyxXQUFXSixrREFBT0EsQ0FBQ0csT0FBT0UsTUFBTSxDQUFDLFNBQVNDLEdBQUcsRUFBRUMsSUFBSTtRQUNyREQsR0FBRyxDQUFDQyxLQUFLQyxFQUFFLENBQUMsR0FBR0QsS0FBS0UsS0FBSztRQUN6QixPQUFPSDtJQUNYLEdBQUcsQ0FBQztJQUVKTixrREFBT0EsQ0FBQ0csT0FBT08sT0FBTyxDQUFDLFNBQVNILElBQUk7UUFFaEMsTUFBTUUsUUFBUUwsUUFBUSxDQUFDRyxLQUFLQyxFQUFFLENBQUM7UUFDL0IsdUJBQXVCO1FBRXZCLElBQUlDLE1BQU1FLE1BQU0sSUFBSTtZQUNoQixNQUFNQyxTQUFTSCxNQUFNRyxNQUFNO1lBQzNCLE1BQU1DLFNBQVNKLE1BQU1JLE1BQU07WUFDM0IsSUFBSUQsT0FBT0osRUFBRSxJQUFJSixRQUFRLENBQUNRLE9BQU9KLEVBQUUsQ0FBQyxFQUFFO2dCQUNsQyxtRUFBbUU7Z0JBQ25FLDJDQUEyQztnQkFDM0NDLE1BQU1LLElBQUksQ0FBQyxhQUFhVixRQUFRLENBQUNRLE9BQU9KLEVBQUUsQ0FBQyxDQUFDQSxFQUFFO1lBQ2xEO1lBQ0EsSUFBSUssT0FBT0wsRUFBRSxJQUFJSixRQUFRLENBQUNTLE9BQU9MLEVBQUUsQ0FBQyxFQUFFO2dCQUNsQyxtRUFBbUU7Z0JBQ25FLDJDQUEyQztnQkFDM0NDLE1BQU1LLElBQUksQ0FBQyxhQUFhVixRQUFRLENBQUNTLE9BQU9MLEVBQUUsQ0FBQyxDQUFDQSxFQUFFO1lBQ2xEO1FBQ0o7UUFFQSx1Q0FBdUM7UUFDdkMsTUFBTU8sU0FBU1IsS0FBS1MsR0FBRyxDQUFDO1FBQ3hCLElBQUlELFVBQVVYLFFBQVEsQ0FBQ1csT0FBTyxFQUFFO1lBQzVCTixNQUFNUSxHQUFHLENBQUMsVUFBVWIsUUFBUSxDQUFDVyxPQUFPLENBQUNQLEVBQUU7UUFDM0M7UUFFQSx1Q0FBdUM7UUFDdkMsTUFBTVUsU0FBU2xCLGtEQUFPQSxDQUFDTyxLQUFLUyxHQUFHLENBQUMsV0FBV1gsTUFBTSxDQUFDLFNBQVNjLFNBQVMsRUFBRUMsS0FBSztZQUN2RSw4REFBOEQ7WUFDOUQsa0NBQWtDO1lBQ2xDLElBQUloQixRQUFRLENBQUNnQixNQUFNLEVBQUU7Z0JBQ2pCRCxVQUFVRSxJQUFJLENBQUNqQixRQUFRLENBQUNnQixNQUFNLENBQUNaLEVBQUU7WUFDckM7WUFDQSxPQUFPVztRQUNYLEdBQUcsRUFBRTtRQUVMLElBQUksQ0FBQ2xCLGtEQUFPQSxDQUFDaUIsU0FBUztZQUNsQlQsTUFBTVEsR0FBRyxDQUFDLFVBQVVDO1FBQ3hCO0lBQ0o7SUFFQSxPQUFPZDtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvdXRpbC9jbG9uZUNlbGxzLm1qcz9mYTlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuaXEsIHRvQXJyYXksIGlzRW1wdHkgfSBmcm9tICcuL3V0aWwubWpzJztcblxuLy8gQ2xvbmUgYGNlbGxzYCByZXR1cm5pbmcgYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgb3JpZ2luYWwgY2VsbCBJRCB0byB0aGUgY2xvbmUuIFRoZSBudW1iZXJcbi8vIG9mIGNsb25lcyBpcyBleGFjdGx5IHRoZSBzYW1lIGFzIHRoZSBgY2VsbHMubGVuZ3RoYC5cbi8vIFRoaXMgZnVuY3Rpb24gc2ltcGx5IGNsb25lcyBhbGwgdGhlIGBjZWxsc2AuIEhvd2V2ZXIsIGl0IGFsc28gcmVjb25zdHJ1Y3RzXG4vLyBhbGwgdGhlIGBzb3VyY2UvdGFyZ2V0YCBhbmQgYHBhcmVudC9lbWJlZGAgcmVmZXJlbmNlcyB3aXRoaW4gdGhlIGBjZWxsc2AuXG4vLyBUaGlzIGlzIHRoZSBtYWluIGRpZmZlcmVuY2UgZnJvbSB0aGUgYGNlbGwuY2xvbmUoKWAgbWV0aG9kLiBUaGVcbi8vIGBjZWxsLmNsb25lKClgIG1ldGhvZCB3b3JrcyBvbiBvbmUgc2luZ2xlIGNlbGwgb25seS5cbi8vIEZvciBleGFtcGxlLCBmb3IgYSBncmFwaDogYEEgLS0tIEwgLS0tPiBCYCwgYGNsb25lQ2VsbHMoW0EsIEwsIEJdKWBcbi8vIHJldHVybnMgYFtBMiwgTDIsIEIyXWAgcmVzdWx0aW5nIHRvIGEgZ3JhcGg6IGBBMiAtLS0gTDIgLS0tPiBCMmAsIGkuZS5cbi8vIHRoZSBzb3VyY2UgYW5kIHRhcmdldCBvZiB0aGUgbGluayBgTDJgIGlzIGNoYW5nZWQgdG8gcG9pbnQgdG8gYEEyYCBhbmQgYEIyYC5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUNlbGxzKGNlbGxzKSB7XG5cbiAgICBjZWxscyA9IHVuaXEoY2VsbHMpO1xuXG4gICAgLy8gQSBtYXAgb2YgdGhlIGZvcm0gW29yaWdpbmFsIGNlbGwgSURdIC0+IFtjbG9uZV0gaGVscGluZ1xuICAgIC8vIHVzIHRvIHJlY29uc3RydWN0IHJlZmVyZW5jZXMgZm9yIHNvdXJjZS90YXJnZXQgYW5kIHBhcmVudC9lbWJlZHMuXG4gICAgLy8gVGhpcyBpcyBhbHNvIHRoZSByZXR1cm5lZCB2YWx1ZS5cbiAgICBjb25zdCBjbG9uZU1hcCA9IHRvQXJyYXkoY2VsbHMpLnJlZHVjZShmdW5jdGlvbihtYXAsIGNlbGwpIHtcbiAgICAgICAgbWFwW2NlbGwuaWRdID0gY2VsbC5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH0sIHt9KTtcblxuICAgIHRvQXJyYXkoY2VsbHMpLmZvckVhY2goZnVuY3Rpb24oY2VsbCkge1xuXG4gICAgICAgIGNvbnN0IGNsb25lID0gY2xvbmVNYXBbY2VsbC5pZF07XG4gICAgICAgIC8vIGFzc2VydChjbG9uZSBleGlzdHMpXG5cbiAgICAgICAgaWYgKGNsb25lLmlzTGluaygpKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBjbG9uZS5zb3VyY2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGNsb25lLnRhcmdldCgpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5pZCAmJiBjbG9uZU1hcFtzb3VyY2UuaWRdKSB7XG4gICAgICAgICAgICAgICAgLy8gU291cmNlIHBvaW50cyB0byBhbiBlbGVtZW50IGFuZCB0aGUgZWxlbWVudCBpcyBhbW9uZyB0aGUgY2xvbmVzLlxuICAgICAgICAgICAgICAgIC8vID0+IFVwZGF0ZSB0aGUgc291cmNlIG9mIHRoZSBjbG9uZWQgbGluay5cbiAgICAgICAgICAgICAgICBjbG9uZS5wcm9wKCdzb3VyY2UvaWQnLCBjbG9uZU1hcFtzb3VyY2UuaWRdLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJnZXQuaWQgJiYgY2xvbmVNYXBbdGFyZ2V0LmlkXSkge1xuICAgICAgICAgICAgICAgIC8vIFRhcmdldCBwb2ludHMgdG8gYW4gZWxlbWVudCBhbmQgdGhlIGVsZW1lbnQgaXMgYW1vbmcgdGhlIGNsb25lcy5cbiAgICAgICAgICAgICAgICAvLyA9PiBVcGRhdGUgdGhlIHRhcmdldCBvZiB0aGUgY2xvbmVkIGxpbmsuXG4gICAgICAgICAgICAgICAgY2xvbmUucHJvcCgndGFyZ2V0L2lkJywgY2xvbmVNYXBbdGFyZ2V0LmlkXS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIHRoZSBwYXJlbnQgb2YgdGhlIG9yaWdpbmFsIGNlbGxcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY2VsbC5nZXQoJ3BhcmVudCcpO1xuICAgICAgICBpZiAocGFyZW50ICYmIGNsb25lTWFwW3BhcmVudF0pIHtcbiAgICAgICAgICAgIGNsb25lLnNldCgncGFyZW50JywgY2xvbmVNYXBbcGFyZW50XS5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIHRoZSBlbWJlZHMgb2YgdGhlIG9yaWdpbmFsIGNlbGxcbiAgICAgICAgY29uc3QgZW1iZWRzID0gdG9BcnJheShjZWxsLmdldCgnZW1iZWRzJykpLnJlZHVjZShmdW5jdGlvbihuZXdFbWJlZHMsIGVtYmVkKSB7XG4gICAgICAgICAgICAvLyBFbWJlZGRlZCBjZWxscyB0aGF0IGFyZSBub3QgYmVpbmcgY2xvbmVkIGNhbiBub3QgYmUgY2FycmllZFxuICAgICAgICAgICAgLy8gb3ZlciB3aXRoIG90aGVyIGVtYmVkZGVkIGNlbGxzLlxuICAgICAgICAgICAgaWYgKGNsb25lTWFwW2VtYmVkXSkge1xuICAgICAgICAgICAgICAgIG5ld0VtYmVkcy5wdXNoKGNsb25lTWFwW2VtYmVkXS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3RW1iZWRzO1xuICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgaWYgKCFpc0VtcHR5KGVtYmVkcykpIHtcbiAgICAgICAgICAgIGNsb25lLnNldCgnZW1iZWRzJywgZW1iZWRzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNsb25lTWFwO1xufVxuXG4iXSwibmFtZXMiOlsidW5pcSIsInRvQXJyYXkiLCJpc0VtcHR5IiwiY2xvbmVDZWxscyIsImNlbGxzIiwiY2xvbmVNYXAiLCJyZWR1Y2UiLCJtYXAiLCJjZWxsIiwiaWQiLCJjbG9uZSIsImZvckVhY2giLCJpc0xpbmsiLCJzb3VyY2UiLCJ0YXJnZXQiLCJwcm9wIiwicGFyZW50IiwiZ2V0Iiwic2V0IiwiZW1iZWRzIiwibmV3RW1iZWRzIiwiZW1iZWQiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/util/cloneCells.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/util/getRectPoint.mjs":
/*!********************************************************!*\
  !*** ./node_modules/jointjs/src/util/getRectPoint.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Positions: () => (/* binding */ Positions),\n/* harmony export */   getRectPoint: () => (/* binding */ getRectPoint)\n/* harmony export */ });\n/* harmony import */ var _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../g/index.mjs */ \"(ssr)/./node_modules/jointjs/src/g/rect.mjs\");\n\nconst Positions = {\n    TOP: \"top\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: \"left\",\n    TOP_LEFT: \"top-left\",\n    TOP_RIGHT: \"top-right\",\n    BOTTOM_LEFT: \"bottom-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    CENTER: \"center\"\n};\nfunction getRectPoint(rect, position) {\n    const r = new _g_index_mjs__WEBPACK_IMPORTED_MODULE_0__.Rect(rect);\n    switch(position){\n        case undefined:\n            throw new Error(\"Position required\");\n        // Middle Points\n        case Positions.LEFT:\n        case \"leftMiddle\":\n            return r.leftMiddle();\n        case Positions.RIGHT:\n        case \"rightMiddle\":\n            return r.rightMiddle();\n        case Positions.TOP:\n        case \"topMiddle\":\n            return r.topMiddle();\n        case Positions.BOTTOM:\n        case \"bottomMiddle\":\n            return r.bottomMiddle();\n        // Corners\n        case Positions.TOP_LEFT:\n        case \"topLeft\":\n        case \"origin\":\n            return r.topLeft();\n        case Positions.TOP_RIGHT:\n        case \"topRight\":\n            return r.topRight();\n        case Positions.BOTTOM_LEFT:\n        case \"bottomLeft\":\n            return r.bottomLeft();\n        case Positions.BOTTOM_RIGHT:\n        case \"bottomRight\":\n        case \"corner\":\n            return r.bottomRight();\n        // Center\n        case Positions.CENTER:\n            return r.center();\n        // TODO: calc(), percentage etc.\n        default:\n            throw new Error(`Unknown position: ${position}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvdXRpbC9nZXRSZWN0UG9pbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUU3QixNQUFNQyxZQUFZO0lBQ3JCQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsUUFBUTtBQUNaLEVBQUU7QUFFSyxTQUFTQyxhQUFhQyxJQUFJLEVBQUVDLFFBQVE7SUFDdkMsTUFBTUMsSUFBSSxJQUFJZCw4Q0FBTSxDQUFDWTtJQUNyQixPQUFRQztRQUNKLEtBQUtHO1lBQ0QsTUFBTSxJQUFJQyxNQUFNO1FBRXBCLGdCQUFnQjtRQUNoQixLQUFLaEIsVUFBVUksSUFBSTtRQUNuQixLQUFLO1lBQ0QsT0FBT1MsRUFBRUksVUFBVTtRQUV2QixLQUFLakIsVUFBVUUsS0FBSztRQUNwQixLQUFLO1lBQ0QsT0FBT1csRUFBRUssV0FBVztRQUV4QixLQUFLbEIsVUFBVUMsR0FBRztRQUNsQixLQUFLO1lBQ0QsT0FBT1ksRUFBRU0sU0FBUztRQUV0QixLQUFLbkIsVUFBVUcsTUFBTTtRQUNyQixLQUFLO1lBQ0QsT0FBT1UsRUFBRU8sWUFBWTtRQUV6QixVQUFVO1FBQ1YsS0FBS3BCLFVBQVVLLFFBQVE7UUFDdkIsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPUSxFQUFFUSxPQUFPO1FBRXBCLEtBQUtyQixVQUFVTSxTQUFTO1FBQ3hCLEtBQUs7WUFDRCxPQUFPTyxFQUFFUyxRQUFRO1FBRXJCLEtBQUt0QixVQUFVTyxXQUFXO1FBQzFCLEtBQUs7WUFDRCxPQUFPTSxFQUFFVSxVQUFVO1FBRXZCLEtBQUt2QixVQUFVUSxZQUFZO1FBQzNCLEtBQUs7UUFDTCxLQUFLO1lBQ0QsT0FBT0ssRUFBRVcsV0FBVztRQUV4QixTQUFTO1FBQ1QsS0FBS3hCLFVBQVVTLE1BQU07WUFDakIsT0FBT0ksRUFBRVksTUFBTTtRQUVuQixnQ0FBZ0M7UUFDaEM7WUFDSSxNQUFNLElBQUlULE1BQU0sQ0FBQyxrQkFBa0IsRUFBRUosU0FBUyxDQUFDO0lBQ3ZEO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9qb2ludGpzL3NyYy91dGlsL2dldFJlY3RQb2ludC5tanM/YjczNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBnIGZyb20gJy4uL2cvaW5kZXgubWpzJztcblxuZXhwb3J0IGNvbnN0IFBvc2l0aW9ucyA9IHtcbiAgICBUT1A6ICd0b3AnLFxuICAgIFJJR0hUOiAncmlnaHQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogJ2xlZnQnLFxuICAgIFRPUF9MRUZUOiAndG9wLWxlZnQnLFxuICAgIFRPUF9SSUdIVDogJ3RvcC1yaWdodCcsXG4gICAgQk9UVE9NX0xFRlQ6ICdib3R0b20tbGVmdCcsXG4gICAgQk9UVE9NX1JJR0hUOiAnYm90dG9tLXJpZ2h0JyxcbiAgICBDRU5URVI6ICdjZW50ZXInLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlY3RQb2ludChyZWN0LCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHIgPSBuZXcgZy5SZWN0KHJlY3QpO1xuICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bvc2l0aW9uIHJlcXVpcmVkJyk7XG5cbiAgICAgICAgLy8gTWlkZGxlIFBvaW50c1xuICAgICAgICBjYXNlIFBvc2l0aW9ucy5MRUZUOlxuICAgICAgICBjYXNlICdsZWZ0TWlkZGxlJzpcbiAgICAgICAgICAgIHJldHVybiByLmxlZnRNaWRkbGUoKTtcblxuICAgICAgICBjYXNlIFBvc2l0aW9ucy5SSUdIVDpcbiAgICAgICAgY2FzZSAncmlnaHRNaWRkbGUnOlxuICAgICAgICAgICAgcmV0dXJuIHIucmlnaHRNaWRkbGUoKTtcblxuICAgICAgICBjYXNlIFBvc2l0aW9ucy5UT1A6XG4gICAgICAgIGNhc2UgJ3RvcE1pZGRsZSc6XG4gICAgICAgICAgICByZXR1cm4gci50b3BNaWRkbGUoKTtcblxuICAgICAgICBjYXNlIFBvc2l0aW9ucy5CT1RUT006XG4gICAgICAgIGNhc2UgJ2JvdHRvbU1pZGRsZSc6XG4gICAgICAgICAgICByZXR1cm4gci5ib3R0b21NaWRkbGUoKTtcblxuICAgICAgICAvLyBDb3JuZXJzXG4gICAgICAgIGNhc2UgUG9zaXRpb25zLlRPUF9MRUZUOlxuICAgICAgICBjYXNlICd0b3BMZWZ0JzpcbiAgICAgICAgY2FzZSAnb3JpZ2luJzpcbiAgICAgICAgICAgIHJldHVybiByLnRvcExlZnQoKTtcblxuICAgICAgICBjYXNlIFBvc2l0aW9ucy5UT1BfUklHSFQ6XG4gICAgICAgIGNhc2UgJ3RvcFJpZ2h0JzpcbiAgICAgICAgICAgIHJldHVybiByLnRvcFJpZ2h0KCk7XG5cbiAgICAgICAgY2FzZSBQb3NpdGlvbnMuQk9UVE9NX0xFRlQ6XG4gICAgICAgIGNhc2UgJ2JvdHRvbUxlZnQnOlxuICAgICAgICAgICAgcmV0dXJuIHIuYm90dG9tTGVmdCgpO1xuXG4gICAgICAgIGNhc2UgUG9zaXRpb25zLkJPVFRPTV9SSUdIVDpcbiAgICAgICAgY2FzZSAnYm90dG9tUmlnaHQnOlxuICAgICAgICBjYXNlICdjb3JuZXInOlxuICAgICAgICAgICAgcmV0dXJuIHIuYm90dG9tUmlnaHQoKTtcblxuICAgICAgICAvLyBDZW50ZXJcbiAgICAgICAgY2FzZSBQb3NpdGlvbnMuQ0VOVEVSOlxuICAgICAgICAgICAgcmV0dXJuIHIuY2VudGVyKCk7XG5cbiAgICAgICAgLy8gVE9ETzogY2FsYygpLCBwZXJjZW50YWdlIGV0Yy5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwb3NpdGlvbjogJHtwb3NpdGlvbn1gKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiZyIsIlBvc2l0aW9ucyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwiQk9UVE9NX0xFRlQiLCJCT1RUT01fUklHSFQiLCJDRU5URVIiLCJnZXRSZWN0UG9pbnQiLCJyZWN0IiwicG9zaXRpb24iLCJyIiwiUmVjdCIsInVuZGVmaW5lZCIsIkVycm9yIiwibGVmdE1pZGRsZSIsInJpZ2h0TWlkZGxlIiwidG9wTWlkZGxlIiwiYm90dG9tTWlkZGxlIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwiY2VudGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/util/getRectPoint.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/util/util.mjs":
/*!************************************************!*\
  !*** ./node_modules/jointjs/src/util/util.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClassNamePrefix: () => (/* binding */ addClassNamePrefix),\n/* harmony export */   assign: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.assign),\n/* harmony export */   bindAll: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.bindAll),\n/* harmony export */   breakText: () => (/* binding */ breakText),\n/* harmony export */   camelCase: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.camelCase),\n/* harmony export */   cancelFrame: () => (/* binding */ cancelFrame),\n/* harmony export */   cap: () => (/* binding */ cap),\n/* harmony export */   clone: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.clone),\n/* harmony export */   cloneDeep: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.cloneDeep),\n/* harmony export */   dataUriToBlob: () => (/* binding */ dataUriToBlob),\n/* harmony export */   debounce: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.debounce),\n/* harmony export */   deepMixin: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.deepMixin),\n/* harmony export */   deepSupplement: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.deepSupplement),\n/* harmony export */   defaults: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.defaults),\n/* harmony export */   defaultsDeep: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.defaultsDeep),\n/* harmony export */   difference: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.difference),\n/* harmony export */   downloadBlob: () => (/* binding */ downloadBlob),\n/* harmony export */   downloadDataUri: () => (/* binding */ downloadDataUri),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   flattenDeep: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.flattenDeep),\n/* harmony export */   flattenObject: () => (/* binding */ flattenObject),\n/* harmony export */   forIn: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.forIn),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   getByPath: () => (/* binding */ getByPath),\n/* harmony export */   getElementBBox: () => (/* binding */ getElementBBox),\n/* harmony export */   groupBy: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.groupBy),\n/* harmony export */   guid: () => (/* binding */ guid),\n/* harmony export */   has: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.has),\n/* harmony export */   hashCode: () => (/* binding */ hashCode),\n/* harmony export */   imageToDataUri: () => (/* binding */ imageToDataUri),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   intersection: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.intersection),\n/* harmony export */   invoke: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.invoke),\n/* harmony export */   invokeProperty: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeProperty),\n/* harmony export */   isBoolean: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isBoolean),\n/* harmony export */   isEmpty: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isEmpty),\n/* harmony export */   isEqual: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isEqual),\n/* harmony export */   isFunction: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isFunction),\n/* harmony export */   isNumber: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isNumber),\n/* harmony export */   isObject: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isObject),\n/* harmony export */   isPercentage: () => (/* binding */ isPercentage),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isPlainObject),\n/* harmony export */   isString: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isString),\n/* harmony export */   merge: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.merge),\n/* harmony export */   mixin: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.mixin),\n/* harmony export */   nextFrame: () => (/* binding */ nextFrame),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   normalizeEvent: () => (/* binding */ normalizeEvent),\n/* harmony export */   normalizeSides: () => (/* binding */ normalizeSides),\n/* harmony export */   normalizeWheel: () => (/* binding */ normalizeWheel),\n/* harmony export */   omit: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.omit),\n/* harmony export */   parseCssNumeric: () => (/* binding */ parseCssNumeric),\n/* harmony export */   parseDOMJSON: () => (/* binding */ parseDOMJSON),\n/* harmony export */   pick: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.pick),\n/* harmony export */   removeClassNamePrefix: () => (/* binding */ removeClassNamePrefix),\n/* harmony export */   result: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.result),\n/* harmony export */   sanitizeHTML: () => (/* binding */ sanitizeHTML),\n/* harmony export */   setAttributesBySelector: () => (/* binding */ setAttributesBySelector),\n/* harmony export */   setByPath: () => (/* binding */ setByPath),\n/* harmony export */   shapePerimeterConnectionPoint: () => (/* binding */ shapePerimeterConnectionPoint),\n/* harmony export */   sortBy: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.sortBy),\n/* harmony export */   sortElements: () => (/* binding */ sortElements),\n/* harmony export */   sortedIndex: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.sortedIndex),\n/* harmony export */   supplement: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.supplement),\n/* harmony export */   template: () => (/* binding */ template),\n/* harmony export */   timing: () => (/* binding */ timing),\n/* harmony export */   toArray: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.toArray),\n/* harmony export */   toKebabCase: () => (/* binding */ toKebabCase),\n/* harmony export */   toggleFullScreen: () => (/* binding */ toggleFullScreen),\n/* harmony export */   union: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.union),\n/* harmony export */   uniq: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.uniq),\n/* harmony export */   uniqueId: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.uniqueId),\n/* harmony export */   unsetByPath: () => (/* binding */ unsetByPath),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   without: () => (/* reexport safe */ _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.without)\n/* harmony export */ });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../V/index.mjs */ \"(ssr)/./node_modules/jointjs/src/V/index.mjs\");\n/* harmony import */ var _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/index.mjs */ \"(ssr)/./node_modules/jointjs/src/config/index.mjs\");\n/* harmony import */ var _utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilHelpers.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\n\n\n\nconst addClassNamePrefix = function(className) {\n    if (!className) return className;\n    return className.toString().split(\" \").map(function(_className) {\n        if (_className.substr(0, _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.classNamePrefix.length) !== _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.classNamePrefix) {\n            _className = _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.classNamePrefix + _className;\n        }\n        return _className;\n    }).join(\" \");\n};\nconst removeClassNamePrefix = function(className) {\n    if (!className) return className;\n    return className.toString().split(\" \").map(function(_className) {\n        if (_className.substr(0, _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.classNamePrefix.length) === _config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.classNamePrefix) {\n            _className = _className.substr(_config_index_mjs__WEBPACK_IMPORTED_MODULE_1__.config.classNamePrefix.length);\n        }\n        return _className;\n    }).join(\" \");\n};\nconst parseDOMJSON = function(json, namespace) {\n    const selectors = {};\n    const groupSelectors = {};\n    const svgNamespace = _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].namespace.svg;\n    const ns = namespace || svgNamespace;\n    const fragment = document.createDocumentFragment();\n    const parseNode = function(siblingsDef, parentNode, ns) {\n        for(let i = 0; i < siblingsDef.length; i++){\n            const nodeDef = siblingsDef[i];\n            // Text node\n            if (typeof nodeDef === \"string\") {\n                const textNode = document.createTextNode(nodeDef);\n                parentNode.appendChild(textNode);\n                continue;\n            }\n            // TagName\n            if (!nodeDef.hasOwnProperty(\"tagName\")) throw new Error(\"json-dom-parser: missing tagName\");\n            const tagName = nodeDef.tagName;\n            let node;\n            // Namespace URI\n            if (nodeDef.hasOwnProperty(\"namespaceURI\")) ns = nodeDef.namespaceURI;\n            node = document.createElementNS(ns, tagName);\n            const svg = ns === svgNamespace;\n            const wrapper = svg ? _V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : jquery__WEBPACK_IMPORTED_MODULE_0__;\n            // Attributes\n            const attributes = nodeDef.attributes;\n            if (attributes) wrapper(node).attr(attributes);\n            // Style\n            const style = nodeDef.style;\n            if (style) jquery__WEBPACK_IMPORTED_MODULE_0__(node).css(style);\n            // ClassName\n            if (nodeDef.hasOwnProperty(\"className\")) {\n                const className = nodeDef.className;\n                if (svg) {\n                    node.className.baseVal = className;\n                } else {\n                    node.className = className;\n                }\n            }\n            // TextContent\n            if (nodeDef.hasOwnProperty(\"textContent\")) {\n                node.textContent = nodeDef.textContent;\n            }\n            // Selector\n            if (nodeDef.hasOwnProperty(\"selector\")) {\n                const nodeSelector = nodeDef.selector;\n                if (selectors[nodeSelector]) throw new Error(\"json-dom-parser: selector must be unique\");\n                selectors[nodeSelector] = node;\n                wrapper(node).attr(\"joint-selector\", nodeSelector);\n            }\n            // Groups\n            if (nodeDef.hasOwnProperty(\"groupSelector\")) {\n                let nodeGroups = nodeDef.groupSelector;\n                if (!Array.isArray(nodeGroups)) nodeGroups = [\n                    nodeGroups\n                ];\n                for(let j = 0; j < nodeGroups.length; j++){\n                    const nodeGroup = nodeGroups[j];\n                    let group = groupSelectors[nodeGroup];\n                    if (!group) group = groupSelectors[nodeGroup] = [];\n                    group.push(node);\n                }\n            }\n            parentNode.appendChild(node);\n            // Children\n            const childrenDef = nodeDef.children;\n            if (Array.isArray(childrenDef)) {\n                parseNode(childrenDef, node, ns);\n            }\n        }\n    };\n    parseNode(json, fragment, ns);\n    return {\n        fragment: fragment,\n        selectors: selectors,\n        groupSelectors: groupSelectors\n    };\n};\n// Return a simple hash code from a string. See http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/.\nconst hashCode = function(str) {\n    let hash = 0;\n    if (str.length === 0) return hash;\n    for(let i = 0; i < str.length; i++){\n        const c = str.charCodeAt(i);\n        hash = (hash << 5) - hash + c;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n};\nconst getByPath = function(obj, path, delimiter) {\n    var keys = Array.isArray(path) ? path : path.split(delimiter || \"/\");\n    var key;\n    var i = 0;\n    var length = keys.length;\n    while(i < length){\n        key = keys[i++];\n        if (Object(obj) === obj && key in obj) {\n            obj = obj[key];\n        } else {\n            return undefined;\n        }\n    }\n    return obj;\n};\nconst isGetSafe = function(obj, key) {\n    // Prevent prototype pollution\n    // https://snyk.io/vuln/SNYK-JS-JSON8MERGEPATCH-1038399\n    if (typeof key !== \"string\" && typeof key !== \"number\") {\n        key = String(key);\n    }\n    if (key === \"constructor\" && typeof obj[key] === \"function\") {\n        return false;\n    }\n    if (key === \"__proto__\") {\n        return false;\n    }\n    return true;\n};\nconst setByPath = function(obj, path, value, delimiter) {\n    const keys = Array.isArray(path) ? path : path.split(delimiter || \"/\");\n    const last = keys.length - 1;\n    let diver = obj;\n    let i = 0;\n    for(; i < last; i++){\n        const key = keys[i];\n        if (!isGetSafe(diver, key)) return obj;\n        const value = diver[key];\n        // diver creates an empty object if there is no nested object under such a key.\n        // This means that one can populate an empty nested object with setByPath().\n        diver = value || (diver[key] = {});\n    }\n    diver[keys[last]] = value;\n    return obj;\n};\nconst unsetByPath = function(obj, path, delimiter) {\n    const keys = Array.isArray(path) ? path : path.split(delimiter || \"/\");\n    const last = keys.length - 1;\n    let diver = obj;\n    let i = 0;\n    for(; i < last; i++){\n        const key = keys[i];\n        if (!isGetSafe(diver, key)) return obj;\n        const value = diver[key];\n        if (!value) return obj;\n        diver = value;\n    }\n    delete diver[keys[last]];\n    return obj;\n};\nconst flattenObject = function(obj, delim, stop) {\n    delim = delim || \"/\";\n    var ret = {};\n    for(var key in obj){\n        if (!obj.hasOwnProperty(key)) continue;\n        var shouldGoDeeper = typeof obj[key] === \"object\";\n        if (shouldGoDeeper && stop && stop(obj[key])) {\n            shouldGoDeeper = false;\n        }\n        if (shouldGoDeeper) {\n            var flatObject = flattenObject(obj[key], delim, stop);\n            for(var flatKey in flatObject){\n                if (!flatObject.hasOwnProperty(flatKey)) continue;\n                ret[key + delim + flatKey] = flatObject[flatKey];\n            }\n        } else {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n};\nconst uuid = function() {\n    // credit: http://stackoverflow.com/posts/2117523/revisions\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0;\n        var v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\n// Generates global unique id and stores it as a property of the object, if provided.\nconst guid = function(obj) {\n    guid.id = guid.id || 1;\n    if (obj === undefined) {\n        return \"j_\" + guid.id++;\n    }\n    obj.id = obj.id === undefined ? \"j_\" + guid.id++ : obj.id;\n    return obj.id;\n};\nconst toKebabCase = function(string) {\n    return string.replace(/[A-Z]/g, \"-$&\").toLowerCase();\n};\nconst normalizeEvent = function(evt) {\n    if (evt.normalized) return evt;\n    const { originalEvent, target } = evt;\n    // If the event is a touch event, normalize it to a mouse event.\n    const touch = originalEvent && originalEvent.changedTouches && originalEvent.changedTouches[0];\n    if (touch) {\n        for(let property in touch){\n            // copy all the properties from the first touch that are not\n            // defined on TouchEvent (clientX, clientY, pageX, pageY, screenX, screenY, identifier, ...)\n            if (evt[property] === undefined) {\n                evt[property] = touch[property];\n            }\n        }\n    }\n    // IE: evt.target could be set to SVGElementInstance for SVGUseElement\n    if (target) {\n        const useElement = target.correspondingUseElement;\n        if (useElement) evt.target = useElement;\n    }\n    evt.normalized = true;\n    return evt;\n};\nconst normalizeWheel = function(evt) {\n    // Sane values derived empirically\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0, sY = 0, pX = 0, pY = 0;\n    // Legacy\n    if (\"detail\" in evt) {\n        sY = evt.detail;\n    }\n    if (\"wheelDelta\" in evt) {\n        sY = -evt.wheelDelta / 120;\n    }\n    if (\"wheelDeltaY\" in evt) {\n        sY = -evt.wheelDeltaY / 120;\n    }\n    if (\"wheelDeltaX\" in evt) {\n        sX = -evt.wheelDeltaX / 120;\n    }\n    // side scrolling on FF with DOMMouseScroll\n    if (\"axis\" in evt && evt.axis === evt.HORIZONTAL_AXIS) {\n        sX = sY;\n        sY = 0;\n    }\n    pX = \"deltaX\" in evt ? evt.deltaX : sX * PIXEL_STEP;\n    pY = \"deltaY\" in evt ? evt.deltaY : sY * PIXEL_STEP;\n    if ((pX || pY) && evt.deltaMode) {\n        if (evt.deltaMode == 1) {\n            pX *= LINE_HEIGHT;\n            pY *= LINE_HEIGHT;\n        } else {\n            pX *= PAGE_HEIGHT;\n            pY *= PAGE_HEIGHT;\n        }\n    }\n    // macOS switches deltaX and deltaY automatically when scrolling with shift key, so this is needed in other cases\n    if (evt.deltaX === 0 && evt.deltaY !== 0 && evt.shiftKey) {\n        pX = pY;\n        pY = 0;\n        sX = sY;\n        sY = 0;\n    }\n    // Fall-back if spin cannot be determined\n    if (pX && !sX) {\n        sX = pX < 1 ? -1 : 1;\n    }\n    if (pY && !sY) {\n        sY = pY < 1 ? -1 : 1;\n    }\n    return {\n        spinX: sX,\n        spinY: sY,\n        deltaX: pX,\n        deltaY: pY\n    };\n};\nconst cap = function(val, max) {\n    return val > max ? max : val < -max ? -max : val;\n};\nconst nextFrame = function() {\n    var raf;\n    if (false) {}\n    if (!raf) {\n        var lastTime = 0;\n        raf = function(callback) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n    return function(callback, context, ...rest) {\n        return context !== undefined ? raf(callback.bind(context, ...rest)) : raf(callback);\n    };\n}();\nconst cancelFrame = function() {\n    var caf;\n    var client = \"undefined\" != \"undefined\";\n    if (client) {\n        caf = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame || window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame || window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame;\n    }\n    caf = caf || clearTimeout;\n    return client ? caf.bind(window) : caf;\n}();\n/**\n * @deprecated\n */ const shapePerimeterConnectionPoint = function(linkView, view, magnet, reference) {\n    var bbox;\n    var spot;\n    if (!magnet) {\n        // There is no magnet, try to make the best guess what is the\n        // wrapping SVG element. This is because we want this \"smart\"\n        // connection points to work out of the box without the\n        // programmer to put magnet marks to any of the subelements.\n        // For example, we want the function to work on basic.Path elements\n        // without any special treatment of such elements.\n        // The code below guesses the wrapping element based on\n        // one simple assumption. The wrapping elemnet is the\n        // first child of the scalable group if such a group exists\n        // or the first child of the rotatable group if not.\n        // This makese sense because usually the wrapping element\n        // is below any other sub element in the shapes.\n        var scalable = view.$(\".scalable\")[0];\n        var rotatable = view.$(\".rotatable\")[0];\n        if (scalable && scalable.firstChild) {\n            magnet = scalable.firstChild;\n        } else if (rotatable && rotatable.firstChild) {\n            magnet = rotatable.firstChild;\n        }\n    }\n    if (magnet) {\n        spot = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(magnet).findIntersection(reference, linkView.paper.cells);\n        if (!spot) {\n            bbox = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(magnet).getBBox({\n                target: linkView.paper.cells\n            });\n        }\n    } else {\n        bbox = view.model.getBBox();\n        spot = bbox.intersectionWithLineFromCenterToPoint(reference);\n    }\n    return spot || bbox.center();\n};\nconst isPercentage = function(val) {\n    return (0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isString)(val) && val.slice(-1) === \"%\";\n};\nconst parseCssNumeric = function(val, restrictUnits) {\n    function getUnit(validUnitExp) {\n        // one or more numbers, followed by\n        // any number of (\n        //  `.`, followed by\n        //  one or more numbers\n        // ), followed by\n        // `validUnitExp`, followed by\n        // end of string\n        var matches = new RegExp(\"(?:\\\\d+(?:\\\\.\\\\d+)*)(\" + validUnitExp + \")$\").exec(val);\n        if (!matches) return null;\n        return matches[1];\n    }\n    var number = parseFloat(val);\n    // if `val` cannot be parsed as a number, return `null`\n    if (Number.isNaN(number)) return null;\n    // else: we know `output.value`\n    var output = {};\n    output.value = number;\n    // determine the unit\n    var validUnitExp;\n    if (restrictUnits == null) {\n        // no restriction\n        // accept any unit, as well as no unit\n        validUnitExp = \"[A-Za-z]*\";\n    } else if (Array.isArray(restrictUnits)) {\n        // if this is an empty array, top restriction - return `null`\n        if (restrictUnits.length === 0) return null;\n        // else: restriction - an array of valid unit strings\n        validUnitExp = restrictUnits.join(\"|\");\n    } else if ((0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isString)(restrictUnits)) {\n        // restriction - a single valid unit string\n        validUnitExp = restrictUnits;\n    }\n    var unit = getUnit(validUnitExp);\n    // if we found no matches for `restrictUnits`, return `null`\n    if (unit === null) return null;\n    // else: we know the unit\n    output.unit = unit;\n    return output;\n};\nconst NO_SPACE = 0;\nfunction splitWordWithEOL(word, eol) {\n    const eolWords = word.split(eol);\n    let n = 1;\n    for(let j = 0, jl = eolWords.length - 1; j < jl; j++){\n        const replacement = [];\n        if (j > 0 || eolWords[0] !== \"\") replacement.push(NO_SPACE);\n        replacement.push(eol);\n        if (j < jl - 1 || eolWords[jl] !== \"\") replacement.push(NO_SPACE);\n        eolWords.splice(n, 0, ...replacement);\n        n += replacement.length + 1;\n    }\n    return eolWords.filter((word)=>word !== \"\");\n}\nfunction getLineHeight(heightValue, textElement) {\n    if (heightValue === null) {\n        // Default 1em lineHeight\n        return textElement.getBBox().height;\n    }\n    switch(heightValue.unit){\n        case \"em\":\n            return textElement.getBBox().height * heightValue.value;\n        case \"px\":\n        case \"\":\n            return heightValue.value;\n    }\n}\nconst breakText = function(text, size, styles = {}, opt = {}) {\n    var width = size.width;\n    var height = size.height;\n    var svgDocument = opt.svgDocument || (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"svg\").node;\n    var textSpan = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"tspan\").node;\n    var textElement = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"text\").attr(styles).append(textSpan).node;\n    var textNode = document.createTextNode(\"\");\n    // Prevent flickering\n    textElement.style.opacity = 0;\n    // Prevent FF from throwing an uncaught exception when `getBBox()`\n    // called on element that is not in the render tree (is not measurable).\n    // <tspan>.getComputedTextLength() returns always 0 in this case.\n    // Note that the `textElement` resp. `textSpan` can become hidden\n    // when it's appended to the DOM and a `display: none` CSS stylesheet\n    // rule gets applied.\n    textElement.style.display = \"block\";\n    textSpan.style.display = \"block\";\n    textSpan.appendChild(textNode);\n    svgDocument.appendChild(textElement); // lgtm [js/xss-through-dom]\n    if (!opt.svgDocument) {\n        document.body.appendChild(svgDocument);\n    }\n    const preserveSpaces = opt.preserveSpaces;\n    const space = \" \";\n    const separator = opt.separator || opt.separator === \"\" ? opt.separator : space;\n    // If separator is a RegExp, we use the space character to join words together again (not ideal)\n    const separatorChar = typeof separator === \"string\" ? separator : space;\n    var eol = opt.eol || \"\\n\";\n    var hyphen = opt.hyphen ? new RegExp(opt.hyphen) : /[^\\w\\d\\u00C0-\\u1FFF\\u2800-\\uFFFD]/;\n    var maxLineCount = opt.maxLineCount;\n    if (!(0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isNumber)(maxLineCount)) maxLineCount = Infinity;\n    var words = text.split(separator);\n    var full = [];\n    var lines = [];\n    var p, h;\n    var lineHeight;\n    if (preserveSpaces) {\n        (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(textSpan).attr(\"xml:space\", \"preserve\");\n    }\n    for(var i = 0, l = 0, len = words.length; i < len; i++){\n        var word = words[i];\n        if (!word && !preserveSpaces) continue;\n        if (typeof word !== \"string\") continue;\n        var isEol = false;\n        if (eol && word.indexOf(eol) >= 0) {\n            // word contains end-of-line character\n            if (word.length > 1) {\n                // separate word and continue cycle\n                const eolWords = splitWordWithEOL(words[i], eol);\n                words.splice(i, 1, ...eolWords);\n                i--;\n                len = words.length;\n                continue;\n            } else {\n                // creates a new line\n                if (preserveSpaces && typeof words[i - 1] === \"string\") {\n                    words.splice(i, NO_SPACE, \"\", NO_SPACE);\n                    len += 2;\n                    i--;\n                    continue;\n                }\n                lines[++l] = !preserveSpaces || typeof words[i + 1] === \"string\" ? \"\" : undefined;\n                isEol = true;\n            }\n        }\n        if (!isEol) {\n            let data;\n            if (preserveSpaces) {\n                data = lines[l] !== undefined ? lines[l] + separatorChar + word : word;\n            } else {\n                data = lines[l] ? lines[l] + separatorChar + word : word;\n            }\n            textNode.data = data;\n            if (textSpan.getComputedTextLength() <= width) {\n                // the current line fits\n                lines[l] = data;\n                if (p || h) {\n                    // We were partitioning. Put rest of the word onto next line\n                    full[l++] = true;\n                    // cancel partitioning and splitting by hyphens\n                    p = 0;\n                    h = 0;\n                }\n            } else {\n                if (!lines[l] || p) {\n                    var partition = !!p;\n                    p = word.length - 1;\n                    if (partition || !p) {\n                        // word has only one character.\n                        if (!p) {\n                            if (!lines[l]) {\n                                // we won't fit this text within our rect\n                                lines = [];\n                                break;\n                            }\n                            // partitioning didn't help on the non-empty line\n                            // try again, but this time start with a new line\n                            // cancel partitions created\n                            words.splice(i, 2, word + words[i + 1]);\n                            // adjust word length\n                            len--;\n                            full[l++] = true;\n                            i--;\n                            continue;\n                        }\n                        // move last letter to the beginning of the next word\n                        words[i] = word.substring(0, p);\n                        const nextWord = words[i + 1];\n                        words[i + 1] = word.substring(p) + (nextWord === undefined || nextWord === NO_SPACE ? \"\" : nextWord);\n                    } else {\n                        if (h) {\n                            // cancel splitting and put the words together again\n                            words.splice(i, 2, words[i] + words[i + 1]);\n                            h = 0;\n                        } else {\n                            var hyphenIndex = word.search(hyphen);\n                            if (hyphenIndex > -1 && hyphenIndex !== word.length - 1 && hyphenIndex !== 0) {\n                                h = hyphenIndex + 1;\n                                p = 0;\n                            }\n                            // We initiate partitioning or splitting\n                            // split the long word into two words\n                            words.splice(i, 1, word.substring(0, h || p), word.substring(h || p));\n                            // adjust words length\n                            len++;\n                        }\n                        if (l && !full[l - 1]) {\n                            // if the previous line is not full, try to fit max part of\n                            // the current word there\n                            l--;\n                        }\n                    }\n                    if (!preserveSpaces || lines[l] !== \"\") {\n                        i--;\n                    }\n                    continue;\n                }\n                l++;\n                i--;\n            }\n        }\n        var lastL = null;\n        if (lines.length > maxLineCount) {\n            lastL = maxLineCount - 1;\n        } else if (height !== undefined) {\n            // if size.height is defined we have to check whether the height of the entire\n            // text exceeds the rect height\n            if (lineHeight === undefined && textNode.data !== \"\") {\n                // use the same defaults as in V.prototype.text\n                if (styles.lineHeight === \"auto\") {\n                    lineHeight = getLineHeight({\n                        value: 1.5,\n                        unit: \"em\"\n                    }, textElement);\n                } else {\n                    const parsed = parseCssNumeric(styles.lineHeight, [\n                        \"em\",\n                        \"px\",\n                        \"\"\n                    ]);\n                    lineHeight = getLineHeight(parsed, textElement);\n                }\n            }\n            if (lineHeight * lines.length > height) {\n                // remove overflowing lines\n                lastL = Math.floor(height / lineHeight) - 1;\n            }\n        }\n        if (lastL !== null) {\n            lines.splice(lastL + 1);\n            // add ellipsis\n            var ellipsis = opt.ellipsis;\n            if (!ellipsis || lastL < 0) break;\n            if (typeof ellipsis !== \"string\") ellipsis = \"…\";\n            var lastLine = lines[lastL];\n            if (!lastLine && !isEol) break;\n            var k = lastLine.length;\n            var lastLineWithOmission, lastChar;\n            do {\n                lastChar = lastLine[k];\n                lastLineWithOmission = lastLine.substring(0, k);\n                if (!lastChar) {\n                    lastLineWithOmission += separatorChar;\n                } else if (lastChar.match(separator)) {\n                    lastLineWithOmission += lastChar;\n                }\n                lastLineWithOmission += ellipsis;\n                textNode.data = lastLineWithOmission;\n                if (textSpan.getComputedTextLength() <= width) {\n                    lines[lastL] = lastLineWithOmission;\n                    break;\n                }\n                k--;\n            }while (k >= 0);\n            break;\n        }\n    }\n    if (opt.svgDocument) {\n        // svg document was provided, remove the text element only\n        svgDocument.removeChild(textElement);\n    } else {\n        // clean svg document\n        document.body.removeChild(svgDocument);\n    }\n    return lines.join(eol);\n};\n// Sanitize HTML\n// Based on https://gist.github.com/ufologist/5a0da51b2b9ef1b861c30254172ac3c9\n// Parses a string into an array of DOM nodes.\n// Then outputs it back as a string.\nconst sanitizeHTML = function(html) {\n    // Ignores tags that are invalid inside a <div> tag (e.g. <body>, <head>)\n    // If documentContext (second parameter) is not specified or given as `null` or `undefined`, a new document is used.\n    // Inline events will not execute when the HTML is parsed; this includes, for example, sending GET requests for images.\n    // If keepScripts (last parameter) is `false`, scripts are not executed.\n    var output = jquery__WEBPACK_IMPORTED_MODULE_0__(jquery__WEBPACK_IMPORTED_MODULE_0__.parseHTML(\"<div>\" + html + \"</div>\", null, false));\n    output.find(\"*\").each(function() {\n        var currentNode = this;\n        jquery__WEBPACK_IMPORTED_MODULE_0__.each(currentNode.attributes, function() {\n            var currentAttribute = this;\n            var attrName = currentAttribute.name;\n            var attrValue = currentAttribute.value;\n            // Remove attribute names that start with \"on\" (e.g. onload, onerror...).\n            // Remove attribute values that start with \"javascript:\" pseudo protocol (e.g. `href=\"javascript:alert(1)\"`).\n            if (attrName.startsWith(\"on\") || attrValue.startsWith(\"javascript:\") || attrValue.startsWith(\"data:\") || attrValue.startsWith(\"vbscript:\")) {\n                jquery__WEBPACK_IMPORTED_MODULE_0__(currentNode).removeAttr(attrName);\n            }\n        });\n    });\n    return output.html();\n};\n// Download `blob` as file with `fileName`.\n// Does not work in IE9.\nconst downloadBlob = function(blob, fileName) {\n    if (window.navigator.msSaveBlob) {\n        // pulls up a save dialog\n        window.navigator.msSaveBlob(blob, fileName);\n    } else {\n        // downloads directly in Chrome and Safari\n        // presents a save/open dialog in Firefox\n        // Firefox bug: `from` field in save dialog always shows `from:blob:`\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1053327\n        var url = window.URL.createObjectURL(blob);\n        var link = document.createElement(\"a\");\n        link.href = url;\n        link.download = fileName;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url); // mark the url for garbage collection\n    }\n};\n// Download `dataUri` as file with `fileName`.\n// Does not work in IE9.\nconst downloadDataUri = function(dataUri, fileName) {\n    const blob = dataUriToBlob(dataUri);\n    downloadBlob(blob, fileName);\n};\n// Convert an uri-encoded data component (possibly also base64-encoded) to a blob.\nconst dataUriToBlob = function(dataUri) {\n    // first, make sure there are no newlines in the data uri\n    dataUri = dataUri.replace(/\\s/g, \"\");\n    dataUri = decodeURIComponent(dataUri);\n    var firstCommaIndex = dataUri.indexOf(\",\"); // split dataUri as `dataTypeString`,`data`\n    var dataTypeString = dataUri.slice(0, firstCommaIndex); // e.g. 'data:image/jpeg;base64'\n    var mimeString = dataTypeString.split(\":\")[1].split(\";\")[0]; // e.g. 'image/jpeg'\n    var data = dataUri.slice(firstCommaIndex + 1);\n    var decodedString;\n    if (dataTypeString.indexOf(\"base64\") >= 0) {\n        decodedString = atob(data); // decode data\n    } else {\n        // convert the decoded string to UTF-8\n        decodedString = unescape(encodeURIComponent(data));\n    }\n    // write the bytes of the string to a typed array\n    var ia = new Uint8Array(decodedString.length);\n    for(var i = 0; i < decodedString.length; i++){\n        ia[i] = decodedString.charCodeAt(i);\n    }\n    return new Blob([\n        ia\n    ], {\n        type: mimeString\n    }); // return the typed array as Blob\n};\n// Read an image at `url` and return it as base64-encoded data uri.\n// The mime type of the image is inferred from the `url` file extension.\n// If data uri is provided as `url`, it is returned back unchanged.\n// `callback` is a method with `err` as first argument and `dataUri` as second argument.\n// Works with IE9.\nconst imageToDataUri = function(url, callback) {\n    if (!url || url.substr(0, \"data:\".length) === \"data:\") {\n        // No need to convert to data uri if it is already in data uri.\n        // This not only convenient but desired. For example,\n        // IE throws a security error if data:image/svg+xml is used to render\n        // an image to the canvas and an attempt is made to read out data uri.\n        // Now if our image is already in data uri, there is no need to render it to the canvas\n        // and so we can bypass this error.\n        // Keep the async nature of the function.\n        return setTimeout(function() {\n            callback(null, url);\n        }, 0);\n    }\n    // chrome, IE10+\n    var modernHandler = function(xhr, callback) {\n        if (xhr.status === 200) {\n            var reader = new FileReader();\n            reader.onload = function(evt) {\n                var dataUri = evt.target.result;\n                callback(null, dataUri);\n            };\n            reader.onerror = function() {\n                callback(new Error(\"Failed to load image \" + url));\n            };\n            reader.readAsDataURL(xhr.response);\n        } else {\n            callback(new Error(\"Failed to load image \" + url));\n        }\n    };\n    var legacyHandler = function(xhr, callback) {\n        var Uint8ToString = function(u8a) {\n            var CHUNK_SZ = 0x8000;\n            var c = [];\n            for(var i = 0; i < u8a.length; i += CHUNK_SZ){\n                c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));\n            }\n            return c.join(\"\");\n        };\n        if (xhr.status === 200) {\n            var bytes = new Uint8Array(xhr.response);\n            var suffix = url.split(\".\").pop() || \"png\";\n            var map = {\n                \"svg\": \"svg+xml\"\n            };\n            var meta = \"data:image/\" + (map[suffix] || suffix) + \";base64,\";\n            var b64encoded = meta + btoa(Uint8ToString(bytes));\n            callback(null, b64encoded);\n        } else {\n            callback(new Error(\"Failed to load image \" + url));\n        }\n    };\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.addEventListener(\"error\", function() {\n        callback(new Error(\"Failed to load image \" + url));\n    });\n    xhr.responseType = window.FileReader ? \"blob\" : \"arraybuffer\";\n    xhr.addEventListener(\"load\", function() {\n        if (window.FileReader) {\n            modernHandler(xhr, callback);\n        } else {\n            legacyHandler(xhr, callback);\n        }\n    });\n    xhr.send();\n};\nconst getElementBBox = function(el) {\n    var $el = jquery__WEBPACK_IMPORTED_MODULE_0__(el);\n    if ($el.length === 0) {\n        throw new Error(\"Element not found\");\n    }\n    var element = $el[0];\n    var doc = element.ownerDocument;\n    var clientBBox = element.getBoundingClientRect();\n    var strokeWidthX = 0;\n    var strokeWidthY = 0;\n    // Firefox correction\n    if (element.ownerSVGElement) {\n        var vel = (0,_V_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element);\n        var bbox = vel.getBBox({\n            target: vel.svg()\n        });\n        // if FF getBoundingClientRect includes stroke-width, getBBox doesn't.\n        // To unify this across all browsers we need to adjust the final bBox with `stroke-width` value.\n        strokeWidthX = clientBBox.width - bbox.width;\n        strokeWidthY = clientBBox.height - bbox.height;\n    }\n    return {\n        x: clientBBox.left + window.pageXOffset - doc.documentElement.offsetLeft + strokeWidthX / 2,\n        y: clientBBox.top + window.pageYOffset - doc.documentElement.offsetTop + strokeWidthY / 2,\n        width: clientBBox.width - strokeWidthX,\n        height: clientBBox.height - strokeWidthY\n    };\n};\n// Highly inspired by the jquery.sortElements plugin by Padolsey.\n// See http://james.padolsey.com/javascript/sorting-elements-with-jquery/.\nconst sortElements = function(elements, comparator) {\n    var $elements = jquery__WEBPACK_IMPORTED_MODULE_0__(elements);\n    var placements = $elements.map(function() {\n        var sortElement = this;\n        var parentNode = sortElement.parentNode;\n        // Since the element itself will change position, we have\n        // to have some way of storing it's original position in\n        // the DOM. The easiest way is to have a 'flag' node:\n        var nextSibling = parentNode.insertBefore(document.createTextNode(\"\"), sortElement.nextSibling);\n        return function() {\n            if (parentNode === this) {\n                throw new Error(\"You can't sort elements if any one is a descendant of another.\");\n            }\n            // Insert before flag:\n            parentNode.insertBefore(this, nextSibling);\n            // Remove flag:\n            parentNode.removeChild(nextSibling);\n        };\n    });\n    return Array.prototype.sort.call($elements, comparator).each(function(i) {\n        placements[i].call(this);\n    });\n};\n// Sets attributes on the given element and its descendants based on the selector.\n// `attrs` object: { [SELECTOR1]: { attrs1 }, [SELECTOR2]: { attrs2}, ... } e.g. { 'input': { color : 'red' }}\nconst setAttributesBySelector = function(element, attrs) {\n    var $element = jquery__WEBPACK_IMPORTED_MODULE_0__(element);\n    (0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.forIn)(attrs, function(attrs, selector) {\n        var $elements = $element.find(selector).addBack().filter(selector);\n        // Make a special case for setting classes.\n        // We do not want to overwrite any existing class.\n        if ((0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.has)(attrs, \"class\")) {\n            $elements.addClass(attrs[\"class\"]);\n            attrs = (0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.omit)(attrs, \"class\");\n        }\n        $elements.attr(attrs);\n    });\n};\n// Return a new object with all four sides (top, right, bottom, left) in it.\n// Value of each side is taken from the given argument (either number or object).\n// Default value for a side is 0.\n// Examples:\n// normalizeSides(5) --> { top: 5, right: 5, bottom: 5, left: 5 }\n// normalizeSides({ horizontal: 5 }) --> { top: 0, right: 5, bottom: 0, left: 5 }\n// normalizeSides({ left: 5 }) --> { top: 0, right: 0, bottom: 0, left: 5 }\n// normalizeSides({ horizontal: 10, left: 5 }) --> { top: 0, right: 10, bottom: 0, left: 5 }\n// normalizeSides({ horizontal: 0, left: 5 }) --> { top: 0, right: 0, bottom: 0, left: 5 }\nconst normalizeSides = function(box) {\n    if (Object(box) !== box) {\n        var val = 0; // `val` left as 0 if `box` cannot be understood as finite number\n        if (isFinite(box)) val = +box; // actually also accepts string numbers (e.g. '100')\n        return {\n            top: val,\n            right: val,\n            bottom: val,\n            left: val\n        };\n    }\n    // `box` is an object\n    var top, right, bottom, left;\n    top = right = bottom = left = 0;\n    if (isFinite(box.vertical)) top = bottom = +box.vertical;\n    if (isFinite(box.horizontal)) right = left = +box.horizontal;\n    if (isFinite(box.top)) top = +box.top; // overwrite vertical\n    if (isFinite(box.right)) right = +box.right; // overwrite horizontal\n    if (isFinite(box.bottom)) bottom = +box.bottom; // overwrite vertical\n    if (isFinite(box.left)) left = +box.left; // overwrite horizontal\n    return {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left\n    };\n};\nconst timing = {\n    linear: function(t) {\n        return t;\n    },\n    quad: function(t) {\n        return t * t;\n    },\n    cubic: function(t) {\n        return t * t * t;\n    },\n    inout: function(t) {\n        if (t <= 0) return 0;\n        if (t >= 1) return 1;\n        var t2 = t * t;\n        var t3 = t2 * t;\n        return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n    },\n    exponential: function(t) {\n        return Math.pow(2, 10 * (t - 1));\n    },\n    bounce: function(t) {\n        for(var a = 0, b = 1; 1; a += b, b /= 2){\n            if (t >= (7 - 4 * a) / 11) {\n                var q = (11 - 6 * a - 11 * t) / 4;\n                return -q * q + b * b;\n            }\n        }\n    },\n    reverse: function(f) {\n        return function(t) {\n            return 1 - f(1 - t);\n        };\n    },\n    reflect: function(f) {\n        return function(t) {\n            return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n        };\n    },\n    clamp: function(f, n, x) {\n        n = n || 0;\n        x = x || 1;\n        return function(t) {\n            var r = f(t);\n            return r < n ? n : r > x ? x : r;\n        };\n    },\n    back: function(s) {\n        if (!s) s = 1.70158;\n        return function(t) {\n            return t * t * ((s + 1) * t - s);\n        };\n    },\n    elastic: function(x) {\n        if (!x) x = 1.5;\n        return function(t) {\n            return Math.pow(2, 10 * (t - 1)) * Math.cos(20 * Math.PI * x / 3 * t);\n        };\n    }\n};\nconst interpolate = {\n    number: function(a, b) {\n        var d = b - a;\n        return function(t) {\n            return a + d * t;\n        };\n    },\n    object: function(a, b) {\n        var s = Object.keys(a);\n        return function(t) {\n            var i, p;\n            var r = {};\n            for(i = s.length - 1; i != -1; i--){\n                p = s[i];\n                r[p] = a[p] + (b[p] - a[p]) * t;\n            }\n            return r;\n        };\n    },\n    hexColor: function(a, b) {\n        var ca = parseInt(a.slice(1), 16);\n        var cb = parseInt(b.slice(1), 16);\n        var ra = ca & 0x0000ff;\n        var rd = (cb & 0x0000ff) - ra;\n        var ga = ca & 0x00ff00;\n        var gd = (cb & 0x00ff00) - ga;\n        var ba = ca & 0xff0000;\n        var bd = (cb & 0xff0000) - ba;\n        return function(t) {\n            var r = ra + rd * t & 0x000000ff;\n            var g = ga + gd * t & 0x0000ff00;\n            var b = ba + bd * t & 0x00ff0000;\n            return \"#\" + (1 << 24 | r | g | b).toString(16).slice(1);\n        };\n    },\n    unit: function(a, b) {\n        var r = /(-?[0-9]*.[0-9]*)(px|em|cm|mm|in|pt|pc|%)/;\n        var ma = r.exec(a);\n        var mb = r.exec(b);\n        var p = mb[1].indexOf(\".\");\n        var f = p > 0 ? mb[1].length - p - 1 : 0;\n        a = +ma[1];\n        var d = +mb[1] - a;\n        var u = ma[2];\n        return function(t) {\n            return (a + d * t).toFixed(f) + u;\n        };\n    }\n};\n// SVG filters.\n// (values in parentheses are default values)\nconst filter = {\n    // `color` ... outline color ('blue')\n    // `width`... outline width (1)\n    // `opacity` ... outline opacity (1)\n    // `margin` ... gap between outline and the element (2)\n    outline: function(args) {\n        var tpl = '<filter><feFlood flood-color=\"${color}\" flood-opacity=\"${opacity}\" result=\"colored\"/><feMorphology in=\"SourceAlpha\" result=\"morphedOuter\" operator=\"dilate\" radius=\"${outerRadius}\" /><feMorphology in=\"SourceAlpha\" result=\"morphedInner\" operator=\"dilate\" radius=\"${innerRadius}\" /><feComposite result=\"morphedOuterColored\" in=\"colored\" in2=\"morphedOuter\" operator=\"in\"/><feComposite operator=\"xor\" in=\"morphedOuterColored\" in2=\"morphedInner\" result=\"outline\"/><feMerge><feMergeNode in=\"outline\"/><feMergeNode in=\"SourceGraphic\"/></feMerge></filter>';\n        var margin = Number.isFinite(args.margin) ? args.margin : 2;\n        var width = Number.isFinite(args.width) ? args.width : 1;\n        return template(tpl)({\n            color: args.color || \"blue\",\n            opacity: Number.isFinite(args.opacity) ? args.opacity : 1,\n            outerRadius: margin + width,\n            innerRadius: margin\n        });\n    },\n    // `color` ... color ('red')\n    // `width`... width (1)\n    // `blur` ... blur (0)\n    // `opacity` ... opacity (1)\n    highlight: function(args) {\n        var tpl = '<filter><feFlood flood-color=\"${color}\" flood-opacity=\"${opacity}\" result=\"colored\"/><feMorphology result=\"morphed\" in=\"SourceGraphic\" operator=\"dilate\" radius=\"${width}\"/><feComposite result=\"composed\" in=\"colored\" in2=\"morphed\" operator=\"in\"/><feGaussianBlur result=\"blured\" in=\"composed\" stdDeviation=\"${blur}\"/><feBlend in=\"SourceGraphic\" in2=\"blured\" mode=\"normal\"/></filter>';\n        return template(tpl)({\n            color: args.color || \"red\",\n            width: Number.isFinite(args.width) ? args.width : 1,\n            blur: Number.isFinite(args.blur) ? args.blur : 0,\n            opacity: Number.isFinite(args.opacity) ? args.opacity : 1\n        });\n    },\n    // `x` ... horizontal blur (2)\n    // `y` ... vertical blur (optional)\n    blur: function(args) {\n        var x = Number.isFinite(args.x) ? args.x : 2;\n        return template('<filter><feGaussianBlur stdDeviation=\"${stdDeviation}\"/></filter>')({\n            stdDeviation: Number.isFinite(args.y) ? [\n                x,\n                args.y\n            ] : x\n        });\n    },\n    // `dx` ... horizontal shift (0)\n    // `dy` ... vertical shift (0)\n    // `blur` ... blur (4)\n    // `color` ... color ('black')\n    // `opacity` ... opacity (1)\n    dropShadow: function(args) {\n        var tpl = \"SVGFEDropShadowElement\" in window ? '<filter><feDropShadow stdDeviation=\"${blur}\" dx=\"${dx}\" dy=\"${dy}\" flood-color=\"${color}\" flood-opacity=\"${opacity}\"/></filter>' : '<filter><feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${blur}\"/><feOffset dx=\"${dx}\" dy=\"${dy}\" result=\"offsetblur\"/><feFlood flood-color=\"${color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"${opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge></filter>';\n        return template(tpl)({\n            dx: args.dx || 0,\n            dy: args.dy || 0,\n            opacity: Number.isFinite(args.opacity) ? args.opacity : 1,\n            color: args.color || \"black\",\n            blur: Number.isFinite(args.blur) ? args.blur : 4\n        });\n    },\n    // `amount` ... the proportion of the conversion (1). A value of 1 (default) is completely grayscale. A value of 0 leaves the input unchanged.\n    grayscale: function(args) {\n        var amount = Number.isFinite(args.amount) ? args.amount : 1;\n        return template('<filter><feColorMatrix type=\"matrix\" values=\"${a} ${b} ${c} 0 0 ${d} ${e} ${f} 0 0 ${g} ${b} ${h} 0 0 0 0 0 1 0\"/></filter>')({\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    },\n    // `amount` ... the proportion of the conversion (1). A value of 1 (default) is completely sepia. A value of 0 leaves the input unchanged.\n    sepia: function(args) {\n        var amount = Number.isFinite(args.amount) ? args.amount : 1;\n        return template('<filter><feColorMatrix type=\"matrix\" values=\"${a} ${b} ${c} 0 0 ${d} ${e} ${f} 0 0 ${g} ${h} ${i} 0 0 0 0 0 1 0\"/></filter>')({\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    },\n    // `amount` ... the proportion of the conversion (1). A value of 0 is completely un-saturated. A value of 1 (default) leaves the input unchanged.\n    saturate: function(args) {\n        var amount = Number.isFinite(args.amount) ? args.amount : 1;\n        return template('<filter><feColorMatrix type=\"saturate\" values=\"${amount}\"/></filter>')({\n            amount: 1 - amount\n        });\n    },\n    // `angle` ...  the number of degrees around the color circle the input samples will be adjusted (0).\n    hueRotate: function(args) {\n        return template('<filter><feColorMatrix type=\"hueRotate\" values=\"${angle}\"/></filter>')({\n            angle: args.angle || 0\n        });\n    },\n    // `amount` ... the proportion of the conversion (1). A value of 1 (default) is completely inverted. A value of 0 leaves the input unchanged.\n    invert: function(args) {\n        var amount = Number.isFinite(args.amount) ? args.amount : 1;\n        return template('<filter><feComponentTransfer><feFuncR type=\"table\" tableValues=\"${amount} ${amount2}\"/><feFuncG type=\"table\" tableValues=\"${amount} ${amount2}\"/><feFuncB type=\"table\" tableValues=\"${amount} ${amount2}\"/></feComponentTransfer></filter>')({\n            amount: amount,\n            amount2: 1 - amount\n        });\n    },\n    // `amount` ... proportion of the conversion (1). A value of 0 will create an image that is completely black. A value of 1 (default) leaves the input unchanged.\n    brightness: function(args) {\n        return template('<filter><feComponentTransfer><feFuncR type=\"linear\" slope=\"${amount}\"/><feFuncG type=\"linear\" slope=\"${amount}\"/><feFuncB type=\"linear\" slope=\"${amount}\"/></feComponentTransfer></filter>')({\n            amount: Number.isFinite(args.amount) ? args.amount : 1\n        });\n    },\n    // `amount` ... proportion of the conversion (1). A value of 0 will create an image that is completely black. A value of 1 (default) leaves the input unchanged.\n    contrast: function(args) {\n        var amount = Number.isFinite(args.amount) ? args.amount : 1;\n        return template('<filter><feComponentTransfer><feFuncR type=\"linear\" slope=\"${amount}\" intercept=\"${amount2}\"/><feFuncG type=\"linear\" slope=\"${amount}\" intercept=\"${amount2}\"/><feFuncB type=\"linear\" slope=\"${amount}\" intercept=\"${amount2}\"/></feComponentTransfer></filter>')({\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    }\n};\nconst format = {\n    // Formatting numbers via the Python Format Specification Mini-language.\n    // See http://docs.python.org/release/3.1.3/library/string.html#format-specification-mini-language.\n    // Heavilly inspired by the D3.js library implementation.\n    number: function(specifier, value, locale) {\n        locale = locale || {\n            currency: [\n                \"$\",\n                \"\"\n            ],\n            decimal: \".\",\n            thousands: \",\",\n            grouping: [\n                3\n            ]\n        };\n        // See Python format specification mini-language: http://docs.python.org/release/3.1.3/library/string.html#format-specification-mini-language.\n        // [[fill]align][sign][symbol][0][width][,][.precision][type]\n        var re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n        var match = re.exec(specifier);\n        var fill = match[1] || \" \";\n        var align = match[2] || \">\";\n        var sign = match[3] || \"\";\n        var symbol = match[4] || \"\";\n        var zfill = match[5];\n        var width = +match[6];\n        var comma = match[7];\n        var precision = match[8];\n        var type = match[9];\n        var scale = 1;\n        var prefix = \"\";\n        var suffix = \"\";\n        var integer = false;\n        if (precision) precision = +precision.substring(1);\n        if (zfill || fill === \"0\" && align === \"=\") {\n            zfill = fill = \"0\";\n            align = \"=\";\n            if (comma) width -= Math.floor((width - 1) / 4);\n        }\n        switch(type){\n            case \"n\":\n                comma = true;\n                type = \"g\";\n                break;\n            case \"%\":\n                scale = 100;\n                suffix = \"%\";\n                type = \"f\";\n                break;\n            case \"p\":\n                scale = 100;\n                suffix = \"%\";\n                type = \"r\";\n                break;\n            case \"b\":\n            case \"o\":\n            case \"x\":\n            case \"X\":\n                if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n                break;\n            case \"c\":\n            case \"d\":\n                integer = true;\n                precision = 0;\n                break;\n            case \"s\":\n                scale = -1;\n                type = \"r\";\n                break;\n        }\n        if (symbol === \"$\") {\n            prefix = locale.currency[0];\n            suffix = locale.currency[1];\n        }\n        // If no precision is specified for `'r'`, fallback to general notation.\n        if (type == \"r\" && !precision) type = \"g\";\n        // Ensure that the requested precision is in the supported range.\n        if (precision != null) {\n            if (type == \"g\") precision = Math.max(1, Math.min(21, precision));\n            else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n        }\n        var zcomma = zfill && comma;\n        // Return the empty string for floats formatted as ints.\n        if (integer && value % 1) return \"\";\n        // Convert negative to positive, and record the sign prefix.\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign;\n        var fullSuffix = suffix;\n        // Apply the scale, computing it from the value's exponent for si format.\n        // Preserve the existing suffix, if any, such as the currency symbol.\n        if (scale < 0) {\n            var unit = this.prefix(value, precision);\n            value = unit.scale(value);\n            fullSuffix = unit.symbol + suffix;\n        } else {\n            value *= scale;\n        }\n        // Convert to the desired precision.\n        value = this.convert(type, value, precision);\n        // Break the value into the integer part (before) and decimal part (after).\n        var i = value.lastIndexOf(\".\");\n        var before = i < 0 ? value : value.substring(0, i);\n        var after = i < 0 ? \"\" : locale.decimal + value.substring(i + 1);\n        function formatGroup(value) {\n            var i = value.length;\n            var t = [];\n            var j = 0;\n            var g = locale.grouping[0];\n            while(i > 0 && g > 0){\n                t.push(value.substring(i -= g, i + g));\n                g = locale.grouping[j = (j + 1) % locale.grouping.length];\n            }\n            return t.reverse().join(locale.thousands);\n        }\n        // If the fill character is not `'0'`, grouping is applied before padding.\n        if (!zfill && comma && locale.grouping) {\n            before = formatGroup(before);\n        }\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length);\n        var padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        // If the fill character is `'0'`, grouping is applied after padding.\n        if (zcomma) before = formatGroup(padding + before);\n        // Apply prefix.\n        negative += prefix;\n        // Rejoin integer and decimal parts.\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n    },\n    // Formatting string via the Python Format string.\n    // See https://docs.python.org/2/library/string.html#format-string-syntax)\n    string: function(formatString, value) {\n        var fieldDelimiterIndex;\n        var fieldDelimiter = \"{\";\n        var endPlaceholder = false;\n        var formattedStringArray = [];\n        while((fieldDelimiterIndex = formatString.indexOf(fieldDelimiter)) !== -1){\n            var pieceFormattedString, formatSpec, fieldName;\n            pieceFormattedString = formatString.slice(0, fieldDelimiterIndex);\n            if (endPlaceholder) {\n                formatSpec = pieceFormattedString.split(\":\");\n                fieldName = formatSpec.shift().split(\".\");\n                pieceFormattedString = value;\n                for(var i = 0; i < fieldName.length; i++)pieceFormattedString = pieceFormattedString[fieldName[i]];\n                if (formatSpec.length) pieceFormattedString = this.number(formatSpec, pieceFormattedString);\n            }\n            formattedStringArray.push(pieceFormattedString);\n            formatString = formatString.slice(fieldDelimiterIndex + 1);\n            endPlaceholder = !endPlaceholder;\n            fieldDelimiter = endPlaceholder ? \"}\" : \"{\";\n        }\n        formattedStringArray.push(formatString);\n        return formattedStringArray.join(\"\");\n    },\n    convert: function(type, value, precision) {\n        switch(type){\n            case \"b\":\n                return value.toString(2);\n            case \"c\":\n                return String.fromCharCode(value);\n            case \"o\":\n                return value.toString(8);\n            case \"x\":\n                return value.toString(16);\n            case \"X\":\n                return value.toString(16).toUpperCase();\n            case \"g\":\n                return value.toPrecision(precision);\n            case \"e\":\n                return value.toExponential(precision);\n            case \"f\":\n                return value.toFixed(precision);\n            case \"r\":\n                return (value = this.round(value, this.precision(value, precision))).toFixed(Math.max(0, Math.min(20, this.precision(value * (1 + 1e-15), precision))));\n            default:\n                return value + \"\";\n        }\n    },\n    round: function(value, precision) {\n        return precision ? Math.round(value * (precision = Math.pow(10, precision))) / precision : Math.round(value);\n    },\n    precision: function(value, precision) {\n        return precision - (value ? Math.ceil(Math.log(value) / Math.LN10) : 1);\n    },\n    prefix: function(value, precision) {\n        var prefixes = [\n            \"y\",\n            \"z\",\n            \"a\",\n            \"f\",\n            \"p\",\n            \"n\",\n            \"\\xb5\",\n            \"m\",\n            \"\",\n            \"k\",\n            \"M\",\n            \"G\",\n            \"T\",\n            \"P\",\n            \"E\",\n            \"Z\",\n            \"Y\"\n        ].map(function(d, i) {\n            var k = Math.pow(10, Math.abs(8 - i) * 3);\n            return {\n                scale: i > 8 ? function(d) {\n                    return d / k;\n                } : function(d) {\n                    return d * k;\n                },\n                symbol: d\n            };\n        });\n        var i = 0;\n        if (value) {\n            if (value < 0) value *= -1;\n            if (precision) value = this.round(value, this.precision(value, precision));\n            i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n            i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));\n        }\n        return prefixes[8 + i / 3];\n    }\n};\n/*\n    Pre-compile the HTML to be used as a template.\n*/ const template = function(html) {\n    /*\n        Must support the variation in templating syntax found here:\n        https://lodash.com/docs#template\n    */ var regex = /<%= ([^ ]+) %>|\\$\\{ ?([^{} ]+) ?\\}|\\{\\{([^{} ]+)\\}\\}/g;\n    return function(data) {\n        data = data || {};\n        return html.replace(regex, function(match) {\n            var args = Array.from(arguments);\n            var attr = args.slice(1, 4).find(function(_attr) {\n                return !!_attr;\n            });\n            var attrArray = attr.split(\".\");\n            var value = data[attrArray.shift()];\n            while(value !== undefined && attrArray.length){\n                value = value[attrArray.shift()];\n            }\n            return value !== undefined ? value : \"\";\n        });\n    };\n};\n/**\n * @param {Element} el Element, which content is intent to display in full-screen mode, 'window.top.document.body' is default.\n */ const toggleFullScreen = function(el) {\n    var topDocument = window.top.document;\n    el = el || topDocument.body;\n    function prefixedResult(el, prop) {\n        var prefixes = [\n            \"webkit\",\n            \"moz\",\n            \"ms\",\n            \"o\",\n            \"\"\n        ];\n        for(var i = 0; i < prefixes.length; i++){\n            var prefix = prefixes[i];\n            var propName = prefix ? prefix + prop : prop.substr(0, 1).toLowerCase() + prop.substr(1);\n            if (el[propName] !== undefined) {\n                return (0,_utilHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.isFunction)(el[propName]) ? el[propName]() : el[propName];\n            }\n        }\n    }\n    if (prefixedResult(topDocument, \"FullscreenElement\") || prefixedResult(topDocument, \"FullScreenElement\")) {\n        prefixedResult(topDocument, \"ExitFullscreen\") || // Spec.\n        prefixedResult(topDocument, \"CancelFullScreen\"); // Firefox\n    } else {\n        prefixedResult(el, \"RequestFullscreen\") || // Spec.\n        prefixedResult(el, \"RequestFullScreen\"); // Firefox\n    }\n};\n\nconst noop = function() {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/util/util.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/jointjs/src/util/utilHelpers.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   bindAll: () => (/* binding */ bindAll),\n/* harmony export */   camelCase: () => (/* binding */ camelCase),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   deepMixin: () => (/* binding */ deepMixin),\n/* harmony export */   deepSupplement: () => (/* binding */ deepSupplement),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   defaultsDeep: () => (/* binding */ defaultsDeep),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   flattenDeep: () => (/* binding */ flattenDeep),\n/* harmony export */   forIn: () => (/* binding */ forIn),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   invokeProperty: () => (/* binding */ invokeProperty),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mixin: () => (/* binding */ mixin),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   result: () => (/* binding */ result),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   sortedIndex: () => (/* binding */ sortedIndex),\n/* harmony export */   supplement: () => (/* binding */ supplement),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   uniq: () => (/* binding */ uniq),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId),\n/* harmony export */   without: () => (/* binding */ without)\n/* harmony export */ });\n// code is inspired by https://github.com/lodash/lodash\n/* eslint-disable no-case-declarations */ // -- helper constants\nconst argsTag = \"[object Arguments]\";\nconst arrayTag = \"[object Array]\";\nconst boolTag = \"[object Boolean]\";\nconst dateTag = \"[object Date]\";\nconst errorTag = \"[object Error]\";\nconst funcTag = \"[object Function]\";\nconst mapTag = \"[object Map]\";\nconst numberTag = \"[object Number]\";\nconst nullTag = \"[object Null]\";\nconst objectTag = \"[object Object]\";\nconst regexpTag = \"[object RegExp]\";\nconst setTag = \"[object Set]\";\nconst stringTag = \"[object String]\";\nconst symbolTag = \"[object Symbol]\";\nconst undefinedTag = \"[object Undefined]\";\nconst weakMapTag = \"[object WeakMap]\";\nconst arrayBufferTag = \"[object ArrayBuffer]\";\nconst dataViewTag = \"[object DataView]\";\nconst float32Tag = \"[object Float32Array]\";\nconst float64Tag = \"[object Float64Array]\";\nconst int8Tag = \"[object Int8Array]\";\nconst int16Tag = \"[object Int16Array]\";\nconst int32Tag = \"[object Int32Array]\";\nconst uint8Tag = \"[object Uint8Array]\";\nconst uint8ClampedTag = \"[object Uint8ClampedArray]\";\nconst uint16Tag = \"[object Uint16Array]\";\nconst uint32Tag = \"[object Uint32Array]\";\nconst CLONEABLE_TAGS = {\n    [argsTag]: true,\n    [arrayTag]: true,\n    [arrayBufferTag]: true,\n    [dataViewTag]: true,\n    [boolTag]: true,\n    [dateTag]: true,\n    [float32Tag]: true,\n    [float64Tag]: true,\n    [int8Tag]: true,\n    [int16Tag]: true,\n    [int32Tag]: true,\n    [mapTag]: true,\n    [numberTag]: true,\n    [objectTag]: true,\n    [regexpTag]: true,\n    [setTag]: true,\n    [stringTag]: true,\n    [symbolTag]: true,\n    [uint8Tag]: true,\n    [uint8ClampedTag]: true,\n    [uint16Tag]: true,\n    [uint32Tag]: true,\n    [errorTag]: false,\n    [funcTag]: false,\n    [weakMapTag]: false\n};\n/** Used to compose unicode character classes. */ const rsAstralRange = \"\\ud800-\\udfff\";\nconst rsComboMarksRange = \"\\\\u0300-\\\\u036f\";\nconst reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\";\nconst rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\";\nconst rsComboMarksExtendedRange = \"\\\\u1ab0-\\\\u1aff\";\nconst rsComboMarksSupplementRange = \"\\\\u1dc0-\\\\u1dff\";\nconst rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;\nconst rsDingbatRange = \"\\\\u2700-\\\\u27bf\";\nconst rsLowerRange = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\";\nconst rsMathOpRange = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\";\nconst rsNonCharRange = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\";\nconst rsPunctuationRange = \"\\\\u2000-\\\\u206f\";\nconst rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\";\nconst rsUpperRange = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\";\nconst rsVarRange = \"\\\\ufe0e\\\\ufe0f\";\nconst rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n/** Used to compose unicode capture groups. */ const rsApos = \"['’]\";\nconst rsBreak = `[${rsBreakRange}]`;\nconst rsCombo = `[${rsComboRange}]`;\nconst rsDigit = \"\\\\d\";\nconst rsDingbat = `[${rsDingbatRange}]`;\nconst rsLower = `[${rsLowerRange}]`;\nconst rsMisc = `[^${rsAstralRange}${rsBreakRange + rsDigit + rsDingbatRange + rsLowerRange + rsUpperRange}]`;\nconst rsFitz = \"\\ud83c[\\udffb-\\udfff]\";\nconst rsModifier = `(?:${rsCombo}|${rsFitz})`;\nconst rsNonAstral = `[^${rsAstralRange}]`;\nconst rsRegional = \"(?:\\ud83c[\\udde6-\\uddff]){2}\";\nconst rsSurrPair = \"[\\ud800-\\udbff][\\udc00-\\udfff]\";\nconst rsUpper = `[${rsUpperRange}]`;\nconst rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */ const rsMiscLower = `(?:${rsLower}|${rsMisc})`;\nconst rsMiscUpper = `(?:${rsUpper}|${rsMisc})`;\nconst rsOptContrLower = `(?:${rsApos}(?:d|ll|m|re|s|t|ve))?`;\nconst rsOptContrUpper = `(?:${rsApos}(?:D|LL|M|RE|S|T|VE))?`;\nconst reOptMod = `${rsModifier}?`;\nconst rsOptVar = `[${rsVarRange}]?`;\nconst rsOptJoin = `(?:${rsZWJ}(?:${[\n    rsNonAstral,\n    rsRegional,\n    rsSurrPair\n].join(\"|\")})${rsOptVar + reOptMod})*`;\nconst rsOrdLower = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\";\nconst rsOrdUpper = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\";\nconst rsSeq = rsOptVar + reOptMod + rsOptJoin;\nconst rsEmoji = `(?:${[\n    rsDingbat,\n    rsRegional,\n    rsSurrPair\n].join(\"|\")})${rsSeq}`;\nconst reUnicodeWords = RegExp([\n    `${rsUpper}?${rsLower}+${rsOptContrLower}(?=${[\n        rsBreak,\n        rsUpper,\n        \"$\"\n    ].join(\"|\")})`,\n    `${rsMiscUpper}+${rsOptContrUpper}(?=${[\n        rsBreak,\n        rsUpper + rsMiscLower,\n        \"$\"\n    ].join(\"|\")})`,\n    `${rsUpper}?${rsMiscLower}+${rsOptContrLower}`,\n    `${rsUpper}+${rsOptContrUpper}`,\n    rsOrdUpper,\n    rsOrdLower,\n    `${rsDigit}+`,\n    rsEmoji\n].join(\"|\"), \"g\");\nconst LARGE_ARRAY_SIZE = 200;\nconst HASH_UNDEFINED = \"__hash_undefined__\";\n// Used to match `toStringTag` values of typed arrays\nconst reTypedTag = /^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\\]$/;\n// Used to compose unicode capture groups\nconst rsAstral = `[${rsAstralRange}]`;\n// Used to compose unicode regexes\nconst rsNonAstralCombo = `${rsNonAstral}${rsCombo}?`;\nconst rsSymbol = `(?:${[\n    rsNonAstralCombo,\n    rsCombo,\n    rsRegional,\n    rsSurrPair,\n    rsAstral\n].join(\"|\")})`;\n// Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode)\nconst reUnicode = RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol + rsSeq}`, \"g\");\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst reIsPlainProp = /^\\w*$/;\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(// Match anything that isn't a dot or bracket.\n\"[^.[\\\\]]+\" + \"|\" + // Or match property names within brackets.\n\"\\\\[(?:\" + // Match a non-string expression.\n\"([^\\\"'][^[]*)\" + \"|\" + // Or match strings (supports escaping characters).\n\"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" + \")\\\\]\" + \"|\" + // Or match \"\" as the space between consecutive dots or empty brackets.\n\"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\", \"g\");\nconst reIsUint = /^(?:0|[1-9]\\d*)$/;\nconst hasUnicodeWord = RegExp.prototype.test.bind(/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/);\nconst MAX_ARRAY_INDEX = 4294967295 - 1;\n/** Used to match words composed of alphanumeric characters. */ // eslint-disable-next-line no-control-regex\nconst reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n// -- helper functions\nconst hasUnicode = (string)=>{\n    return reUnicode.test(string);\n};\nconst unicodeToArray = (string)=>{\n    return string.match(reUnicode) || [];\n};\nconst asciiToArray = (string)=>{\n    return string.split(\"\");\n};\nconst stringToArray = (string)=>{\n    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n};\nconst values = (object)=>{\n    if (object == null) {\n        return [];\n    }\n    return keys(object).map((key)=>object[key]);\n};\nconst keys = (object)=>{\n    return isArrayLike(object) ? arrayLikeKeys(object) : Object.keys(Object(object));\n};\nconst baseKeys = (object)=>{\n    if (!isPrototype(object)) {\n        return Object.keys(object);\n    }\n    var result = [];\n    for(var key in Object(object)){\n        if (hasOwnProperty.call(object, key) && key != \"constructor\") {\n            result.push(key);\n        }\n    }\n    return result;\n};\nconst arrayLikeKeys = (value, inherited)=>{\n    const isArr = Array.isArray(value);\n    const isArg = !isArr && isObjectLike(value) && getTag(value) === argsTag;\n    const isType = !isArr && !isArg && isTypedArray(value);\n    const skipIndexes = isArr || isArg || isType;\n    const length = value.length;\n    const result = new Array(skipIndexes ? length : 0);\n    let index = skipIndexes ? -1 : length;\n    while(++index < length){\n        result[index] = `${index}`;\n    }\n    for(const key in value){\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (key === \"length\" || // Skip index properties.\n        isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n};\nconst assocIndexOf = (array, key)=>{\n    let { length } = array;\n    while(length--){\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n};\nconst eq = (value, other)=>{\n    return value === other || value !== value && other !== other;\n};\nconst isObjectLike = (value)=>{\n    return value != null && typeof value == \"object\";\n};\nconst isIterateeCall = (value, index, object)=>{\n    if (!isObject(object)) {\n        return false;\n    }\n    const type = typeof index;\n    const isPossibleIteratee = type == \"number\" ? isArrayLike(object) && index > -1 && index < object.length : type == \"string\" && index in object;\n    if (isPossibleIteratee) {\n        return eq(object[index], value);\n    }\n    return false;\n};\nconst isSet = (value)=>{\n    return isObjectLike(value) && getTag(value) == setTag;\n};\nconst isMap = (value)=>{\n    return isObjectLike(value) && getTag(value) == mapTag;\n};\nconst isPrototype = (value)=>{\n    const Ctor = value && value.constructor;\n    const proto = typeof Ctor === \"function\" && Ctor.prototype || Object.prototype;\n    return value === proto;\n};\nconst assignValue = (object, key, value)=>{\n    const objValue = object[key];\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n        object[key] = value;\n    }\n};\nconst copyObject = (source, props, object)=>{\n    let index = -1;\n    const length = props.length;\n    while(++index < length){\n        const key = props[index];\n        assignValue(object, key, source[key]);\n    }\n    return object;\n};\nconst isArrayLike = (value)=>{\n    return value != null && typeof value !== \"function\" && typeof value.length === \"number\" && value.length > -1 && value.length % 1 === 0;\n};\nconst isSymbol = (value)=>{\n    return typeof value == \"symbol\" || isObjectLike(value) && getTag(value) === symbolTag;\n};\nconst initCloneArray = (array)=>{\n    const length = array.length;\n    let result = new array.constructor(length);\n    if (length && typeof array[0] == \"string\" && hasOwnProperty.call(array, \"index\")) {\n        result.index = array.index;\n        result.input = array.input;\n    }\n    return result;\n};\nconst copyArray = (source, array)=>{\n    let index = -1;\n    const length = source.length;\n    array || (array = new Array(length));\n    while(++index < length){\n        array[index] = source[index];\n    }\n    return array;\n};\nconst getTag = (value)=>{\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return Object.prototype.toString.call(value);\n};\nconst cloneArrayBuffer = (arrayBuffer)=>{\n    const result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n};\nconst cloneTypedArray = (typedArray, isDeep)=>{\n    const buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n};\nconst cloneRegExp = (regexp)=>{\n    const result = new regexp.constructor(regexp.source, /\\w*$/.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n};\nconst initCloneObject = (object)=>{\n    return typeof object.constructor == \"function\" && !isPrototype(object) ? Object.create(Object.getPrototypeOf(object)) : {};\n};\nconst getSymbols = (object)=>{\n    if (object == null) {\n        return [];\n    }\n    object = Object(object);\n    const symbols = Object.getOwnPropertySymbols(object);\n    return symbols.filter((symbol)=>propertyIsEnumerable.call(object, symbol));\n};\nconst copySymbols = (source, object)=>{\n    return copyObject(source, getSymbols(source), object);\n};\nfunction cloneDataView(dataView, isDeep) {\n    const buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\nconst initCloneByTag = (object, tag, isDeep)=>{\n    const Constructor = object.constructor;\n    switch(tag){\n        case arrayBufferTag:\n            return cloneArrayBuffer(object, isDeep);\n        case boolTag:\n        case dateTag:\n            return new Constructor(+object);\n        case dataViewTag:\n            return cloneDataView(object, isDeep);\n        case float32Tag:\n        case float64Tag:\n        case int8Tag:\n        case int16Tag:\n        case int32Tag:\n        case uint8Tag:\n        case uint8ClampedTag:\n        case uint16Tag:\n        case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n        case mapTag:\n            return new Constructor(object);\n        case numberTag:\n        case stringTag:\n            return new Constructor(object);\n        case regexpTag:\n            return cloneRegExp(object);\n        case setTag:\n            return new Constructor;\n        case symbolTag:\n            return Symbol.prototype.valueOf ? Object(Symbol.prototype.valueOf.call(object)) : {};\n    }\n};\nconst isTypedArray = (value)=>{\n    return isObjectLike(value) && reTypedTag.test(getTag(value));\n};\nconst getAllKeys = (object)=>{\n    const result = Object.keys(object);\n    if (!Array.isArray(object) && object != null) {\n        result.push(...getSymbols(Object(object)));\n    }\n    return result;\n};\nconst getSymbolsIn = (object)=>{\n    const result = [];\n    while(object){\n        result.push(...getSymbols(object));\n        object = Object.getPrototypeOf(Object(object));\n    }\n    return result;\n};\nconst getAllKeysIn = (object)=>{\n    const result = [];\n    for(const key in object){\n        result.push(key);\n    }\n    if (!Array.isArray(object)) {\n        result.push(...getSymbolsIn(object));\n    }\n    return result;\n};\nconst getMapData = ({ __data__ }, key)=>{\n    const data = __data__;\n    return isKeyable(key) ? data[typeof key === \"string\" ? \"string\" : \"hash\"] : data.map;\n};\nconst equalObjects = (object, other, equalFunc, stack)=>{\n    const objProps = getAllKeys(object);\n    const objLength = objProps.length;\n    const othProps = getAllKeys(other);\n    const othLength = othProps.length;\n    if (objLength != othLength) {\n        return false;\n    }\n    let key;\n    let index = objLength;\n    while(index--){\n        key = objProps[index];\n        if (!hasOwnProperty.call(other, key)) {\n            return false;\n        }\n    }\n    const objStacked = stack.get(object);\n    const othStacked = stack.get(other);\n    if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n    }\n    let result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    let compared;\n    let skipCtor;\n    while(++index < objLength){\n        key = objProps[index];\n        const objValue = object[key];\n        const othValue = other[key];\n        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, stack) : compared)) {\n            result = false;\n            break;\n        }\n        skipCtor || (skipCtor = key == \"constructor\");\n    }\n    if (result && !skipCtor) {\n        const objCtor = object.constructor;\n        const othCtor = other.constructor;\n        if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor === \"function\" && objCtor instanceof objCtor && typeof othCtor === \"function\" && othCtor instanceof othCtor)) {\n            result = false;\n        }\n    }\n    stack[\"delete\"](object);\n    stack[\"delete\"](other);\n    return result;\n};\nconst baseIsEqual = (value, other, stack)=>{\n    if (value === other) {\n        return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n        return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, baseIsEqual, stack);\n};\nconst baseIsEqualDeep = (object, other, equalFunc, stack)=>{\n    let objIsArr = Array.isArray(object);\n    const othIsArr = Array.isArray(other);\n    let objTag = objIsArr ? arrayTag : getTag(object);\n    let othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    let objIsObj = objTag == objectTag;\n    const othIsObj = othTag == objectTag;\n    const isSameTag = objTag == othTag;\n    if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return objIsArr || isTypedArray(object) ? equalArrays(object, other, false, equalFunc, stack) : equalByTag(object, other, objTag, equalFunc, stack);\n    }\n    const objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\");\n    const othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n    if (objIsWrapped || othIsWrapped) {\n        const objUnwrapped = objIsWrapped ? object.value() : object;\n        const othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack);\n        return equalFunc(objUnwrapped, othUnwrapped, stack);\n    }\n    if (!isSameTag) {\n        return false;\n    }\n    stack || (stack = new Stack);\n    return equalObjects(object, other, equalFunc, stack);\n};\nconst equalArrays = (array, other, compareUnordered, equalFunc, stack)=>{\n    const isPartial = false;\n    const arrLength = array.length;\n    const othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n    }\n    // Assume cyclic values are equal.\n    const arrStacked = stack.get(array);\n    const othStacked = stack.get(other);\n    if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n    }\n    let index = -1;\n    let result = true;\n    const seen = compareUnordered ? new SetCache : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n    while(++index < arrLength){\n        let compared;\n        const arrValue = array[index];\n        const othValue = other[index];\n        if (compared !== undefined) {\n            if (compared) {\n                continue;\n            }\n            result = false;\n            break;\n        }\n        if (seen) {\n            if (!some(other, (othValue, othIndex)=>{\n                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, stack))) {\n                    return seen.push(othIndex);\n                }\n            })) {\n                result = false;\n                break;\n            }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, stack))) {\n            result = false;\n            break;\n        }\n    }\n    stack[\"delete\"](array);\n    stack[\"delete\"](other);\n    return result;\n};\nconst some = (array, predicate)=>{\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (predicate(array[index], index, array)) {\n            return true;\n        }\n    }\n    return false;\n};\nconst cacheHas = (cache, key)=>{\n    return cache.has(key);\n};\nconst compareArrayBufferTag = (object, other, equalFunc, stack)=>{\n    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other), stack)) {\n        return false;\n    }\n    return true;\n};\nconst equalByTag = (object, other, tag, equalFunc, stack)=>{\n    switch(tag){\n        case dataViewTag:\n            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n                return false;\n            }\n            object = object.buffer;\n            other = other.buffer;\n            return compareArrayBufferTag(object, other, equalFunc, stack);\n        case arrayBufferTag:\n            return compareArrayBufferTag(object, other, equalFunc, stack);\n        case boolTag:\n        case dateTag:\n        case numberTag:\n            return eq(+object, +other);\n        case errorTag:\n            return object.name == other.name && object.message == other.message;\n        case regexpTag:\n        case stringTag:\n            return object == `${other}`;\n        case mapTag:\n            let convert = mapToArray;\n        // Intentional fallthrough\n        // eslint-disable-next-line no-fallthrough\n        case setTag:\n            convert || (convert = setToArray);\n            if (object.size != other.size) {\n                return false;\n            }\n            // Assume cyclic values are equal.\n            const stacked = stack.get(object);\n            if (stacked) {\n                return stacked == other;\n            }\n            // Recursively compare objects (susceptible to call stack limits).\n            stack.set(object, other);\n            const result = equalArrays(convert(object), convert(other), true, equalFunc, stack);\n            stack[\"delete\"](object);\n            return result;\n        case symbolTag:\n            return Symbol.prototype.valueOf.call(object) == Symbol.prototype.valueOf.call(other);\n    }\n    return false;\n};\nconst mapToArray = (map)=>{\n    let index = -1;\n    let result = Array(map.size);\n    map.forEach((value, key)=>{\n        result[++index] = [\n            key,\n            value\n        ];\n    });\n    return result;\n};\nconst setToArray = (set)=>{\n    let index = -1;\n    const result = new Array(set.size);\n    set.forEach((value)=>{\n        result[++index] = value;\n    });\n    return result;\n};\nconst isKey = (value, object)=>{\n    if (Array.isArray(value)) {\n        return false;\n    }\n    const type = typeof value;\n    if (type === \"number\" || type === \"boolean\" || value == null || isSymbol(value)) {\n        return true;\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n};\nconst stringToPath = (string)=>{\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n        result.push(\"\");\n    }\n    string.replace(rePropName, (match, expression, quote, subString)=>{\n        let key = match;\n        if (quote) {\n            key = subString.replace(reEscapeChar, \"$1\");\n        } else if (expression) {\n            key = expression.trim();\n        }\n        result.push(key);\n    });\n    return result;\n};\nconst castPath = (path, object)=>{\n    if (Array.isArray(path)) {\n        return path;\n    }\n    return isKey(path, object) ? [\n        path\n    ] : stringToPath(`${path}`);\n};\nconst get = (object, path)=>{\n    path = castPath(path, object);\n    let index = 0;\n    const length = path.length;\n    while(object != null && index < length){\n        object = object[toKey(path[index])];\n        index++;\n    }\n    return index && index == length ? object : undefined;\n};\nfunction compareAscending(value, other) {\n    if (value !== other) {\n        const valIsDefined = value !== undefined;\n        const valIsNull = value === null;\n        const valIsReflexive = value === value;\n        const valIsSymbol = isSymbol(value);\n        const othIsDefined = other !== undefined;\n        const othIsNull = other === null;\n        const othIsReflexive = other === other;\n        const othIsSymbol = isSymbol(other);\n        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {\n            return 1;\n        }\n        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {\n            return -1;\n        }\n    }\n    return 0;\n}\nfunction compareMultiple(object, other, orders) {\n    let index = -1;\n    const objCriteria = object.criteria;\n    const othCriteria = other.criteria;\n    const length = objCriteria.length;\n    const ordersLength = orders.length;\n    while(++index < length){\n        const order = index < ordersLength ? orders[index] : null;\n        const cmpFn = order && typeof order === \"function\" ? order : compareAscending;\n        const result = cmpFn(objCriteria[index], othCriteria[index]);\n        if (result) {\n            if (order && typeof order !== \"function\") {\n                return result * (order == \"desc\" ? -1 : 1);\n            }\n            return result;\n        }\n    }\n    return object.index - other.index;\n}\nconst diff = (array, values)=>{\n    let includes = (array, value)=>{\n        const length = array == null ? 0 : array.length;\n        return !!length && array.indexOf(value) > -1;\n    };\n    let isCommon = true;\n    const result = [];\n    const valuesLength = values.length;\n    if (!array.length) {\n        return result;\n    }\n    if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = (cache, key)=>cache.has(key);\n        isCommon = false;\n        values = new SetCache(values);\n    }\n    outer: for(let key in array){\n        let value = array[key];\n        const computed = value;\n        value = value !== 0 ? value : 0;\n        if (isCommon && computed === computed) {\n            let valuesIndex = valuesLength;\n            while(valuesIndex--){\n                if (values[valuesIndex] === computed) {\n                    continue outer;\n                }\n            }\n            result.push(value);\n        } else if (!includes(values, computed)) {\n            result.push(value);\n        }\n    }\n    return result;\n};\nconst intersect = (arrays)=>{\n    const includes = (array, value)=>{\n        const length = array == null ? 0 : array.length;\n        return !!length && array.indexOf(value) > -1;\n    };\n    const cacheHas = (cache, key)=>cache.has(key);\n    const length = arrays[0].length;\n    const othLength = arrays.length;\n    const caches = new Array(othLength);\n    const result = [];\n    let array;\n    let maxLength = Infinity;\n    let othIndex = othLength;\n    while(othIndex--){\n        array = arrays[othIndex];\n        maxLength = Math.min(array.length, maxLength);\n        caches[othIndex] = length >= 120 && array.length >= 120 ? new SetCache(othIndex && array) : undefined;\n    }\n    array = arrays[0];\n    let index = -1;\n    const seen = caches[0];\n    outer: while(++index < length && result.length < maxLength){\n        let value = array[index];\n        const computed = value;\n        value = value !== 0 ? value : 0;\n        if (!(seen ? cacheHas(seen, computed) : includes(result, computed))) {\n            othIndex = othLength;\n            while(--othIndex){\n                const cache = caches[othIndex];\n                if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed))) {\n                    continue outer;\n                }\n            }\n            if (seen) {\n                seen.push(computed);\n            }\n            result.push(value);\n        }\n    }\n    return result;\n};\nconst toKey = (value)=>{\n    if (typeof value === \"string\" || isSymbol(value)) {\n        return value;\n    }\n    const result = `${value}`;\n    return result == \"0\" && 1 / value == -Infinity ? \"-0\" : result;\n};\nconst baseClone = (value, isDeep = false, isFlat = false, isFull = true, customizer, key, object, stack)=>{\n    let result;\n    if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== undefined) {\n        return result;\n    }\n    if (!isObject(value)) {\n        return value;\n    }\n    const isArr = Array.isArray(value);\n    const tag = getTag(value);\n    if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n            return copyArray(value, result);\n        }\n    } else {\n        const isFunc = typeof value === \"function\";\n        if (tag === objectTag || tag === argsTag || isFunc && !object) {\n            result = isFlat || isFunc ? {} : initCloneObject(value);\n            if (!isDeep) {\n                return isFlat ? copySymbolsIn(value, copyObject(value, Object.keys(value), result)) : copySymbols(value, Object.assign(result, value));\n            }\n        } else {\n            if (isFunc || !CLONEABLE_TAGS[tag]) {\n                return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, isDeep);\n        }\n    }\n    stack || (stack = new Stack);\n    const stacked = stack.get(value);\n    if (stacked) {\n        return stacked;\n    }\n    stack.set(value, result);\n    if (isMap(value)) {\n        value.forEach((subValue, key)=>{\n            result.set(key, baseClone(subValue, isDeep, isFlat, isFull, customizer, key, value, stack));\n        });\n        return result;\n    }\n    if (isSet(value)) {\n        value.forEach((subValue)=>{\n            result.add(baseClone(subValue, isDeep, isFlat, isFull, customizer, subValue, value, stack));\n        });\n        return result;\n    }\n    if (isTypedArray(value)) {\n        return result;\n    }\n    const keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;\n    const props = isArr ? undefined : keysFunc(value);\n    (props || value).forEach((subValue, key)=>{\n        if (props) {\n            key = subValue;\n            subValue = value[key];\n        }\n        assignValue(result, key, baseClone(subValue, isDeep, isFlat, isFull, customizer, key, value, stack));\n    });\n    return result;\n};\nconst copySymbolsIn = (source, object)=>{\n    return copyObject(source, getSymbolsIn(source), object);\n};\nconst parent = (object, path)=>{\n    return path.length < 2 ? object : get(object, path.slice(0, -1));\n};\nconst set = (object, path, value)=>{\n    if (!isObject(object)) {\n        return object;\n    }\n    path = castPath(path, object);\n    const length = path.length;\n    const lastIndex = length - 1;\n    let index = -1;\n    let nested = object;\n    while(nested != null && ++index < length){\n        const key = toKey(path[index]);\n        let newValue = value;\n        if (index != lastIndex) {\n            const objValue = nested[key];\n            newValue = undefined;\n            if (newValue === undefined) {\n                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n            }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n    }\n    return object;\n};\nconst isIndex = (value, length)=>{\n    const type = typeof value;\n    length = length == null ? Number.MAX_SAFE_INTEGER : length;\n    return !!length && (type === \"number\" || type !== \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n};\nconst unset = (object, path)=>{\n    path = castPath(path, object);\n    object = parent(object, path);\n    const lastSegment = path[path.length - 1];\n    return object == null || delete object[toKey(lastSegment)];\n};\nconst isKeyable = (value)=>{\n    const type = typeof value;\n    return type === \"string\" || type === \"number\" || type === \"symbol\" || type === \"boolean\" ? value !== \"__proto__\" : value === null;\n};\nconst keysIn = (object)=>{\n    const result = [];\n    for(const key in object){\n        result.push(key);\n    }\n    return result;\n};\nconst toPlainObject = (value)=>{\n    value = Object(value);\n    const result = {};\n    for(const key in value){\n        result[key] = value[key];\n    }\n    return result;\n};\nconst safeGet = (object, key)=>{\n    if (key === \"constructor\" && typeof object[key] === \"function\") {\n        return;\n    }\n    if (key == \"__proto__\") {\n        return;\n    }\n    return object[key];\n};\nfunction createAssigner(assigner, isMerge = false) {\n    return (object, ...sources)=>{\n        let index = -1;\n        let length = sources.length;\n        let customizer = length > 1 ? sources[length - 1] : undefined;\n        const guard = length > 2 ? sources[2] : undefined;\n        customizer = assigner.length > 3 && typeof customizer === \"function\" ? (length--, customizer) : isMerge ? (a, b)=>{\n            if (Array.isArray(a) && !Array.isArray(b)) {\n                return b;\n            }\n        } : undefined;\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n        }\n        object = Object(object);\n        while(++index < length){\n            const source = sources[index];\n            if (source) {\n                assigner(object, source, index, customizer);\n            }\n        }\n        return object;\n    };\n}\nconst baseMerge = (object, source, srcIndex, customizer, stack)=>{\n    if (object === source) {\n        return;\n    }\n    forIn(source, (srcValue, key)=>{\n        if (isObject(srcValue)) {\n            stack || (stack = new Stack);\n            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        } else {\n            let newValue = customizer ? customizer(object[key], srcValue, `${key}`, object, source, stack) : undefined;\n            if (newValue === undefined) {\n                newValue = srcValue;\n            }\n            assignMergeValue(object, key, newValue);\n        }\n    }, keysIn);\n};\nconst baseMergeDeep = (object, source, key, srcIndex, mergeFunc, customizer, stack)=>{\n    const objValue = safeGet(object, key);\n    const srcValue = safeGet(source, key);\n    const stacked = stack.get(srcValue);\n    if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n    }\n    let newValue = customizer ? customizer(objValue, srcValue, `${key}`, object, source, stack) : undefined;\n    let isCommon = newValue === undefined;\n    if (isCommon) {\n        const isArr = Array.isArray(srcValue);\n        const isTyped = !isArr && isTypedArray(srcValue);\n        newValue = srcValue;\n        if (isArr || isTyped) {\n            if (Array.isArray(objValue)) {\n                newValue = objValue;\n            } else if (isObjectLike(objValue) && isArrayLike(objValue)) {\n                newValue = copyArray(objValue);\n            } else if (isTyped) {\n                isCommon = false;\n                newValue = cloneTypedArray(srcValue, true);\n            } else {\n                newValue = [];\n            }\n        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n            newValue = objValue;\n            if (isArguments(objValue)) {\n                newValue = toPlainObject(objValue);\n            } else if (typeof objValue === \"function\" || !isObject(objValue)) {\n                newValue = initCloneObject(srcValue);\n            }\n        } else {\n            isCommon = false;\n        }\n    }\n    if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack[\"delete\"](srcValue);\n    }\n    assignMergeValue(object, key, newValue);\n};\nconst assignMergeValue = (object, key, value)=>{\n    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n        assignValue(object, key, value);\n    }\n};\nfunction baseFor(object, iteratee, keysFunc) {\n    const iterable = Object(object);\n    const props = keysFunc(object);\n    let { length } = props;\n    let index = -1;\n    while(length--){\n        const key = props[++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n        }\n    }\n    return object;\n}\nconst baseForOwn = (object, iteratee)=>{\n    return object && baseFor(object, iteratee, keys);\n};\nconst baseEach = (collection, iteratee)=>{\n    if (collection == null) {\n        return collection;\n    }\n    if (!isArrayLike(collection)) {\n        return baseForOwn(collection, iteratee);\n    }\n    const length = collection.length;\n    const iterable = Object(collection);\n    let index = -1;\n    while(++index < length){\n        if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n        }\n    }\n    return collection;\n};\nfunction last(array) {\n    const length = array == null ? 0 : array.length;\n    return length ? array[length - 1] : undefined;\n}\nconst createSet = Set && 1 / setToArray(new Set([\n    undefined,\n    -0\n]))[1] == 1 / 0 ? (values)=>new Set(values) : ()=>{};\nfunction customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n    if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack[\"delete\"](srcValue);\n    }\n    return objValue;\n}\nfunction baseOrderBy(collection, iteratees, orders) {\n    if (iteratees.length) {\n        iteratees = iteratees.map((iteratee)=>{\n            if (Array.isArray(iteratee)) {\n                return (value)=>get(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n            return iteratee;\n        });\n    } else {\n        iteratees = [\n            (value)=>value\n        ];\n    }\n    let criteriaIndex = -1;\n    let eachIndex = -1;\n    const result = isArrayLike(collection) ? new Array(collection.length) : [];\n    baseEach(collection, (value)=>{\n        const criteria = iteratees.map((iteratee)=>iteratee(value));\n        result[++eachIndex] = {\n            criteria,\n            index: ++criteriaIndex,\n            value\n        };\n    });\n    return baseSortBy(result, (object, other)=>compareMultiple(object, other, orders));\n}\nfunction baseSortBy(array, comparer) {\n    let { length } = array;\n    array.sort(comparer);\n    while(length--){\n        array[length] = array[length].value;\n    }\n    return array;\n}\nfunction isStrictComparable(value) {\n    return value === value && !isObject(value);\n}\nfunction matchesStrictComparable(key, srcValue) {\n    return (object)=>{\n        if (object == null) {\n            return false;\n        }\n        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n    };\n}\nfunction hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n}\nfunction baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n    }\n    return (object)=>{\n        const objValue = get(object, path);\n        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue);\n    };\n}\nfunction baseMatches(source) {\n    const matchData = getMatchData(source);\n    if (matchData.length === 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n    return (object)=>object === source || baseIsMatch(object, source, matchData);\n}\nfunction getMatchData(object) {\n    const result = keys(object);\n    let length = result.length;\n    while(length--){\n        const key = result[length];\n        const value = object[key];\n        result[length] = [\n            key,\n            value,\n            isStrictComparable(value)\n        ];\n    }\n    return result;\n}\nfunction baseIsMatch(object, source, matchData, customizer) {\n    let index = matchData.length;\n    const length = index;\n    const noCustomizer = !customizer;\n    if (object == null) {\n        return !length;\n    }\n    let data;\n    let result;\n    object = Object(object);\n    while(index--){\n        data = matchData[index];\n        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n            return false;\n        }\n    }\n    while(++index < length){\n        data = matchData[index];\n        const key = data[0];\n        const objValue = object[key];\n        const srcValue = data[1];\n        if (noCustomizer && data[2]) {\n            if (objValue === undefined && !(key in object)) {\n                return false;\n            }\n        } else {\n            const stack = new Stack;\n            if (customizer) {\n                result = customizer(objValue, srcValue, key, object, source, stack);\n            }\n            if (!(result === undefined ? baseIsEqual(srcValue, objValue, stack) : result)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\nfunction baseProperty(key) {\n    return (object)=>object == null ? undefined : object[key];\n}\nfunction basePropertyDeep(path) {\n    return (object)=>get(object, path);\n}\nfunction baseIteratee(value) {\n    if (typeof value == \"function\") {\n        return value;\n    }\n    if (value == null) {\n        return (val)=>val;\n    }\n    if (typeof value == \"object\") {\n        return Array.isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n    }\n    return property(value);\n}\nfunction getIteratee() {\n    const result = baseIteratee;\n    return arguments.length ? result(arguments[0], arguments[1]) : result;\n}\nconst arrayReduce = (array, iteratee, accumulator, initAccum)=>{\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n        accumulator = array[++index];\n    }\n    while(++index < length){\n        accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n};\nconst baseReduce = (collection, iteratee, accumulator, initAccum, eachFunc)=>{\n    eachFunc(collection, (value, index, collection)=>{\n        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n};\nfunction reduce(collection, iteratee, accumulator) {\n    const func = Array.isArray(collection) ? arrayReduce : baseReduce;\n    const initAccum = arguments.length < 3;\n    return func(collection, iteratee, accumulator, initAccum, baseEach);\n}\nconst isFlattenable = (value)=>{\n    return Array.isArray(value) || isArguments(value) || !!(value && value[Symbol.isConcatSpreadable]);\n};\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n    let index = -1;\n    const length = array.length;\n    predicate || (predicate = isFlattenable);\n    result || (result = []);\n    while(++index < length){\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n            if (depth > 1) {\n                // Recursively flatten arrays (susceptible to call stack limits).\n                baseFlatten(value, depth - 1, predicate, isStrict, result);\n            } else {\n                result.push(...value);\n            }\n        } else if (!isStrict) {\n            result[result.length] = value;\n        }\n    }\n    return result;\n}\nconst isArguments = (value)=>{\n    return isObjectLike(value) && getTag(value) == \"[object Arguments]\";\n};\nconst basePick = (object, paths)=>{\n    return basePickBy(object, paths, (value, path)=>hasIn(object, path));\n};\nconst basePickBy = (object, paths, predicate)=>{\n    let index = -1;\n    const length = paths.length;\n    const result = {};\n    while(++index < length){\n        const path = paths[index];\n        const value = get(object, path);\n        if (predicate(value, path)) {\n            set(result, castPath(path, object), value);\n        }\n    }\n    return result;\n};\nconst isLength = (value)=>{\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= Number.MAX_SAFE_INTEGER;\n};\nconst baseHasIn = (object, key)=>{\n    return object != null && key in Object(object);\n};\nconst hasPath = (object, path, hasFunc)=>{\n    path = castPath(path, object);\n    var index = -1, length = path.length, result = false;\n    while(++index < length){\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n            break;\n        }\n        object = object[key];\n    }\n    if (result || ++index != length) {\n        return result;\n    }\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) && (Array.isArray(object) || isArguments(object));\n};\nconst asciiWords = (string)=>{\n    return string.match(reAsciiWord);\n};\nconst unicodeWords = (string)=>{\n    return string.match(reUnicodeWords);\n};\nconst words = (string, pattern)=>{\n    if (pattern === undefined) {\n        const result = hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n        return result || [];\n    }\n    return string.match(pattern) || [];\n};\nconst castSlice = (array, start, end)=>{\n    const { length } = array;\n    end = end === undefined ? length : end;\n    return !start && end >= length ? array : array.slice(start, end);\n};\nconst upperFirst = createCaseFirst(\"toUpperCase\");\nfunction createCaseFirst(methodName) {\n    return (string)=>{\n        if (!string) {\n            return \"\";\n        }\n        const strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n        const chr = strSymbols ? strSymbols[0] : string[0];\n        const trailing = strSymbols ? castSlice(strSymbols, 1).join(\"\") : string.slice(1);\n        return chr[methodName]() + trailing;\n    };\n}\n// -- helper classes\nclass Stack {\n    constructor(entries){\n        const data = this.__data__ = new ListCache(entries);\n        this.size = data.size;\n    }\n    clear() {\n        this.__data__ = new ListCache;\n        this.size = 0;\n    }\n    delete(key) {\n        const data = this.__data__;\n        const result = data[\"delete\"](key);\n        this.size = data.size;\n        return result;\n    }\n    get(key) {\n        return this.__data__.get(key);\n    }\n    has(key) {\n        return this.__data__.has(key);\n    }\n    set(key, value) {\n        let data = this.__data__;\n        if (data instanceof ListCache) {\n            const pairs = data.__data__;\n            if (pairs.length < LARGE_ARRAY_SIZE - 1) {\n                pairs.push([\n                    key,\n                    value\n                ]);\n                this.size = ++data.size;\n                return this;\n            }\n            data = this.__data__ = new MapCache(pairs);\n        }\n        data.set(key, value);\n        this.size = data.size;\n        return this;\n    }\n}\nclass ListCache {\n    constructor(entries){\n        let index = -1;\n        const length = entries == null ? 0 : entries.length;\n        this.clear();\n        while(++index < length){\n            const entry = entries[index];\n            this.set(entry[0], entry[1]);\n        }\n    }\n    clear() {\n        this.__data__ = [];\n        this.size = 0;\n    }\n    delete(key) {\n        const data = this.__data__;\n        const index = assocIndexOf(data, key);\n        if (index < 0) {\n            return false;\n        }\n        const lastIndex = data.length - 1;\n        if (index == lastIndex) {\n            data.pop();\n        } else {\n            data.splice(index, 1);\n        }\n        --this.size;\n        return true;\n    }\n    get(key) {\n        const data = this.__data__;\n        const index = assocIndexOf(data, key);\n        return index < 0 ? undefined : data[index][1];\n    }\n    has(key) {\n        return assocIndexOf(this.__data__, key) > -1;\n    }\n    set(key, value) {\n        const data = this.__data__;\n        const index = assocIndexOf(data, key);\n        if (index < 0) {\n            ++this.size;\n            data.push([\n                key,\n                value\n            ]);\n        } else {\n            data[index][1] = value;\n        }\n        return this;\n    }\n}\nclass MapCache {\n    constructor(entries){\n        let index = -1;\n        const length = entries == null ? 0 : entries.length;\n        this.clear();\n        while(++index < length){\n            const entry = entries[index];\n            this.set(entry[0], entry[1]);\n        }\n    }\n    clear() {\n        this.size = 0;\n        this.__data__ = {\n            \"hash\": new Hash,\n            \"map\": new Map,\n            \"string\": new Hash\n        };\n    }\n    delete(key) {\n        const result = getMapData(this, key)[\"delete\"](key);\n        this.size -= result ? 1 : 0;\n        return result;\n    }\n    get(key) {\n        return getMapData(this, key).get(key);\n    }\n    has(key) {\n        return getMapData(this, key).has(key);\n    }\n    set(key, value) {\n        const data = getMapData(this, key);\n        const size = data.size;\n        data.set(key, value);\n        this.size += data.size == size ? 0 : 1;\n        return this;\n    }\n}\nclass Hash {\n    constructor(entries){\n        let index = -1;\n        const length = entries == null ? 0 : entries.length;\n        this.clear();\n        while(++index < length){\n            const entry = entries[index];\n            this.set(entry[0], entry[1]);\n        }\n    }\n    clear() {\n        this.__data__ = Object.create(null);\n        this.size = 0;\n    }\n    delete(key) {\n        const result = this.has(key) && delete this.__data__[key];\n        this.size -= result ? 1 : 0;\n        return result;\n    }\n    get(key) {\n        const data = this.__data__;\n        const result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    has(key) {\n        const data = this.__data__;\n        return data[key] !== undefined;\n    }\n    set(key, value) {\n        const data = this.__data__;\n        this.size += this.has(key) ? 0 : 1;\n        data[key] = value === undefined ? HASH_UNDEFINED : value;\n        return this;\n    }\n}\nclass SetCache {\n    constructor(values){\n        let index = -1;\n        const length = values == null ? 0 : values.length;\n        this.__data__ = new MapCache;\n        while(++index < length){\n            this.add(values[index]);\n        }\n    }\n    add(value) {\n        this.__data__.set(value, HASH_UNDEFINED);\n        return this;\n    }\n    has(value) {\n        return this.__data__.has(value);\n    }\n}\nSetCache.prototype.push = SetCache.prototype.add;\n// -- top level functions\nconst isBoolean = function(value) {\n    var toString = Object.prototype.toString;\n    return value === true || value === false || !!value && typeof value === \"object\" && toString.call(value) === boolTag;\n};\nconst isObject = function(value) {\n    return !!value && (typeof value === \"object\" || typeof value === \"function\");\n};\nconst isNumber = function(value) {\n    var toString = Object.prototype.toString;\n    return typeof value === \"number\" || !!value && typeof value === \"object\" && toString.call(value) === numberTag;\n};\nconst isString = function(value) {\n    var toString = Object.prototype.toString;\n    return typeof value === \"string\" || !!value && typeof value === \"object\" && toString.call(value) === stringTag;\n};\nconst assign = createAssigner((object, source)=>{\n    if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n    }\n    for(var key in source){\n        if (hasOwnProperty.call(source, key)) {\n            assignValue(object, key, source[key]);\n        }\n    }\n});\nconst mixin = assign;\nconst deepMixin = mixin;\nconst supplement = (object, ...sources)=>{\n    let index = -1;\n    let length = sources.length;\n    const guard = length > 2 ? sources[2] : undefined;\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n    }\n    while(++index < length){\n        const source = sources[index];\n        if (source == null) {\n            continue;\n        }\n        const props = Object.keys(source);\n        const propsLength = props.length;\n        let propsIndex = -1;\n        while(++propsIndex < propsLength){\n            const key = props[propsIndex];\n            const value = object[key];\n            if (value === undefined || eq(value, Object.prototype[key]) && !hasOwnProperty.call(object, key)) {\n                object[key] = source[key];\n            }\n        }\n    }\n    return object;\n};\nconst defaults = supplement;\nconst deepSupplement = function defaultsDeep(...args) {\n    args.push(undefined, customDefaultsMerge);\n    return merge.apply(undefined, args);\n};\nconst defaultsDeep = deepSupplement;\n// _.invokeMap\nconst invoke = (collection, path, ...args)=>{\n    let index = -1;\n    const isFunc = typeof path === \"function\";\n    const result = isArrayLike(collection) ? new Array(collection.length) : [];\n    baseEach(collection, (value)=>{\n        result[++index] = isFunc ? path.apply(value, args) : invokeProperty(value, path, ...args);\n    });\n    return result;\n};\n// _.invoke\nconst invokeProperty = (object, path, ...args)=>{\n    path = castPath(path, object);\n    object = parent(object, path);\n    const func = object == null ? object : object[toKey(last(path))];\n    return func == null ? undefined : func.apply(object, args);\n};\nconst sortedIndex = (array, value, iteratee)=>{\n    let low = 0;\n    let high = array == null ? 0 : array.length;\n    if (high == 0) {\n        return 0;\n    }\n    iteratee = getIteratee(iteratee, 2);\n    value = iteratee(value);\n    const valIsNaN = value !== value;\n    const valIsNull = value === null;\n    const valIsSymbol = isSymbol(value);\n    const valIsUndefined = value === undefined;\n    while(low < high){\n        let setLow;\n        const mid = Math.floor((low + high) / 2);\n        const computed = iteratee(array[mid]);\n        const othIsDefined = computed !== undefined;\n        const othIsNull = computed === null;\n        const othIsReflexive = computed === computed;\n        const othIsSymbol = isSymbol(computed);\n        if (valIsNaN) {\n            setLow = othIsReflexive;\n        } else if (valIsUndefined) {\n            setLow = othIsReflexive && othIsDefined;\n        } else if (valIsNull) {\n            setLow = othIsReflexive && othIsDefined && !othIsNull;\n        } else if (valIsSymbol) {\n            setLow = othIsReflexive && othIsDefined && !othIsNull && !othIsSymbol;\n        } else if (othIsNull || othIsSymbol) {\n            setLow = false;\n        } else {\n            setLow = computed < value;\n        }\n        if (setLow) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return Math.min(high, MAX_ARRAY_INDEX);\n};\nconst uniq = (array, iteratee)=>{\n    let index = -1;\n    let includes = (array, value)=>{\n        const length = array == null ? 0 : array.length;\n        return !!length && array.indexOf(value) > -1;\n    };\n    iteratee = getIteratee(iteratee, 2);\n    let isCommon = true;\n    const { length } = array;\n    const result = [];\n    let seen = result;\n    if (length >= LARGE_ARRAY_SIZE) {\n        const set = iteratee ? null : createSet(array);\n        if (set) {\n            return setToArray(set);\n        }\n        isCommon = false;\n        includes = (cache, key)=>cache.has(key);\n        seen = new SetCache;\n    } else {\n        seen = iteratee ? [] : result;\n    }\n    outer: while(++index < length){\n        let value = array[index];\n        const computed = iteratee ? iteratee(value) : value;\n        value = value !== 0 ? value : 0;\n        if (isCommon && computed === computed) {\n            let seenIndex = seen.length;\n            while(seenIndex--){\n                if (seen[seenIndex] === computed) {\n                    continue outer;\n                }\n            }\n            if (iteratee) {\n                seen.push(computed);\n            }\n            result.push(value);\n        } else if (!includes(seen, computed)) {\n            if (seen !== result) {\n                seen.push(computed);\n            }\n            result.push(value);\n        }\n    }\n    return result;\n};\nconst clone = (value)=>baseClone(value);\nconst cloneDeep = (value)=>baseClone(value, true);\nconst isEmpty = (value)=>{\n    if (value == null) {\n        return true;\n    }\n    if (isArrayLike(value) && (Array.isArray(value) || typeof value === \"string\" || typeof value.splice === \"function\" || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n    }\n    const tag = getTag(value);\n    if (tag == \"[object Map]\" || tag == \"[object Set]\") {\n        return !value.size;\n    }\n    if (isPrototype(value)) {\n        return !baseKeys(value).length;\n    }\n    for(const key in value){\n        if (hasOwnProperty.call(value, key)) {\n            return false;\n        }\n    }\n    return true;\n};\nconst isEqual = (object, other)=>baseIsEqual(object, other);\nconst isFunction = (value)=>typeof value === \"function\";\nconst isPlainObject = (value)=>{\n    if (!isObjectLike(value) || getTag(value) != \"[object Object]\") {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    let proto = value;\n    while(Object.getPrototypeOf(proto) !== null){\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n};\nconst toArray = (value)=>{\n    if (!value) {\n        return [];\n    }\n    if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n    }\n    if (Symbol.iterator && Symbol.iterator in Object(value)) {\n        const iterator = value[Symbol.iterator]();\n        let data;\n        const result = [];\n        while(!(data = iterator.next()).done){\n            result.push(data.value);\n        }\n        return result;\n    }\n    const tag = getTag(value);\n    const func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;\n    return func(value);\n};\nfunction debounce(func, wait, opt) {\n    if (typeof func !== \"function\") {\n        throw new TypeError(\"Expected a function\");\n    }\n    let lastArgs;\n    let lastThis;\n    let maxWait;\n    let result;\n    let timerId;\n    let lastCallTime;\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n    const useRaf = !wait && wait !== 0 && window && typeof window.requestAnimationFrame === \"function\";\n    wait = +wait || 0;\n    if (isObject(opt)) {\n        leading = !!opt.leading;\n        maxing = \"maxWait\" in opt;\n        maxWait = maxing ? Math.max(+opt.maxWait || 0, wait) : maxWait;\n        trailing = \"trailing\" in opt ? !!opt.trailing : trailing;\n    }\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function startTimer(pendingFunc, wait) {\n        if (useRaf) {\n            window.cancelAnimationFrame(timerId);\n            return window.requestAnimationFrame(pendingFunc);\n        }\n        return setTimeout(pendingFunc, wait);\n    }\n    function cancelTimer(id) {\n        if (useRaf) {\n            return window.cancelAnimationFrame(id);\n        }\n        clearTimeout(id);\n    }\n    function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = startTimer(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n        return maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n    }\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = ()=>{\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    };\n    debounced.flush = ()=>timerId === undefined ? result : trailingEdge(Date.now());\n    debounced.pending = ()=>timerId !== undefined;\n    return debounced;\n}\nconst groupBy = (collection, iteratee)=>{\n    iteratee = getIteratee(iteratee, 2);\n    return reduce(collection, (result, value, key)=>{\n        key = iteratee(value);\n        if (hasOwnProperty.call(result, key)) {\n            result[key].push(value);\n        } else {\n            assignValue(result, key, [\n                value\n            ]);\n        }\n        return result;\n    }, {});\n};\nconst sortBy = (collection, iteratees = [])=>{\n    if (collection == null) {\n        return [];\n    }\n    const length = iteratees.length;\n    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [\n            iteratees[0]\n        ];\n    }\n    if (!Array.isArray(iteratees)) {\n        iteratees = [\n            getIteratee(iteratees, 2)\n        ];\n    }\n    return baseOrderBy(collection, iteratees.flat(1), []);\n};\nconst flattenDeep = (array)=>{\n    const length = array == null ? 0 : array.length;\n    return length ? baseFlatten(array, Infinity) : [];\n};\nconst without = (array, ...values)=>isArrayLike(array) ? diff(array, values) : [];\nconst difference = (array, ...values)=>isObjectLike(array) && isArrayLike(array) ? diff(array, values.flat(1)) : [];\nconst intersection = (...arrays)=>{\n    const mapped = arrays.map((array)=>isObjectLike(array) && isArrayLike(array) ? array : []);\n    return mapped.length && mapped[0] === arrays[0] ? intersect(mapped) : [];\n};\nconst union = (...arrays)=>{\n    const array = arrays.flat(1);\n    return uniq(array);\n};\nconst has = (object, key)=>{\n    if (object == null) {\n        return false;\n    }\n    if (typeof key === \"string\") {\n        key = key.split(\".\");\n    }\n    let index = -1;\n    let value = object;\n    while(++index < key.length){\n        if (!value || !hasOwnProperty.call(value, key[index])) {\n            return false;\n        }\n        value = value[key[index]];\n    }\n    return true;\n};\nconst result = (object, path, defaultValue)=>{\n    path = castPath(path, object);\n    let index = -1;\n    let length = path.length;\n    if (!length) {\n        length = 1;\n        object = undefined;\n    }\n    while(++index < length){\n        let value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n            index = length;\n            value = defaultValue;\n        }\n        object = typeof value === \"function\" ? value.call(object) : value;\n    }\n    return object;\n};\nconst omit = (object, ...paths)=>{\n    let result = {};\n    if (object == null) {\n        return result;\n    }\n    let isDeep = false;\n    paths = paths.flat(1).map((path)=>{\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n    });\n    copyObject(object, getAllKeysIn(object), result);\n    if (isDeep) {\n        result = baseClone(result, true, true, true, (value)=>isPlainObject(value) ? undefined : value);\n    }\n    let length = paths.length;\n    while(length--){\n        unset(result, paths[length]);\n    }\n    return result;\n};\nconst pick = (object, ...paths)=>{\n    return object == null ? {} : basePick(object, paths.flat(Infinity));\n};\nconst bindAll = (object, ...methodNames)=>{\n    methodNames.flat(1).forEach((key)=>{\n        key = toKey(key);\n        assignValue(object, key, object[key].bind(object));\n    });\n    return object;\n};\nconst forIn = (object, iteratee = (value)=>value)=>{\n    let index = -1;\n    const iterable = Object(object);\n    const props = isArrayLike(object) ? arrayLikeKeys(object, true) : keysIn(object);\n    let length = props.length;\n    while(length--){\n        const key = props[++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n        }\n    }\n};\nconst camelCase = (string = \"\")=>words(`${string}`.replace(/['\\u2019]/g, \"\")).reduce((result, word, index)=>{\n        word = word.toLowerCase();\n        return result + (index ? upperFirst(word) : word);\n    }, \"\");\nlet idCounter = 0;\nconst uniqueId = (prefix = \"\")=>{\n    const id = ++idCounter;\n    return `${prefix}` + id;\n};\nconst merge = createAssigner((object, source, srcIndex, customizer)=>{\n    baseMerge(object, source, srcIndex, customizer);\n}, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jointjs/src/util/wrappers.mjs":
/*!****************************************************!*\
  !*** ./node_modules/jointjs/src/util/wrappers.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapWith: () => (/* binding */ wrapWith),\n/* harmony export */   wrappers: () => (/* binding */ wrappers)\n/* harmony export */ });\n/* harmony import */ var _dia_Cell_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dia/Cell.mjs */ \"(ssr)/./node_modules/jointjs/src/dia/Cell.mjs\");\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/jointjs/src/util/utilHelpers.mjs\");\n\n\nconst wrapWith = function(object, methods, wrapper) {\n    if ((0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.isString)(wrapper)) {\n        if (!wrappers[wrapper]) {\n            throw new Error('Unknown wrapper: \"' + wrapper + '\"');\n        }\n        wrapper = wrappers[wrapper];\n    }\n    if (!(0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(wrapper)) {\n        throw new Error(\"Wrapper must be a function.\");\n    }\n    (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.toArray)(methods).forEach(function(method) {\n        object[method] = wrapper(object[method]);\n    });\n};\nconst wrappers = {\n    cells: function(fn) {\n        return function() {\n            var args = Array.from(arguments);\n            var n = args.length;\n            var cells = n > 0 && args[0] || [];\n            var opt = n > 1 && args[n - 1] || {};\n            if (!Array.isArray(cells)) {\n                if (opt instanceof _dia_Cell_mjs__WEBPACK_IMPORTED_MODULE_1__.Cell) {\n                    cells = args;\n                } else if (cells instanceof _dia_Cell_mjs__WEBPACK_IMPORTED_MODULE_1__.Cell) {\n                    if (args.length > 1) {\n                        args.pop();\n                    }\n                    cells = args;\n                }\n            }\n            if (opt instanceof _dia_Cell_mjs__WEBPACK_IMPORTED_MODULE_1__.Cell) {\n                opt = {};\n            }\n            return fn.call(this, cells, opt);\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvam9pbnRqcy9zcmMvdXRpbC93cmFwcGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNvQjtBQUVwRCxNQUFNSSxXQUFXLFNBQVNDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxPQUFPO0lBRXJELElBQUlMLG1EQUFRQSxDQUFDSyxVQUFVO1FBRW5CLElBQUksQ0FBQ0MsUUFBUSxDQUFDRCxRQUFRLEVBQUU7WUFDcEIsTUFBTSxJQUFJRSxNQUFNLHVCQUF1QkYsVUFBVTtRQUNyRDtRQUVBQSxVQUFVQyxRQUFRLENBQUNELFFBQVE7SUFDL0I7SUFFQSxJQUFJLENBQUNOLHFEQUFVQSxDQUFDTSxVQUFVO1FBQ3RCLE1BQU0sSUFBSUUsTUFBTTtJQUNwQjtJQUVBTixrREFBT0EsQ0FBQ0csU0FBU0ksT0FBTyxDQUFDLFNBQVNDLE1BQU07UUFDcENOLE1BQU0sQ0FBQ00sT0FBTyxHQUFHSixRQUFRRixNQUFNLENBQUNNLE9BQU87SUFDM0M7QUFDSixFQUFFO0FBRUssTUFBTUgsV0FBVztJQUVwQkksT0FBTyxTQUFTQyxFQUFFO1FBRWQsT0FBTztZQUVILElBQUlDLE9BQU9DLE1BQU1DLElBQUksQ0FBQ0M7WUFDdEIsSUFBSUMsSUFBSUosS0FBS0ssTUFBTTtZQUNuQixJQUFJUCxRQUFRTSxJQUFJLEtBQUtKLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRTtZQUNsQyxJQUFJTSxNQUFNRixJQUFJLEtBQUtKLElBQUksQ0FBQ0ksSUFBSSxFQUFFLElBQUksQ0FBQztZQUVuQyxJQUFJLENBQUNILE1BQU1NLE9BQU8sQ0FBQ1QsUUFBUTtnQkFFdkIsSUFBSVEsZUFBZXBCLCtDQUFJQSxFQUFFO29CQUNyQlksUUFBUUU7Z0JBQ1osT0FBTyxJQUFJRixpQkFBaUJaLCtDQUFJQSxFQUFFO29CQUM5QixJQUFJYyxLQUFLSyxNQUFNLEdBQUcsR0FBRzt3QkFDakJMLEtBQUtRLEdBQUc7b0JBQ1o7b0JBQ0FWLFFBQVFFO2dCQUNaO1lBQ0o7WUFFQSxJQUFJTSxlQUFlcEIsK0NBQUlBLEVBQUU7Z0JBQ3JCb0IsTUFBTSxDQUFDO1lBQ1g7WUFFQSxPQUFPUCxHQUFHVSxJQUFJLENBQUMsSUFBSSxFQUFFWCxPQUFPUTtRQUNoQztJQUNKO0FBRUosRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL2pvaW50anMvc3JjL3V0aWwvd3JhcHBlcnMubWpzPzdiMjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2VsbCB9IGZyb20gJy4uL2RpYS9DZWxsLm1qcyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uLCBpc1N0cmluZywgdG9BcnJheSB9IGZyb20gJy4vdXRpbC5tanMnO1xuXG5leHBvcnQgY29uc3Qgd3JhcFdpdGggPSBmdW5jdGlvbihvYmplY3QsIG1ldGhvZHMsIHdyYXBwZXIpIHtcblxuICAgIGlmIChpc1N0cmluZyh3cmFwcGVyKSkge1xuXG4gICAgICAgIGlmICghd3JhcHBlcnNbd3JhcHBlcl0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB3cmFwcGVyOiBcIicgKyB3cmFwcGVyICsgJ1wiJyk7XG4gICAgICAgIH1cblxuICAgICAgICB3cmFwcGVyID0gd3JhcHBlcnNbd3JhcHBlcl07XG4gICAgfVxuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHdyYXBwZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignV3JhcHBlciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdG9BcnJheShtZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICBvYmplY3RbbWV0aG9kXSA9IHdyYXBwZXIob2JqZWN0W21ldGhvZF0pO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZXJzID0ge1xuXG4gICAgY2VsbHM6IGZ1bmN0aW9uKGZuKSB7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHZhciBuID0gYXJncy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY2VsbHMgPSBuID4gMCAmJiBhcmdzWzBdIHx8IFtdO1xuICAgICAgICAgICAgdmFyIG9wdCA9IG4gPiAxICYmIGFyZ3NbbiAtIDFdIHx8IHt9O1xuXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2VsbHMpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0IGluc3RhbmNlb2YgQ2VsbCkge1xuICAgICAgICAgICAgICAgICAgICBjZWxscyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxscyBpbnN0YW5jZW9mIENlbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjZWxscyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0IGluc3RhbmNlb2YgQ2VsbCkge1xuICAgICAgICAgICAgICAgIG9wdCA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBjZWxscywgb3B0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbn07XG5cbiJdLCJuYW1lcyI6WyJDZWxsIiwiaXNGdW5jdGlvbiIsImlzU3RyaW5nIiwidG9BcnJheSIsIndyYXBXaXRoIiwib2JqZWN0IiwibWV0aG9kcyIsIndyYXBwZXIiLCJ3cmFwcGVycyIsIkVycm9yIiwiZm9yRWFjaCIsIm1ldGhvZCIsImNlbGxzIiwiZm4iLCJhcmdzIiwiQXJyYXkiLCJmcm9tIiwiYXJndW1lbnRzIiwibiIsImxlbmd0aCIsIm9wdCIsImlzQXJyYXkiLCJwb3AiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jointjs/src/util/wrappers.mjs\n");

/***/ })

};
;