/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/backbone";
exports.ids = ["vendor-chunks/backbone"];
exports.modules = {

/***/ "(ssr)/./node_modules/backbone/backbone.js":
/*!*******************************************!*\
  !*** ./node_modules/backbone/backbone.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.4.1\n//     (c) 2010-2022 Jeremy Ashkenas and DocumentCloud\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n(function(factory) {\n    // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n    // We use `self` instead of `window` for `WebWorker` support.\n    var root = typeof self == \"object\" && self.self === self && self || typeof global == \"object\" && global.global === global && global;\n    // Set up Backbone appropriately for the environment. Start with AMD.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! underscore */ \"(ssr)/./node_modules/underscore/modules/index-all.js\"),\n            __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\"),\n            exports\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, $, exports1) {\n            // Export global even in AMD case in case this script is loaded with\n            // others that may still expect a global Backbone.\n            root.Backbone = factory(root, exports1, _, $);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n    } else { var _, $; }\n})(function(root, Backbone, _, $) {\n    // Initial Setup\n    // -------------\n    // Save the previous value of the `Backbone` variable, so that it can be\n    // restored later on, if `noConflict` is used.\n    var previousBackbone = root.Backbone;\n    // Create a local reference to a common array method we'll want to use later.\n    var slice = Array.prototype.slice;\n    // Current version of the library. Keep in sync with `package.json`.\n    Backbone.VERSION = \"1.4.1\";\n    // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n    // the `$` variable.\n    Backbone.$ = $;\n    // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n    // to its previous owner. Returns a reference to this Backbone object.\n    Backbone.noConflict = function() {\n        root.Backbone = previousBackbone;\n        return this;\n    };\n    // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n    // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n    // set a `X-Http-Method-Override` header.\n    Backbone.emulateHTTP = false;\n    // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n    // `application/json` requests ... this will encode the body as\n    // `application/x-www-form-urlencoded` instead and will send the model in a\n    // form param named `model`.\n    Backbone.emulateJSON = false;\n    // Backbone.Events\n    // ---------------\n    // A module that can be mixed in to *any object* in order to provide it with\n    // a custom event channel. You may bind a callback to an event with `on` or\n    // remove with `off`; `trigger`-ing an event fires all callbacks in\n    // succession.\n    //\n    //     var object = {};\n    //     _.extend(object, Backbone.Events);\n    //     object.on('expand', function(){ alert('expanded'); });\n    //     object.trigger('expand');\n    //\n    var Events = Backbone.Events = {};\n    // Regular expression used to split event strings.\n    var eventSplitter = /\\s+/;\n    // A private global variable to share between listeners and listenees.\n    var _listening;\n    // Iterates over the standard `event, callback` (as well as the fancy multiple\n    // space-separated events `\"change blur\", callback` and jQuery-style event\n    // maps `{event: callback}`).\n    var eventsApi = function(iteratee, events, name, callback, opts) {\n        var i = 0, names;\n        if (name && typeof name === \"object\") {\n            // Handle event maps.\n            if (callback !== void 0 && \"context\" in opts && opts.context === void 0) opts.context = callback;\n            for(names = _.keys(name); i < names.length; i++){\n                events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n            }\n        } else if (name && eventSplitter.test(name)) {\n            // Handle space-separated event names by delegating them individually.\n            for(names = name.split(eventSplitter); i < names.length; i++){\n                events = iteratee(events, names[i], callback, opts);\n            }\n        } else {\n            // Finally, standard events.\n            events = iteratee(events, name, callback, opts);\n        }\n        return events;\n    };\n    // Bind an event to a `callback` function. Passing `\"all\"` will bind\n    // the callback to all events fired.\n    Events.on = function(name, callback, context) {\n        this._events = eventsApi(onApi, this._events || {}, name, callback, {\n            context: context,\n            ctx: this,\n            listening: _listening\n        });\n        if (_listening) {\n            var listeners = this._listeners || (this._listeners = {});\n            listeners[_listening.id] = _listening;\n            // Allow the listening to use a counter, instead of tracking\n            // callbacks for library interop\n            _listening.interop = false;\n        }\n        return this;\n    };\n    // Inversion-of-control versions of `on`. Tell *this* object to listen to\n    // an event in another object... keeping track of what it's listening to\n    // for easier unbinding later.\n    Events.listenTo = function(obj, name, callback) {\n        if (!obj) return this;\n        var id = obj._listenId || (obj._listenId = _.uniqueId(\"l\"));\n        var listeningTo = this._listeningTo || (this._listeningTo = {});\n        var listening = _listening = listeningTo[id];\n        // This object is not listening to any other events on `obj` yet.\n        // Setup the necessary references to track the listening callbacks.\n        if (!listening) {\n            this._listenId || (this._listenId = _.uniqueId(\"l\"));\n            listening = _listening = listeningTo[id] = new Listening(this, obj);\n        }\n        // Bind callbacks on obj.\n        var error = tryCatchOn(obj, name, callback, this);\n        _listening = void 0;\n        if (error) throw error;\n        // If the target obj is not Backbone.Events, track events manually.\n        if (listening.interop) listening.on(name, callback);\n        return this;\n    };\n    // The reducing API that adds a callback to the `events` object.\n    var onApi = function(events, name, callback, options) {\n        if (callback) {\n            var handlers = events[name] || (events[name] = []);\n            var context = options.context, ctx = options.ctx, listening = options.listening;\n            if (listening) listening.count++;\n            handlers.push({\n                callback: callback,\n                context: context,\n                ctx: context || ctx,\n                listening: listening\n            });\n        }\n        return events;\n    };\n    // An try-catch guarded #on function, to prevent poisoning the global\n    // `_listening` variable.\n    var tryCatchOn = function(obj, name, callback, context) {\n        try {\n            obj.on(name, callback, context);\n        } catch (e) {\n            return e;\n        }\n    };\n    // Remove one or many callbacks. If `context` is null, removes all\n    // callbacks with that function. If `callback` is null, removes all\n    // callbacks for the event. If `name` is null, removes all bound\n    // callbacks for all events.\n    Events.off = function(name, callback, context) {\n        if (!this._events) return this;\n        this._events = eventsApi(offApi, this._events, name, callback, {\n            context: context,\n            listeners: this._listeners\n        });\n        return this;\n    };\n    // Tell this object to stop listening to either specific events ... or\n    // to every object it's currently listening to.\n    Events.stopListening = function(obj, name, callback) {\n        var listeningTo = this._listeningTo;\n        if (!listeningTo) return this;\n        var ids = obj ? [\n            obj._listenId\n        ] : _.keys(listeningTo);\n        for(var i = 0; i < ids.length; i++){\n            var listening = listeningTo[ids[i]];\n            // If listening doesn't exist, this object is not currently\n            // listening to obj. Break out early.\n            if (!listening) break;\n            listening.obj.off(name, callback, this);\n            if (listening.interop) listening.off(name, callback);\n        }\n        if (_.isEmpty(listeningTo)) this._listeningTo = void 0;\n        return this;\n    };\n    // The reducing API that removes a callback from the `events` object.\n    var offApi = function(events, name, callback, options) {\n        if (!events) return;\n        var context = options.context, listeners = options.listeners;\n        var i = 0, names;\n        // Delete all event listeners and \"drop\" events.\n        if (!name && !context && !callback) {\n            for(names = _.keys(listeners); i < names.length; i++){\n                listeners[names[i]].cleanup();\n            }\n            return;\n        }\n        names = name ? [\n            name\n        ] : _.keys(events);\n        for(; i < names.length; i++){\n            name = names[i];\n            var handlers = events[name];\n            // Bail out if there are no events stored.\n            if (!handlers) break;\n            // Find any remaining events.\n            var remaining = [];\n            for(var j = 0; j < handlers.length; j++){\n                var handler = handlers[j];\n                if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {\n                    remaining.push(handler);\n                } else {\n                    var listening = handler.listening;\n                    if (listening) listening.off(name, callback);\n                }\n            }\n            // Replace events if there are any remaining.  Otherwise, clean up.\n            if (remaining.length) {\n                events[name] = remaining;\n            } else {\n                delete events[name];\n            }\n        }\n        return events;\n    };\n    // Bind an event to only be triggered a single time. After the first time\n    // the callback is invoked, its listener will be removed. If multiple events\n    // are passed in using the space-separated syntax, the handler will fire\n    // once for each event, not once for a combination of all events.\n    Events.once = function(name, callback, context) {\n        // Map the event into a `{event: once}` object.\n        var events = eventsApi(onceMap, {}, name, callback, this.off.bind(this));\n        if (typeof name === \"string\" && context == null) callback = void 0;\n        return this.on(events, callback, context);\n    };\n    // Inversion-of-control versions of `once`.\n    Events.listenToOnce = function(obj, name, callback) {\n        // Map the event into a `{event: once}` object.\n        var events = eventsApi(onceMap, {}, name, callback, this.stopListening.bind(this, obj));\n        return this.listenTo(obj, events);\n    };\n    // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n    // `offer` unbinds the `onceWrapper` after it has been called.\n    var onceMap = function(map, name, callback, offer) {\n        if (callback) {\n            var once = map[name] = _.once(function() {\n                offer(name, once);\n                callback.apply(this, arguments);\n            });\n            once._callback = callback;\n        }\n        return map;\n    };\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    Events.trigger = function(name) {\n        if (!this._events) return this;\n        var length = Math.max(0, arguments.length - 1);\n        var args = Array(length);\n        for(var i = 0; i < length; i++)args[i] = arguments[i + 1];\n        eventsApi(triggerApi, this._events, name, void 0, args);\n        return this;\n    };\n    // Handles triggering the appropriate event callbacks.\n    var triggerApi = function(objEvents, name, callback, args) {\n        if (objEvents) {\n            var events = objEvents[name];\n            var allEvents = objEvents.all;\n            if (events && allEvents) allEvents = allEvents.slice();\n            if (events) triggerEvents(events, args);\n            if (allEvents) triggerEvents(allEvents, [\n                name\n            ].concat(args));\n        }\n        return objEvents;\n    };\n    // A difficult-to-believe, but optimized internal dispatch function for\n    // triggering events. Tries to keep the usual cases speedy (most internal\n    // Backbone events have 3 arguments).\n    var triggerEvents = function(events, args) {\n        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n        switch(args.length){\n            case 0:\n                while(++i < l)(ev = events[i]).callback.call(ev.ctx);\n                return;\n            case 1:\n                while(++i < l)(ev = events[i]).callback.call(ev.ctx, a1);\n                return;\n            case 2:\n                while(++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);\n                return;\n            case 3:\n                while(++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n                return;\n            default:\n                while(++i < l)(ev = events[i]).callback.apply(ev.ctx, args);\n                return;\n        }\n    };\n    // A listening class that tracks and cleans up memory bindings\n    // when all callbacks have been offed.\n    var Listening = function(listener, obj) {\n        this.id = listener._listenId;\n        this.listener = listener;\n        this.obj = obj;\n        this.interop = true;\n        this.count = 0;\n        this._events = void 0;\n    };\n    Listening.prototype.on = Events.on;\n    // Offs a callback (or several).\n    // Uses an optimized counter if the listenee uses Backbone.Events.\n    // Otherwise, falls back to manual tracking to support events\n    // library interop.\n    Listening.prototype.off = function(name, callback) {\n        var cleanup;\n        if (this.interop) {\n            this._events = eventsApi(offApi, this._events, name, callback, {\n                context: void 0,\n                listeners: void 0\n            });\n            cleanup = !this._events;\n        } else {\n            this.count--;\n            cleanup = this.count === 0;\n        }\n        if (cleanup) this.cleanup();\n    };\n    // Cleans up memory bindings between the listener and the listenee.\n    Listening.prototype.cleanup = function() {\n        delete this.listener._listeningTo[this.obj._listenId];\n        if (!this.interop) delete this.obj._listeners[this.id];\n    };\n    // Aliases for backwards compatibility.\n    Events.bind = Events.on;\n    Events.unbind = Events.off;\n    // Allow the `Backbone` object to serve as a global event bus, for folks who\n    // want global \"pubsub\" in a convenient place.\n    _.extend(Backbone, Events);\n    // Backbone.Model\n    // --------------\n    // Backbone **Models** are the basic data object in the framework --\n    // frequently representing a row in a table in a database on your server.\n    // A discrete chunk of data and a bunch of useful, related methods for\n    // performing computations and transformations on that data.\n    // Create a new model with the specified attributes. A client id (`cid`)\n    // is automatically generated and assigned for you.\n    var Model = Backbone.Model = function(attributes, options) {\n        var attrs = attributes || {};\n        options || (options = {});\n        this.preinitialize.apply(this, arguments);\n        this.cid = _.uniqueId(this.cidPrefix);\n        this.attributes = {};\n        if (options.collection) this.collection = options.collection;\n        if (options.parse) attrs = this.parse(attrs, options) || {};\n        var defaults = _.result(this, \"defaults\");\n        attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n        this.set(attrs, options);\n        this.changed = {};\n        this.initialize.apply(this, arguments);\n    };\n    // Attach all inheritable methods to the Model prototype.\n    _.extend(Model.prototype, Events, {\n        // A hash of attributes whose current and previous value differ.\n        changed: null,\n        // The value returned during the last failed validation.\n        validationError: null,\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n        // CouchDB users may want to set this to `\"_id\"`.\n        idAttribute: \"id\",\n        // The prefix is used to create the client id which is used to identify models locally.\n        // You may want to override this if you're experiencing name clashes with model ids.\n        cidPrefix: \"c\",\n        // preinitialize is an empty function by default. You can override it with a function\n        // or object.  preinitialize will run before any instantiation logic is run in the Model.\n        preinitialize: function() {},\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function() {},\n        // Return a copy of the model's `attributes` object.\n        toJSON: function(options) {\n            return _.clone(this.attributes);\n        },\n        // Proxy `Backbone.sync` by default -- but override this if you need\n        // custom syncing semantics for *this* particular model.\n        sync: function() {\n            return Backbone.sync.apply(this, arguments);\n        },\n        // Get the value of an attribute.\n        get: function(attr) {\n            return this.attributes[attr];\n        },\n        // Get the HTML-escaped value of an attribute.\n        escape: function(attr) {\n            return _.escape(this.get(attr));\n        },\n        // Returns `true` if the attribute contains a value that is not null\n        // or undefined.\n        has: function(attr) {\n            return this.get(attr) != null;\n        },\n        // Special-cased proxy to underscore's `_.matches` method.\n        matches: function(attrs) {\n            return !!_.iteratee(attrs, this)(this.attributes);\n        },\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\n        // the core primitive operation of a model, updating the data and notifying\n        // anyone who needs to know about the change in state. The heart of the beast.\n        set: function(key, val, options) {\n            if (key == null) return this;\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            var attrs;\n            if (typeof key === \"object\") {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n            options || (options = {});\n            // Run validation.\n            if (!this._validate(attrs, options)) return false;\n            // Extract attributes and options.\n            var unset = options.unset;\n            var silent = options.silent;\n            var changes = [];\n            var changing = this._changing;\n            this._changing = true;\n            if (!changing) {\n                this._previousAttributes = _.clone(this.attributes);\n                this.changed = {};\n            }\n            var current = this.attributes;\n            var changed = this.changed;\n            var prev = this._previousAttributes;\n            // For each `set` attribute, update or delete the current value.\n            for(var attr in attrs){\n                val = attrs[attr];\n                if (!_.isEqual(current[attr], val)) changes.push(attr);\n                if (!_.isEqual(prev[attr], val)) {\n                    changed[attr] = val;\n                } else {\n                    delete changed[attr];\n                }\n                unset ? delete current[attr] : current[attr] = val;\n            }\n            // Update the `id`.\n            if (this.idAttribute in attrs) {\n                var prevId = this.id;\n                this.id = this.get(this.idAttribute);\n                this.trigger(\"changeId\", this, prevId, options);\n            }\n            // Trigger all relevant attribute changes.\n            if (!silent) {\n                if (changes.length) this._pending = options;\n                for(var i = 0; i < changes.length; i++){\n                    this.trigger(\"change:\" + changes[i], this, current[changes[i]], options);\n                }\n            }\n            // You might be wondering why there's a `while` loop here. Changes can\n            // be recursively nested within `\"change\"` events.\n            if (changing) return this;\n            if (!silent) {\n                while(this._pending){\n                    options = this._pending;\n                    this._pending = false;\n                    this.trigger(\"change\", this, options);\n                }\n            }\n            this._pending = false;\n            this._changing = false;\n            return this;\n        },\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n        // if the attribute doesn't exist.\n        unset: function(attr, options) {\n            return this.set(attr, void 0, _.extend({}, options, {\n                unset: true\n            }));\n        },\n        // Clear all attributes on the model, firing `\"change\"`.\n        clear: function(options) {\n            var attrs = {};\n            for(var key in this.attributes)attrs[key] = void 0;\n            return this.set(attrs, _.extend({}, options, {\n                unset: true\n            }));\n        },\n        // Determine if the model has changed since the last `\"change\"` event.\n        // If you specify an attribute name, determine if that attribute has changed.\n        hasChanged: function(attr) {\n            if (attr == null) return !_.isEmpty(this.changed);\n            return _.has(this.changed, attr);\n        },\n        // Return an object containing all the attributes that have changed, or\n        // false if there are no changed attributes. Useful for determining what\n        // parts of a view need to be updated and/or what attributes need to be\n        // persisted to the server. Unset attributes will be set to undefined.\n        // You can also pass an attributes object to diff against the model,\n        // determining if there *would be* a change.\n        changedAttributes: function(diff) {\n            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n            var old = this._changing ? this._previousAttributes : this.attributes;\n            var changed = {};\n            var hasChanged;\n            for(var attr in diff){\n                var val = diff[attr];\n                if (_.isEqual(old[attr], val)) continue;\n                changed[attr] = val;\n                hasChanged = true;\n            }\n            return hasChanged ? changed : false;\n        },\n        // Get the previous value of an attribute, recorded at the time the last\n        // `\"change\"` event was fired.\n        previous: function(attr) {\n            if (attr == null || !this._previousAttributes) return null;\n            return this._previousAttributes[attr];\n        },\n        // Get all of the attributes of the model at the time of the previous\n        // `\"change\"` event.\n        previousAttributes: function() {\n            return _.clone(this._previousAttributes);\n        },\n        // Fetch the model from the server, merging the response with the model's\n        // local attributes. Any changed attributes will trigger a \"change\" event.\n        fetch: function(options) {\n            options = _.extend({\n                parse: true\n            }, options);\n            var model = this;\n            var success = options.success;\n            options.success = function(resp) {\n                var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n                if (!model.set(serverAttrs, options)) return false;\n                if (success) success.call(options.context, model, resp, options);\n                model.trigger(\"sync\", model, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync(\"read\", this, options);\n        },\n        // Set a hash of model attributes, and sync the model to the server.\n        // If the server returns an attributes hash that differs, the model's\n        // state will be `set` again.\n        save: function(key, val, options) {\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            var attrs;\n            if (key == null || typeof key === \"object\") {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n            options = _.extend({\n                validate: true,\n                parse: true\n            }, options);\n            var wait = options.wait;\n            // If we're not waiting and attributes exist, save acts as\n            // `set(attr).save(null, opts)` with validation. Otherwise, check if\n            // the model will be valid when the attributes, if any, are set.\n            if (attrs && !wait) {\n                if (!this.set(attrs, options)) return false;\n            } else if (!this._validate(attrs, options)) {\n                return false;\n            }\n            // After a successful server-side save, the client is (optionally)\n            // updated with the server-side state.\n            var model = this;\n            var success = options.success;\n            var attributes = this.attributes;\n            options.success = function(resp) {\n                // Ensure attributes are restored during synchronous saves.\n                model.attributes = attributes;\n                var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n                if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n                if (serverAttrs && !model.set(serverAttrs, options)) return false;\n                if (success) success.call(options.context, model, resp, options);\n                model.trigger(\"sync\", model, resp, options);\n            };\n            wrapError(this, options);\n            // Set temporary attributes if `{wait: true}` to properly find new ids.\n            if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n            var method = this.isNew() ? \"create\" : options.patch ? \"patch\" : \"update\";\n            if (method === \"patch\" && !options.attrs) options.attrs = attrs;\n            var xhr = this.sync(method, this, options);\n            // Restore attributes.\n            this.attributes = attributes;\n            return xhr;\n        },\n        // Destroy this model on the server if it was already persisted.\n        // Optimistically removes the model from its collection, if it has one.\n        // If `wait: true` is passed, waits for the server to respond before removal.\n        destroy: function(options) {\n            options = options ? _.clone(options) : {};\n            var model = this;\n            var success = options.success;\n            var wait = options.wait;\n            var destroy = function() {\n                model.stopListening();\n                model.trigger(\"destroy\", model, model.collection, options);\n            };\n            options.success = function(resp) {\n                if (wait) destroy();\n                if (success) success.call(options.context, model, resp, options);\n                if (!model.isNew()) model.trigger(\"sync\", model, resp, options);\n            };\n            var xhr = false;\n            if (this.isNew()) {\n                _.defer(options.success);\n            } else {\n                wrapError(this, options);\n                xhr = this.sync(\"delete\", this, options);\n            }\n            if (!wait) destroy();\n            return xhr;\n        },\n        // Default URL for the model's representation on the server -- if you're\n        // using Backbone's restful methods, override this to change the endpoint\n        // that will be called.\n        url: function() {\n            var base = _.result(this, \"urlRoot\") || _.result(this.collection, \"url\") || urlError();\n            if (this.isNew()) return base;\n            var id = this.get(this.idAttribute);\n            return base.replace(/[^\\/]$/, \"$&/\") + encodeURIComponent(id);\n        },\n        // **parse** converts a response into the hash of attributes to be `set` on\n        // the model. The default implementation is just to pass the response along.\n        parse: function(resp, options) {\n            return resp;\n        },\n        // Create a new model with identical attributes to this one.\n        clone: function() {\n            return new this.constructor(this.attributes);\n        },\n        // A model is new if it has never been saved to the server, and lacks an id.\n        isNew: function() {\n            return !this.has(this.idAttribute);\n        },\n        // Check if the model is currently in a valid state.\n        isValid: function(options) {\n            return this._validate({}, _.extend({}, options, {\n                validate: true\n            }));\n        },\n        // Run validation against the next complete set of model attributes,\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n        _validate: function(attrs, options) {\n            if (!options.validate || !this.validate) return true;\n            attrs = _.extend({}, this.attributes, attrs);\n            var error = this.validationError = this.validate(attrs, options) || null;\n            if (!error) return true;\n            this.trigger(\"invalid\", this, error, _.extend(options, {\n                validationError: error\n            }));\n            return false;\n        }\n    });\n    // Backbone.Collection\n    // -------------------\n    // If models tend to represent a single row of data, a Backbone Collection is\n    // more analogous to a table full of data ... or a small slice or page of that\n    // table, or a collection of rows that belong together for a particular reason\n    // -- all of the messages in this particular folder, all of the documents\n    // belonging to this particular author, and so on. Collections maintain\n    // indexes of their models, both in order, and for lookup by `id`.\n    // Create a new **Collection**, perhaps to contain a specific type of `model`.\n    // If a `comparator` is specified, the Collection will maintain\n    // its models in sort order, as they're added and removed.\n    var Collection = Backbone.Collection = function(models, options) {\n        options || (options = {});\n        this.preinitialize.apply(this, arguments);\n        if (options.model) this.model = options.model;\n        if (options.comparator !== void 0) this.comparator = options.comparator;\n        this._reset();\n        this.initialize.apply(this, arguments);\n        if (models) this.reset(models, _.extend({\n            silent: true\n        }, options));\n    };\n    // Default options for `Collection#set`.\n    var setOptions = {\n        add: true,\n        remove: true,\n        merge: true\n    };\n    var addOptions = {\n        add: true,\n        remove: false\n    };\n    // Splices `insert` into `array` at index `at`.\n    var splice = function(array, insert, at) {\n        at = Math.min(Math.max(at, 0), array.length);\n        var tail = Array(array.length - at);\n        var length = insert.length;\n        var i;\n        for(i = 0; i < tail.length; i++)tail[i] = array[i + at];\n        for(i = 0; i < length; i++)array[i + at] = insert[i];\n        for(i = 0; i < tail.length; i++)array[i + length + at] = tail[i];\n    };\n    // Define the Collection's inheritable methods.\n    _.extend(Collection.prototype, Events, {\n        // The default model for a collection is just a **Backbone.Model**.\n        // This should be overridden in most cases.\n        model: Model,\n        // preinitialize is an empty function by default. You can override it with a function\n        // or object.  preinitialize will run before any instantiation logic is run in the Collection.\n        preinitialize: function() {},\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function() {},\n        // The JSON representation of a Collection is an array of the\n        // models' attributes.\n        toJSON: function(options) {\n            return this.map(function(model) {\n                return model.toJSON(options);\n            });\n        },\n        // Proxy `Backbone.sync` by default.\n        sync: function() {\n            return Backbone.sync.apply(this, arguments);\n        },\n        // Add a model, or list of models to the set. `models` may be Backbone\n        // Models or raw JavaScript objects to be converted to Models, or any\n        // combination of the two.\n        add: function(models, options) {\n            return this.set(models, _.extend({\n                merge: false\n            }, options, addOptions));\n        },\n        // Remove a model, or a list of models from the set.\n        remove: function(models, options) {\n            options = _.extend({}, options);\n            var singular = !_.isArray(models);\n            models = singular ? [\n                models\n            ] : models.slice();\n            var removed = this._removeModels(models, options);\n            if (!options.silent && removed.length) {\n                options.changes = {\n                    added: [],\n                    merged: [],\n                    removed: removed\n                };\n                this.trigger(\"update\", this, options);\n            }\n            return singular ? removed[0] : removed;\n        },\n        // Update a collection by `set`-ing a new list of models, adding new ones,\n        // removing models that are no longer present, and merging models that\n        // already exist in the collection, as necessary. Similar to **Model#set**,\n        // the core operation for updating the data contained by the collection.\n        set: function(models, options) {\n            if (models == null) return;\n            options = _.extend({}, setOptions, options);\n            if (options.parse && !this._isModel(models)) {\n                models = this.parse(models, options) || [];\n            }\n            var singular = !_.isArray(models);\n            models = singular ? [\n                models\n            ] : models.slice();\n            var at = options.at;\n            if (at != null) at = +at;\n            if (at > this.length) at = this.length;\n            if (at < 0) at += this.length + 1;\n            var set = [];\n            var toAdd = [];\n            var toMerge = [];\n            var toRemove = [];\n            var modelMap = {};\n            var add = options.add;\n            var merge = options.merge;\n            var remove = options.remove;\n            var sort = false;\n            var sortable = this.comparator && at == null && options.sort !== false;\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n            // Turn bare objects into model references, and prevent invalid models\n            // from being added.\n            var model, i;\n            for(i = 0; i < models.length; i++){\n                model = models[i];\n                // If a duplicate is found, prevent it from being added and\n                // optionally merge it into the existing model.\n                var existing = this.get(model);\n                if (existing) {\n                    if (merge && model !== existing) {\n                        var attrs = this._isModel(model) ? model.attributes : model;\n                        if (options.parse) attrs = existing.parse(attrs, options);\n                        existing.set(attrs, options);\n                        toMerge.push(existing);\n                        if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n                    }\n                    if (!modelMap[existing.cid]) {\n                        modelMap[existing.cid] = true;\n                        set.push(existing);\n                    }\n                    models[i] = existing;\n                // If this is a new, valid model, push it to the `toAdd` list.\n                } else if (add) {\n                    model = models[i] = this._prepareModel(model, options);\n                    if (model) {\n                        toAdd.push(model);\n                        this._addReference(model, options);\n                        modelMap[model.cid] = true;\n                        set.push(model);\n                    }\n                }\n            }\n            // Remove stale models.\n            if (remove) {\n                for(i = 0; i < this.length; i++){\n                    model = this.models[i];\n                    if (!modelMap[model.cid]) toRemove.push(model);\n                }\n                if (toRemove.length) this._removeModels(toRemove, options);\n            }\n            // See if sorting is needed, update `length` and splice in new models.\n            var orderChanged = false;\n            var replace = !sortable && add && remove;\n            if (set.length && replace) {\n                orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n                    return m !== set[index];\n                });\n                this.models.length = 0;\n                splice(this.models, set, 0);\n                this.length = this.models.length;\n            } else if (toAdd.length) {\n                if (sortable) sort = true;\n                splice(this.models, toAdd, at == null ? this.length : at);\n                this.length = this.models.length;\n            }\n            // Silently sort the collection if appropriate.\n            if (sort) this.sort({\n                silent: true\n            });\n            // Unless silenced, it's time to fire all appropriate add/sort/update events.\n            if (!options.silent) {\n                for(i = 0; i < toAdd.length; i++){\n                    if (at != null) options.index = at + i;\n                    model = toAdd[i];\n                    model.trigger(\"add\", model, this, options);\n                }\n                if (sort || orderChanged) this.trigger(\"sort\", this, options);\n                if (toAdd.length || toRemove.length || toMerge.length) {\n                    options.changes = {\n                        added: toAdd,\n                        removed: toRemove,\n                        merged: toMerge\n                    };\n                    this.trigger(\"update\", this, options);\n                }\n            }\n            // Return the added (or merged) model (or models).\n            return singular ? models[0] : models;\n        },\n        // When you have more items than you want to add or remove individually,\n        // you can reset the entire set with a new list of models, without firing\n        // any granular `add` or `remove` events. Fires `reset` when finished.\n        // Useful for bulk operations and optimizations.\n        reset: function(models, options) {\n            options = options ? _.clone(options) : {};\n            for(var i = 0; i < this.models.length; i++){\n                this._removeReference(this.models[i], options);\n            }\n            options.previousModels = this.models;\n            this._reset();\n            models = this.add(models, _.extend({\n                silent: true\n            }, options));\n            if (!options.silent) this.trigger(\"reset\", this, options);\n            return models;\n        },\n        // Add a model to the end of the collection.\n        push: function(model, options) {\n            return this.add(model, _.extend({\n                at: this.length\n            }, options));\n        },\n        // Remove a model from the end of the collection.\n        pop: function(options) {\n            var model = this.at(this.length - 1);\n            return this.remove(model, options);\n        },\n        // Add a model to the beginning of the collection.\n        unshift: function(model, options) {\n            return this.add(model, _.extend({\n                at: 0\n            }, options));\n        },\n        // Remove a model from the beginning of the collection.\n        shift: function(options) {\n            var model = this.at(0);\n            return this.remove(model, options);\n        },\n        // Slice out a sub-array of models from the collection.\n        slice: function() {\n            return slice.apply(this.models, arguments);\n        },\n        // Get a model from the set by id, cid, model object with id or cid\n        // properties, or an attributes object that is transformed through modelId.\n        get: function(obj) {\n            if (obj == null) return void 0;\n            return this._byId[obj] || this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj, obj.idAttribute)] || obj.cid && this._byId[obj.cid];\n        },\n        // Returns `true` if the model is in the collection.\n        has: function(obj) {\n            return this.get(obj) != null;\n        },\n        // Get the model at the given index.\n        at: function(index) {\n            if (index < 0) index += this.length;\n            return this.models[index];\n        },\n        // Return models with matching attributes. Useful for simple cases of\n        // `filter`.\n        where: function(attrs, first) {\n            return this[first ? \"find\" : \"filter\"](attrs);\n        },\n        // Return the first model with matching attributes. Useful for simple cases\n        // of `find`.\n        findWhere: function(attrs) {\n            return this.where(attrs, true);\n        },\n        // Force the collection to re-sort itself. You don't need to call this under\n        // normal circumstances, as the set will maintain sort order as each item\n        // is added.\n        sort: function(options) {\n            var comparator = this.comparator;\n            if (!comparator) throw new Error(\"Cannot sort a set without a comparator\");\n            options || (options = {});\n            var length = comparator.length;\n            if (_.isFunction(comparator)) comparator = comparator.bind(this);\n            // Run sort based on type of `comparator`.\n            if (length === 1 || _.isString(comparator)) {\n                this.models = this.sortBy(comparator);\n            } else {\n                this.models.sort(comparator);\n            }\n            if (!options.silent) this.trigger(\"sort\", this, options);\n            return this;\n        },\n        // Pluck an attribute from each model in the collection.\n        pluck: function(attr) {\n            return this.map(attr + \"\");\n        },\n        // Fetch the default set of models for this collection, resetting the\n        // collection when they arrive. If `reset: true` is passed, the response\n        // data will be passed through the `reset` method instead of `set`.\n        fetch: function(options) {\n            options = _.extend({\n                parse: true\n            }, options);\n            var success = options.success;\n            var collection = this;\n            options.success = function(resp) {\n                var method = options.reset ? \"reset\" : \"set\";\n                collection[method](resp, options);\n                if (success) success.call(options.context, collection, resp, options);\n                collection.trigger(\"sync\", collection, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync(\"read\", this, options);\n        },\n        // Create a new instance of a model in this collection. Add the model to the\n        // collection immediately, unless `wait: true` is passed, in which case we\n        // wait for the server to agree.\n        create: function(model, options) {\n            options = options ? _.clone(options) : {};\n            var wait = options.wait;\n            model = this._prepareModel(model, options);\n            if (!model) return false;\n            if (!wait) this.add(model, options);\n            var collection = this;\n            var success = options.success;\n            options.success = function(m, resp, callbackOpts) {\n                if (wait) collection.add(m, callbackOpts);\n                if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n            };\n            model.save(null, options);\n            return model;\n        },\n        // **parse** converts a response into a list of models to be added to the\n        // collection. The default implementation is just to pass it through.\n        parse: function(resp, options) {\n            return resp;\n        },\n        // Create a new collection with an identical list of models as this one.\n        clone: function() {\n            return new this.constructor(this.models, {\n                model: this.model,\n                comparator: this.comparator\n            });\n        },\n        // Define how to uniquely identify models in the collection.\n        modelId: function(attrs, idAttribute) {\n            return attrs[idAttribute || this.model.prototype.idAttribute || \"id\"];\n        },\n        // Get an iterator of all models in this collection.\n        values: function() {\n            return new CollectionIterator(this, ITERATOR_VALUES);\n        },\n        // Get an iterator of all model IDs in this collection.\n        keys: function() {\n            return new CollectionIterator(this, ITERATOR_KEYS);\n        },\n        // Get an iterator of all [ID, model] tuples in this collection.\n        entries: function() {\n            return new CollectionIterator(this, ITERATOR_KEYSVALUES);\n        },\n        // Private method to reset all internal state. Called when the collection\n        // is first initialized or reset.\n        _reset: function() {\n            this.length = 0;\n            this.models = [];\n            this._byId = {};\n        },\n        // Prepare a hash of attributes (or other model) to be added to this\n        // collection.\n        _prepareModel: function(attrs, options) {\n            if (this._isModel(attrs)) {\n                if (!attrs.collection) attrs.collection = this;\n                return attrs;\n            }\n            options = options ? _.clone(options) : {};\n            options.collection = this;\n            var model;\n            if (this.model.prototype) {\n                model = new this.model(attrs, options);\n            } else {\n                // ES class methods didn't have prototype\n                model = this.model(attrs, options);\n            }\n            if (!model.validationError) return model;\n            this.trigger(\"invalid\", this, model.validationError, options);\n            return false;\n        },\n        // Internal method called by both remove and set.\n        _removeModels: function(models, options) {\n            var removed = [];\n            for(var i = 0; i < models.length; i++){\n                var model = this.get(models[i]);\n                if (!model) continue;\n                var index = this.indexOf(model);\n                this.models.splice(index, 1);\n                this.length--;\n                // Remove references before triggering 'remove' event to prevent an\n                // infinite loop. #3693\n                delete this._byId[model.cid];\n                var id = this.modelId(model.attributes, model.idAttribute);\n                if (id != null) delete this._byId[id];\n                if (!options.silent) {\n                    options.index = index;\n                    model.trigger(\"remove\", model, this, options);\n                }\n                removed.push(model);\n                this._removeReference(model, options);\n            }\n            return removed;\n        },\n        // Method for checking whether an object should be considered a model for\n        // the purposes of adding to the collection.\n        _isModel: function(model) {\n            return model instanceof Model;\n        },\n        // Internal method to create a model's ties to a collection.\n        _addReference: function(model, options) {\n            this._byId[model.cid] = model;\n            var id = this.modelId(model.attributes, model.idAttribute);\n            if (id != null) this._byId[id] = model;\n            model.on(\"all\", this._onModelEvent, this);\n        },\n        // Internal method to sever a model's ties to a collection.\n        _removeReference: function(model, options) {\n            delete this._byId[model.cid];\n            var id = this.modelId(model.attributes, model.idAttribute);\n            if (id != null) delete this._byId[id];\n            if (this === model.collection) delete model.collection;\n            model.off(\"all\", this._onModelEvent, this);\n        },\n        // Internal method called every time a model in the set fires an event.\n        // Sets need to update their indexes when models change ids. All other\n        // events simply proxy through. \"add\" and \"remove\" events that originate\n        // in other collections are ignored.\n        _onModelEvent: function(event, model, collection, options) {\n            if (model) {\n                if ((event === \"add\" || event === \"remove\") && collection !== this) return;\n                if (event === \"destroy\") this.remove(model, options);\n                if (event === \"changeId\") {\n                    var prevId = this.modelId(model.previousAttributes(), model.idAttribute);\n                    var id = this.modelId(model.attributes, model.idAttribute);\n                    if (prevId != null) delete this._byId[prevId];\n                    if (id != null) this._byId[id] = model;\n                }\n            }\n            this.trigger.apply(this, arguments);\n        }\n    });\n    // Defining an @@iterator method implements JavaScript's Iterable protocol.\n    // In modern ES2015 browsers, this value is found at Symbol.iterator.\n    /* global Symbol */ var $$iterator = typeof Symbol === \"function\" && Symbol.iterator;\n    if ($$iterator) {\n        Collection.prototype[$$iterator] = Collection.prototype.values;\n    }\n    // CollectionIterator\n    // ------------------\n    // A CollectionIterator implements JavaScript's Iterator protocol, allowing the\n    // use of `for of` loops in modern browsers and interoperation between\n    // Backbone.Collection and other JavaScript functions and third-party libraries\n    // which can operate on Iterables.\n    var CollectionIterator = function(collection, kind) {\n        this._collection = collection;\n        this._kind = kind;\n        this._index = 0;\n    };\n    // This \"enum\" defines the three possible kinds of values which can be emitted\n    // by a CollectionIterator that correspond to the values(), keys() and entries()\n    // methods on Collection, respectively.\n    var ITERATOR_VALUES = 1;\n    var ITERATOR_KEYS = 2;\n    var ITERATOR_KEYSVALUES = 3;\n    // All Iterators should themselves be Iterable.\n    if ($$iterator) {\n        CollectionIterator.prototype[$$iterator] = function() {\n            return this;\n        };\n    }\n    CollectionIterator.prototype.next = function() {\n        if (this._collection) {\n            // Only continue iterating if the iterated collection is long enough.\n            if (this._index < this._collection.length) {\n                var model = this._collection.at(this._index);\n                this._index++;\n                // Construct a value depending on what kind of values should be iterated.\n                var value;\n                if (this._kind === ITERATOR_VALUES) {\n                    value = model;\n                } else {\n                    var id = this._collection.modelId(model.attributes, model.idAttribute);\n                    if (this._kind === ITERATOR_KEYS) {\n                        value = id;\n                    } else {\n                        value = [\n                            id,\n                            model\n                        ];\n                    }\n                }\n                return {\n                    value: value,\n                    done: false\n                };\n            }\n            // Once exhausted, remove the reference to the collection so future\n            // calls to the next method always return done.\n            this._collection = void 0;\n        }\n        return {\n            value: void 0,\n            done: true\n        };\n    };\n    // Backbone.View\n    // -------------\n    // Backbone Views are almost more convention than they are actual code. A View\n    // is simply a JavaScript object that represents a logical chunk of UI in the\n    // DOM. This might be a single item, an entire list, a sidebar or panel, or\n    // even the surrounding frame which wraps your whole app. Defining a chunk of\n    // UI as a **View** allows you to define your DOM events declaratively, without\n    // having to worry about render order ... and makes it easy for the view to\n    // react to specific changes in the state of your models.\n    // Creating a Backbone.View creates its initial element outside of the DOM,\n    // if an existing element is not provided...\n    var View = Backbone.View = function(options) {\n        this.cid = _.uniqueId(\"view\");\n        this.preinitialize.apply(this, arguments);\n        _.extend(this, _.pick(options, viewOptions));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n    };\n    // Cached regex to split keys for `delegate`.\n    var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n    // List of view options to be set as properties.\n    var viewOptions = [\n        \"model\",\n        \"collection\",\n        \"el\",\n        \"id\",\n        \"attributes\",\n        \"className\",\n        \"tagName\",\n        \"events\"\n    ];\n    // Set up all inheritable **Backbone.View** properties and methods.\n    _.extend(View.prototype, Events, {\n        // The default `tagName` of a View's element is `\"div\"`.\n        tagName: \"div\",\n        // jQuery delegate for element lookup, scoped to DOM elements within the\n        // current view. This should be preferred to global lookups where possible.\n        $: function(selector) {\n            return this.$el.find(selector);\n        },\n        // preinitialize is an empty function by default. You can override it with a function\n        // or object.  preinitialize will run before any instantiation logic is run in the View\n        preinitialize: function() {},\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function() {},\n        // **render** is the core function that your view should override, in order\n        // to populate its element (`this.el`), with the appropriate HTML. The\n        // convention is for **render** to always return `this`.\n        render: function() {\n            return this;\n        },\n        // Remove this view by taking the element out of the DOM, and removing any\n        // applicable Backbone.Events listeners.\n        remove: function() {\n            this._removeElement();\n            this.stopListening();\n            return this;\n        },\n        // Remove this view's element from the document and all event listeners\n        // attached to it. Exposed for subclasses using an alternative DOM\n        // manipulation API.\n        _removeElement: function() {\n            this.$el.remove();\n        },\n        // Change the view's element (`this.el` property) and re-delegate the\n        // view's events on the new element.\n        setElement: function(element) {\n            this.undelegateEvents();\n            this._setElement(element);\n            this.delegateEvents();\n            return this;\n        },\n        // Creates the `this.el` and `this.$el` references for this view using the\n        // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n        // context or an element. Subclasses can override this to utilize an\n        // alternative DOM manipulation API and are only required to set the\n        // `this.el` property.\n        _setElement: function(el) {\n            this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n            this.el = this.$el[0];\n        },\n        // Set callbacks, where `this.events` is a hash of\n        //\n        // *{\"event selector\": \"callback\"}*\n        //\n        //     {\n        //       'mousedown .title':  'edit',\n        //       'click .button':     'save',\n        //       'click .open':       function(e) { ... }\n        //     }\n        //\n        // pairs. Callbacks will be bound to the view, with `this` set properly.\n        // Uses event delegation for efficiency.\n        // Omitting the selector binds the event to `this.el`.\n        delegateEvents: function(events) {\n            events || (events = _.result(this, \"events\"));\n            if (!events) return this;\n            this.undelegateEvents();\n            for(var key in events){\n                var method = events[key];\n                if (!_.isFunction(method)) method = this[method];\n                if (!method) continue;\n                var match = key.match(delegateEventSplitter);\n                this.delegate(match[1], match[2], method.bind(this));\n            }\n            return this;\n        },\n        // Add a single event listener to the view's element (or a child element\n        // using `selector`). This only works for delegate-able events: not `focus`,\n        // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n        delegate: function(eventName, selector, listener) {\n            this.$el.on(eventName + \".delegateEvents\" + this.cid, selector, listener);\n            return this;\n        },\n        // Clears all callbacks previously bound to the view by `delegateEvents`.\n        // You usually don't need to use this, but may wish to if you have multiple\n        // Backbone views attached to the same DOM element.\n        undelegateEvents: function() {\n            if (this.$el) this.$el.off(\".delegateEvents\" + this.cid);\n            return this;\n        },\n        // A finer-grained `undelegateEvents` for removing a single delegated event.\n        // `selector` and `listener` are both optional.\n        undelegate: function(eventName, selector, listener) {\n            this.$el.off(eventName + \".delegateEvents\" + this.cid, selector, listener);\n            return this;\n        },\n        // Produces a DOM element to be assigned to your view. Exposed for\n        // subclasses using an alternative DOM manipulation API.\n        _createElement: function(tagName) {\n            return document.createElement(tagName);\n        },\n        // Ensure that the View has a DOM element to render into.\n        // If `this.el` is a string, pass it through `$()`, take the first\n        // matching element, and re-assign it to `el`. Otherwise, create\n        // an element from the `id`, `className` and `tagName` properties.\n        _ensureElement: function() {\n            if (!this.el) {\n                var attrs = _.extend({}, _.result(this, \"attributes\"));\n                if (this.id) attrs.id = _.result(this, \"id\");\n                if (this.className) attrs[\"class\"] = _.result(this, \"className\");\n                this.setElement(this._createElement(_.result(this, \"tagName\")));\n                this._setAttributes(attrs);\n            } else {\n                this.setElement(_.result(this, \"el\"));\n            }\n        },\n        // Set attributes from a hash on this view's element.  Exposed for\n        // subclasses using an alternative DOM manipulation API.\n        _setAttributes: function(attributes) {\n            this.$el.attr(attributes);\n        }\n    });\n    // Proxy Backbone class methods to Underscore functions, wrapping the model's\n    // `attributes` object or collection's `models` array behind the scenes.\n    //\n    // collection.filter(function(model) { return model.get('age') > 10 });\n    // collection.each(this.addView);\n    //\n    // `Function#apply` can be slow so we use the method's arg count, if we know it.\n    var addMethod = function(base, length, method, attribute) {\n        switch(length){\n            case 1:\n                return function() {\n                    return base[method](this[attribute]);\n                };\n            case 2:\n                return function(value) {\n                    return base[method](this[attribute], value);\n                };\n            case 3:\n                return function(iteratee, context) {\n                    return base[method](this[attribute], cb(iteratee, this), context);\n                };\n            case 4:\n                return function(iteratee, defaultVal, context) {\n                    return base[method](this[attribute], cb(iteratee, this), defaultVal, context);\n                };\n            default:\n                return function() {\n                    var args = slice.call(arguments);\n                    args.unshift(this[attribute]);\n                    return base[method].apply(base, args);\n                };\n        }\n    };\n    var addUnderscoreMethods = function(Class, base, methods, attribute) {\n        _.each(methods, function(length, method) {\n            if (base[method]) Class.prototype[method] = addMethod(base, length, method, attribute);\n        });\n    };\n    // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n    var cb = function(iteratee, instance) {\n        if (_.isFunction(iteratee)) return iteratee;\n        if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n        if (_.isString(iteratee)) return function(model) {\n            return model.get(iteratee);\n        };\n        return iteratee;\n    };\n    var modelMatcher = function(attrs) {\n        var matcher = _.matches(attrs);\n        return function(model) {\n            return matcher(model.attributes);\n        };\n    };\n    // Underscore methods that we want to implement on the Collection.\n    // 90% of the core usefulness of Backbone Collections is actually implemented\n    // right here:\n    var collectionMethods = {\n        forEach: 3,\n        each: 3,\n        map: 3,\n        collect: 3,\n        reduce: 0,\n        foldl: 0,\n        inject: 0,\n        reduceRight: 0,\n        foldr: 0,\n        find: 3,\n        detect: 3,\n        filter: 3,\n        select: 3,\n        reject: 3,\n        every: 3,\n        all: 3,\n        some: 3,\n        any: 3,\n        include: 3,\n        includes: 3,\n        contains: 3,\n        invoke: 0,\n        max: 3,\n        min: 3,\n        toArray: 1,\n        size: 1,\n        first: 3,\n        head: 3,\n        take: 3,\n        initial: 3,\n        rest: 3,\n        tail: 3,\n        drop: 3,\n        last: 3,\n        without: 0,\n        difference: 0,\n        indexOf: 3,\n        shuffle: 1,\n        lastIndexOf: 3,\n        isEmpty: 1,\n        chain: 1,\n        sample: 3,\n        partition: 3,\n        groupBy: 3,\n        countBy: 3,\n        sortBy: 3,\n        indexBy: 3,\n        findIndex: 3,\n        findLastIndex: 3\n    };\n    // Underscore methods that we want to implement on the Model, mapped to the\n    // number of arguments they take.\n    var modelMethods = {\n        keys: 1,\n        values: 1,\n        pairs: 1,\n        invert: 1,\n        pick: 0,\n        omit: 0,\n        chain: 1,\n        isEmpty: 1\n    };\n    // Mix in each Underscore method as a proxy to `Collection#models`.\n    _.each([\n        [\n            Collection,\n            collectionMethods,\n            \"models\"\n        ],\n        [\n            Model,\n            modelMethods,\n            \"attributes\"\n        ]\n    ], function(config) {\n        var Base = config[0], methods = config[1], attribute = config[2];\n        Base.mixin = function(obj) {\n            var mappings = _.reduce(_.functions(obj), function(memo, name) {\n                memo[name] = 0;\n                return memo;\n            }, {});\n            addUnderscoreMethods(Base, obj, mappings, attribute);\n        };\n        addUnderscoreMethods(Base, _, methods, attribute);\n    });\n    // Backbone.sync\n    // -------------\n    // Override this function to change the manner in which Backbone persists\n    // models to the server. You will be passed the type of request, and the\n    // model in question. By default, makes a RESTful Ajax request\n    // to the model's `url()`. Some possible customizations could be:\n    //\n    // * Use `setTimeout` to batch rapid-fire updates into a single request.\n    // * Send up the models as XML instead of JSON.\n    // * Persist models via WebSockets instead of Ajax.\n    //\n    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n    // as `POST`, with a `_method` parameter containing the true HTTP method,\n    // as well as all requests with the body as `application/x-www-form-urlencoded`\n    // instead of `application/json` with the model in a param named `model`.\n    // Useful when interfacing with server-side languages like **PHP** that make\n    // it difficult to read the body of `PUT` requests.\n    Backbone.sync = function(method, model, options) {\n        var type = methodMap[method];\n        // Default options, unless specified.\n        _.defaults(options || (options = {}), {\n            emulateHTTP: Backbone.emulateHTTP,\n            emulateJSON: Backbone.emulateJSON\n        });\n        // Default JSON-request options.\n        var params = {\n            type: type,\n            dataType: \"json\"\n        };\n        // Ensure that we have a URL.\n        if (!options.url) {\n            params.url = _.result(model, \"url\") || urlError();\n        }\n        // Ensure that we have the appropriate request data.\n        if (options.data == null && model && (method === \"create\" || method === \"update\" || method === \"patch\")) {\n            params.contentType = \"application/json\";\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\n        }\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\n        if (options.emulateJSON) {\n            params.contentType = \"application/x-www-form-urlencoded\";\n            params.data = params.data ? {\n                model: params.data\n            } : {};\n        }\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n        // And an `X-HTTP-Method-Override` header.\n        if (options.emulateHTTP && (type === \"PUT\" || type === \"DELETE\" || type === \"PATCH\")) {\n            params.type = \"POST\";\n            if (options.emulateJSON) params.data._method = type;\n            var beforeSend = options.beforeSend;\n            options.beforeSend = function(xhr) {\n                xhr.setRequestHeader(\"X-HTTP-Method-Override\", type);\n                if (beforeSend) return beforeSend.apply(this, arguments);\n            };\n        }\n        // Don't process data on a non-GET request.\n        if (params.type !== \"GET\" && !options.emulateJSON) {\n            params.processData = false;\n        }\n        // Pass along `textStatus` and `errorThrown` from jQuery.\n        var error = options.error;\n        options.error = function(xhr, textStatus, errorThrown) {\n            options.textStatus = textStatus;\n            options.errorThrown = errorThrown;\n            if (error) error.call(options.context, xhr, textStatus, errorThrown);\n        };\n        // Make the request, allowing the user to override any Ajax options.\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n        model.trigger(\"request\", model, xhr, options);\n        return xhr;\n    };\n    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n    var methodMap = {\n        \"create\": \"POST\",\n        \"update\": \"PUT\",\n        \"patch\": \"PATCH\",\n        \"delete\": \"DELETE\",\n        \"read\": \"GET\"\n    };\n    // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n    // Override this if you'd like to use a different library.\n    Backbone.ajax = function() {\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\n    };\n    // Backbone.Router\n    // ---------------\n    // Routers map faux-URLs to actions, and fire events when routes are\n    // matched. Creating a new one sets its `routes` hash, if not set statically.\n    var Router = Backbone.Router = function(options) {\n        options || (options = {});\n        this.preinitialize.apply(this, arguments);\n        if (options.routes) this.routes = options.routes;\n        this._bindRoutes();\n        this.initialize.apply(this, arguments);\n    };\n    // Cached regular expressions for matching named param parts and splatted\n    // parts of route strings.\n    var optionalParam = /\\((.*?)\\)/g;\n    var namedParam = /(\\(\\?)?:\\w+/g;\n    var splatParam = /\\*\\w+/g;\n    var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n    // Set up all inheritable **Backbone.Router** properties and methods.\n    _.extend(Router.prototype, Events, {\n        // preinitialize is an empty function by default. You can override it with a function\n        // or object.  preinitialize will run before any instantiation logic is run in the Router.\n        preinitialize: function() {},\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function() {},\n        // Manually bind a single named route to a callback. For example:\n        //\n        //     this.route('search/:query/p:num', 'search', function(query, num) {\n        //       ...\n        //     });\n        //\n        route: function(route, name, callback) {\n            if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n            if (_.isFunction(name)) {\n                callback = name;\n                name = \"\";\n            }\n            if (!callback) callback = this[name];\n            var router = this;\n            Backbone.history.route(route, function(fragment) {\n                var args = router._extractParameters(route, fragment);\n                if (router.execute(callback, args, name) !== false) {\n                    router.trigger.apply(router, [\n                        \"route:\" + name\n                    ].concat(args));\n                    router.trigger(\"route\", name, args);\n                    Backbone.history.trigger(\"route\", router, name, args);\n                }\n            });\n            return this;\n        },\n        // Execute a route handler with the provided parameters.  This is an\n        // excellent place to do pre-route setup or post-route cleanup.\n        execute: function(callback, args, name) {\n            if (callback) callback.apply(this, args);\n        },\n        // Simple proxy to `Backbone.history` to save a fragment into the history.\n        navigate: function(fragment, options) {\n            Backbone.history.navigate(fragment, options);\n            return this;\n        },\n        // Bind all defined routes to `Backbone.history`. We have to reverse the\n        // order of the routes here to support behavior where the most general\n        // routes can be defined at the bottom of the route map.\n        _bindRoutes: function() {\n            if (!this.routes) return;\n            this.routes = _.result(this, \"routes\");\n            var route, routes = _.keys(this.routes);\n            while((route = routes.pop()) != null){\n                this.route(route, this.routes[route]);\n            }\n        },\n        // Convert a route string into a regular expression, suitable for matching\n        // against the current location hash.\n        _routeToRegExp: function(route) {\n            route = route.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, function(match, optional) {\n                return optional ? match : \"([^/?]+)\";\n            }).replace(splatParam, \"([^?]*?)\");\n            return new RegExp(\"^\" + route + \"(?:\\\\?([\\\\s\\\\S]*))?$\");\n        },\n        // Given a route, and a URL fragment that it matches, return the array of\n        // extracted decoded parameters. Empty or unmatched parameters will be\n        // treated as `null` to normalize cross-browser behavior.\n        _extractParameters: function(route, fragment) {\n            var params = route.exec(fragment).slice(1);\n            return _.map(params, function(param, i) {\n                // Don't decode the search params.\n                if (i === params.length - 1) return param || null;\n                return param ? decodeURIComponent(param) : null;\n            });\n        }\n    });\n    // Backbone.History\n    // ----------------\n    // Handles cross-browser history management, based on either\n    // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n    // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n    // and URL fragments. If the browser supports neither (old IE, natch),\n    // falls back to polling.\n    var History = Backbone.History = function() {\n        this.handlers = [];\n        this.checkUrl = this.checkUrl.bind(this);\n        // Ensure that `History` can be used outside of the browser.\n        if (false) {}\n    };\n    // Cached regex for stripping a leading hash/slash and trailing space.\n    var routeStripper = /^[#\\/]|\\s+$/g;\n    // Cached regex for stripping leading and trailing slashes.\n    var rootStripper = /^\\/+|\\/+$/g;\n    // Cached regex for stripping urls of hash.\n    var pathStripper = /#.*$/;\n    // Has the history handling already been started?\n    History.started = false;\n    // Set up all inheritable **Backbone.History** properties and methods.\n    _.extend(History.prototype, Events, {\n        // The default interval to poll for hash changes, if necessary, is\n        // twenty times a second.\n        interval: 50,\n        // Are we at the app root?\n        atRoot: function() {\n            var path = this.location.pathname.replace(/[^\\/]$/, \"$&/\");\n            return path === this.root && !this.getSearch();\n        },\n        // Does the pathname match the root?\n        matchRoot: function() {\n            var path = this.decodeFragment(this.location.pathname);\n            var rootPath = path.slice(0, this.root.length - 1) + \"/\";\n            return rootPath === this.root;\n        },\n        // Unicode characters in `location.pathname` are percent encoded so they're\n        // decoded for comparison. `%25` should not be decoded since it may be part\n        // of an encoded parameter.\n        decodeFragment: function(fragment) {\n            return decodeURI(fragment.replace(/%25/g, \"%2525\"));\n        },\n        // In IE6, the hash fragment and search params are incorrect if the\n        // fragment contains `?`.\n        getSearch: function() {\n            var match = this.location.href.replace(/#.*/, \"\").match(/\\?.+/);\n            return match ? match[0] : \"\";\n        },\n        // Gets the true hash value. Cannot use location.hash directly due to bug\n        // in Firefox where location.hash will always be decoded.\n        getHash: function(window1) {\n            var match = (window1 || this).location.href.match(/#(.*)$/);\n            return match ? match[1] : \"\";\n        },\n        // Get the pathname and search params, without the root.\n        getPath: function() {\n            var path = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);\n            return path.charAt(0) === \"/\" ? path.slice(1) : path;\n        },\n        // Get the cross-browser normalized URL fragment from the path or hash.\n        getFragment: function(fragment) {\n            if (fragment == null) {\n                if (this._usePushState || !this._wantsHashChange) {\n                    fragment = this.getPath();\n                } else {\n                    fragment = this.getHash();\n                }\n            }\n            return fragment.replace(routeStripper, \"\");\n        },\n        // Start the hash change handling, returning `true` if the current URL matches\n        // an existing route, and `false` otherwise.\n        start: function(options) {\n            if (History.started) throw new Error(\"Backbone.history has already been started\");\n            History.started = true;\n            // Figure out the initial configuration. Do we need an iframe?\n            // Is pushState desired ... is it available?\n            this.options = _.extend({\n                root: \"/\"\n            }, this.options, options);\n            this.root = this.options.root;\n            this._wantsHashChange = this.options.hashChange !== false;\n            this._hasHashChange = \"onhashchange\" in window && (document.documentMode === void 0 || document.documentMode > 7);\n            this._useHashChange = this._wantsHashChange && this._hasHashChange;\n            this._wantsPushState = !!this.options.pushState;\n            this._hasPushState = !!(this.history && this.history.pushState);\n            this._usePushState = this._wantsPushState && this._hasPushState;\n            this.fragment = this.getFragment();\n            // Normalize root to always include a leading and trailing slash.\n            this.root = (\"/\" + this.root + \"/\").replace(rootStripper, \"/\");\n            // Transition from hashChange to pushState or vice versa if both are\n            // requested.\n            if (this._wantsHashChange && this._wantsPushState) {\n                // If we've started off with a route from a `pushState`-enabled\n                // browser, but we're currently in a browser that doesn't support it...\n                if (!this._hasPushState && !this.atRoot()) {\n                    var rootPath = this.root.slice(0, -1) || \"/\";\n                    this.location.replace(rootPath + \"#\" + this.getPath());\n                    // Return immediately as browser will do redirect to new url\n                    return true;\n                // Or if we've started out with a hash-based route, but we're currently\n                // in a browser where it could be `pushState`-based instead...\n                } else if (this._hasPushState && this.atRoot()) {\n                    this.navigate(this.getHash(), {\n                        replace: true\n                    });\n                }\n            }\n            // Proxy an iframe to handle location events if the browser doesn't\n            // support the `hashchange` event, HTML5 history, or the user wants\n            // `hashChange` but not `pushState`.\n            if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n                this.iframe = document.createElement(\"iframe\");\n                this.iframe.src = \"javascript:0\";\n                this.iframe.style.display = \"none\";\n                this.iframe.tabIndex = -1;\n                var body = document.body;\n                // Using `appendChild` will throw on IE < 9 if the document is not ready.\n                var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n                iWindow.document.open();\n                iWindow.document.close();\n                iWindow.location.hash = \"#\" + this.fragment;\n            }\n            // Add a cross-platform `addEventListener` shim for older browsers.\n            var addEventListener = window.addEventListener || function(eventName, listener) {\n                return attachEvent(\"on\" + eventName, listener);\n            };\n            // Depending on whether we're using pushState or hashes, and whether\n            // 'onhashchange' is supported, determine how we check the URL state.\n            if (this._usePushState) {\n                addEventListener(\"popstate\", this.checkUrl, false);\n            } else if (this._useHashChange && !this.iframe) {\n                addEventListener(\"hashchange\", this.checkUrl, false);\n            } else if (this._wantsHashChange) {\n                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n            }\n            if (!this.options.silent) return this.loadUrl();\n        },\n        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n        // but possibly useful for unit testing Routers.\n        stop: function() {\n            // Add a cross-platform `removeEventListener` shim for older browsers.\n            var removeEventListener = window.removeEventListener || function(eventName, listener) {\n                return detachEvent(\"on\" + eventName, listener);\n            };\n            // Remove window listeners.\n            if (this._usePushState) {\n                removeEventListener(\"popstate\", this.checkUrl, false);\n            } else if (this._useHashChange && !this.iframe) {\n                removeEventListener(\"hashchange\", this.checkUrl, false);\n            }\n            // Clean up the iframe if necessary.\n            if (this.iframe) {\n                document.body.removeChild(this.iframe);\n                this.iframe = null;\n            }\n            // Some environments will throw when clearing an undefined interval.\n            if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n            History.started = false;\n        },\n        // Add a route to be tested when the fragment changes. Routes added later\n        // may override previous routes.\n        route: function(route, callback) {\n            this.handlers.unshift({\n                route: route,\n                callback: callback\n            });\n        },\n        // Checks the current URL to see if it has changed, and if it has,\n        // calls `loadUrl`, normalizing across the hidden iframe.\n        checkUrl: function(e) {\n            var current = this.getFragment();\n            // If the user pressed the back button, the iframe's hash will have\n            // changed and we should use that for comparison.\n            if (current === this.fragment && this.iframe) {\n                current = this.getHash(this.iframe.contentWindow);\n            }\n            if (current === this.fragment) return false;\n            if (this.iframe) this.navigate(current);\n            this.loadUrl();\n        },\n        // Attempt to load the current URL fragment. If a route succeeds with a\n        // match, returns `true`. If no defined routes matches the fragment,\n        // returns `false`.\n        loadUrl: function(fragment) {\n            // If the root doesn't match, no routes can match either.\n            if (!this.matchRoot()) return false;\n            fragment = this.fragment = this.getFragment(fragment);\n            return _.some(this.handlers, function(handler) {\n                if (handler.route.test(fragment)) {\n                    handler.callback(fragment);\n                    return true;\n                }\n            });\n        },\n        // Save a fragment into the hash history, or replace the URL state if the\n        // 'replace' option is passed. You are responsible for properly URL-encoding\n        // the fragment in advance.\n        //\n        // The options object can contain `trigger: true` if you wish to have the\n        // route callback be fired (not usually desirable), or `replace: true`, if\n        // you wish to modify the current URL without adding an entry to the history.\n        navigate: function(fragment, options) {\n            if (!History.started) return false;\n            if (!options || options === true) options = {\n                trigger: !!options\n            };\n            // Normalize the fragment.\n            fragment = this.getFragment(fragment || \"\");\n            // Don't include a trailing slash on the root.\n            var rootPath = this.root;\n            if (fragment === \"\" || fragment.charAt(0) === \"?\") {\n                rootPath = rootPath.slice(0, -1) || \"/\";\n            }\n            var url = rootPath + fragment;\n            // Strip the fragment of the query and hash for matching.\n            fragment = fragment.replace(pathStripper, \"\");\n            // Decode for matching.\n            var decodedFragment = this.decodeFragment(fragment);\n            if (this.fragment === decodedFragment) return;\n            this.fragment = decodedFragment;\n            // If pushState is available, we use it to set the fragment as a real URL.\n            if (this._usePushState) {\n                this.history[options.replace ? \"replaceState\" : \"pushState\"]({}, document.title, url);\n            // If hash changes haven't been explicitly disabled, update the hash\n            // fragment to store history.\n            } else if (this._wantsHashChange) {\n                this._updateHash(this.location, fragment, options.replace);\n                if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n                    var iWindow = this.iframe.contentWindow;\n                    // Opening and closing the iframe tricks IE7 and earlier to push a\n                    // history entry on hash-tag change.  When replace is true, we don't\n                    // want this.\n                    if (!options.replace) {\n                        iWindow.document.open();\n                        iWindow.document.close();\n                    }\n                    this._updateHash(iWindow.location, fragment, options.replace);\n                }\n            // If you've told us that you explicitly don't want fallback hashchange-\n            // based history, then `navigate` becomes a page refresh.\n            } else {\n                return this.location.assign(url);\n            }\n            if (options.trigger) return this.loadUrl(fragment);\n        },\n        // Update the hash location, either replacing the current entry, or adding\n        // a new one to the browser history.\n        _updateHash: function(location, fragment, replace) {\n            if (replace) {\n                var href = location.href.replace(/(javascript:|#).*$/, \"\");\n                location.replace(href + \"#\" + fragment);\n            } else {\n                // Some browsers require that `hash` contains a leading #.\n                location.hash = \"#\" + fragment;\n            }\n        }\n    });\n    // Create the default Backbone.history.\n    Backbone.history = new History;\n    // Helpers\n    // -------\n    // Helper function to correctly set up the prototype chain for subclasses.\n    // Similar to `goog.inherits`, but uses a hash of prototype properties and\n    // class properties to be extended.\n    var extend = function(protoProps, staticProps) {\n        var parent = this;\n        var child;\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent constructor.\n        if (protoProps && _.has(protoProps, \"constructor\")) {\n            child = protoProps.constructor;\n        } else {\n            child = function() {\n                return parent.apply(this, arguments);\n            };\n        }\n        // Add static properties to the constructor function, if supplied.\n        _.extend(child, parent, staticProps);\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function and add the prototype properties.\n        child.prototype = _.create(parent.prototype, protoProps);\n        child.prototype.constructor = child;\n        // Set a convenience property in case the parent's prototype is needed\n        // later.\n        child.__super__ = parent.prototype;\n        return child;\n    };\n    // Set up inheritance for the model, collection, router, view and history.\n    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n    // Throw an error when a URL is needed, and none is supplied.\n    var urlError = function() {\n        throw new Error('A \"url\" property or function must be specified');\n    };\n    // Wrap an optional error callback with a fallback error event.\n    var wrapError = function(model, options) {\n        var error = options.error;\n        options.error = function(resp) {\n            if (error) error.call(options.context, model, resp, options);\n            model.trigger(\"error\", model, resp, options);\n        };\n    };\n    return Backbone;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/backbone/backbone.js\n");

/***/ })

};
;